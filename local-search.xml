<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Zookeeper 安装配置教程（Linux通用版）</title>
    <link href="/posts/116.html"/>
    <url>/posts/116.html</url>
    
    <content type="html"><![CDATA[<p>Zookeeper 是一个开源的分布式协调服务，相当于分布式系统的”管理员”。它主要用来解决分布式环境下各个节点之间的协同问题，比如统一配置管理、集群选举、分布式锁、服务注册与发现等。你可以把它想象成一个”共享记事本”——多个服务或服务器都能在上面读写信息，Zookeeper 会确保所有节点看到的数据一致，并且提供高可用性（即使部分节点挂了也能正常工作）。它常用于 Hadoop、Kafka、Dubbo 等大型分布式系统中，帮助它们保持有序协作。</p><p>以下是 Linux 环境下 Zookeeper 安装配置教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>1. 请确保 Linux 环境下安装了 JDK，需要安装的小伙伴，点击右侧链接查看安装教程：<a href="./55.html">点我查看</a></p><p>2. 在 Linux 命令行输入 <code>java -version</code>，如果可以查看 JDK 版本信息，说明 JDK 安装配置没有问题：</p><p><img src="https://source.icode504.com/images/0b7b046552d5987fd507418d2e5ff01e.png"></p><p>3. 本文使用 Electerm 作为远程登录工具，需要安装的小伙伴根据自己电脑操作系统查看对应的教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./47.html">点我查看</a></td><td align="center"><a href="./99.html">点我查看</a></td></tr></tbody></table><p>4. 推荐使用 NDM（Neat Download Manager）下载安装包，可以加快下载速度，需要安装的小伙伴可以点击右侧链接查看安装教程：<a href="./24.html">点我查看</a></p><h1 id="二、下载-Zookeeper-安装包"><a href="#二、下载-Zookeeper-安装包" class="headerlink" title="二、下载 Zookeeper 安装包"></a>二、下载 Zookeeper 安装包</h1><p>1. 点击右侧链接进入官网下载页面：<a href="https://archive.apache.org/dist/zookeeper/stable/">点我查看</a></p><p>2. 找到第一个以 <code>bin.tag.gz</code> 结尾的安装包，点击<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/125ff44441ff8dde03c3ea48b858f478.png"></p><p>4. 将下载好的安装包通过 Electerm 远程传送到 Linux 端：</p><p><img src="https://source.icode504.com/images/4a97142b2870e43645cb7aab5766a472.gif"></p><h1 id="三、配置-Zookeeeper"><a href="#三、配置-Zookeeeper" class="headerlink" title="三、配置 Zookeeeper"></a>三、配置 Zookeeeper</h1><p>1. 将下载好的安装包，解压到 <code>/usr/local</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf apache-zookeeper-3.8.4-bin.tar.gz -C /usr/local/<br></code></pre></td></tr></table></figure><p>2. 切换到 <code>/usr/local</code> 目录下，使用 <code>ls</code> 命令可以看到解压后的安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/3db3b31d08dd225a630a4eb2ade978b3.png"></p><p>3. 这里我将这个文件夹重新命名为 zookeeper-3.8.4，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> apache-zookeeper-3.8.4-bin zookeeper-3.8.4<br></code></pre></td></tr></table></figure><p>再次执行 <code>ls</code> 命令后，发现重命名后的文件夹：</p><p><img src="https://source.icode504.com/images/eadbd57a372824040eb805e66a24dfff.png"></p><p>4. 进入重命名后的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> zookeeper-3.8.4<br></code></pre></td></tr></table></figure><p>5. 这里我们需要修改 Zookeeper 配置文件，在修改之前，我们先给配置文件做一个备份，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> conf/zoo_sample.cfg conf/zoo.cfg<br></code></pre></td></tr></table></figure><p>6. 使用 vim 命令编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim conf/zoo.cfg<br></code></pre></td></tr></table></figure><p>7. 在左下角输入并执行 <code>:set nu</code> 命令，显示行号：</p><p><img src="https://source.icode504.com/images/1b6985ae986ad6fa117db95514a30db1.png"></p><p>8. 按 <kbd>I</kbd> 键进入编辑模式，将第 12 行 Zookeeper 数据存储路径存储到 <code>/usr/local/zookeeper-3.8.4/data</code> 目录下，修改后的效果图如下：</p><p><img src="https://source.icode504.com/images/0bae02c80d44ba0050b2d61d6b427426.png"></p><p>9. 按 <kbd>Esc</kdb> 键退出编辑模式，在左下角输入 <code>:wq</code> 保存并退出。</p><p>10. 新建一个 <code>data</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/zookeeper-3.8.4/data<br></code></pre></td></tr></table></figure><p>11. 执行如下命令启动 Zookeeper（当前所在位置：<code>/usr/local/zookeeper-3.8.4</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zkServer.sh start<br></code></pre></td></tr></table></figure><p>12. 查看 Zookeeper 启动状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zkServer.sh status<br></code></pre></td></tr></table></figure><p>可以看到，目前 Zookeeper 是以单机模式（Standalone）运行的：</p><p><img src="https://source.icode504.com/images/93585ba21a3e1f4ebd8001140bbbf0e2.png"></p><p>13. 接下来我们就可以使用 Zookeeper 客户端了，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zkCli.sh<br></code></pre></td></tr></table></figure><p>如果看到命令行输出信息中包含 "Welcome to zookeeper"，说明前面的配置和服务启动都没有问题：</p><p><img src="https://source.icode504.com/images/2acd395b11122a3545a379819b78b0bb.png"></p><p>14. 使用如下命令可以查看根节点下所有的子节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /<br></code></pre></td></tr></table></figure><p>目前只有一个名为 zookeeper 的节点：</p><p><img src="https://source.icode504.com/images/7b17095d746c53e11477f73eff7eaed8.png"></p><p>15. 使用 <code>quit</code> 命令可以退出 Zookeeper 客户端。</p><p>16. 执行如下命令，可以停止 Zookeeper 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/zkServer.sh stop<br></code></pre></td></tr></table></figure><p>至此，我们就正常使用 Zookeeper 了。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>中间件</category>
      
      <category>分布式协调服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 5.7安装教程（Linux通用版）</title>
    <link href="/posts/115.html"/>
    <url>/posts/115.html</url>
    
    <content type="html"><![CDATA[<p>MySQL 是一个广泛使用的开源关系型数据库管理系统，它使用结构化查询语言（SQL）进行数据管理，支持事务处理、多用户访问和外键约束等功能，适用于各种规模的应用程序。以其可靠性、性能和易用性著称，MySQL 提供了丰富的功能来确保数据的安全性和完整性，并支持多种存储引擎以适应不同的应用场景需求。无论是小型网站还是大型企业系统，MySQL 都能提供稳健的数据存储和检索解决方案，使其成为最流行的数据库管理系统之一。</p><p>MySQL数据库分为社区版和商业版，这里介绍的是Linux 环境下 MySQL 5.7 社区版的安装教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>1. 有需要在虚拟机安装Linux系统的小伙伴，请点击下方任意一个链接查看安装配置教程：</p><table><thead><tr><th align="center"></th><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center">安装教程</td><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><p>2. 本文使用 Electerm 远程连接 Linux，需要安装的小伙伴，根据自己所在的操作系统查看安装配置教程：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center">Electerm 安装教程</td><td align="center"><a href="./47.html">点我查看</a></td><td align="center"><a href="./99.html">点我查看</a></td></tr></tbody></table><p>3. 根据自己的操作系统，安装如下依赖：</p><ul><li>CentOS：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install vim cmake gcc gcc-c++ ncurses ncurses-devel bison perl perl-devel libtirpc rpcgen libaio openssl openssl-devel<br>yum --enablerepo=crb -y install libtirpc-devel<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y install vim cmake gcc g++ bison perl openssl libssl-dev libncurses5-dev pkg-config ufw<br></code></pre></td></tr></table></figure><p>4. 创建一个名为<code>mysql</code>用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">groupadd mysql<br></code></pre></td></tr></table></figure><p>5. 创建一个名为<code>mysql</code>的用户，所属用户组也是<code>mysql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -r -g mysql mysql<br></code></pre></td></tr></table></figure><p>6. 创建 <code>/usr/local/mysql</code> 和 <code>/usr/local/mysql/data</code> 两个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/mysql<br><span class="hljs-built_in">mkdir</span> /usr/local/mysql/data<br></code></pre></td></tr></table></figure><h1 id="二、下载-MySQL-安装包"><a href="#二、下载-MySQL-安装包" class="headerlink" title="二、下载 MySQL 安装包"></a>二、下载 MySQL 安装包</h1><p>1. 打开 MySQL 官方下载页：<a href="https://downloads.mysql.com/archives/community/">点我查看</a></p><p>2. 这里我选择 5.7.44 版本的 MySQL，操作系统类型选择 Source Code（源码）</p><p><img src="https://source.icode504.com/images/4fb5566e0c804e4a94fb0fd3e041b1d8.png"></p><p>3. 将下载好的安装包通过 Electerm 远程传送到 Linux 端：</p><p><img src="https://source.icode504.com/images/a62c7166cdef49601df5c311a35b684c.gif"></p><h1 id="三、编译安装-MySQL"><a href="#三、编译安装-MySQL" class="headerlink" title="三、编译安装 MySQL"></a>三、编译安装 MySQL</h1><p>1. 解压 MySQL 安装包，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf mysql-boost-5.7.44.tar.gz<br></code></pre></td></tr></table></figure><p>2. 切换到解压后的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mysql-5.7.44<br></code></pre></td></tr></table></figure><p>3. 执行如下命令，配置 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_BOOST=boost -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci<br></code></pre></td></tr></table></figure><p>4. 编译并安装 MySQL，安装预估需要0.5~2小时左右：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j$(<span class="hljs-built_in">nproc</span>) &amp;&amp; make install<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果安装过程中出现卡死或者系统强制终止，可以按<kbd>Ctrl</kbd><kbd>C</kbd>终止，然后重新执行上述命令，会接着之前的进度继续安装</p></blockquote><p>5. 给安装好的 MySQL 目录赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R root /usr/local/mysql<br><span class="hljs-built_in">chown</span> -R mysql:mysql /usr/local/mysql<br><span class="hljs-built_in">chown</span> -R mysql /usr/local/mysql/data<br></code></pre></td></tr></table></figure><h1 id="四、初始化并启动-MySQL"><a href="#四、初始化并启动-MySQL" class="headerlink" title="四、初始化并启动 MySQL"></a>四、初始化并启动 MySQL</h1><p>1. 在 <code>/etc</code> 目录下新增一个 <code>my.cnf</code> 的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/my.cnf<br></code></pre></td></tr></table></figure><p>2. 复制如下配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">socket</span>=/tmp/mysql.sock<br><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">user</span>=mysql<br><span class="hljs-attr">basedir</span>=/usr/local/mysql<br><span class="hljs-attr">datadir</span>=/usr/local/mysql/data<br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">socket</span> = /tmp/mysql.sock<br><span class="hljs-attr">pid-file</span>=/usr/local/mysql/data/mysqld.pid<br><span class="hljs-attr">log-error</span>=/usr/local/mysql/data/error.log<br><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-attr">collation-server</span>=utf8mb4_general_ci<br><br><span class="hljs-attr">wait_timeout</span>=<span class="hljs-number">28800</span><br><span class="hljs-attr">interactive_timeout</span>=<span class="hljs-number">28800</span><br><br><span class="hljs-attr">innodb_buffer_pool_size</span>=<span class="hljs-number">1</span>G <span class="hljs-comment"># 根据您的服务器内存大小调整此值</span><br><span class="hljs-attr">innodb_log_file_size</span>=<span class="hljs-number">256</span>M<br><span class="hljs-attr">innodb_flush_method</span>=O_DIRECT<br><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">log-bin</span>=/usr/local/mysql/data/mysql-bin.log<br><span class="hljs-attr">expire_logs_days</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">max_binlog_size</span>=<span class="hljs-number">100</span>M<br><br>skip-name-resolve<br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">200</span><br><span class="hljs-attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">slow_query_log_file</span>=/usr/local/mysql/data/slow-query.log<br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">2</span><br><br><span class="hljs-comment"># 默认存储引擎</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><br><span class="hljs-section">[mysqldump]</span><br>quick<br>quote-names<br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">16</span>M<br><br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br></code></pre></td></tr></table></figure><p>3. 按 <kbd>I</kbd> 键进入编辑模式，使用<kbd>Shift</kbd><kbd>Insert</kbd>粘贴上一步代码，效果图如下：</p><p><img src="https://source.icode504.com/images/c98c90831d7693fb99a2b3e911c131b1.png"></p><p>按 <kbd>Esc</kbd> 键退出编辑模式，在左下角输入 <code>:wq</code> 保存并退出。</p><p>4. 切换到 <code>/usr/local/mysql</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/mysql/bin<br></code></pre></td></tr></table></figure><p>5. 执行如下命令，初始化 MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/ --initialize<br></code></pre></td></tr></table></figure><p>6. 切换到 <code>/usr/local/mysql/data</code> 目录下，使用 <code>cat</code> 命令查看 error.log 文件，里面可以看到初始化的 MySQL root 用户初始化信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /usr/local/mysql/data/error.log<br></code></pre></td></tr></table></figure><p>记录一下这个密码，后续会用到：</p><p><img src="https://source.icode504.com/images/d2517e7877b997de86698c4527121ed9.png"></p><p>7. 将 MySQL 配置为系统服务。在 <code>/usr/lib/systemd</code> 目录下新建一个 <code>mysqld.service</code> 服务文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/systemd/system/mysqld.service<br></code></pre></td></tr></table></figure><p>8. 复制如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=MySQL Server<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/local/mysql/bin/mysqld_safe --defaults-file=/etc/my.cnf<br>ExecStop=/usr/local/mysql/bin/mysqladmin --defaults-file=/etc/my.cnf shutdown<br>Restart=on-failure<br>User=mysql<br>Group=mysql<br>Environment=&quot;LD_LIBRARY_PATH=/usr/local/mysql/lib&quot;<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>9. 按 <kbd>I</kbd> 键进入编辑模式，使用<kbd>Shift</kbd><kbd>Insert</kbd>粘贴上一步代码，效果图如下：</p><p><img src="https://source.icode504.com/images/653c90956227442e013642adca09e1a6.png"></p><p>按 <kbd>Esc</kbd> 键退出编辑模式，在左下角输入 <code>:wq</code> 保存并退出。</p><p>10. 重新加载 systemd 配置以识别新的服务单元文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>11. 启动 MySQL 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start mysqld<br></code></pre></td></tr></table></figure><p>12. 查看 MySQL 服务运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status mysqld<br></code></pre></td></tr></table></figure><p>MySQL 服务正常运行，按<kbd>Q</kbd>键退出：</p><p><img src="https://source.icode504.com/images/ace8905cecd701674841da2cf9638f79.png"></p><p>13. 切换到 <code>/usr/local/mysql/bin</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/mysql/bin<br></code></pre></td></tr></table></figure><p>14. 使用 root 用户登录 MySQL，密码用前面初始化生成的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysql -uroot -p密码<br></code></pre></td></tr></table></figure><p>效果图如下，root 用户登录成功：</p><p><img src="https://source.icode504.com/images/8d992cab56e09c1a89a62ef5c7337abe.png"></p><p>15. 此时我们还不能正常使用 MySQL ，因为我们需要将 root 用户重置一下密码，这里为了方便记忆，我将 root 密码设置为123456（出于安全考虑，实际生产环境中请将 root 用户密码设置越复杂越好）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/5cd923fdc01801013cf6ffa5fac9635a.png"></p><p>16. 刷新一下权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p>17. 执行如下命令，重新登录 root 用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysql -uroot -p<br></code></pre></td></tr></table></figure><p>此时输入前面设置过的新密码（密码不在命令行显示），如果登录成功，说明 root 用户密码已经成功修改：</p><p><img src="https://source.icode504.com/images/997be48abb2c0d37e42a77833a17eb59.png"></p><h1 id="五、配置-MySQL-环境变量（可选）"><a href="#五、配置-MySQL-环境变量（可选）" class="headerlink" title="五、配置 MySQL 环境变量（可选）"></a>五、配置 MySQL 环境变量（可选）</h1><p>将 MySQL 的可执行文件路径添加到 PATH 环境变量，可以直接运行如mysql、mysqldump等命令，无需输入完整路径，从而简化命令行操作和脚本编写。</p><p>1. 编辑 <code>/etc/profile</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></td></tr></table></figure><p>2. 复制如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/mysql/bin<br></code></pre></td></tr></table></figure><p>3. 按 <kbd>I</kbd> 键进入编辑模式，使用<kbd>Shift</kbd><kbd>Insert</kbd>在当前文件末尾粘贴上一步代码，效果图如下：</p><p><img src="https://source.icode504.com/images/cadf56a62618172f25b5ea27069dc41a.png"></p><p>按 <kbd>Esc</kbd> 键退出编辑模式，在左下角输入 <code>:wq</code> 保存并退出。</p><p>4. 让上述环境变量生效，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>5. 后续我们就可以在任意目录下使用 <code>mysql -uroot -p</code> 命令登录到 <code>root</code> 用户了。</p><h1 id="六、远程访问-MySQL"><a href="#六、远程访问-MySQL" class="headerlink" title="六、远程访问 MySQL"></a>六、远程访问 MySQL</h1><p>远程登录 MySQL 允许你通过网络从任何地方访问和管理数据库，这不仅提升了工作的灵活性，比如随时随地进行数据操作和管理，对于学习和实际开发而言，这是非常实用的功能。默认情况下，MySQL 的 root 用户只能在本地访问，接下来我们将 root 设置成可以远程登录。</p><p>1. Linux 开放3306端口：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=3306/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw <span class="hljs-built_in">enable</span><br>ufw allow 3306/tcp<br></code></pre></td></tr></table></figure><p>2. 在命令行登录 root 用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -p<br></code></pre></td></tr></table></figure><p>3. 执行如下 SQL 语句，发现 root 默认情况下只能在本地访问：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE mysql;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">User</span>, Host <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/5d3af6734c668b66c8a7b5c14c92f4b7.png"></p><p>4. 这里我们只需要将 host 改为 <code>%</code> 即可实现远程访问（仅供学习阶段使用）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;root&#x27;</span>;<br></code></pre></td></tr></table></figure><p>5. 刷新一下权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p>6. 使用外部工具远程连接 MySQL，这里我使用的是 DBeaver，需要安装的小伙伴，根据自己的操作系统查看安装教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./77.html">点我查看</a></td><td align="center"><a href="./81.html">点我查看</a></td></tr></tbody></table><p>7. 进入连接页面，按照下图所示操作：</p><p><img src="https://source.icode504.com/images/bcd37d35c008e1d6d529b6688f394414.png"></p><p>8. 如果出现如下提示弹窗，就说明成功通过 root 用户远程登录到 MySQL 数据库，点击确定：</p><p><img src="https://source.icode504.com/images/f3e144d4dfc9afdd8ce62c22da8c8384.png"></p><p>9. 点击完成，保存数据库链接：</p><p><img src="https://source.icode504.com/images/e55875f2d3812437baad33beea3230d5.png"></p><p>10. 接下来就可以在 DBeaver 中操作数据库了：</p><p><img src="https://source.icode504.com/images/0b25e1e572449cce02ccb0e0ad743e94.png"></p><h1 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h1><ol><li><a href="https://dev.mysql.com/doc/refman/5.7/en/source-installation.html">MySQL 官网说明</a></li><li><a href="https://www.cnblogs.com/louis-liu-oneself/p/13504270.html">CentOS7（Linux）源码安装MySQL5.7.30</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>数据库</category>
      
      <category>关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 安装配置教程（Linux通用版）</title>
    <link href="/posts/114.html"/>
    <url>/posts/114.html</url>
    
    <content type="html"><![CDATA[<p>Nginx 是一个高性能的 <strong>开源 Web 服务器</strong> 和 <strong>反向代理服务器</strong>，采用 <strong>事件驱动、异步非阻塞架构</strong>，擅长处理高并发请求。它不仅可以托管静态网站，还能作为 <strong>负载均衡器</strong> 分发流量到多个后端服务，并通过 <strong>HTTP 缓存</strong> 和 <strong>SSL&#x2F;TLS 终止</strong> 提升性能与安全性。Nginx 以 <strong>低内存占用、高稳定性</strong> 著称，广泛应用于现代 Web 架构，如微服务网关、API 代理和 CDN 加速等。</p><p>以下是 Linux 环境下 Nginx 安装配置教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>1. <strong>安装Linux虚拟机</strong>：如需在虚拟机安装Linux系统，请参考以下教程：</p><table><thead><tr><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><p>2. 这里我使用的是 Electerm 远程连接 Linux 服务器，有需要安装的小伙伴根据自己电脑的操作系统查看安装教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./47.html">点我查看</a></td><td align="center"><a href="./99.html">点我查看</a></td></tr></tbody></table><p>3. 鉴于访问Github时国内网络速度可能较慢，建议安装Watt Tookit来加速下载。请根据您的操作系统查看安装配置教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./25.html">点我查看</a></td><td align="center"><a href="./80.html">点我查看</a></td></tr></tbody></table><p>4. 根据自己的 Linux 操作系统，安装如下工具：</p><ul><li>CentOS：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc make wget vim perl<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y install gcc g++ make wget vim perl ufw<br></code></pre></td></tr></table></figure><p>5. 根据自己的 Linux 操作系统，开放80端口</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=80/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw allow 80/tcp<br></code></pre></td></tr></table></figure><h2 id="1-1-下载并安装-Pcre"><a href="#1-1-下载并安装-Pcre" class="headerlink" title="1.1 下载并安装 Pcre"></a>1.1 下载并安装 Pcre</h2><p>1. 点击右侧链接进入 Pcre 官网下载页面：<a href="https://sourceforge.net/projects/pcre/files/pcre/8.45/">点我查看</a></p><p>2. 下载<code>pcre-8.45.tar.gz</code>安装包：</p><p><img src="https://source.icode504.com/images/255731b6d9ac3c659851131e4b95e820.png"></p><p>3. 使用 Electerm 远程连接 Linux 服务器，连接成功后，点击左上角 SFTP 将安装包远程传输到 Linux 服务器上：</p><p><img src="https://source.icode504.com/images/e8e45ba8feb8a5cb4b9d81e4a4c9b02d.gif"></p><p>4. 将 Pcre 安装包解压到<code>/usr/local</code>目录下。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf pcre-8.45.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>5. 切换到解压后的目录。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/pcre-8.45<br></code></pre></td></tr></table></figure><p>6. 将 Pcre 安装在<code>/usr/local/pcre</code>，执行如下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/usr/local/pcre<br></code></pre></td></tr></table></figure><p>7. 配置完成后，执行如下命令编译安装 Pcre：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>8. 等待一段时间后，Pcre 安装完成，切换到<code>/usr/local/pcre</code>目录下，可以看到编译后的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/pcre<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/5bf3dedcd4d3b53125226606432620b6.png"></p><p>9. 切换到家目录，接下来我们安装 Zlib：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><h2 id="1-2-下载并安装-Zlib"><a href="#1-2-下载并安装-Zlib" class="headerlink" title="1.2 下载并安装 Zlib"></a>1.2 下载并安装 Zlib</h2><p>1. 点击右侧连接进入 Zlib 官网下载地址：<a href="https://www.zlib.net/">点我查看</a></p><p>2. 向下找到 Zlib 下载链接，这里我们下载<code>.tar.gz</code>格式的安装包，按照下图所示操作：</p><p><img src="https://source.icode504.com/images/d6cd636a356654f849196d56017f77d4.png"></p><p>3. 使用 Electerm 远程连接 Linux 服务器，连接成功后，点击左上角 SFTP 将安装包远程传输到 Linux 服务器上：</p><p><img src="https://source.icode504.com/images/5f981f1d84c32de6bcaeb8458ef124af.gif"></p><p>4. 将 Zlib 安装包解压到<code>/usr/local</code>目录下。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf zlib-1.3.1.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>5. 切换到解压后的目录。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/zlib-1.3.1<br></code></pre></td></tr></table></figure><p>6. 将 Zlib 安装在<code>/usr/local/zlib</code>目录下，执行如下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/usr/local/zlib<br></code></pre></td></tr></table></figure><p>7. 编译安装 Zlib，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>8. 等待约1分钟以后，Zlib 编译安装完成，切换到<code>/usr/local/zlib</code>目录下，可以看到编译后的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/zlib<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/98f0c693d28866879a16a728d86855d6.png"></p><p>9. 切换到家目录，接下来我们安装 OpenSSL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><h2 id="1-3-下载并安装-OpenSSL"><a href="#1-3-下载并安装-OpenSSL" class="headerlink" title="1.3 下载并安装 OpenSSL"></a>1.3 下载并安装 OpenSSL</h2><p>1. 点击右侧链接进入 OpenSSL 官网下载页面：<a href="https://openssl-library.org/source/">点我查看</a></p><p>2. 这里我下载的是3.5版本的 OpenSSL，点击下载：</p><p><img src="https://source.icode504.com/images/b5af8e45c667bc5aab17d7aff2c7eac0.png"></p><p>3. 使用 Electerm 远程连接 Linux 服务器，连接成功后，点击左上角 SFTP 将安装包远程传输到 Linux 服务器上：</p><p><img src="https://source.icode504.com/images/9d793a17bdae806a44e57aff61c4c471.gif"></p><p>4. 将 OpenSSL 安装包解压到<code>/usr/local</code>目录下。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf openssl-3.5.0.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>5. 切换到解压后的目录。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/openssl-3.5.0/<br></code></pre></td></tr></table></figure><p>6. 将 OpenSSL 安装在<code>/usr/local/openssl</code>目录下，执行如下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./Configure --prefix=/usr/local/openssl<br></code></pre></td></tr></table></figure><p>7. 编译安装 OpenSSL，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>8. 等待一段时间以后，OpenSSL 编译安装完成，切换到<code>/usr/local/openssl</code>目录下，可以看到编译后的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/openssl<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/176a009a7aeba5643d36059e56bdb729.png"></p><p>9. 切换到家目录，接下来我们安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><h1 id="二、下载-Nginx-安装包"><a href="#二、下载-Nginx-安装包" class="headerlink" title="二、下载 Nginx 安装包"></a>二、下载 Nginx 安装包</h1><p>1. 打开 Nginx 官方网址：<a href="https://nginx.org/en/download.html">点我查看</a></p><p>2. 这里我要下载的是 1.20.2 版本的 Nginx。按照下图操作，复制下载链接：</p><p><img src="https://source.icode504.com/images/5d50eff0c2e6dc4bf0ab52c9d3996ac0.png"></p><p>3. 使用<code>wget</code>命令，将下载链接粘贴到命令行，下载 Nginx 安装包，效果图如下：</p><p><img src="https://source.icode504.com/images/0ae136bca1c4ac7434ed39ac8a403277.png"></p><p>等待一段时间后，Nginx 安装包下载完成。接下来我们就可以安装 Nginx 了。</p><h1 id="三、安装并启动-Nginx"><a href="#三、安装并启动-Nginx" class="headerlink" title="三、安装并启动 Nginx"></a>三、安装并启动 Nginx</h1><p>1. 将下载好的 Nginx 解压到<code>/usr/local</code>目录下。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf nginx-1.20.2.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>2. 切换到<code>/usr/local/nginx-1.20.2</code>目录。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nginx-1.20.2<br></code></pre></td></tr></table></figure><p>3. 将 OpenSSL 安装在<code>/usr/local/nginx</code>目录下，并添加 Pcre、Zlib 和 OpenSSL 库配置，执行如下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/usr/local/nginx --with-pcre=/usr/local/pcre-8.45/ --with-zlib=/usr/local/zlib-1.3.1/ --with-openssl=/usr/local/openssl-3.5.0/<br></code></pre></td></tr></table></figure><p>出现下图所示情况就说明 Nginx 配置成功：</p><p><img src="https://source.icode504.com/images/77826c79a71c1c19f83fdc0a14c0fd7c.png"></p><p>4. 使用如下命令编译安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>安装过程较慢，请耐心等待。</p><p>5. 切换到<code>/usr/local/nginx</code>目录，执行<code>ls</code>命令，如果出现下图文件及其目录，就说明 Nginx 安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nginx<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/ba2737cd46c31613a3ce64a858828e28.png"></p><p>6. 在此目录下，执行如下命令可以查看 Nginx 安装版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sbin/nginx -V<br></code></pre></td></tr></table></figure><p>这里可以看到，我安装的是1.20.2版本的 Nginx：</p><p><img src="https://source.icode504.com/images/f9c7c7701fce69e82df7263ad4225ce2.png"></p><p>7. 切换到<code>/usr/local/nginx/sbin</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br></code></pre></td></tr></table></figure><p>8. 以下是 Nginx 常用命令：</p><ul><li>启动 Nginx：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nginx<br></code></pre></td></tr></table></figure><p>打开本地电脑浏览器，在上方搜索框中输入当前虚拟机的IP地址（这里我的IP地址是192.168.40.100，查询IP地址可以使用<code>ip addr</code>命令），如果可以看到下面的 Nginx 欢迎界面，就说明 Nginx 成功启动：</p><p><img src="https://source.icode504.com/images/12dfa0001a5b855d9d71000909c14cef.png"></p><p>9. 以下是 Nginx 其他常用命令：</p><ul><li>快速停止 Nginx：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nginx -s stop<br></code></pre></td></tr></table></figure><ul><li>优雅关闭 Nginx（在退出前完成已经接受的连接请求）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nginx -s quit<br></code></pre></td></tr></table></figure><ul><li>重新加载配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nginx -s reload<br></code></pre></td></tr></table></figure><h1 id="四、配置Nginx为系统服务"><a href="#四、配置Nginx为系统服务" class="headerlink" title="四、配置Nginx为系统服务"></a>四、配置Nginx为系统服务</h1><p>将Nginx设置为系统服务，可以方便地使用系统工具（如<code>systemctl</code>命令）来管理Nginx的启动、停止和重启等操作，而无需手动执行命令。此外，这种方式还支持服务的状态查询及日志管理，有助于监控服务运行状态和快速响应可能出现的问题。</p><p>1. 创建服务脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/lib/systemd/system/nginx.service<br></code></pre></td></tr></table></figure><p>2. 复制如下脚本内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=nginx - web server<br>After=network.target remote-fs.target nss-lookup.target<br>[Service]<br>Type=forking<br>PIDFile=/usr/local/nginx/logs/nginx.pid<br>ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf<br>ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>ExecReload=/usr/local/nginx/sbin/nginx -s reload<br>ExecStop=/usr/local/nginx/sbin/nginx -s stop<br>ExecQuit=/usr/local/nginx/sbin/nginx -s quit<br>PrivateTmp=<span class="hljs-literal">true</span><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>3. 按<kbd>I</kbd>键进入编辑模式，按<kbd>Shift</kbd><kbd>Insert</kbd>键将上一步复制的代码，粘贴到此处，效果图如下：</p><p><img src="https://source.icode504.com/images/72bf1701288fff965d1288cee07ed151.png"></p><p>4. 按<kbd>Esc</kbd>键退出编辑模式，在左下角输入<code>:wq</code>保存并退出。</p><p>5. 重新加载系统服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>6. 启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nginx.service<br></code></pre></td></tr></table></figure><p>7. 打开本地电脑浏览器，在上方搜索框中输入当前虚拟机的IP地址（这里我的IP地址是192.168.40.100，查询IP地址可以使用<code>ip addr</code>命令），如果可以看到下面的 Nginx 欢迎界面，就说明 Nginx 成功启动：</p><p><img src="https://source.icode504.com/images/12dfa0001a5b855d9d71000909c14cef.png"></p><p>8. 以下是 Nginx 服务相关命令：</p><ul><li>查看 Nginx 服务状态：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status nginx<br></code></pre></td></tr></table></figure><ul><li>停止 Nginx 服务：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop nginx<br></code></pre></td></tr></table></figure><ul><li>重启 Nginx 服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart nginx<br></code></pre></td></tr></table></figure><ul><li>Nginx 开机自启动：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> nginx<br></code></pre></td></tr></table></figure><ul><li>禁用 Nginx 开机自启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>服务器软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS Stream 9修改静态IP</title>
    <link href="/posts/113.html"/>
    <url>/posts/113.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>需要在VMware安装CentOS Stream 9虚拟机的小伙伴，点击右侧链接查看安装教程：<a href="./94.html">点我查看</a></p><p>使用云服务器的小伙伴不需要看下面的配置哦(ᕑᗢᓫ∗)˒</p><h1 id="二、VMware相关操作"><a href="#二、VMware相关操作" class="headerlink" title="二、VMware相关操作"></a>二、VMware相关操作</h1><p>1. （虚拟机处于关机状态）在未开启CentOS虚拟机之前，按照下图所示打开虚拟机的网络设置：</p><p><img src="https://source.icode504.com/images/30f37dbd371b7ac93ce756d1b7424f60.png"></p><p>2. 点击右下角的<strong>更改设置</strong>：</p><p><img src="https://source.icode504.com/images/a7cb64c3b9c6396a8370e31f03a45e51.png"></p><p>3. 进入编辑模式后，上方的虚拟网络选中<strong>VMnet8（NAT模式）</strong>：</p><p><img src="https://source.icode504.com/images/020ceab236d61c0341c80ade96ebdf49.png"></p><p>4. 按照下图所示修改子网IP，修改的数值范围在<strong>0~255</strong>之间，我修改后的子网IP为192.168.40.0：</p><p><img src="https://source.icode504.com/images/5fe139fec7dde3d798a240acbb2ff10a.png"></p><p>5. 点击<strong>NAT设置</strong>：</p><p><img src="https://source.icode504.com/images/01108b958817a5c7c1572249700c86f1.png"></p><p>6. 这里我将网关的IP地址设置为192.168.40.1，然后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/d5bc2f407381cafbed413c95f242a4eb.png"></p><p>5. 点击右下角的<strong>DHCP设置</strong>：</p><p><img src="https://source.icode504.com/images/b28c1b878fca3e76e9038f66cc3d28be.png"></p><p>6. 按照下图操作修改网段，起始IP地址我设置为192.168.40.1，结束IP地址为192.168.40.255。完成后一路点击确定，虚拟网络配置完成：</p><p><img src="https://source.icode504.com/images/b9764bdede8b3b2b0853b705df411900.png"></p><h1 id="三、CentOS修改静态IP"><a href="#三、CentOS修改静态IP" class="headerlink" title="三、CentOS修改静态IP"></a>三、CentOS修改静态IP</h1><p>1. 开启CentOS虚拟机，执行如下命令查看当前虚拟机的IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>这里我的虚拟机IP地址是<code>192.168.40.131</code>，接下来我将这个IP修改为静态IP为<code>192.168.40.100</code>：</p><p><img src="https://source.icode504.com/images/3a1b93a0386c7c1d239d5e66ab9e7e69.png"></p><p>2. 列出所有的链接，这里我们要修改的是ens160：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection show<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/dd46ca06ffbcbad8abd8e2714b409bc7.png"></p><p>3. 在CentOS Stream 9中，关于网络的配置在<code>/etc/NetworkManager/system-connections</code>目录下。切换到该目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/NetworkManager/system-connections<br></code></pre></td></tr></table></figure><p>4. 网络的配置在<code>ens160.nmconnection</code>文件中，在修改之前，我们复制一份文件留作备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ens160.nmconnection ens160.nmconnection.default<br></code></pre></td></tr></table></figure><p>5. 试用vim命令编辑上述文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ens160.nmconnection<br></code></pre></td></tr></table></figure><p>6. 输入<code>:set nu</code>可以查看行号，下图就是未修改前的网络配置</p><p><img src="https://source.icode504.com/images/70fbd77385efea4a189c7df66f7c275f.png"></p><p>7. 复制如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ipv4 网络配置</span><br>[ipv4]<br><span class="hljs-comment"># 手动进行 IP 的分配</span><br>method=manual<br><span class="hljs-comment"># 第一个IP是自定义的静态IP，第二个是网关</span><br>address1=192.168.40.100/24,192.168.40.1<br><span class="hljs-comment"># 指定 DNS 域名解析服务器，多个 dns 之间使用 , 分隔</span><br><span class="hljs-comment"># 这里试用的国内DNS和谷歌的DNS</span><br>dns=114.114.114.114,8.8.8.8<br></code></pre></td></tr></table></figure><p>8. 按<kbd>I</kbd>键进入编辑模式，将原有的ipv4相关代码删掉，将上一步复制的代码粘贴到其后面，效果图如下：</p><p><img src="https://source.icode504.com/images/0656e4fb3b62fee9509b21536b7d845b.png"></p><p>9. 按<kbd>Esc</kbd>键退出编辑模式，输入<code>:wq</code>保存并退出。</p><p>10. 重启网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart NetworkManager<br></code></pre></td></tr></table></figure><p>11. 再次执行<code>ip addr</code>命令，发现IP已经变为192.168.40.100：</p><p><img src="https://source.icode504.com/images/0bafaf88ea730d09931f60c7fd67b080.png"></p><p>12. 此时我们ping一下百度也有响应，至此，Debian成功修改为静态IP并且可以访问外网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/dc1fead36b500490bd96dd65104a6b65.png"></p>]]></content>
    
    
    <categories>
      
      <category>常用操作</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 5.7安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/112.html"/>
    <url>/posts/112.html</url>
    
    <content type="html"><![CDATA[<p>MySQL是一个关系型数据库管理系统，目前为Oracle旗下产品，它具有开源、体积小、速度快的优点，许多网站使用的都是MySQL数据库。</p><p>简单而言，MySQL数据库核心功能就是用来存储数据的。</p><p>MySQL数据库分为社区版和商业版，这里介绍的是社区版的安装教程：</p><h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>1. 打开MySQL官网下载链接：<a href="https://downloads.mysql.com/archives/installer/">点我查看</a></p><p>2. 按照下图所示操作选择相应的MySQL版本下载，这里我选择的Windows MySQL 5.7.43版本。</p><p><img src="https://source.icode504.com/images/f87a608c553b65e905edd9499e4bb9d5.png"></p><p>3. 下载中，请耐心等待。</p><h1 id="二、安装并配置MySQL"><a href="#二、安装并配置MySQL" class="headerlink" title="二、安装并配置MySQL"></a>二、安装并配置MySQL</h1><p>安装MySQL过程中，<strong>请保持网络畅通</strong>！！！</p><p>1. 双击打开下载好的安装器，启动需要一些时间，请耐心等待：</p><p><img src="https://source.icode504.com/images/ea36438253e80bc563e8594f74521445.png"></p><p>2. 如果有如下提示更新窗口，选择No不更新：</p><p><img src="https://source.icode504.com/images/9bd090875adb9482462c514b23530757.png"></p><p>3. 安装类型选择<strong>Custom</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220111156356.png"></p><p>4. 按照下图所示操作，选择安装<code>MySQL Server 5.7.43 - X64</code>，完成后直接点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/a6190afba6d6e8ad9f971d1f96cad7b8.gif"></p><blockquote><p>说明：如何修改路径（小白可以忽略下列内容，直接跳到第5步）</p><p>如果您想修改MySQL的安装路径，如下图，可以点击下方<strong>Advanced Options</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220111320444.png"></p><p>按照下图所示，选择安装路径，为避免后续过程中出现问题，<strong>安装路径建议只包含英文字符</strong>；下面的是MySQL数据存储路径，如果不懂这方面的内容，建议不要修改这个路径。配置完成后后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220111711714.png"></p><p>安装路径和存储路径配置完成后，会弹出一个弹窗，点击<strong>OK</strong>即可：</p><p><img src="https://source.icode504.com/images/26872ea77b79c17ba9720d218b7246d9.png"></p><p>此时点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/92bcec1f0b0d294af0fd22ef3a524910.png"></p><p>选择<strong>Yes</strong>继续安装：</p><p><img src="https://source.icode504.com/images/752b4f28f4034415a7b637d879a05598.png"></p></blockquote><p>5. 点击<strong>Execute</strong>：</p><p><img src="https://source.icode504.com/images/396a7c1c327b276a10d3e97e65392bac.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/7c02e7df4977727df874aa8bba76deda.png"></p><p>7. 出现下图提示<strong>Complete</strong>以后，MySQL安装完成。直接点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/4115e922b7dfe0869df389e5ed9ebf6e.png"></p><p>8. 接下来开始配置MySQL，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/0928d235c34af697576778f8d27ba4db.png"></p><p>9. 初次安装MySQL的小白请注意，下图的<strong>Port请务必配置成3306</strong>，完成后点击<strong>Next</strong>：</p><blockquote><p>注意：如果您的电脑上已经安装了其他版本的MySQL，并且已经占用了3306端口，您需要将端口号修改为其他值。</p></blockquote><p><img src="https://source.icode504.com/images/175539c8d47f5a74f88d39c26dd44731.png"></p><p>10. 设置root账户密码，这里强烈建议<strong>将密码设置成你最熟悉的密码</strong>，否则后续恢复密码比较麻烦。这里我设置成了<code>123456</code>。设置完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/fa7a1ad26250ddd0612602925ac36ff1.png"></p><p>11. 在Windows中开启服务，直接点击<strong>Next</strong>即可：</p><p><img src="https://source.icode504.com/images/948e88c0fcf258d870c1fbfaeecc3026.png"></p><p>12. 服务器文件权限按照默认配置<strong>选择第一个</strong>即可，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/fa7fd399d00606ce36f3ebb4e9cf3fa0.png"></p><p>13. 点击<strong>Execute</strong>，MySQL安装器就会为我们配置上述内容。配置过程中，请耐心等待：</p><p><img src="https://source.icode504.com/images/c77227fad2d1b7a6bb43b40f67016294.png"></p><p>14. 出现下图信息，说明MySQL配置成功，点击<strong>Finish</strong>完成配置：</p><p><img src="https://source.icode504.com/images/e0f7643d31dd59ebe6752b51a8484229.png"></p><p>15. 点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/cb9301f85542d4fb7bf6b4a31e7d7917.png"></p><p>16. 点击<strong>Finish</strong>，MySQL配置完成。</p><p><img src="https://source.icode504.com/images/59868e65757851c80d0a79a96fa471e0.png"></p><h1 id="三、配置MySQL环境变量"><a href="#三、配置MySQL环境变量" class="headerlink" title="三、配置MySQL环境变量"></a>三、配置MySQL环境变量</h1><p>1. 初次安装MySQL的小白，找到前面安装的MySQL路径的bin目录，按照下图操作复制路径：</p><blockquote><p>（此条内容小白请忽略）安装在其他位置的小伙伴找到MySQL的安装路径，进入bin文件夹后复制文件路径。</p></blockquote><p><img src="https://source.icode504.com/images/00005.gif"></p><p>2. 在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/9b32c83db0d6df2c2f698e9d67d0edfd.png"></p><p>5. 在下方系统变量找到Path，双击进入：</p><p><img src="https://source.icode504.com/images/image-20230512223639743.png"></p><p>6. 按照下图所示操作，粘贴前面复制的MySQL安装路径，然后一路点击确定即可。</p><p><img src="https://source.icode504.com/images/3e7273345232c91e2f87e0f4c9b3dd53.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击进入，在命令提示行中输入<code>mysql -u root -p</code>，按回车后会提示让你输入密码。这个密码是前面我们安装MySQL的时候设置的密码，输入完成后按回车即可。完成后出现下图界面表示MySQL安装成功！</p><blockquote><p>说明：由于我的电脑上安装了两个MySQL，其中MySQL 5.7使用的端口号是13306，因此在执行命令时需要添加<code>-P 13306</code>选项。如果您的电脑中只安装了一个MySQL，并且使用MySQL默认端口号3306，默认不需要写上述端口号配置项，继续执行<code>mysql -u root -p</code>即可</p></blockquote><p><img src="https://source.icode504.com/images/f641b8555a3a1ca9fc349546467cab9c.png"></p><h1 id="四、卸载MySQL（可选）"><a href="#四、卸载MySQL（可选）" class="headerlink" title="四、卸载MySQL（可选）"></a>四、卸载MySQL（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p><p>以下两种卸载方式任选其一即可。</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="./31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. <strong>鼠标右键</strong>点击下方任务栏的Windows图标，选择<strong>计算机管理</strong>：</p><p><img src="https://source.icode504.com/images/1d6f0f58a6eb948f5c653f82820886de.png"></p><p>2. 按照下图所示操作，停止MySQL57对应的服务：</p><p><img src="https://source.icode504.com/images/403f6ef2d08d66a4628f7ac32ccddb1e.png"></p><p>3. 打开Geek Installer，在程序列表中找到MySQL相关的内容，鼠标右键，依次点击卸载：</p><p><img src="https://source.icode504.com/images/abd574849eaf97f643736d832b92597a.png"></p><p>4. 卸载完成后，Geek Installer会检测卸载残留，如果数据不重要的话，直接清理即可。</p><p><img src="https://source.icode504.com/images/f25121cc3e8eac7f1b6ce87219f4d668.png"></p><p>6. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>regedit</code>，进入注册表编辑器：</p><p><img src="https://source.icode504.com/images/fb1ab9987de7fc28173ed4072df2364c.png"></p><p>7. 依次删除下面和MySQL 5.7有关注册表：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL57服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务 目录删除<br></code></pre></td></tr></table></figure><p>8. 完成后重启电脑，MySQL 5.7卸载完成！</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过Github拉取Docker hub中的镜像</title>
    <link href="/posts/111.html"/>
    <url>/posts/111.html</url>
    
    <content type="html"><![CDATA[<p>本文参考自技术爬爬虾关于Dockerhub镜像拉取的解决方案，以下是原作者的B站视频页和Github仓库，喜欢的话请支持一下原作者！</p><table><thead><tr><th align="center">Bilibili原视频</th><th>Bilibili账号</th><th align="center">Github</th></tr></thead><tbody><tr><td align="center"><a href="https://www.bilibili.com/video/BV1Zn4y19743">点我查看</a></td><td><a href="https://space.bilibili.com/316183842">点我查看</a></td><td align="center"><a href="https://github.com/tech-shrimp/docker_image_pusher">点我查看</a></td></tr></tbody></table><p>我们在使用<code>docker pull</code>命令时，即使配置了registry-mirrors，也经常出现无法连接或者链接超时的问题：</p><p><img src="https://source.icode504.com/images/f7b30615d6fce620f3aba7a04b004bce.png"></p><p>要想解决这一问题，我们需要通过Github从Dockerhub拉取镜像，然后再将镜像数据推送到阿里云镜像仓库，由于阿里云镜像仓库位于国内，从阿里云镜像仓库拉取个人镜像速度非常快，以下是相关教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>在正式开始之前，我们需要执行如下操作：</p><p>1. 开启对Github和Dockerhub的访问。请根据自己电脑操作系统查看对应教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./25.html">点我查看</a></td><td align="center"><a href="./80.html">点我查看</a></td></tr></tbody></table><p>开启加速后，可以点击下面两个网站：</p><table><thead><tr><th align="center">Github</th><th align="center">Dockerhub</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/">点我查看</a></td><td align="center"><a href="https://hub.docker.com/">点我查看</a></td></tr></tbody></table><p>2. 登录并注册阿里云、Github，以下是这两个网站的入口和相关说明：</p><table><thead><tr><th align="center"></th><th align="center">网站入口</th><th align="left">说明</th><th align="center">参考图片</th></tr></thead><tbody><tr><td align="center">阿里云</td><td align="center"><a href="https://account.aliyun.com/login/login.htm">点我查看</a></td><td align="left">可以使用支付宝、淘宝等阿里系软件注册&#x2F;扫码登录。为了更好使用阿里云，推荐小伙伴进行实名认证。</td><td align="center"><img src="https://source.icode504.com/images/6ce5025fbd4650632288964f36b12b73.png"></td></tr><tr><td align="center">Github</td><td align="center"><a href="https://github.com/login">点我查看</a></td><td align="left">可以使用QQ邮箱、网易邮箱、谷歌邮箱等注册</td><td align="center"><img src="https://source.icode504.com/images/82227d6e957764e2348dd302aa1e26ce.png"></td></tr></tbody></table><p>3. 这里我使用Electerm连接到服务器，需要安装的小伙伴，请根据自己电脑操作系统查看对应教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./47.html">点我查看</a></td><td align="center"><a href="./99.html">点我查看</a></td></tr></tbody></table><h1 id="二、阿里云相关操作"><a href="#二、阿里云相关操作" class="headerlink" title="二、阿里云相关操作"></a>二、阿里云相关操作</h1><p>1. 点击右侧链接进入容器镜像服务（个人版）控制台界面：<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard">点我查看</a></p><p>2. 按照下面的步骤创建命名空间：</p><p><img src="https://source.icode504.com/images/d7ac782770a2ce84ee920bcdafcb6965.png"></p><p><img src="https://source.icode504.com/images/3c7b51dbf6ce0bf9ceef4a35c7d2e930.png"></p><p>3. 按照下图所示操作，绑定Github账号：</p><p><img src="https://source.icode504.com/images/d35c5341ed2de9ca8f88161c6b785202.png"></p><p><img src="https://source.icode504.com/images/add540bd6debced1033fd773fc9c33b6.png"></p><p><img src="https://source.icode504.com/images/a1484225053e42bfa518416b0b1f04b4.png"></p><p>4. 设置访问阿里云镜像仓库密码，请按照下图所示操作：</p><p><img src="https://source.icode504.com/images/399182feeb418a2e3a938b7a8fd2990d.png"></p><p><img src="https://source.icode504.com/images/993166426d5e117ae7e33338b3f56700.png"></p><h1 id="三、Github相关操作"><a href="#三、Github相关操作" class="headerlink" title="三、Github相关操作"></a>三、Github相关操作</h1><p>1. 点击进入Docker镜像推送仓库：<a href="https://github.com/tech-shrimp/docker_image_pusher">点我查看</a></p><p>2. 按照下图所示操作将项目Fork到自己的仓库：</p><p><img src="https://source.icode504.com/images/9450729456cb2bfbe1a0112953fc132f.png"></p><p><img src="https://source.icode504.com/images/10df083aad94b630d2673a9bbce8b3c7.png"></p><p>3. 此时项目成功Fork到我们自己的仓库中，点击<strong>Settings</strong>：</p><p><img src="https://source.icode504.com/images/6d8847e3586ed13c0c62248995f62a75.png"></p><p>4. 配置环境变量。按照下图所示操作，进入配置环境变量界面：</p><p><img src="https://source.icode504.com/images/be83a9ba3bea2ce3ba505c01bcac4fdc.png"></p><p>5. 请按照下图所示操作将4个Name-Secret对存储到Github：</p><table><thead><tr><th align="center">Name</th><th align="center">在阿里云如何找到Secret</th><th align="center">Github效果图</th></tr></thead><tbody><tr><td align="center">ALIYUN_NAME_SPACE</td><td align="center"><img src="https://source.icode504.com/images/ec23060555f9d896f0dc2a6e90964d5f.png"></td><td align="center"><img src="https://source.icode504.com/images/2c20eb57f3c8ebd22526367885caa542.png"></td></tr><tr><td align="center">ALIYUN_REGISTRY_USER</td><td align="center"><img src="https://source.icode504.com/images/7cb2cdd2ce10b886926793ccfe81ea51.png"></td><td align="center"><img src="https://source.icode504.com/images/9a3d44fcf971ff6740535ac2cc0b074e.png"></td></tr><tr><td align="center">ALIYUN_REGISTRY_PASSWORD</td><td align="center"><img src="https://source.icode504.com/images/e2b9a94dbf8270aae261e12d34458a5f.png"></td><td align="center"><img src="https://source.icode504.com/images/9fdc34a284da1f14814b922e8262eb8f.png"></td></tr><tr><td align="center">ALIYUN_REGISTRY</td><td align="center">registry.cn-hangzhou.aliyuncs.com</td><td align="center"><img src="https://source.icode504.com/images/6b5dae7b2f12bad1eb9767952a1b7871.png"></td></tr></tbody></table><p>至此，阿里云和Github的配置完成！接下来，我们就试着拉取一个镜像。</p><h1 id="四、将Dockerhub中的镜像通过Github推送到阿里云镜像仓库"><a href="#四、将Dockerhub中的镜像通过Github推送到阿里云镜像仓库" class="headerlink" title="四、将Dockerhub中的镜像通过Github推送到阿里云镜像仓库"></a>四、将Dockerhub中的镜像通过Github推送到阿里云镜像仓库</h1><blockquote><p>说明：这里我拉取的是Redis相关镜像，其他镜像也可以参考下面的步骤：</p></blockquote><p>1. 进入前面我们Fork的项目，点击上方的<strong>Actions</strong>，然后点击I understand my workflows, go ahead and enable them.同意协议：</p><p><img src="https://source.icode504.com/images/b1a21df53443800df3fdddf7e5929906.png"></p><p>2. 按照下图所示操作，进入到image.txt文件中：</p><p><img src="https://source.icode504.com/images/b8c99bda80915730630bbac3db55b76c.png"></p><p><img src="https://source.icode504.com/images/603aa5dc43800cceab7c564e4d652b24.png"></p><p>3. 点击右上角的小铅笔，进入编辑模式：</p><p><img src="https://source.icode504.com/images/c8528fa76bb0b5002bd8d897bbc44fed.png"></p><p>4. 将文件中的内容全部清空，后续替换为我们自己的镜像名和版本：</p><p><img src="https://source.icode504.com/images/42e5c52016915c983ed960e3f3e74aba.png"></p><p>5. 打开Dockerhub官网：<a href="https://hub.docker.com/">点我查看</a></p><blockquote><p>说明：由于国内网络原因，Dockerhub加载较慢，请耐心等待！</p></blockquote><p>6. 在上方搜索框中搜索Redis，按一下回车，第一个就是Redis官方镜像：</p><p><img src="https://source.icode504.com/images/a4aa22cf2e0ffc94ba61a13fb940a619.png"></p><p>7. 点击Tags即可查看所有镜像：</p><p><img src="https://source.icode504.com/images/5a60858df4b1d017c87862a2845387a7.png"></p><p>8. 这里我想拉取7.4.1、7.4、7.2.6三个版本的镜像：直接复制镜像名和版本号即可（前面的<code>docker pull</code>不要复制）：</p><p><img src="https://source.icode504.com/images/ac71b13a8da1878b5758a5a9c63665a3.png"></p><p><img src="https://source.icode504.com/images/a74db4aea877bf3ba178651ab8d910aa.png"></p><p><img src="https://source.icode504.com/images/88856df36515399b0d631081d33c6cbc.png"></p><p>9. 将前面复制的镜像名和版本号依次粘贴到images.txt中，效果图如下：</p><p><img src="https://source.icode504.com/images/9da31bc037cca6a6fb27922b586cb5cf.png"></p><p>10. 如果没有什么问题，点击右上角的<strong>Commit changes</strong>提交代码：</p><p><img src="https://source.icode504.com/images/8d25655bd9601a3f9861536282d2aaa4.png"></p><p>11. 此时会弹出一个窗口，点击<strong>Commit changes</strong>：</p><p><img src="https://source.icode504.com/images/bfc634e07bec4ad1fee067bce0229c1f.png"></p><p>12. 点击上方的Actions，即可查看镜像拉取和推送到阿里云的过程，如果出现绿色的对号，就说明镜像已经成功推送到阿里云镜像仓库：</p><blockquote><p>如果项目构建失败，可能是如下原因：</p><ul><li>镜像或者版本号错误</li><li>前面配置的Name-Secret配置不正确</li></ul></blockquote><p><img src="https://source.icode504.com/images/e66242153624c7e3127bcd20955cbcf1.png"></p><p>13. 点击进入阿里云容器镜像服务控制台：<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/repositories">点我查看</a>。此时我们可以看到Dockerhub镜像通过Github成功推送到了阿里云镜像仓库，点击进入：</p><p><img src="https://source.icode504.com/images/d2f283e0fac7ed0b9e82071e4b3257f3.png"></p><p>14. 接下来我们就可以按照阿里云给出的步骤一步一步拉取镜像了：</p><p><img src="https://source.icode504.com/images/76aab6b2fc030dfbabf1af6b7708e70a.png"></p><p>15. 使用Electerm连接到Linux服务器，登录到阿里云镜像仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker login --username=阿里云用户名 registry.cn-hangzhou.aliyuncs.com<br></code></pre></td></tr></table></figure><p>效果图如下，需要输入密码（不在控制台显示），登录成功如下图所示：</p><p><img src="https://source.icode504.com/images/e0a9df9c76ae5a3bb237997727a8876c.png"></p><p>16. 从镜像仓库中拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull registry.cn-hangzhou.aliyuncs.com/icode504-docker-repo/redis:[镜像版本号]<br></code></pre></td></tr></table></figure><p>其中镜像版本号获取方式如下图：</p><p><img src="https://source.icode504.com/images/b20498cf87bbec016cb6a4738b9ef87c.png"></p><p>效果图如下，拉取镜像走的是国内的网络，速度非常快且可靠！</p><p><img src="https://source.icode504.com/images/82567e834c3c2b0044c3fbd0ac07905e.gif"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Docker</category>
      
      <category>镜像拉取</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Docker</tag>
      
      <tag>Docker hub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian虚拟机修改静态IP</title>
    <link href="/posts/110.html"/>
    <url>/posts/110.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>需要在VMware安装Debian虚拟机的小伙伴，点击右侧链接查看安装教程：<a href="./52.html">点我查看</a></p><p>使用云服务器的小伙伴不需要看下面的配置哦(ᕑᗢᓫ∗)˒</p><h1 id="二、VMware相关操作"><a href="#二、VMware相关操作" class="headerlink" title="二、VMware相关操作"></a>二、VMware相关操作</h1><p>1. （虚拟机处于关机状态）在未开启Debian虚拟机之前，按照下图所示打开虚拟机的网络设置：</p><p><img src="https://source.icode504.com/images/30f37dbd371b7ac93ce756d1b7424f60.png"></p><p>2. 点击右下角的<strong>更改设置</strong>：</p><p><img src="https://source.icode504.com/images/a7cb64c3b9c6396a8370e31f03a45e51.png"></p><p>3. 进入编辑模式后，上方的虚拟网络选中VMnet8（NAT模式）：</p><p><img src="https://source.icode504.com/images/020ceab236d61c0341c80ade96ebdf49.png"></p><p>4. 按照下图所示修改子网IP，修改的数值范围在<strong>0~255</strong>之间，我修改后的子网IP为192.168.40.0：</p><p><img src="https://source.icode504.com/images/5fe139fec7dde3d798a240acbb2ff10a.png"></p><p>5. 点击右下角的<strong>DHCP设置</strong>：</p><p><img src="https://source.icode504.com/images/b28c1b878fca3e76e9038f66cc3d28be.png"></p><p>6. 按照下图操作修改网段，完成后一路点击确定，虚拟网络配置完成。</p><p><img src="https://source.icode504.com/images/2475fa8817e27d03b932c28866ba886a.png"></p><h1 id="三、Debian修改静态IP"><a href="#三、Debian修改静态IP" class="headerlink" title="三、Debian修改静态IP"></a>三、Debian修改静态IP</h1><p>1. 开启Debian虚拟机，执行如下命令查看当前虚拟机的IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>这里我的虚拟机IP地址是192.168.40.5，接下来我将这个IP修改为静态IP，192.168.40.100：</p><p><img src="https://source.icode504.com/images/6b5a474d812bedc220d46e12d2bd045e.png"></p><p>2. Debian关于网络IP的配置在<code>/etc/network/interfaces</code>文件中，使用Vim编辑这个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/network/interfaces<br></code></pre></td></tr></table></figure><p>3. 输入<code>:set nu</code>可以查看行号，此时我们看到未修改之前为动态IP：</p><p><img src="https://source.icode504.com/images/c2a15482c33771fd577823fc2bdb34ac.png"></p><p>4. 按<kbd>I</kbd>键进入编辑模式，将最后两行代码注掉，效果图如下：</p><p><img src="https://source.icode504.com/images/1fdb92edb1735377e9f8d6eaf864b158.png"></p><p>5. 另起一行，输入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto ens33<br>iface ens33 inet static    <span class="hljs-comment"># 修改为静态ip</span><br>address 192.168.40.100     <span class="hljs-comment"># 其中40要和前面自定义的要保持一致，100可以设置其他数字（0~255之间）</span><br>netmask 255.255.255.0<br>gateway 192.168.40.2       <span class="hljs-comment"># 其中40要和前面自定义的要保持一致</span><br></code></pre></td></tr></table></figure><p>修改后的效果如下图：</p><p><img src="https://source.icode504.com/images/18d2853a81e652f845b66fea032effad.png"></p><p>6. 按<kbd>Esc</kbd>键退出编辑模式，输入<code>:wq</code>保存并退出。</p><p>7. 执行如下命令重新启动网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysmctl restart networking<br></code></pre></td></tr></table></figure><p>8. 执行如下命令重新启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure><p>9. 再次执行<code>ip addr</code>命令，发现IP已经变为192.168.40.100：</p><p><img src="https://source.icode504.com/images/0e1f4c2e2b46f3741147273a970ea6c0.png"></p><p>10. 此时我们ping一下百度也有响应，至此，Debian成功修改为静态IP并且可以访问外网：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/dc1fead36b500490bd96dd65104a6b65.png"></p>]]></content>
    
    
    <categories>
      
      <category>常用操作</category>
      
      <category>Debian</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul安装配置教程（Windows版）</title>
    <link href="/posts/109.html"/>
    <url>/posts/109.html</url>
    
    <content type="html"><![CDATA[<p>Consul 是一个开源的分布式服务发现和配置管理工具，主要用于支持微服务架构。它提供了服务发现、健康检查、键值存储、分布式锁、以及多数据中心的服务网格功能。通过 Consul，服务可以动态注册和发现彼此，无需手动配置 IP 地址或端口，同时能够自动执行健康检查，确保只将健康的服务实例注册到集群中。此外，Consul 还支持一致性哈希的分布式键值存储，用于配置共享和动态更新，广泛应用于微服务、云原生架构中。</p><p>以下是Windows环境下Consul安装和配置教程。</p><h1 id="一、下载Consul"><a href="#一、下载Consul" class="headerlink" title="一、下载Consul"></a>一、下载Consul</h1><p>1. 点击右侧链接进入官网下载页：<a href="https://developer.hashicorp.com/consul/downloads">点我查看</a></p><p>2. 选择你要安装的版本，新手小白可以跳过这一步：</p><p><img src="https://source.icode504.com/images/23dc2e97e8517c0899ac02bfd3195710.png"></p><p>3. 在下方找到Windows操作系统，根据自己的电脑的操作系统位数下载Consul。这里我的电脑是64位的操作系统，点击红色链接下载：</p><details><summary>如何查看自己的电脑是32位还是64位？</summary><br><ul><li>按<kbd>Win</kbd>和<kbd>R</kbd>，输入<code>cmd</code>并按一下回车，进入命令行界面。</li><li>执行如下命令，查看当前操作系统的信息：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">systeminfo<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/2b462c49d961e5b4aa5d7b8218996b13.png"></p></details><p><img src="https://source.icode504.com/images/3aac2bbfb580aa063b2e7747ca23e37c.png"></p><h1 id="二、安装并启动Consul"><a href="#二、安装并启动Consul" class="headerlink" title="二、安装并启动Consul"></a>二、安装并启动Consul</h1><p>1. 将下载好的Consul安装包解压到你熟悉的位置且只包含英文路径，这里我解压到了D盘的Environment目录下：</p><p><img src="https://source.icode504.com/images/45448112151373a7252351b028b018a5.png"></p><p><img src="https://source.icode504.com/images/7fc316d64b698afa6e6d028af55979d0.png"></p><p>2. 进入解压后的目录，点击上方路径，输入 <code>cmd</code>并回车，进入命令行界面：</p><p><img src="https://source.icode504.com/images/89028e0b5055bda019a0d3b0ca07d587.png"></p><p>3. 输入 <code>consul -version</code>，如果可以查看当前Consul版本信息，就说明Consul配置成功：</p><p><img src="https://source.icode504.com/images/ce7e130f51e7e02fb65050fbd6b98c4e.png"></p><p>4. 通过开发模式启动Consul：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">consul agent <span class="hljs-literal">-dev</span><br></code></pre></td></tr></table></figure><p>5. 打开浏览器，在上方搜索框输入 <code>http://localhost:8500</code>即可访问Consul，如果出现如下页面就说明Consul启动成功！</p><p><img src="https://source.icode504.com/images/7daee3a472c39d15f88338bf3d87b89b.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>中间件</category>
      
      <category>服务注册和配置中心</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis远程连接工具TinyRDM安装、配置和卸载教程（macOS版）</title>
    <link href="/posts/108.html"/>
    <url>/posts/108.html</url>
    
    <content type="html"><![CDATA[<p>TinyRDM是一款轻量级的Redis数据库管理工具，提供了用户友好的图形界面，便于开发者和数据库管理员进行Redis数据库的连接、管理和监控。它支持多种Redis命令操作，提供丰富的可视化功能，直观地展示数据结构和存储信息。TinyRDM简洁高效，适合日常的Redis管理工作。</p><p>以下是macOS环境下安装Tiny RDM教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>1. 请确保Linux操作系统上安装了Redis，需要安装的小伙伴点击右侧链接查看安装教程：<a href="./83.html">点我查看</a></p><p>2. 检查本机信息：点击左上角苹果logo，点击第一个<strong>关于本机</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224151904945.png"></p><p>这里需要留意一下处理器信息，这里我的电脑使用的是Intel芯片：</p><p><img src="https://source.icode504.com/images/image-20240224152112087.png"></p><h1 id="二、下载RDM"><a href="#二、下载RDM" class="headerlink" title="二、下载RDM"></a>二、下载RDM</h1><p>1. 打开Tiny RDM官网：<a href="https://redis.tinycraft.cc/zh/">点我查看</a></p><p>2. 鼠标移到<strong>下载安装</strong>按钮，使用Intel芯片的小伙伴点击蓝色框链接下载，使用M1及之后的芯片的小伙伴点击绿色框链接下载：</p><p><img src="https://source.icode504.com/images/image-912eed7de70f93a1c913f9f9aad2e120.png"></p><h1 id="三、安装Tiny-RDM"><a href="#三、安装Tiny-RDM" class="headerlink" title="三、安装Tiny RDM"></a>三、安装Tiny RDM</h1><p>1. 打开dmg文件后，将Tiny RDM拖入到Applications中即可完成安装：</p><p><img src="https://source.icode504.com/images/image-1250bf5e08e01647c68f560a1be3f8a8.gif"></p><p>2. 在程序坞中找到Tiny RDM并打开：</p><p><img src="https://source.icode504.com/images/image-83cdfa7a1d06315fe99cdf484ad555de.png"></p><p>3. 此时会弹出一个错误信息：<strong>无法打开“Tiny RDM”，因为它来自身份不明的开发者。</strong>（没有这个错误信息并且能正常打开上述软件包的小伙伴请此链接查看后续步骤：<a href="./110.html#%E5%9B%9B%E3%80%81%E4%BD%BF%E7%94%A8Tiny-RDM%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Redis">点我查看</a>）我们需要解决这个问题：</p><p><img src="https://source.icode504.com/images/image-a1ee1e6ad1c45188fda07bed08c013e3.png"></p><p>4. 点击左上角苹果logo，然后点击<strong>系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155139125.png"></p><p>5. 点击<strong>左侧隐私与安全性</strong>，向下找安全性中有一个提示信息：已阻止使用“Tiny RDM”，因为它来自身份不明的开发者。点击提示信息下方的<strong>仍要打开</strong>：</p><p><img src="https://source.icode504.com/images/image-f8f9f6de304816c7f2ef712073070e48.png"></p><p>6. 输入本机的用户名和密码，完成后点击<strong>修改设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155514630.png"></p><p>7. 此时会弹出一个提示，直接点击<strong>打开</strong>即可，此时就可以正常启动Tiny RDM了：</p><p><img src="https://source.icode504.com/images/image-486edc8b66dd637581a97279babfd92c.png"></p><h1 id="四、使用Tiny-RDM远程连接Redis"><a href="#四、使用Tiny-RDM远程连接Redis" class="headerlink" title="四、使用Tiny RDM远程连接Redis"></a>四、使用Tiny RDM远程连接Redis</h1><p>1. 在桌面上打开Tiny RDM，点击左下角的加号，新建一个Redis连接：</p><p><img src="https://source.icode504.com/images/image-8eb086d385bd77677e61b291464260bf.png"></p><p>2. 按照下图所示操作，配置Redis的连接配置，完成后点击左下角的<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-5f52a47a8b58ea3606d615f8dbd4737c.png"></p><p>3. 如果下方弹出提示“成功连接到Redis服务器”就说明前面的Redis配置没有问题，此时我们点击右下角的确认就可以使用Redis了：</p><p><img src="https://source.icode504.com/images/image-2e1872a9dac580830efd657e8e03d8cb.png"></p><p>4. 双击左侧的Redis连接，再点击控制台，我们就可以正常使用Redis命令了：</p><p><img src="https://source.icode504.com/images/image-e69cbbaec6fcf640e0fca44ae8e6d89b.png"></p><p><img src="https://source.icode504.com/images/image-ce17051a4ad9fa5e8e7760faea13b289.png"></p><h1 id="五、卸载Tiny-RDM"><a href="#五、卸载Tiny-RDM" class="headerlink" title="五、卸载Tiny RDM"></a>五、卸载Tiny RDM</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="./31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开程序最左边的访达，在最左侧点击应用程序：</p><p><img src="https://source.icode504.com/images/image-20240714213011161.png"></p><p>2. 找到Tiny RDM，按照下图所示操作将 IDEA 拖入到废纸篓中：</p><p><img src="https://source.icode504.com/images/image-9fcda45ef1d40d96d581bfeee4820a29.gif"></p><p>3. 打开废纸篓，鼠标右键点击Tiny RDM图标，选择<strong>立即删除</strong>，Tiny RDM就成功卸载了：</p><p><img src="https://source.icode504.com/images/image-5426bfded19e272978d8b688647d592b.png"></p><p>此时会弹出一个弹窗提示，点击<strong>删除</strong>即可彻底卸载：</p><p><img src="https://source.icode504.com/images/image-1321d3a887520019dfeb6f8fb9d10a71.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>Redis</tag>
      
      <tag>TinyRDM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDKMAN!安装教程</title>
    <link href="/posts/107.html"/>
    <url>/posts/107.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://sdkman.io/">SDKMAN!</a>，全称The Software Development Kit Manager，中文翻译过来就是<strong>软件开发工具包管理器</strong>。以下是官网对这款工具的介绍（个人翻译）：</p><p>认识一下SDKMAN!——你的可靠伙伴，它可以高效管理Unix系统上众多的软件开发工具包。假设您的系统上存在不同版本的软件开发工具包（SDKs），需要以一种无压力的方式在他们之间切换，SDKMAN!以简单易用的命令行界面（CLI）和API能介入上述过程。以前称作GVM，Groovy enVironment Managener（Groovy环境管理器），SDKMAN!从类似工具apt、pip、RVM、rbenv甚至是Git上获取灵感。将其视为您的一个乐于助人的朋友，随时为您准备简化SDK管理。</p><ul><li>源于开发者，为开发人员着想。简化SDK生命周期，不需要再寻找下载源，提取归档或添加修改<code>_HOME</code>和<code>PATH</code>等环境变量。</li><li>一站式直接搞定所有和Java相关工具下载安装。可以安装基于JVM的软件开发工具包，例如：Java、Scala、Kotlin和Groovy、Ant、Gradle、Grails、Maven、SBT、Spark、Spring Boot、Vert.x和其他框架工具也支持。</li><li>轻量级。SDKMAN!使用Rust和bash编写，并且系统上只需要有<code>curl</code>、<code>zip</code>和<code>unzip</code>三个依赖即可。甚至可以和ZSH一起工作。</li><li>多平台。跨各种基于UNIX平台无缝操作，包括<strong>macOS、Linux、Windows下的Linux子系统</strong>（WSL）。</li><li>APIs。通过使用我们的开放的Broker API，可以轻松编写新的客户端。软件提供者可以通过安全的Vendor API来发布和声明自己的软件版本。</li><li>开源。SDKMAN!的研发离不开开源社区成员们的努力。Apache 2.0下的协议。</li></ul><p>接下来就为大家介绍一下SDKMAN!的安装和使用：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>请确保您的操作系统是Linux&#x2F;macOS&#x2F;WSL，需要安装的小伙伴可以根据自己的需要查看安装教程：</p><table><thead><tr><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th><th align="center">WSL</th></tr></thead><tbody><tr><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td><td align="center"><a href="./42.html">点我查看</a></td></tr></tbody></table><h1 id="二、安装SDKMAN"><a href="#二、安装SDKMAN" class="headerlink" title="二、安装SDKMAN!"></a>二、安装SDKMAN!</h1><h2 id="方式一：国内用户安装"><a href="#方式一：国内用户安装" class="headerlink" title="方式一：国内用户安装"></a>方式一：国内用户安装</h2><blockquote><p>说明：推荐国内用户使用，我在官方脚本上稍微做了一下改进。</p></blockquote><p>1. 打开命令行，执行如下命令即可安装SDKMAN!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s <span class="hljs-string">&quot;https://gitee.com/iCode504/my-sdkman/raw/master/install.sh&quot;</span> | bash<br></code></pre></td></tr></table></figure><p>2. 安装完成，执行如下命令让SDKMAN!相关命令生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span><br></code></pre></td></tr></table></figure><p>3. 执行如下命令即可查看SDKMAN!的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-8a3663e0c689f82dba9e907ea23a1d64.png"></p><h2 id="方式二：正常安装"><a href="#方式二：正常安装" class="headerlink" title="方式二：正常安装"></a>方式二：正常安装</h2><blockquote><p>说明：国内用户不推荐使用，因为需要从Github上下载安装包，Github在国内访问速度较慢，下载可能会失败。</p></blockquote><p>安装SDKMAN!非常简单，只需要在命令行（macOS请打开终端执行命令）界面运行几行代码就OK了。</p><p>1. 请先确保电脑本机上已经安装了<code>curl</code>、<code>zip</code>、<code>unzip</code>、<code>axel</code></p><ul><li>CentOS：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install curl zip unzip<br></code></pre></td></tr></table></figure><ul><li>Ubantu&#x2F;Debian：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt -y install curl zip unzip<br></code></pre></td></tr></table></figure><p>2. 打开命令行窗口，在命令行中输入如下命令并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -s &quot;https://get.sdkman.io&quot; | bash<br></code></pre></td></tr></table></figure><p>因为这款软件是下载源在国外，下载速度较慢，请耐心等待！</p><p>3. 出现下面提示即说明SDKMAN!安装成功：</p><p><img src="https://source.icode504.com/images/image-20231227153819937.png"></p><p>如果安装失败，执行如下命令删除残留文件重新执行上一步命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ./sdkman<br></code></pre></td></tr></table></figure><p>4. 我们在命令行再执行如下命令，方便后续我们使用SDKMAN!相关的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;<br></code></pre></td></tr></table></figure><p>5. 此时在命令行输入如下命令，就可以看到SDKMAN!的版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sdk v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20231227154230369.png"></p><h1 id="三、卸载SDKMAN-（可选）"><a href="#三、卸载SDKMAN-（可选）" class="headerlink" title="三、卸载SDKMAN!（可选）"></a>三、卸载SDKMAN!（可选）</h1><p>卸载SDKMAN!也非常简单！只需要几步就可以完成：</p><p>1. （可选）如果后续还想使用SDKMAN!，可以对当前<code>./sdkman</code>目录打包成tar文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar zcvf ~/sdkman-backup_$(date +%F-%kh%M).tar.gz -C ~/ .sdkman<br></code></pre></td></tr></table></figure><p>2. 使用<code>rm -rf</code>命令强制删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf ~/.sdkman<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>macOS</category>
      
      <category>软件包管理工具</category>
      
      <category>软件包管理工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDKMAN!</tag>
      
      <tag>软件包管理工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之基数统计HyperLogLog</title>
    <link href="/posts/106.html"/>
    <url>/posts/106.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis-基数统计类型（HyperLogLog）介绍"><a href="#一、Redis-基数统计类型（HyperLogLog）介绍" class="headerlink" title="一、Redis 基数统计类型（HyperLogLog）介绍"></a>一、Redis 基数统计类型（HyperLogLog）介绍</h1><p>Redis HyperLogLog是一种概率型数据结构，用于统计当前集合的近似基数，它以完美的准确性换取了高效的空间利用率。</p><blockquote><p>这里说的基数指的是集合中不重复元素数量。</p></blockquote><p>统计集合中唯一数据项的数量通常和内存使用量成正比。也就是说，查询的唯一数据项的数量越多，消耗的内存也越多。一种简单暴力的方法就是我们记住都存储了那些元素，以避免多次计数，但是很显然，这并不是一个现实的选择。</p><p>有一种可以通过内存换取精度的算法，这个算法会返回一个带有标准误差的统计基数。Redis在使用HyperLogLog统计数据的情况下，标准误差小于1%。使用这个算法的好处在于，你不需要考虑统计数据所消耗内存的问题，所消耗的内存量是恒定的，最多也不超过12KB。如果你的数据很小，所需要的内存量也要比12KB小很多。</p><p>HyperLogLog最多使用<strong>12KB</strong>的内存空间，标准误差是**0.81%**。</p><p>从技术层面而言，HyperLogLog是一种不同的数据结构，但实际上编码仍然是字符串（String）：</p><p><img src="https://source.icode504.com/images/image-b377ad022070b3d4538e10c50b6b9eca.png"></p><p>应用场景：</p><ul><li>统计网站、文章等UV；</li></ul><blockquote><p>UV，英文全称Unique Visitor，独立访客，一般理解为客户端IP，需要去重。</p><p>例如：某个IP今天访问了50次网站<a href="https://www.icode504.com/">https://www.icode504.com</a>，那么该网站在最终统计UV时，该IP的访问次数是1次。</p></blockquote><ul><li>统计用户搜索网站关键词数量；</li><li>统计用户每天搜索不同词条的次数；</li><li>……</li></ul><h1 id="二、Redis-基数统计类型（HyperLogLog）常用命令"><a href="#二、Redis-基数统计类型（HyperLogLog）常用命令" class="headerlink" title="二、Redis 基数统计类型（HyperLogLog）常用命令"></a>二、Redis 基数统计类型（HyperLogLog）常用命令</h1><p>1. 添加指定一个或多个元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PFADD key [element [element ...]]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-61b2bab03b649a7e0f345eaefb04491b.png"></p><p>2. 统计当前HyperLogLog的基数估算值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PFCOUNT key [key ...]<br></code></pre></td></tr></table></figure><p>PFCOUNT统计基数时，如果数据量较大时会存在最大0.81%误差。</p><ul><li>如果参数只有一个key，那么统计的是当前集合的近似基数，如果key不存在，那么返回结果是0。</li></ul><p><img src="https://source.icode504.com/images/image-0732657f8c6dd7bb566bbc49b81ac4b3.png"></p><ul><li>如果参数有多个key，此时这些HyperLogLog先进行并集运算，再存储到一个临时的HyperLogLog，统计好数量以后，返回最终统计的近似基数：</li></ul><p><img src="https://source.icode504.com/images/image-60427d59d0d06e71a91fcc8f1840510d.png"></p><p>3. 将多个HyperLogLog合并为一个HyperLogLog（并集运算）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PFMERGE destkey sourcekey ...<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-c31916fcd8d7887e294e9af22016c49b.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DBeaver加快依赖下载速度</title>
    <link href="/posts/105.html"/>
    <url>/posts/105.html</url>
    
    <content type="html"><![CDATA[<p>需要安装DBeaver的小伙伴根据自己所在的操作系统查看安装教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./77.html">点我查看</a></td><td align="center"><a href="./81.html">点我查看</a></td></tr></tbody></table><p>我们在使用DBeaver连接数据库的时候，可能会需要到Maven中央仓库下载一些依赖（JAR包），但是中央仓库服务器在国外，对于国内用户下载不一定友好：</p><p><img src="https://source.icode504.com/images/image-29db969146c7cf2a81bf0eadec186213.png"></p><p>要想解决上述问题，只需要将下载源改为国内的镜像源，这里我使用的阿里云镜像源。以下是修改镜像源的教程：</p><p>1. 复制下面的链接地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//m</span>aven.aliyun.com<span class="hljs-regexp">/nexus/</span>content<span class="hljs-regexp">/groups/</span>public/<br></code></pre></td></tr></table></figure><p>2. 在上方菜单找到<strong>窗口</strong> –&gt; <strong>首选项</strong>，进入设置页面：</p><p><img src="https://source.icode504.com/images/image-990a04be1d839a7e51c3c3ab0028c077.png"></p><p>3. 在左侧菜单上方的搜索框搜索Maven，然后点击右侧的<strong>添加</strong>：</p><p><img src="https://source.icode504.com/images/image-ea0e0efaccd7f60934db5e95ea8349ab.png"></p><p>4. 将第1步中复制的链接地址粘贴到此处，完成后点击确定：</p><p><img src="https://source.icode504.com/images/image-4c5896454e65e5368fde581f7d708d0e.png"></p><p>5. 选中新添加的链接，点击右侧的<strong>向上</strong>，将这个链接置顶，完成后点击右下角<strong>应用并关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-60144dd59bd7a4a9a229ebbbc5bdc1e0.png"></p><p>6. 此时配置完数据库以后，再次点击测试连接时，下载依赖使用的国内的镜像源，下载速度比较快：</p><p><img src="https://source.icode504.com/images/image-d110c55820a47a9214aa3ee801c86ac3.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>DBeaver</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBeaver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL安装和配置教程（Linux版）</title>
    <link href="/posts/104.html"/>
    <url>/posts/104.html</url>
    
    <content type="html"><![CDATA[<p>PostgreSQL是基于<a href="https://dsf.berkeley.edu/postgres.html">POSTGRES 4.2</a>版本的对象-关系型数据库，由加州大学伯克利分校计算机系研发。POSTGRES开创了许多先进理念，这些概念后来才在一些数据库系统中出现（他们的<a href="https://www.postgresql.org/">官网</a>标题宣传的是世界上最先进的开源关系型数据库）。</p><p>PostgreSQL是原伯克利代码的后代，它是开源的，支持大部分SQL标准并提供很多现代化特性：复杂查询、外键、触发器、更新视图等。</p><p>此外，用户能以多种方式扩展PostgreSQL，例如可以添加新数据类型、新函数、新操作符等。由于自由的许可，PostgreSQL可以被任何人使用、修改、发布。</p><p>以下是Linux环境下PostgreSQL的安装、配置与卸载教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>1. 需要安装Liunx操作系统的小伙伴，点击下面任意一个链接查看安装教程：</p><table><thead><tr><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><p>2. 本文使用数据库管理软件DBeaver，需要安装的小伙伴根据自己的操作系统查看安装教程：</p><table><thead><tr><th align="center">Windows</th><th align="center">macOS</th></tr></thead><tbody><tr><td align="center"><a href="./77.html">点我查看</a></td><td align="center"><a href="./81.html">点我查看</a></td></tr></tbody></table><p>3. 根据操作系统安装如下依赖：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc g++ make vim tar wget bzip2<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get -y install gcc g++ make vim tar wget ufw<br></code></pre></td></tr></table></figure><h1 id="二、下载PostgreSQL安装包"><a href="#二、下载PostgreSQL安装包" class="headerlink" title="二、下载PostgreSQL安装包"></a>二、下载PostgreSQL安装包</h1><p>1. 这里我使用<code>wget</code>命令下载的是15.4版本的源码安装包，存储到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -P /usr/local https://mirrors.tuna.tsinghua.edu.cn/postgresql/source/v15.4/postgresql-15.4.tar.bz2<br></code></pre></td></tr></table></figure><blockquote><p>说明：需要安装其他版本的源码安装包，请点击右侧链接：<a href="https://mirrors.tuna.tsinghua.edu.cn/postgresql/source/">点我查看</a></p><p><img src="https://source.icode504.com/images/image-c59e9bc588b5ff21a3842f619e87dbe5.png"></p><p><img src="https://source.icode504.com/images/image-99c1be94cbaff0ba534532dd5d04b0a5.png"></p></blockquote><p>2. 下载完成后，切换到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br></code></pre></td></tr></table></figure><p>3. 下载完成后，执行<code>ls</code>命令，出现PostgreSQL安装包：</p><p><img src="https://source.icode504.com/images/image-08bd0dad21aefc6665db4d351034dbef.png"></p><h1 id="三、安装PostgreSQL"><a href="#三、安装PostgreSQL" class="headerlink" title="三、安装PostgreSQL"></a>三、安装PostgreSQL</h1><p>1. 将下载好的安装解压，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xf postgresql-15.4.tar.bz2<br></code></pre></td></tr></table></figure><p>2. 进入解压后的文件夹，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> postgresql-15.4<br></code></pre></td></tr></table></figure><p>3. 安装前检测系统环境（不使用readline和zlib检查），生成适合该环境的Makefile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --without-readline --without-zlib<br></code></pre></td></tr></table></figure><p>此时执行<code>ls</code>命令可以看到生成的Makefile文件：</p><p><img src="https://source.icode504.com/images/image-83f940f794070438cf23340d5f04dddc.png"></p><p>4. 根据<code>Makefile</code>编译源代码，生成可执行文件和其他相关文件（编译需要较长时间，请耐心等待）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>5. 切换到<code>root</code>用户（可能需要输入密码）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su<br></code></pre></td></tr></table></figure><p>6. 将编译好的文件复制到指定目录下（默认是<code>/usr/local/pgsql</code>目录）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make install<br></code></pre></td></tr></table></figure><p>7. 创建一个名为<code>postgres</code>的用户（密码自定义，为了方便记忆，这里我将其设置为123456）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser postgres<br></code></pre></td></tr></table></figure><p>8. 创建一个存储数据文件的目录<code>/usr/local/pgsql/data</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /usr/local/pgsql/data<br></code></pre></td></tr></table></figure><p>9. 将<code>/usr/local/pgsql/data</code>目录所有权变更为<code>postgres</code>用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> postgres /usr/local/pgsql/data<br></code></pre></td></tr></table></figure><p>10. 切换到<code>postgres</code>用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - postgres<br></code></pre></td></tr></table></figure><p>11. 初始化PostgreSQL数据库，创建数据库目录结构和默认配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data<br></code></pre></td></tr></table></figure><p>出现下面提示说明PostgreSQL初始化成功：</p><p><img src="https://source.icode504.com/images/image-1b55f9f51950879f3d20d4023baad38c.png"></p><h1 id="四、为PostgreSQL设置环境变量"><a href="#四、为PostgreSQL设置环境变量" class="headerlink" title="四、为PostgreSQL设置环境变量"></a>四、为PostgreSQL设置环境变量</h1><blockquote><p>为了方便后续在命令行中使用PostgreSQL相关命令，建议为PostgreSQL设置环境变量。</p></blockquote><p>1. 点击Electerm上方点击加号，再打开一个命令行窗口（登录的是<code>root</code>用户）：</p><p><img src="https://source.icode504.com/images/image-7d2a04bc5d166688e7e03bc8e4dc91c8.png"></p><p>2. 使用vim命令编辑环境变量文件<code>/etc/profile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></td></tr></table></figure><p>3. 复制下面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">PATH=/usr/local/pgsql/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH<br></code></pre></td></tr></table></figure><p>4. 进入vim编辑器后，按<kbd>i</kbd>键进入编辑模式，将光标移动到文件末尾，按<kbd>Shift</kbd><kbd>Insert</kbd>键将上一步复制的内容粘贴到此处：</p><p><img src="https://source.icode504.com/images/image-3551750e88aa1f8d3938562c187090e5.png"></p><p>5. 按<kbd>Esc</kbd>键退出编辑，输入<code>:wq</code>保存并退出。</p><p>6. 使用<code>source</code>命令让配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>7. 这里我们来检查一下上述配置是否生效，执行如下命令可以查看当前PostgreSQL版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">psql --version<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-354de070ea930868ec883b0d8ccc782a.png"></p><h1 id="五、启动PostgreSQL服务并设置为开机自启动"><a href="#五、启动PostgreSQL服务并设置为开机自启动" class="headerlink" title="五、启动PostgreSQL服务并设置为开机自启动"></a>五、启动PostgreSQL服务并设置为开机自启动</h1><p>1. （当前登录的是<code>root</code>用户）使用vim命令在创建一个PostgreSQL服务文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/systemd/system/postgresql.service<br></code></pre></td></tr></table></figure><p>2. 复制下方内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=PostgreSQL database server<br>Documentation=man:postgres(1)<br>After=network-online.target<br>Wants=network-online.target<br><br>[Service]<br>Type=simple<br>User=postgres<br>ExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data<br>ExecReload=/bin/kill -HUP $MAINPID<br>KillMode=mixed<br>KillSignal=SIGINT<br>TimeoutSec=infinity<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>3. 进入vim编辑器后，按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd><kbd>Insert</kbd>键将上一步复制的内容粘贴到此处：</p><p><img src="https://source.icode504.com/images/image-e84abc457e86aececadbdf8450ed094b.png"></p><p>4. 按<kbd>Esc</kbd>键退出编辑，输入<code>:wq</code>保存并退出。</p><p>5. 执行如下命令重新加载配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>6. 重启PostgreSQL服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart postgresql<br></code></pre></td></tr></table></figure><p>7. 执行如下命令可以查看PostgreSQL服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status postgresql<br></code></pre></td></tr></table></figure><p>此时PostgreSQL正常运行，退出查看请按<kbd>Q</kbd>键：</p><p><img src="https://source.icode504.com/images/image-87e85fad694709a3404e59fcc213e097.png"></p><p>8. 如果您希望PostgreSQL开机自启动，执行如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> postgresql<br></code></pre></td></tr></table></figure><h1 id="六、远程连接PostgreSQL"><a href="#六、远程连接PostgreSQL" class="headerlink" title="六、远程连接PostgreSQL"></a>六、远程连接PostgreSQL</h1><p>（当前登录的是<code>root</code>用户）上述内容如果你已经配置好，你就可以在命令行使用PostgreSQL了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">psql -h localhost -p 5432 -U postgres<br></code></pre></td></tr></table></figure><p>此时我们只需要填写前面配置<code>postgres</code>用户密码，即可正常使用：</p><p><img src="https://source.icode504.com/images/image-4c97cf4917e197950ecff1da3ebda146.png"></p><p>为数据库用户<code>postgres</code>重新设置密码，为了方便记忆，这里我将密码设置为123456（密码不在命令行显示）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER USER postgres WITH PASSWORD <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行如下命令退出PostgreSQL命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></figure><p>在更多的情况下，我们使用的是第三方客户端（例如：Navicat、DBeaver等）远程连接PostgreSQL服务器，并且默认情况下系统没有开放PostgreSQL默认端口5432，并且PostgreSQL默认只开放本机访问，其他远程访问默认是拒绝的。</p><p>以下是解决上述问题的方案：</p><p>1. 使用vim命令编辑<code>/usr/local/pgsql/data</code>目录下的<code>postgresql.conf</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/pgsql/data/postgresql.conf<br></code></pre></td></tr></table></figure><p>2. 进入vim的命令模式后，依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br>/localhost<br></code></pre></td></tr></table></figure><p>3. 按<kbd>i</kbd>键将第60行修改成所有IP都可以访问，效果图如下：</p><p><img src="https://source.icode504.com/images/image-be16766ee4a0a6748c8fdc3804ce54a8.png"></p><p>4. 按<kbd>Esc</kbd>退出编辑模式，输入<code>:wq</code>保存并退出。</p><p>5. 使用vim命令编辑<code>/usr/local/pgsql/data</code>目录下<code>pg_hba.conf</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/pgsql/data/pg_hba.conf<br></code></pre></td></tr></table></figure><p>6. 进入vim的命令模式后，依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br>/127.0.0.1<br></code></pre></td></tr></table></figure><p>7. 在第91行末尾换行，添加如下内容，所有IP访问都需要密码，效果图如下：</p><p><img src="https://source.icode504.com/images/image-1d6bdb0840c2ac80af036ffee79a4376.png"></p><p>8. 按<kbd>Esc</kbd>退出编辑模式，输入<code>:wq</code>保存并退出。</p><p>9. 重启PostgreSQL服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart postgresql<br></code></pre></td></tr></table></figure><p>10. 开放5432端口（PostgreSQL默认使用端口）：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=5432/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>查看防火墙所有开放的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --list-ports<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-ee5e6d35b66f782a03650cf3cbd59bad.png"></p><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw allow 5432/tcp<br></code></pre></td></tr></table></figure><p>此时使用<code>ufw status</code>命令可以看到5432端口已经开放访问：</p><p><img src="https://source.icode504.com/images/image-2932443f8796aa076bb4727a37d0cd43.png"></p><p>11. 打开DBeaver，按照下图所示操作选择PostgreSQL：</p><p><img src="https://source.icode504.com/images/image-dd7e6ba7685ea9860a4c0eb6417eea74.png"></p><p><img src="https://source.icode504.com/images/image-2b8d13cf57b37207cf97a4c91ed22427.png"></p><p>12. 按照下图所示操作配置数据库连接信息：</p><p><img src="https://source.icode504.com/images/image-bc091afb90f8e2e01a42ed0aa8dcb4ad.png"></p><p>13. 点击测试连接的小伙伴需要下载数据驱动文件，点击下载即可：</p><p><img src="https://source.icode504.com/images/image-5e4328f5185df7a30cd3c6dd0eec9878.png"></p><p>14. 等待一段时间后，驱动下载完成，点击取消关闭下载驱动界面：</p><p><img src="https://source.icode504.com/images/image-abbf41c68dca2c1a3d8676780d65987c.png"></p><p>15. 再次点击测试连接，如果出现如下提示就说明可以远程链接PostgreSQL数据库了：</p><p><img src="https://source.icode504.com/images/image-d2f539a157073e27205192de246e7be8.png"></p><p>16. 点击完成，接下来就可以使用DBeaver编写SQL语句了：</p><p><img src="https://source.icode504.com/images/image-4e2c98f57f1464cbb36c5d275e3eef83.png"></p><p><img src="https://source.icode504.com/images/image-6efb989b7db96bb652741979e64f0517.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>数据库</category>
      
      <category>关系型数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依+Apifox实现接口测试（解决访问接口401问题）</title>
    <link href="/posts/101.html"/>
    <url>/posts/101.html</url>
    
    <content type="html"><![CDATA[<p>在使用Apifox测试用户登录时，需要关闭验证码功能：<a href="./100.html">点我查看</a></p><h1 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h1><p>假设我们在若依框架的ruoyi-admin模块中编写了一个controller代码，已知端口号是8080：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ruoyi.data.controller;<br><br><span class="hljs-keyword">import</span> com.ruoyi.common.core.controller.BaseController;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.domain.AjaxResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务Controller</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-08-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/data&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/getDataInfo&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getDataInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success(<span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教(●&#x27;◡&#x27;●)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在Apifox中对该接口进行测试时，响应结果很有可能会出现401的情况：</p><p><img src="https://source.icode504.com/images/image-628598e7654d766dca652734cd2bd431.png"></p><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><p>出现上述问题的主要原因是登录时返回的token并没有添加到接口实际的请求上：</p><p><img src="https://source.icode504.com/images/image-51a6129a4ed2763f7b14a56ae89a5032.png"></p><h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><h2 id="方式一：提取token（一劳永逸）"><a href="#方式一：提取token（一劳永逸）" class="headerlink" title="方式一：提取token（一劳永逸）"></a>方式一：提取token（一劳永逸）</h2><p>1. 我们先找到用户登录接口，按照下图所示找到接口的后置操作：</p><p><img src="https://source.icode504.com/images/image-d27008d23d0374a75ac9b270dff4c377.png"></p><p>2. 添加后置操作中选择<strong>提取变量</strong>：</p><p><img src="https://source.icode504.com/images/image-579fe89652657b0beb3b8cdbce403004.png"></p><p>3. 按照下图填写相关信息，完成后按<kbd>Ctrl</kbd>+<kbd>S</kbd>键保存：</p><p><img src="https://source.icode504.com/images/image-09584c12e4826795ab503e5725a2d91a.png"></p><p>4. 在左侧找到根目录，按照下图所示填写全局Token，完成后按<kbd>Ctrl</kbd>+<kbd>S</kbd>键保存：</p><p><img src="https://source.icode504.com/images/image-3778be6ce990e7f68a927267593ebad5.png"></p><p>5. 此时重新登录，再次运行测试接口，此时我们就可以看到接口返回的数据了：</p><p><img src="https://source.icode504.com/images/image-cb4ca24c8172b5ac4b19c5aa90ad2c95.png"></p><p>6. 此时接口的实际请求中也包含登录时返回的token信息：</p><p><img src="https://source.icode504.com/images/image-eeffaed26a4117bc798a961a131b53b7.png"></p><h2 id="方式二：在接口方法上添加-Anoymous注解（临时使用）"><a href="#方式二：在接口方法上添加-Anoymous注解（临时使用）" class="headerlink" title="方式二：在接口方法上添加@Anoymous注解（临时使用）"></a>方式二：在接口方法上添加@Anoymous注解（临时使用）</h2><blockquote><p>注意：该方式只适用于开发环境中，请勿用于生产环境！</p></blockquote><p>要想避开登录访问，可以在controller方法中添加@Anoymous注解，即匿名访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ruoyi.data.controller;<br><br><span class="hljs-keyword">import</span> com.ruoyi.common.annotation.Anonymous;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.controller.BaseController;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.domain.AjaxResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务Controller</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-08-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/data&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Anonymous</span>      <span class="hljs-comment">// 添加匿名访问注解</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/getDataInfo&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getDataInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> success(<span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教(●&#x27;◡&#x27;●)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动若依框架，此时到Apifox中对该接口进行测试，也可以看到返回结果：</p><p><img src="https://source.icode504.com/images/image-8694746e2d2dbb6d2d44e79847eec214.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>开源框架</category>
      
      <category>若依</category>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>若依</tag>
      
      <tag>Apifox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依关闭登录页面的验证码</title>
    <link href="/posts/100.html"/>
    <url>/posts/100.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑上已经部署了若依框架：</p><table><thead><tr><th>框架名称</th><th>部署教程</th></tr></thead><tbody><tr><td>若依</td><td><a href="./102.html">点我查看</a></td></tr><tr><td>若依（前后端分离版）</td><td><a href="./98.html">点我查看</a></td></tr><tr><td>若依（微服务版）</td><td>敬请期待</td></tr></tbody></table><p>进入若依登录页后，默认是需要输入验证码的，如果使用Apifox、Postman等工具进行接口测试时，可能会因为验证码的拦截无法正常测试接口，这里若依官方提供了解决办法：</p><p><img src="https://source.icode504.com/images/image-20240723182112573.png"></p><p>1. 登录admin账号后，在左侧菜单栏中找到<strong>系统管理</strong>并展开，然后点击<strong>参数管理</strong>：</p><p><img src="https://source.icode504.com/images/image-20240723182443908.png"></p><p>2. 找到第4个账号自助-验证码开关，点击右侧的<strong>修改</strong>：</p><p><img src="https://source.icode504.com/images/image-20240723182628813.png"></p><p>3. 在修改参数窗口，将参数键值修改成<strong>false</strong>，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240723182754077.png"></p><p>4. 重新登陆后，此时发现登录页就不需要验证码了：</p><p><img src="https://source.icode504.com/images/image-20240723182938765.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>开源框架</category>
      
      <category>若依</category>
      
      <category>常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开源</tag>
      
      <tag>若依</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electerm安装、配置与卸载教程（macOS版）</title>
    <link href="/posts/99.html"/>
    <url>/posts/99.html</url>
    
    <content type="html"><![CDATA[<p>Electerm 是一款开源免费的终端模拟器，集终端模拟器、文件管理器、SSH 远程连接、SFTP 客户端等功能于一体。它可以在 Windows、macOS 和 Linux 操作系统上运行，为用户提供一个功能丰富、易于使用的终端环境。</p><p>通过 Electerm，用户可以在同一窗口中运行多个 SSH 会话，轻松管理远程服务器，并使用各种 Shell 命令。它还支持多种认证方式，包括密码、密钥、双因素认证等，以满足不同用户的需求，使得使用 SSH 会话更加高效方便。</p><p>在文件传输方面，Electerm 支持 SFTP 功能，可以方便地传输文件和管理网络连接。它还支持多语言，包括英语、中文等。</p><p>接下来介绍一下 macOS 环境下的 Electerm 的安装和简单配置。</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>在正式下载Electerm安装包时，推荐下载安装如下两个软件：</p><table><thead><tr><th align="left">软件名称</th><th align="left">安装教程</th><th>说明</th></tr></thead><tbody><tr><td align="left">NDM（Neat Download Manager）</td><td align="left"><a href="./24.html">点我查看</a></td><td>本文后续内容使用 NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。</td></tr></tbody></table><h1 id="二、下载-Electerm"><a href="#二、下载-Electerm" class="headerlink" title="二、下载 Electerm"></a>二、下载 Electerm</h1><p>1. 打开 Electerm 官网：<a href="https://electerm.html5beta.com/index-zh_cn.html">点我查看</a></p><p>2. 在下方页面找到 Windows 相关的安装包，鼠标右键选择复制链接地址：</p><p><img src="https://source.icode504.com/images/a9b3cdfb87b75ab5759586ea0e6320eb.png"></p><p>3. 点击右侧链接进入Github镜像加速站：<a href="https://gitdl.cn/">点我查看</a></p><blockquote><p>说明：如果上述链接无法进入，请点击<a href="./25.html#%E4%B8%89%E3%80%81%E4%B8%8B%E8%BD%BD-Github-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9">此链接</a>进入查看其它镜像加速站。</p></blockquote><p>4. 打开镜像加速站，将前面复制的链接粘贴到此处，然后点击<strong>下载</strong>即可：</p><p><img src="https://source.icode504.com/images/17101011d63791e5788d21f4e16c9f64.png"></p><h1 id="三、安装-Electerm"><a href="#三、安装-Electerm" class="headerlink" title="三、安装 Electerm"></a>三、安装 Electerm</h1><p>1. 打开下载好的安装包，将安装包拖入到应用程序中即可完成安装：</p><p><img src="https://source.icode504.com/images/image-48458ace6275c4ab0977884451b68a7f.gif" alt="https://source.icode504.com/images/image-48458ace6275c4ab0977884451b68a7f.gif"></p><p>2. 安装完成后，在控制台找到Electerm，双击打开：</p><p><img src="https://source.icode504.com/images/image-a1062be1ee06af09c1dd3901096cd993.png"></p><h1 id="四、Electerm-的简单配置"><a href="#四、Electerm-的简单配置" class="headerlink" title="四、Electerm 的简单配置"></a>四、Electerm 的简单配置</h1><blockquote><p>说明：以下包含“可选”的标题中可以自行修改，并不影响实际使用。</p></blockquote><h2 id="4-1-更换主题风格（可选）"><a href="#4-1-更换主题风格（可选）" class="headerlink" title="4.1 更换主题风格（可选）"></a>4.1 更换主题风格（可选）</h2><p>在桌面打开 Electerm，默认是黑色界面：</p><p><img src="https://source.icode504.com/images/image-20240213105358335.png"></p><p>如果你不喜欢这个纯黑界面，可以在左侧找到<strong>设置</strong>（小齿轮）对主题进行更改：</p><p><img src="https://source.icode504.com/images/image-20240213105514644.png"></p><p>在设置中，找到 UI 主题（内置了多个主题，也可以自定义主题，这里我选用的是 Github 主题），在下方搜索框中输入 Github，其中第二个搜索结果就是我们想要的：</p><p><img src="https://source.icode504.com/images/image-20240213110343282.png"></p><p>选择 Github 主题，此时最右侧会出现一个对号图标，点击这个图标就是应用这个主题：</p><p><img src="https://source.icode504.com/images/image-20240213110645152.png"></p><p>点击左上角的关闭图标，此时我们发现界面变成了白色风格：</p><p><img src="https://source.icode504.com/images/image-20240213110745168.png"></p><p><img src="https://source.icode504.com/images/image-20240213111646109.png"></p><h2 id="4-2-设置背景图片（可选）"><a href="#4-2-设置背景图片（可选）" class="headerlink" title="4.2 设置背景图片（可选）"></a>4.2 设置背景图片（可选）</h2><p>界面上有一个 Electerm 的大 logo，其实这是一张背景图片。软件本身支持修改背景图片。</p><p><img src="https://source.icode504.com/images/image-20240213111722825.png"></p><p>点击左侧菜单，打开<strong>设置</strong>（小齿轮）：</p><p><img src="https://source.icode504.com/images/image-20240213111908999.png"></p><p>在设置下方，找到<strong>终端</strong>，右侧有<strong>终端背景图片</strong>设置：</p><p><img src="https://source.icode504.com/images/image-20240213112130980.png"></p><p>如果你不需要背景图片，就点击以下输入框，此时会弹出一个列表框，选择无背景图片即可：</p><p><img src="https://source.icode504.com/images/image-20240213112256558.png"></p><p>需要更换背景图片的小伙伴，建议是保存在本地的电脑壁纸（虽然 Electerm 支持在线图片链接，但是没有网了以后图片也不会显示）。点击右侧<strong>选择文件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213114042874.png"></p><p>在本地选择一张壁纸（壁纸建议是简约风，否则花里胡哨可能会影响使用体验）：</p><p><img src="https://source.icode504.com/images/image-20240213114529925.png"></p><p>图片设置好以后，我们可以在下方设置图片的透明度和模糊度：</p><ul><li>透明度（Opacity），值在 0~1 之间，数值越小，图片的透明度越低。</li><li>模糊度（Blur），数值越大，图片越模糊。</li></ul><p><img src="https://source.icode504.com/images/image-20240213115310321.png"></p><p>修改后界面效果如下：</p><p><img src="https://source.icode504.com/images/image-20240213115750587.png"></p><h2 id="4-3-关闭检查更新"><a href="#4-3-关闭检查更新" class="headerlink" title="4.3 关闭检查更新"></a>4.3 关闭检查更新</h2><p>Electerm 更新软件默认会从 Github 下载，但是 Github 对国内用户并不友好（因为网络原因经常访问失败）。如果你不想使用新版本的 Electerm，建议关闭检查更新这一项。</p><p>点击右侧的<strong>设置</strong>（小齿轮）：</p><p><img src="https://source.icode504.com/images/image-20240213111908999.png"></p><p>在设置中的 Common，在下方设置中关闭<strong>检查应用程序启动时的更新</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213120341726.png"></p><h1 id="五、卸载-Electerm（可选）"><a href="#五、卸载-Electerm（可选）" class="headerlink" title="五、卸载 Electerm（可选）"></a>五、卸载 Electerm（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>打开访达，在左侧选择应用程序，找到Electerm拖入到废纸篓即可完成卸载：</p><p><img src="https://source.icode504.com/images/image-fb53c515d742c104654573b4528c694d.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>服务器&amp;虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>Electerm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依（前后端分离版）环境部署教程</title>
    <link href="/posts/98.html"/>
    <url>/posts/98.html</url>
    
    <content type="html"><![CDATA[<p>官网介绍：若依（前后端分离版，RuoYi-Vue）是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue等），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p><p>以下是若依（前后端分离版）环境部署教程：</p><h1 id="第一部分-准备操作"><a href="#第一部分-准备操作" class="headerlink" title="第一部分 准备操作"></a>第一部分 准备操作</h1><p>根据自己的操作系统安装如下软件：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">系统版本需求</th></tr></thead><tbody><tr><td align="center">JDK 8</td><td align="center"><a href="./1.html">点我查看</a></td><td align="center"><a href="./78.html">点我查看</a></td><td align="center">JDK &gt;&#x3D; 8</td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="./14.html">点我查看</a></td><td align="center"><a href="./78.html">点我查看</a></td><td align="center">无版本要求</td></tr><tr><td align="center">Maven</td><td align="center"><a href="./22.html">点我查看</a></td><td align="center"><a href="./96.html">点我查看</a></td><td align="center">Maven &gt;&#x3D; 3.0</td></tr><tr><td align="center">MySQL</td><td align="center"><a href="./20.html">点我查看</a></td><td align="center"><a href="./68.html">点我查看</a></td><td align="center">MySQL &gt;&#x3D; 5.7</td></tr><tr><td align="center">Git</td><td align="center"><a href="./69.html">点我查看</a></td><td align="center">系统默认已安装</td><td align="center">无版本要求</td></tr><tr><td align="center">Node.js</td><td align="center"><a href="./67.html">点我查看</a></td><td align="center"><a href="./83.html">点我查看</a></td><td align="center">Node.js &gt;&#x3D; 12</td></tr><tr><td align="center">VS Code</td><td align="center"><a href="./38.html">点我查看</a></td><td align="center"><a href="./97.html">点我查看</a></td><td align="center">无版本要求</td></tr><tr><td align="center">DBeaver</td><td align="center"><a href="./77.html">点我查看</a></td><td align="center"><a href="./81.html">点我查看</a></td><td align="center">无版本要求</td></tr></tbody></table><h1 id="第二部分-拉取若依（前后端分离版）代码"><a href="#第二部分-拉取若依（前后端分离版）代码" class="headerlink" title="第二部分 拉取若依（前后端分离版）代码"></a>第二部分 拉取若依（前后端分离版）代码</h1><p>1. 打开文件夹，找到一个你熟悉的位置，鼠标右键点击<strong>Git Bash Here</strong>，打开Git命令行窗口：</p><p><img src="https://source.icode504.com/images/image-20240612090244663.png"></p><p>2. 使用Git拉取若依源码，以下两种方式任选其一：</p><ul><li>国内用户建议在Gitee上拉取若依（前后端分离版本）代码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/y_project/RuoYi-Vue.git<br></code></pre></td></tr></table></figure><ul><li>如果你已经有Gitee账号（没有的小伙伴可以注册一个）并对SSH Key做了配置，可以执行如下命令拉取代码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:y_project/RuoYi-Vue.git<br></code></pre></td></tr></table></figure><p>3. 在Git命令行中，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴上一步复制的命令：</p><blockquote><p>笔记本用户可能还需要按<kbd>Fn</kbd>键，因为你的<kbd>Insert</kbd>键可能会被占用。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240612230259032.png"></p><p>4. 代码拉取中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240612090926996.png"></p><p>5. 拉取完成，此时关闭Git命令行窗口，我们发现此时有一个RuoYi-Vue的文件夹，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240613082434807.png"></p><p>6. 点击上方路径，鼠标右键，点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613082602510.png"></p><h1 id="第三部分-后端项目相关操作"><a href="#第三部分-后端项目相关操作" class="headerlink" title="第三部分 后端项目相关操作"></a>第三部分 后端项目相关操作</h1><h2 id="3-1-Intellij-IDEA导入后端项目"><a href="#3-1-Intellij-IDEA导入后端项目" class="headerlink" title="3.1 Intellij IDEA导入后端项目"></a>3.1 Intellij IDEA导入后端项目</h2><p>1. 打开Intellij IDEA，点击左上角<strong>File</strong>，点击<strong>Open</strong>：</p><p><img src="https://source.icode504.com/images/image-20240612093338341.png"></p><p>2. 此时会弹出一个文件路径，将上一部分复制的路径，粘贴到上面的文件路径框中，完成后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613083345323.png"></p><p>3. 此时会加载项目。按<kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>S</kbd>，进入设置界面，按照下图所示找到Maven并进行配置：</p><p><img src="https://source.icode504.com/images/image-20240612094117863.png"></p><p>4. 导入后如果你的Maven项目也是下图这样，鼠标右键点击pom.xml，然后点击Add as Maven Project，加载Maven项目：</p><blockquote><p>说明：如果你的IDEA没有侧边栏，如下图所示，点击左下角的图标即可显示侧边栏菜单。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240615141217194.png"></p><p>5. 加载过程中会下载很多的依赖，需要保证网络畅通。等待一段时间后，Maven项目加载成功，此时IDEA左侧文件夹目录变成了模块图标，右侧Maven菜单中也存在对应的模块：</p><p><img src="https://source.icode504.com/images/image-20240615141748548.png"></p><h2 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2 数据库操作"></a>3.2 数据库操作</h2><p>1. 打开DBeaver，按照下图所示连接数据库：</p><p><img src="https://source.icode504.com/images/image-20240720215317528.png"></p><p><img src="https://source.icode504.com/images/image-20240713145311611.png"></p><p>2. 鼠标右键选中数据库，鼠标右键点击<strong>新建数据库</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720215815009.png"></p><p>3. 这里我将数据库命名为<code>ruoyi</code>，字符集是<strong>utf8mb4</strong>，排序规则<strong>utf8mb4_0900_ai_ci</strong>，完成后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720215926863.png"></p><p>4. 打开IDEA，在左侧找到sql文件夹，选中<code>ry_xxx.sql</code>，按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>C</kbd>，复制文件所在路径：</p><p><img src="https://source.icode504.com/images/image-20240720221321190.png"></p><p>5. 打开DBeaver，在左侧找到并选中刚刚创建好的数据库，鼠标右键点击<strong>工具</strong>，选择<strong>执行脚本</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720222126116.png"></p><p>6. 按照下图所示完成SQL导入操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">--default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240720223014549.png"></p><p><img src="https://source.icode504.com/images/image-20240720223047365.png"></p><p>7. 导入完成，点击右下角<strong>取消</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720223144515.png"></p><p>8. 打开IDEA，按照下图所示操作找到application-druid.yml配置文件：</p><p><img src="https://source.icode504.com/images/image-20240612102122129.png"></p><p>9. 双击打开application-druid.yml，第九行数据库名称改为ruoyi；第10行用户名填写root即可，第11行密码是MySQL的root用户密码，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240612102449230.png"></p><p>10. 点击右上角的Debug图标，以调试的方式启动：</p><p><img src="https://source.icode504.com/images/image-20240612102553143.png"></p><p>11. 如果控制台出现如下图所示内容，说明若依后端项目启动成功！</p><p><img src="https://source.icode504.com/images/image-20240612102816451.png"></p><h1 id="第四部分-前端项目相关操作"><a href="#第四部分-前端项目相关操作" class="headerlink" title="第四部分 前端项目相关操作"></a>第四部分 前端项目相关操作</h1><p>1. 打开刚刚我们使用Git拉取的文件目录，进入Ruoyi-Vue文件夹，将ruoyi-ui文件夹移动到一个你熟悉的地方，这里为了方便查找，我将这个文件夹移动到上一级目录了：</p><p><img src="https://source.icode504.com/images/image-20240613084307242.png"></p><p>如果需要对这个文件重命名，选中这个文件夹，按<kbd>F2</kbd>键进行重命名操作：</p><p><img src="https://source.icode504.com/images/image-20240613084447853.png"></p><p>2. 进入ruoyi-ui文件夹，点击上方路径，鼠标右键点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613084550571.png"></p><p><img src="https://source.icode504.com/images/image-20240613084653844.png"></p><p>3. 打开VS Code，点击上方的<strong>文件</strong>，再点击<strong>打开文件夹</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613084826130.png"></p><p>4. 将前面复制的路径粘贴到文件路径框中并按一下回车，然后点击右下角的<strong>选择文件夹</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613085257404.png"></p><p>5. 在上方菜单栏找到<strong>终端</strong>，点击<strong>新建终端</strong>：</p><p><img src="https://source.icode504.com/images/image-20240613085414994.png"></p><p>6. 此时VS Code下方弹出一个powershell终端，我们先输入cmd，使用普通的命令行：</p><p><img src="https://source.icode504.com/images/image-20240613085701557.png"></p><p>7. 执行如下命令，安装项目所需要的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i<br></code></pre></td></tr></table></figure><p>安装依赖需要一定时间，请耐心等待（下图中黄色高亮WARN是警告信息，属于正常现象）。</p><p><img src="https://source.icode504.com/images/image-20240615134227545.png"></p><p>如果出现类似下图的提示，就说明项目所需要的模块依赖你已经全部安装完成了！</p><p><img src="https://source.icode504.com/images/image-20240615134436107.png"></p><p>8. 执行如下命令即可启动若依的前端页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure><p>9. 等待一段时间后，前端项目启动成功，此时在VS Code控制台会有提示，此时浏览器会打开登录界面：</p><p><img src="https://source.icode504.com/images/image-20240711140509027.png"></p><p><img src="https://source.icode504.com/images/image-20240711140615742.png"></p><p>10. 用户名是<code>admin</code>，默认密码是<code>admin123</code>，验证码需要观察图片进行数学运算，这里我的验证码计算结果是18：</p><p><img src="https://source.icode504.com/images/image-20240711141053335.png"></p><p>11. 进入主界面，<code>admin</code>用户登录成功！</p><p><img src="https://source.icode504.com/images/image-20240711141205742.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>开源框架</category>
      
      <category>若依</category>
      
      <category>框架配置和启动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开源</tag>
      
      <tag>若依</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio Code安装配置教程（macOS版）</title>
    <link href="/posts/97.html"/>
    <url>/posts/97.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><table><thead><tr><th>软件名称</th><th>安装教程</th><th>说明</th></tr></thead><tbody><tr><td>NDM（Neat Download Manager）</td><td><a href="./24.html">点我查看</a></td><td>推荐使用NDM（Neat Download Manager）下载文件，可以加快下载速度。</td></tr></tbody></table><h1 id="二、下载Visual-Studio-Code（VS-Code）"><a href="#二、下载Visual-Studio-Code（VS-Code）" class="headerlink" title="二、下载Visual Studio Code（VS Code）"></a>二、下载Visual Studio Code（VS Code）</h1><p>1. 打开官网下载地址：<a href="https://code.visualstudio.com/Download">点我查看</a></p><p>2. 根据自己的操作系统，选择下载安装包。这里我使用的是macOS，只需要点击第一个即可：</p><p><img src="https://source.icode504.com/images/image-25df0f629c8a766d25cee7b39c312595.png"></p><p>3. 如果浏览器没有下载，就点击页面中的这个链接下载（浏览器已下载的请忽略这条）：</p><p><img src="https://source.icode504.com/images/image-a323a0e7ad89cb03e55b167162afd809.png"></p><h1 id="三、安装Visual-Studio-Code（VS-Code）"><a href="#三、安装Visual-Studio-Code（VS-Code）" class="headerlink" title="三、安装Visual Studio Code（VS Code）"></a>三、安装Visual Studio Code（VS Code）</h1><p>1. 双击打开安装包，此时会将安装包自动解压到当前安装目录：</p><p><img src="https://source.icode504.com/images/image-9703209f59d6b7eab88e8230ad8f6da1.png"></p><p>2. 将安装程序移动到应用程序中：</p><p><img src="https://source.icode504.com/images/image-52472d528155bec64aa9aab4c8c36fad.gif"></p><p>3. 在启动栏找到VS Code并打开：</p><p><img src="https://source.icode504.com/images/image-e1d2a65c8ea75c17a98d4e8ba03cede9.png"></p><h1 id="四、Visual-Studio-Code（VS-Code）的简单配置"><a href="#四、Visual-Studio-Code（VS-Code）的简单配置" class="headerlink" title="四、Visual Studio Code（VS Code）的简单配置"></a>四、Visual Studio Code（VS Code）的简单配置</h1><h2 id="3-1-页面汉化（可选）"><a href="#3-1-页面汉化（可选）" class="headerlink" title="3.1 页面汉化（可选）"></a>3.1 页面汉化（可选）</h2><p>VS Code默认是英文界面，对于一些英文不太好的小伙伴可能不太友好，好在官方为我们提供了VS Code的汉化包。</p><p>1. 在左侧菜单找到插件商店：</p><p><img src="https://source.icode504.com/images/image-8db8004ea105ba41de9be3e7c7165a04.png"></p><p>2. 在搜索框中搜索<code>Chinese Simplified</code>，搜索结果第一个就是我们要安装插件，点击<strong>Install</strong>安装插件：</p><p><img src="https://source.icode504.com/images/image-20240131170733135.png"></p><p>3. 安装完成后，右下角会弹出一个窗口提示，点击<code>Change Language and Restart</code>，重新加载：</p><p><img src="https://source.icode504.com/images/image-20240131170831058.png"></p><p>4. 汉化成功！页面如下图所示：</p><p><img src="https://source.icode504.com/images/image-09e7d5fd36a440cead40287328cf8a9f.png"></p><h2 id="3-2-开启文件自动保存（可选）"><a href="#3-2-开启文件自动保存（可选）" class="headerlink" title="3.2 开启文件自动保存（可选）"></a>3.2 开启文件自动保存（可选）</h2><p>在VS Code中写代码，默认是需要按<kbd>⌘</kbd>+<kbd>S</kbd>键保存文件。但是如果出现意外状况（例如电脑突然断电），你编写的代码如果没保存，绝对能搞炸你的心态。因此，我们需要开启文件自动保存功能。</p><p>1. 点击左下角的齿轮（或者按快捷键<kbd>⌘</kbd>和<kbd>,</kbd>），进入设置：</p><p><img src="https://source.icode504.com/images/image-5e4e805e711f55df96f117fb6439a96e.png"></p><p>2. 在上方搜索框中输入<code>auto save</code>，常用设置中改为<code>afterDelay</code>：</p><p><img src="https://source.icode504.com/images/image-a4d562736ecc94f7ce97aff10e9a8cec.png"></p><p>3. 左侧菜单选择<strong>文件</strong>，将保存方式更改成<strong>afterDelay</strong>，保存时间间隔自定义（以毫秒为单位）：</p><p><img src="https://source.icode504.com/images/image-fc8288ff3d9bbaf9455d6f6dae3e872e.png"></p><h2 id="3-3-主题风格配置（可选）"><a href="#3-3-主题风格配置（可选）" class="headerlink" title="3.3 主题风格配置（可选）"></a>3.3 主题风格配置（可选）</h2><p>VS Code支持多种主题风格配置。例如：暗黑风格、纯白风格等等。</p><blockquote><p>说明：如果系统自带的风格都不符合，可以到插件商店自行下载其他风格的主题。</p></blockquote><p>1. 点击左下角的齿轮，选择主题：</p><p><img src="https://source.icode504.com/images/image-a8358af60ea73f89451f0da1b930bc3c.png"></p><p>2. 此时浏览器上方会弹出系统自带的颜色主题。2024是龙年，也是我的本命年，这里我选个红色，图个喜庆！</p><p><img src="https://source.icode504.com/images/image-5fedf3568adfc2705308ad5497846200.png"></p><p>3. 修改后的颜色风格如下图所示：</p><p><img src="https://source.icode504.com/images/image-c5cdc0b3625a070d71d19cfaed4be7f8.png"></p><h1 id="五、卸载Visual-Studio-Code（VS-Code）（可选）"><a href="#五、卸载Visual-Studio-Code（VS-Code）（可选）" class="headerlink" title="五、卸载Visual Studio Code（VS Code）（可选）"></a>五、卸载Visual Studio Code（VS Code）（可选）</h1><p>打开访达，点击左侧的应用程序，将Visual Studio Code安装程序移动到废纸篓即可完成卸载：</p><p><img src="https://source.icode504.com/images/image-b11c13868c1330ab7036b476181ead79.gif"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装和配置教程（macOS版）</title>
    <link href="/posts/96.html"/>
    <url>/posts/96.html</url>
    
    <content type="html"><![CDATA[<p>以下提供两种方式安装Maven，任选一种方式安装即可：</p><h1 id="方式一：通过SDKMAN-安装Maven"><a href="#方式一：通过SDKMAN-安装Maven" class="headerlink" title="方式一：通过SDKMAN!安装Maven"></a>方式一：通过SDKMAN!安装Maven</h1><h2 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h2><p>请确保电脑上已经安装了SDKMAN!和JDK 8，需要安装的小伙伴点击下方链接查看安装教程：</p><table><thead><tr><th align="center">SDKMAN!</th><th align="center">JDK 8</th></tr></thead><tbody><tr><td align="center"><a href="./108.html">点我查看</a></td><td align="center"><a href="./78.html">点我查看</a></td></tr></tbody></table><h2 id="二、安装Maven"><a href="#二、安装Maven" class="headerlink" title="二、安装Maven"></a>二、安装Maven</h2><p>1. 执行如下命令查看可以安装的Maven版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk list maven<br></code></pre></td></tr></table></figure><p>下图中提供了各个版本的Maven，翻到页面最下方，这里我安装的3.6.3版本的Maven，按照下图中选中复制版本号：</p><blockquote><p>提示：</p><ul><li>上、下键可以翻页，或者按<kbd>PageUp</kbd>或<kbd>PageDown</kbd>翻页，按<kbd>Q</kbd>键退出。</li><li>推荐安装Maven 3.5及以上的版本。截止至2024年9月30日，Maven 4.0是测试版本，可能会有各种各样的bug，并且Maven 4.0版本需要安装JDK 17及以上的版本。</li></ul></blockquote><p><img src="https://source.icode504.com/images/image-423e64fcdd8975242892da71620e5251.png"></p><p>2. 执行如下命令，安装3.6.3版本的Maven：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk install maven 3.6.3<br></code></pre></td></tr></table></figure><p>3. 安装完成，执行如下命令查看Maven版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-5289d84284e381ba8b1ea979259adc6b.png"></p><h2 id="三、配置Maven"><a href="#三、配置Maven" class="headerlink" title="三、配置Maven"></a>三、配置Maven</h2><p>前面我们已经安装好Maven，但是我们在以后导入依赖的时候默认使用的是Maven的中央仓库，而中央仓库是国外网站，下载速度比较慢。因此我们需要将Maven下载源设置成国内镜像仓库，提高导入依赖的速度。以下是下载源配置教程。</p><p>1. 这里我在Home目录中专门创建一个文件夹来存放Maven依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/maven/repository<br></code></pre></td></tr></table></figure><p>2. 使用<code>vim</code>命令编辑Maven配置文件<code>settings.xml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim <span class="hljs-variable">$HOME</span>/.sdkman/maven/3.6.3/conf/settings.xml<br></code></pre></td></tr></table></figure><p>3. 执行如下命令并回车，开启行号显示（命令在左下角显示）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br></code></pre></td></tr></table></figure><p>4. 复制下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5. 按<kbd>i</kbd>进入编辑模式，在第246行末尾换行，将上一步代码按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴到247行中，效果如下图：</p><p><img src="https://source.icode504.com/images/image-387847aa4cee1954319060f2c4c6a3d6.png"></p><p>此时我们配好了Maven的全局JDK版本，使用的是JDK 8版本。</p><p>6. 复制下面的代码：</p><blockquote><p>这段代码的含义是将Maven下载依赖源更改为国内的阿里云，可以大幅加快下载速度。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7. 在第158行末尾处换行，粘贴上一步代码，效果如下图：</p><p><img src="https://source.icode504.com/images/image-bf7270b36125eda7bd67ed5aba4a883d.png"></p><p>8. 跳转到第55行，创建一个<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，并在二者中间填写第一步你创建的Maven依赖路径，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-2bea82a22cd020bdc3b3abfeb0701d96.png"></p><p>9. 至此，Maven配置完成，按<kbd>Esc</kbd>键退出编辑模式，按<code>:wq</code>保存并退出。</p><h1 id="方式二：正常安装Maven"><a href="#方式二：正常安装Maven" class="headerlink" title="方式二：正常安装Maven"></a>方式二：正常安装Maven</h1><h2 id="一、安装前检查-1"><a href="#一、安装前检查-1" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h2><p>1. 检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：<a href="./78.html">点我查看</a></p><p>2. 如果你已经安装了JDK，打开终端，输入<code>java -version</code>，按一下回车，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功</p><p><img src="https://source.icode504.com/images/image-20240714133339950.png"></p><h2 id="二、下载Maven"><a href="#二、下载Maven" class="headerlink" title="二、下载Maven"></a>二、下载Maven</h2><p>以下两种方式二选一：</p><h3 id="方式一：网盘下载（强烈推荐，下载速度较快！）"><a href="#方式一：网盘下载（强烈推荐，下载速度较快！）" class="headerlink" title="方式一：网盘下载（强烈推荐，下载速度较快！）"></a>方式一：网盘下载（强烈推荐，下载速度较快！）</h3><p>打开此链接：<a href="https://icode504.lanzn.com/b014acbmb">点击下载，密码:1024</a>，选择任意一个文件下载即可，这里我选择的是3.6.3版本的：</p><p><img src="https://source.icode504.com/images/image-887542eac528283182046d30dda58225.png"></p><h3 id="方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）"><a href="#方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）" class="headerlink" title="方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）"></a>方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）</h3><p>1. 点击进入官网下载链接：<a href="https://archive.apache.org/dist/maven/maven-3/">点击进入</a>，会出现如下界面</p><p><img src="https://source.icode504.com/images/image-20240714232914206.png"></p><p>2. 选择一个，点击进入，这里我以3.6.3版本的为例，按下图所示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240714233055613.png"></p><blockquote><p>说明：source目录下的文件是Maven的源码文件，如果有查看的源码的小伙伴，也可以点击进入下载，这里就不过多赘述了。</p></blockquote><p>3. 使用macOS的小伙伴，点击<code>.tar.gz</code>文件下载（如下图）：</p><p><img src="https://source.icode504.com/images/image-20240714233304292.png"></p><h2 id="三、安装并配置Maven环境变量"><a href="#三、安装并配置Maven环境变量" class="headerlink" title="三、安装并配置Maven环境变量"></a>三、安装并配置Maven环境变量</h2><p>1. 打开终端，将下载好的安装包（这里我下载到了<code>~/Downloads/</code>目录）移动到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> Downloads/apache-maven-3.6.3-bin.tar.gz /usr/local<br></code></pre></td></tr></table></figure><p>使用<code>sudo</code>命令可能需要输入用户密码。</p><p>2. 切换到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br></code></pre></td></tr></table></figure><p>3. 解压当前的压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> apache-maven-3.6.3 &amp;&amp; sudo tar -zxvf apache-maven-3.6.3-bin.tar.gz <br></code></pre></td></tr></table></figure><p>4. 创建一个软连接（类似Windows快捷方式），方便我们后续快速切换目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s apache-maven-3.6.3 maven<br></code></pre></td></tr></table></figure><p>5. 切换到安装目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> maven<br></code></pre></td></tr></table></figure><p>6. 在当前目录下创建一个<code>maven_env.sh</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim maven_env.sh<br></code></pre></td></tr></table></figure><p>7. 复制如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#MAVEN_HOME  </span><br>MAVEN_HOME=/usr/local/maven<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br><span class="hljs-built_in">export</span> PATH MAVEN_HOME<br></code></pre></td></tr></table></figure><p>8. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴上一步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-606e82bbcffdac4231903161a9b43217.png"></p><p>9. 完成后按一下Esc键，然后输入<code>:wq</code>保存并退出。</p><p>10. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> maven_env.sh<br></code></pre></td></tr></table></figure><p>11. 执行如下命令即可查看当前Maven版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-004121af09f9a65d3de13a0e90612d44.png"></p><h2 id="四、配置Maven"><a href="#四、配置Maven" class="headerlink" title="四、配置Maven"></a>四、配置Maven</h2><p>前面我们已经配置好Maven，但是我们在以后导入依赖的时候默认使用的是Maven的中央仓库，而中央仓库是国外网站，下载速度比较慢。因此我们需要将Maven下载源设置成国内镜像仓库，提高导入依赖的速度。以下是下载源配置教程。</p><p>1. 这里我在Maven目录中专门创建一个文件夹来存放Maven依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /usr/local/maven/repository<br></code></pre></td></tr></table></figure><p>2. 使用<code>vim</code>命令编辑Maven配置文件<code>settings.xml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /usr/local/maven/conf/settings.xml<br></code></pre></td></tr></table></figure><p>3. 执行如下命令并回车，开启行号显示（命令在左下角显示）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br></code></pre></td></tr></table></figure><p>4. 复制下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5. 按<kbd>i</kbd>进入编辑模式，在第246行末尾换行，将上一步代码按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴到247行中，效果如下图：</p><p><img src="https://source.icode504.com/images/image-387847aa4cee1954319060f2c4c6a3d6.png"></p><p>此时我们配好了Maven的全局JDK版本，使用的是JDK 8版本。</p><p>6. 复制下面的代码：</p><blockquote><p>这段代码的含义是将Maven下载依赖源更改为国内的阿里云，可以大幅加快下载速度。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7. 在第158行末尾处换行，粘贴上一步代码，效果如下图：</p><p><img src="https://source.icode504.com/images/image-bf7270b36125eda7bd67ed5aba4a883d.png"></p><p>8. 跳转到第55行，创建一个<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，并在二者中间填写第一步你创建的Maven依赖路径，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-d513feb5d6774c5cb6cdfe07a9328ee9.png"></p><p>9. 至此，Maven配置完成，按<kbd>Esc</kbd>键退出编辑模式，按<code>:wq</code>保存并退出。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>项目构建工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua安装配置教程（Windows版）</title>
    <link href="/posts/95.html"/>
    <url>/posts/95.html</url>
    
    <content type="html"><![CDATA[<p>Lua是一种轻量级、嵌入式的编程语言，最初在巴西开发。它的设计目标是简单易用，特别适合嵌入到其他软件中，作为脚本语言使用。Lua语法简洁，执行速度快，广泛应用于游戏开发、配置管理、数据处理等场景。因为它小巧且灵活，所以特别适合需要高效、易于集成的项目。</p><p>以下是Windows环境下Lua安装和配置教程：</p><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 推荐安装如下软件：</p><table><thead><tr><th>软件名称</th><th>安装教程</th><th>说明</th></tr></thead><tbody><tr><td>NDM（Neat Download Manager）</td><td><a href="./24.html">点我查看</a></td><td>推荐使用NDM（Neat Download Manager）下载文件，可以加快下载速度。</td></tr></tbody></table><p>2. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>进入命令行界面，执行如下命令查看当前操作系统信息：</p><p>这里我的电脑是Windows操作系统，使用的是x64指令集：</p><p><img src="https://source.icode504.com/images/image-42448e12a41218868a6c13ecb9bb4fac.png"></p><h1 id="二、下载Lua"><a href="#二、下载Lua" class="headerlink" title="二、下载Lua"></a>二、下载Lua</h1><p>1. 点击右侧链接进入Lua官网下载页：<a href="https://luabinaries.sourceforge.net/download.html">点我查看</a></p><p>2. 这里我下载的是5.4.2版本的安装包，如下图所示：</p><p><img src="https://source.icode504.com/images/image-61659c1a5b1556130b377625c9fb639c.png"></p><h1 id="三、安装Lua并配置环境变量"><a href="#三、安装Lua并配置环境变量" class="headerlink" title="三、安装Lua并配置环境变量"></a>三、安装Lua并配置环境变量</h1><p>1. 将下载好的安装包解压到你熟悉的位置，推荐解压到C盘外，且路径是英文路径，这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-54b05d14bbb77e1d398394f7a8884f76.png"></p><p>2. 为了方便演示，除了lua54.dll以外，这里我将其他文件名中包含54的全部改掉，效果如下图：</p><p><img src="https://source.icode504.com/images/image-3c32bd19c78b76de3688c98351d732ed.png"></p><p>3. 选中上方路径，鼠标右键点击复制：</p><p><img src="https://source.icode504.com/images/image-755ca9150bcb8f2b4c7c7ee127211d81.png"></p><p>4. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>5. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th>Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>6. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>7. 在下方系统变量中，找到<strong>Path</strong>，双击进入：</p><p><img src="https://source.icode504.com/images/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-a3a9a29b004c9309979ed48d201ac6f8.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定：</p><p><img src="https://source.icode504.com/images/image-20230314140351859.png"></p><p>10. 在命令行输入如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">lua <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><p>出现如下提示就说明上述环境变量配置生效：</p><p><img src="https://source.icode504.com/images/image-7afd42b33f620107f00daa61fc0aa99e.png"></p><h1 id="四、VS-Code编写并运行Lua"><a href="#四、VS-Code编写并运行Lua" class="headerlink" title="四、VS Code编写并运行Lua"></a>四、VS Code编写并运行Lua</h1><p>需要安装VS Code的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/38.html">点我查看</a></p><p>1. 打开VS Code，在左侧找到插件商店，依次安装如下三个插件：Lua、Lua Debug、Code Runner</p><p><img src="https://source.icode504.com/images/image-f8397fedb6746ca655dde38f5e1dc75f.png"></p><p><img src="https://source.icode504.com/images/image-74f66d8a6a870f94da3e0a8863ebdf6c.png"></p><p><img src="https://source.icode504.com/images/image-c27df1a3798c01a6207f51d84e447d02.png"></p><p>2. 安装完成，找到Code Runner，点击齿轮图标，选择<strong>扩展设置</strong>：</p><p><img src="https://source.icode504.com/images/image-a25e5f8ea2e6a1fb46a1aa46e7053a7f.png"></p><p>3. 进入扩展设置页面，点击下方任意一个<strong>在settings.json中编辑</strong>：</p><p><img src="https://source.icode504.com/images/image-15abf67fb4f714111f4368a76ae32f97.png"></p><p>4. 在<code>&quot;code-runner.executorMap&quot;</code>中找到Lua，把Lua安装目录和执行文件名粘贴到此处，效果图如下：</p><p><img src="https://source.icode504.com/images/image-7636c3f81ea2cc566f49aa9194e26aa7.png"></p><p>5. 按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存配置文件！</p><p>6. 找一个你经常写代码的位置，这里我选择在E盘编写Lua代码：</p><p><img src="https://source.icode504.com/images/image-1d6b4f7c59783d513524fbc0a483a88b.png"></p><p>7. 在左侧新建一个Lua文件（文件后缀名为.lua）：</p><p><img src="https://source.icode504.com/images/image-07aa672a4f079ca899924e026ece869a.png"></p><p>8. 编写一段测试代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教！&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>9. 编写完成后，按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存，点击右上角的运行按钮，在下方控制台就可以看到运行结果了：</p><p><img src="https://source.icode504.com/images/image-62340d09e6530af321b2ec7de2f884a5.png"></p><h1 id="五、Intellij-IDEA编写并运行Lua"><a href="#五、Intellij-IDEA编写并运行Lua" class="headerlink" title="五、Intellij IDEA编写并运行Lua"></a>五、Intellij IDEA编写并运行Lua</h1><p>需要安装Intellij IDEA的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/10.html">点我查看</a></p><p>1. 按<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>键，在设置中找到插件商店：</p><p><img src="https://source.icode504.com/images/image-c30d6f78c336925683957aa257eafdb4.png"></p><p>2. 在搜索框中搜索EmmyLua，第一个就是我们要安装的插件，点击<strong>Install</strong>安装插件：</p><p><img src="https://source.icode504.com/images/image-1e7d5a1a6165cc2599157ab0cd0eadc7.png"></p><p>3. 安装完成，点击<strong>Restart IDE</strong>，重启IDEA。</p><p>4. 按照下图操作创建项目：</p><p><img src="https://source.icode504.com/images/image-3fe20ba6fb9a6131302eb1d6fc1688b3.png"></p><p>5. 在新建项目页面的左侧选中Lua项目，然后点击右下角<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-e60051229e4914b1fab153694061d6e9.png"></p><p>6. 自定义项目名称和项目的存储位置，完成后点击<strong>Finish</strong>：</p><p><img src="https://source.icode504.com/images/image-b02dcd74af9a16c0e532030f1a8b212e.png"></p><p>7. 在左侧项目目录中找到src文件夹，鼠标右键选择<strong>New</strong>，然后选择<strong>New Lua File</strong>：</p><p><img src="https://source.icode504.com/images/image-6e8d3d9e19f06f67d8f995c8d16aa7a9.png"></p><p>8. 自定义Lua文件，这里我命名为<code>MyFirstLuaProgram</code>，完成后按一下回车<kbd>Enter</kbd>：</p><p><img src="https://source.icode504.com/images/image-04a52472d3dcc614f20260190232c341.png"></p><p>9. 这里我写了一段测试代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教！&quot;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>10. 运行Lua文件：鼠标右键点击<code>Run MyFirstLuaProgram</code>（或者按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>F10</kbd>）</p><p><img src="https://source.icode504.com/images/image-5acc71c2767fdd023775ca97b7790d17.png"></p><p>11. 此时控制台会出现报错信息，这是因为我们还没有配置Lua执行文件：</p><p><img src="https://source.icode504.com/images/image-8491104970c478e077eff482892084f0.png"></p><p>12. 找到右上角的运行配置，选择<strong>Edit Configurations</strong>：</p><p><img src="https://source.icode504.com/images/image-d9878de3de654c4b47f61d80b6394f5a.png"></p><p>13. 进入运行配置页面，找到Program，点击右侧的文件夹：</p><p><img src="https://source.icode504.com/images/image-f4bd395e170210b981d58f62ffd0bc46.png"></p><p>14. 找到Lua的安装位置并选中<code>lua.exe</code>，完成后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-bca143b8c339a34aea6408556cc8e346.png"></p><p>15. 点击OK，完成配置：</p><p><img src="https://source.icode504.com/images/image-05eb5836fb0af80446840b8dd8a397bc.png"></p><p>16. 再次运行这个文件，此时我们就可以看到输出结果了：</p><p><img src="https://source.icode504.com/images/image-af6f125a895349c73d842e0777bb4395.png"></p><h1 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h1><p>1. VS Code配置Lua环境：<a href="https://blog.csdn.net/qq_44697754/article/details/133103543">https://blog.csdn.net/qq_44697754/article/details/133103543</a></p><p>2. 使用IDEA编写lua脚本并运行：<a href="https://blog.csdn.net/qq_53253335/article/details/137603361">https://blog.csdn.net/qq_53253335/article/details/137603361</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux CentOS Stream 9安装教程</title>
    <link href="/posts/94.html"/>
    <url>/posts/94.html</url>
    
    <content type="html"><![CDATA[<p>CentOS是一种基于Linux的免费、开源的操作系统，它是Red Hat Enterprise Linux（RHEL）源代码的重建版本。CentOS致力于提供稳定、可靠的服务器操作系统，广泛应用于企业级服务器和Web服务器。它具有强大的安全性和稳定性，并且提供长期支持（LTS）版本，使其成为企业级应用程序和服务的首选。CentOS还拥有庞大的软件包仓库，用户可以方便地安装和管理各种应用程序和工具。</p><p>接下来为大家介绍一下CentOS 9 Stream的安装和配置：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑中已经安装了VMware和Electerm，如果没有安装的小伙伴可以点击下面的链接查看安装教程：</p><table><thead><tr><th>需要安装的软件名称</th><th>链接</th></tr></thead><tbody><tr><td>虚拟机软件VMware Workstation</td><td><a href="./41.html">点我查看</a></td></tr><tr><td>远程连接软件Electerm</td><td><a href="./47.html">点我查看</a></td></tr><tr><td>下载器Neat Download Manager（推荐安装，可以加快下载速度）</td><td><a href="./24.html">点我查看</a></td></tr></tbody></table><p>建议电脑预留50G的存储空间。</p><h1 id="二、下载CentOS镜像"><a href="#二、下载CentOS镜像" class="headerlink" title="二、下载CentOS镜像"></a>二、下载CentOS镜像</h1><p>1. 点击进入官网的下载页面：<a href="https://www.centos.org/download/">点我查看</a></p><table><thead><tr><th align="center">x86_64</th><th align="center">arm64</th></tr></thead><tbody><tr><td align="center"><a href="https://mirrors.tuna.tsinghua.edu.cn/centos-stream/9-stream/BaseOS/x86_64/iso/">点我查看</a></td><td align="center"><a href="https://mirrors.tuna.tsinghua.edu.cn/centos-stream/9-stream/BaseOS/aarch64/iso/">点我查看</a></td></tr></tbody></table><p>2. 根据自己电脑所属的指令集下载iso镜像：</p><table><thead><tr><th align="center">x86_64</th><th>arm64</th></tr></thead><tbody><tr><td align="center"><img src="https://source.icode504.com/images/image-471325a086136e46ee7c5f10e40fcefa.png"></td><td><img src="https://source.icode504.com/images/image-d136b4a153cbfcdad9e01b5fcb39eb25.png"></td></tr></tbody></table><p>3. 安装包文件大小有9~10G，使用NDM下载需要15~20分钟，请耐心等待。</p><h1 id="三、创建CentOS虚拟机"><a href="#三、创建CentOS虚拟机" class="headerlink" title="三、创建CentOS虚拟机"></a>三、创建CentOS虚拟机</h1><p>1. 打开VMware，按<kbd>Ctrl</kbd>和<kbd>N</kbd>键，新建虚拟机。</p><p>2. 进入新建虚拟机向导以后，选择第二个<strong>自定义(高级)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213123956847.png"></p><p>3. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213124330853.png"></p><p>4. 安装客户机操作系统选择<strong>稍后安装操作系统</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134527045.png"></p><p>5. 客户机操作系统选择<strong>Linux</strong>，版本选择<strong>CentOS 8 64位</strong>（截止至2024年8月，目前VMWare并没有提供最新的CentOS 9版本），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-24aacb9a76fa1fdfbd0464c8cde27d5f.png"></p><p>6. 自定义虚拟机名称和安装位置。安装位置建议安装在一个空间比较大的盘，这里我安装在了J盘：</p><p><img src="https://source.icode504.com/images/image-20240213135011029.png"></p><p><img src="https://source.icode504.com/images/image-7161e5a6220102ffd2e556852012b89b.png"></p><p><img src="https://source.icode504.com/images/image-338358b4bd721cd5269b04fcc09533ea.png"></p><p>7. 处理器配置时处理器数量和内核数量不能超过电脑自身的数量，否则虚拟机无法运行。</p><p><img src="https://source.icode504.com/images/image-20240213135358478.png"></p><p>如何检查电脑本机的CPU信息：按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，即可查看到CPU信息：</p><p><img src="https://source.icode504.com/images/image-20240213135636008.png"></p><p>8. 设置虚拟机内存，内存大小按照VMware的要求设置在一定范围之内。这里我设置内存大小为2GB（2048M），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153034658.png"></p><p>9. 网络类型选择<strong>网络地址转换(NAT)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153239112.png"></p><p>10. I&#x2F;O控制器类型按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153335558.png"></p><p>11. 虚拟磁盘类型按照默认选择即可，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-68636df3e9dfd9185b2c31d8b16cf87f.png"></p><p>12. 选择磁盘按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153601825.png"></p><p>13. 最大磁盘大小建议设置在20GB及以上，这里我设置了50GB，磁盘分配按照默认勾选即可。完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153741099.png"></p><p>14. 指定磁盘文件位置可以自定义。这里需要设置的小伙伴点击<strong>浏览</strong>可以更改。不需要更改的小伙伴点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-41dfb400add6042e19a483670c1f1512.png"></p><p>15. 点击<strong>完成</strong>，虚拟机创建完成：</p><p><img src="https://source.icode504.com/images/image-e6b1949c2aee0161542061c4cc812c36.png"></p><p>16. 点击<strong>编辑虚拟机设置</strong>：</p><p><img src="https://source.icode504.com/images/image-d85fcbc47360f95a90b0239e1f09260d.png"></p><p>17. 进入虚拟机设置后，左侧设备选择<strong>CD&#x2F;DVD</strong>，设备状态勾选<strong>启动时连接</strong>，连接选择<strong>使用ISO映像文件</strong>，点击<strong>浏览</strong>：</p><p><img src="https://source.icode504.com/images/image-940945e57f14fc10a9cdbf501bc75bcc.png"></p><p>18. 找到前面我们下载的CentOS镜像并选中，完成后点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-7fefd899917c9190862e49f966f2e99d.png"></p><p>19. 镜像配置成功，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-4057504488b9e4bde56bea204499cfc9.png"></p><h1 id="四、开启虚拟化"><a href="#四、开启虚拟化" class="headerlink" title="四、开启虚拟化"></a>四、开启虚拟化</h1><p>1. 开启刚刚创建好的虚拟机，此时VMware会弹出一个错误信息：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p><img src="https://source.icode504.com/images/image-20240227113330696.png"></p><p>2. 此时按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，虚拟化并未开启：</p><p><img src="https://source.icode504.com/images/image-20240227113646198.png"></p><p>3. 重新启动电脑，具体进入BIOS可以根据自身电脑品牌型号进入。这里我的电脑使用的是华硕，开机过程中一直按<kbd>F2</kbd>键即可进入BIOS，再点击右下角<strong>Advanced Mode</strong>，进入高级模式：</p><p><img src="https://source.icode504.com/images/image-20240227133747848.png"></p><p>4. 按照下图所示操作，点击<strong>高级</strong>，将<strong>Intel Virtualization Technology</strong>配置项开启：</p><p><img src="https://source.icode504.com/images/image-20240227134148071.png"></p><p>5. 按<kbd>F10</kbd>键保存上述配置并重启：</p><p><img src="https://source.icode504.com/images/image-20240227134402192.png"></p><p>6. 按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，左上角找到<strong>性能</strong>，发现虚拟化成功开启：</p><p><img src="https://source.icode504.com/images/image-20240227114535913.png"></p><h1 id="五、安装CentOS操作系统"><a href="#五、安装CentOS操作系统" class="headerlink" title="五、安装CentOS操作系统"></a>五、安装CentOS操作系统</h1><p>1. 开启刚刚创建好的虚拟机：</p><p><img src="https://source.icode504.com/images/image-5b80b3b4af1a2aae180460e8cf482b94.png"></p><p>2. 进入安装界面，选择<strong>Install CentOS Stream 9</strong>并按回车键：</p><p><img src="https://source.icode504.com/images/image-762728f09151dce75621e335c2692424.png"></p><p>3. 安装语言选择<strong>中文</strong>，<strong>简体中文（中国）</strong>，完成后点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-e6f03fd2ba39347ece0256ca9d704450.png"></p><p>4. 在右上角系统中，点击<strong>安装位置</strong>：</p><p><img src="https://source.icode504.com/images/image-47f98aae79d5d379f9038122cedd176d.png"></p><p>5. 进入安装目标位置，点击左上角<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-deba2ed893e1b8b8de5f4ae083e74f97.png"></p><p>6. 点击<strong>网络和主机名</strong>：</p><p><img src="https://source.icode504.com/images/image-f72488576dc3eca3e020e0f9c0a23b86.png"></p><p>7. 开启<strong>以太网（ens160）</strong>，确保虚拟机能连接网络。然后点击<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-6c71221cdd36e34149862ca67808bc72.png"></p><p>8. 点击<strong>软件选择</strong>：</p><p><img src="https://source.icode504.com/images/image-d32a9f17f7e04e5a1f5b4ada4069dc16.png"></p><p>9. 选择<strong>Minimal Install</strong>（最小安装），然后点击左上角<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-823eee7f2be7e0a7dd9146c947fd4464.png"></p><p>10. 点击为最高权限用户root设置密码：</p><p><img src="https://source.icode504.com/images/image-36c329335fc3c1c0106135751c16bcd5.png"></p><p>11. 为root用户设置密码，按照下图所示操作即可：</p><p><img src="https://source.icode504.com/images/image-4d4ada39a542c9777ffcdb3fedfd985e.png"></p><p>12. 点击<strong>开始安装</strong>：</p><p><img src="https://source.icode504.com/images/image-5fa8e6968fe08e83003f58dcff993088.png"></p><p>13. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-3e706498a027bbaae95c3404c3d1ca9a.png"></p><p>14. 安装完成，点击<strong>重启系统</strong>：</p><p><img src="https://source.icode504.com/images/image-5c7f129af39b30b2a95bb902b16323fc.png"></p><p>15. 重启后，进入CentOS命令行界面，用户名输入 <code>root</code>，输入前面我们设置的密码（密码不会在命令行中显示），完成后按回车：</p><p><img src="https://source.icode504.com/images/image-0dd7d90f94e4a6fb2679ebc73de36c8c.png"></p><p>16. CentOS登录成功：</p><p><img src="https://source.icode504.com/images/image-a34d2af1515182011f9a2fd4bdb046b2.png"></p><h1 id="六、使用SSH工具（Electerm）远程连接CentOS"><a href="#六、使用SSH工具（Electerm）远程连接CentOS" class="headerlink" title="六、使用SSH工具（Electerm）远程连接CentOS"></a>六、使用SSH工具（Electerm）远程连接CentOS</h1><p>1. 输入下面的命令，查看虚拟机的ip地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-5c8dbf3389976dd57196205ea7a3614f.png"></p><p>2. 打开Electerm，点击左侧的书签：</p><p><img src="https://source.icode504.com/images/image-20240213171858078.png"></p><p>3. 按照下图操作填写连接信息：</p><p><img src="https://source.icode504.com/images/image-e402a86783e27de1aabe5eb685e779be.png"></p><p>4. 向下找，点击<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221134731866.png"></p><p>等待一段时间后，如果上方出现一个 <code>connection is ok</code>，说明前面填写内容没有问题：</p><p><img src="https://source.icode504.com/images/image-20240221134841255.png"></p><p>如果出现的时 <code>connection is failed</code>，说明填写的内容有问题，需要更改后再次测试连接。</p><p><img src="https://source.icode504.com/images/image-20240221135000261.png"></p><p>5. 测试连接成功后，点击<strong>保存并连接</strong>后，此时我们就可以在Electerm中登录root用户并执行命令了：</p><p><img src="https://source.icode504.com/images/image-20240221135129497.png"></p><p><img src="https://source.icode504.com/images/image-f81938d58cc5b9ee0d6861767eaaea71.png"></p>]]></content>
    
    
    <categories>
      
      <category>系统安装</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>CentOS Stream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之有序集合类型Sorted Set（Zset）</title>
    <link href="/posts/93.html"/>
    <url>/posts/93.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis有序集合类型介绍"><a href="#一、Redis有序集合类型介绍" class="headerlink" title="一、Redis有序集合类型介绍"></a>一、Redis有序集合类型介绍</h1><p>Redis有序集合（Sorted Set，也称作Zset）<strong>由多个带有分数（score）的成员（member）</strong>组成。</p><p>和无序集合不同是，有序集合种的成员可以根据自己的分数按照特定规则排序。如果在有序集合中多个成员的分数相同，那么成员会按照字典序排列。</p><blockquote><p>字典序（Lexicographical Order）是一种常用排序方式，类似于现实生活中英文字典的单词排序。在这个顺序中，字符串或其他序列按照字符或元素逐个比较排列。</p><p>规则：</p><ol><li>逐个字符比较：从当前字符串（序列）第一个字符开始，按照ASCII或Unicode值进行比较，较小的字符排在前面；</li><li>比较长度：如果前面的字符相同，比较下一个字符，直到某一个字符不同或者达到当前字符串（序列）末尾。如果一个字符串（序列）是另一个字符串（序列）的前缀，那么较短的序列排在前面；</li></ol><p>案例：</p><ol><li>字符串apple和orange比较时，首字母 <code>a</code>比 <code>o</code>小，因此apple排在orange前面；</li><li>字符串iCode504与iCode504abc比较时，由于iCode504比iCode504abc短，并且iCode504是iCode504abc的前缀，因此iCode504排在iCode504abc前面；</li></ol><p>字典序通常用于字符串排列，生成组合、排列等场景。</p></blockquote><p>有序集合融合了无序集合（Set）和哈希（Hash）类型的特性：</p><ul><li>有序集合中的每一个成员都是独一无二的（无序集合的特点）；</li><li>一个成员对应一个分数（类似Hash类型种field-value）</li></ul><p>下图展示了有序集合的存储结构并对其特点做更详细的说明：</p><p><img src="https://source.icode504.com/images/image-c1c78df81c4e7286d33a88260c744f61.png"></p><p>有序集合主要体现在如下应用场景：</p><p>1. 微博热搜展示前50条词条：一个热搜词条对应Zset的成员，热度值对应当前成员的分数值：</p><p><img src="https://source.icode504.com/images/image-8f1bacbf6e20569ed83eb6a6498a5f88.png"></p><p>2. 查看当前商家热销榜：商品名称作为当前Zset的成员，销量作为当前成员的分数值：</p><p><img src="https://source.icode504.com/images/image-a0f85e2446e3b363007feb9a8886ca46.png"></p><h1 id="二、Redis有序集合常用类型"><a href="#二、Redis有序集合常用类型" class="headerlink" title="二、Redis有序集合常用类型"></a>二、Redis有序集合常用类型</h1><h2 id="2-1-添加操作"><a href="#2-1-添加操作" class="headerlink" title="2.1 添加操作"></a>2.1 添加操作</h2><p>使用ZADD命令，完整命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member ...]<br></code></pre></td></tr></table></figure><p>方括号中的内容是命令选项（按照实际情况选择）。以下是关于ZADD操作的详细说明：</p><p>1. 向有序集合中添加一个或多个成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key score member [score member ...]<br></code></pre></td></tr></table></figure><p>默认返回的是成功向有序集合中添加的成员个数</p><p><img src="https://source.icode504.com/images/image-952d74563de1cf523327b90b925dc323.png"></p><p>2. 如果当前集合某个成员不存在，则执行添加操作，否则不执行添加操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key NX score member [score member ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-abc6beac5bb27a64be57ec163a5344f2.png"></p><p>3. 如果当前集合中存在某个成员，则执行分数修改操作，不会新增成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key XX score member [score member ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-ccfad82f0bb48b2a7aa4cc3b46f047d0.png"></p><p>4. 如果新分数比当前集合中成员对应分数小，执行更新操作，否则不执行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key LT score member [score member ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-ca5354364a1873ba7079579b483054c6.png"></p><p>5. 如果新分数比当前集合中成员对应分数大，执行更新操作，否则不执行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key GT score member [score member ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-adfd044012de3f74ec7a873eb390eb62.png"></p><p>注意：ZADD命令中GT、LT和NX选项具有互斥性。在使用ZADD命令时，你只能使用三个中的一个。</p><p>6. 将指定的分数与成员的当前分数相加。如果成员不存在，则相当于添加成员，并将初始分数设置为给定分数。INCR 选项只能与单个 <code>score</code> 和 <code>member</code> 配合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key INCR score member<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-d801e7ca391348c9b35b1f73b8cd6587.png"></p><p>7. 返回受影响的成员数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZADD key CH score member<br></code></pre></td></tr></table></figure><p>其中CH是changed的缩写，这里说的受影响包括以下两种情况：</p><ul><li>向Zset中新增成员；</li><li>在Zset中已经存在的成员但是分数被更新；</li></ul><p><img src="https://source.icode504.com/images/image-138e89cdeede346ff54f9021b03e0ed6.png"></p><h2 id="2-2-获取操作"><a href="#2-2-获取操作" class="headerlink" title="2.2 获取操作"></a>2.2 获取操作</h2><p>1. 获取集合中成员数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZCARD key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-ede4a9094c353623f57d9cfd8bdc04b1.png"></p><p>2. 获取成员对应的分数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZSCORE key member<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-2316584f9f27682e0ef8009291b5a04e.png"></p><p>3. 获取当前成员在当前有序集合中的索引值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZRANK key member<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-9ad86ab801b4c87170919bb409407035.png"></p><p>4. （逆序）获取当前成员在当前有序集合中的索引值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZREVRANK key member<br></code></pre></td></tr></table></figure><p>这里说的逆序指的是将当前有序集合整体反转过来，尾部成员变为头部成员，即尾部成员对应的索引值为0：</p><p><img src="https://source.icode504.com/images/image-aaa5949ec6cc37cba330243453433ac4.png"></p><h2 id="2-3-范围获取"><a href="#2-3-范围获取" class="headerlink" title="2.3 范围获取"></a>2.3 范围获取</h2><p>1. 默认按照分数从小到大排序，返回索引从start到stop之间所有的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count] [WITHSCORES]<br></code></pre></td></tr></table></figure><p>以下是命令中各个参数的相关说明（假设当前有序集合长度是 <code>zset.length</code>）：</p><ul><li><code>key</code>：当前有序集合的键名</li><li><code>start</code>：获取有序集合的开始位置，默认范围：$[0,zset.length)$或$[-zset.length, -1]$</li><li><code>stop</code>：获取有序集合的结束位置，默认范围：$[0,zset.length)$或$[-zset.length, -1]$</li></ul><p><img src="https://source.icode504.com/images/image-c01c9b633e48af99e1c332342e85d99e.png"></p><ul><li><code>WITHSCORES</code>：排序后显示每一个成员和对应的分数。</li></ul><p><img src="https://source.icode504.com/images/image-4b59bb4734e6fbff8746d9d4e9795419.png"></p><ul><li><code>BYSCORE</code>：指定此选项，将按照分数范围返回元素，此时 <code>start</code>和 <code>stop</code>会被解释为分数值，而不是原来的索引值。<code>start</code>和 <code>stop</code>默认是闭区间，如果某一个需要开区间，只需要在前面加上一个小括号即可，例如：<code>(start</code></li><li><code>BYLEX</code>：指定此选项，将按照字典序返回元素，此时 <code>start</code>和 <code>stop</code>将被解释为元素的字典顺序范围（不支持使用 <code>WITHSCORES</code>）。</li></ul><p><img src="https://source.icode504.com/images/image-f373e3cdea3b479c01300afc14025a18.png"></p><p><img src="https://source.icode504.com/images/image-c392b7d82e5bf0e87f8f0e69e7ea11ee.png"></p><ul><li><code>REV</code>：反转当前的排序。</li></ul><p><img src="https://source.icode504.com/images/image-7893a532bfed0f218debc20fb239e289.png"></p><ul><li><code>LIMIT</code>：类似MySQL中的 <code>LIMIT</code>关键字，其中 <code>offset</code>是偏移量，范围在$[0, zset.length-1)$，<code>count</code>是显示数据个数，获取排序后的结果集中$[offset, offset + count)$区间内的数据。在使用 <code>LIMIT</code>时，需要配合 <code>BYSCORE</code>或 <code>BYLEX</code>使用：</li></ul><p><img src="https://source.icode504.com/images/image-a7b64b66481be0ce7fc15b4a05a7befc.png"></p><p><del>2. （Redis 6.2.0以后过时）反转当前有序集合的排序：</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZREVRANGE key start stop [WITHSCORES]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-9953f7559735c3de2653aa924a5a36e4.png"></p><p><del>3. （Redis 6.2.0以后过时）获取指定分数范围的成员：</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-a29f78d83a2535b0319c8096f17398c1.png"></p><p>4. 获取指定分数范围的元素个数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZCOUNT key min max<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-2296752043a881b4c6488f57a80bea70.png"></p><h2 id="2-4-其他操作"><a href="#2-4-其他操作" class="headerlink" title="2.4 其他操作"></a>2.4 其他操作</h2><p>1. 删除一个或多个成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZREM key member [member ...]<br></code></pre></td></tr></table></figure><p>默认返回成功删除成员个数：</p><p><img src="https://source.icode504.com/images/image-262c5f4eedea2bc67fd9308d34e257d7.png"></p><p>2. 增加某个元素的分数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZINCRBY key increment member<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-b6ade2cd3cff2e71fe46937f0bbaf0fe.png"></p><p>3. 从键名列表中的第一个非空排序集中弹出一个或多个元素，弹出的元素是成员分数对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZMPOP numkeys key [key ...] &lt;MIN | MAX&gt; [COUNT count]<br></code></pre></td></tr></table></figure><h2 id="2-5-多集合运算"><a href="#2-5-多集合运算" class="headerlink" title="2.5 多集合运算"></a>2.5 多集合运算</h2><p>和无序集合一样，有序集合也可以多集合运算，接下来我们通过一个案例来讲解相关的命令和对应的参数。</p><p>已知通过ZADD命令添加了两个有序集合myzset1和myzset，添加的元素如下图所示：</p><p><img src="https://source.icode504.com/images/image-3cf96ad9705a1f15350347c31180330b.png"></p><p>当前两个有序集合中成员和对应的分数如下图所示：</p><p><img src="https://source.icode504.com/images/image-797e2a1ff7f997c6e720e5ea658baaa8.png"></p><p>以下是多个集合计算相关的命令：</p><p>1. （Redis 6.2.0新增）获取两个集合的并集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;] [WITHSCORES]<br></code></pre></td></tr></table></figure><p>以下是对该命令中相关参数的说明：</p><ul><li><code>numkeys</code>：表示有多少个有序集合参与并集运算；</li><li><code>key [key ...]</code>：指定多个有序集合的键名；</li></ul><p><img src="https://source.icode504.com/images/image-06467f559084916ba2accc6d94246cb8.png"></p><ul><li><code>WITHSCORES</code>：返回结果中每一个成员包含分数；</li></ul><p><img src="https://source.icode504.com/images/image-29a6d4a4d0e3f3606bd0a50a0f23f151.png"></p><ul><li><code>AGGREGATE &lt;SUM | MIN | MAX&gt;</code>：指定并集运算中，如果相同的成员存在于多个集合中，如何计算其分数，可以下面任意一个选项：<ul><li><code>SUM</code>（默认策略）：分数相加；</li><li><code>MIN</code>：取最小的分数；</li><li><code>MAX</code>：取最大的分数。</li></ul></li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-8b06e2a75aefa4def5a6c24826265c8c.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-0145c6f0403c2fd6d8234523968b6daa.png"></div></div></div><ul><li><code>WEIGHTS weight [weight ...]</code>：为有序集合指定一个乘积因子，将集合中的每个元素的分数乘以该因子；</li></ul><p><img src="https://source.icode504.com/images/image-6a6f9ff7291a3ee4336630160b7a7d95.png"></p><p>2. 获取有序集合的并集并存储：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;]<br></code></pre></td></tr></table></figure><p>和前面的并集计算不同的是：使用ZUNIONSTORE计算出的结果需要指定一个key来保存。</p><p>该命令中除了 <code>destination</code>是要保存的key的名称，其他使用到的参数和并集命令中的参数用法相同，这里不再赘述。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-ccb319dcea8f63d3c92217412c122658.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-98fc69ff9a8c3268eecd4d59e784282f.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-636c9ce9e56c355f6a3880ad9824db6d.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-73464b275782e63c9f629a3c34caf4f3.png"></div></div></div><p>3. （Redis 6.2.0新增）获取两个集合的并集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;] [WITHSCORES]<br></code></pre></td></tr></table></figure><p>命令中使用到的参数和并集命令中的参数用法相同，这里不再赘述。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-0a2ae1a86ec0552292ff69ffc7a0a004.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-ecb16998be731122c367d505b64831ca.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-9676773014d4003f8e5ea6733b697997.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-f336cd087648f45108d2d7da34e68f63.png"></div><div class="group-image-wrap"><img src="https://source.icode504.com/images/image-cd968fce874078ed7c4eb233f0a725c3.png"></div></div></div><p>4. 获取有序集合的交集并存储：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;]<br></code></pre></td></tr></table></figure><p>命令中使用到的参数和并集命令中的参数用法相同，这里不再赘述。</p><p>其中 <code>destination</code>是存储交集计算后的键名。如果 <code>destination</code>里面有数据，那么就会执行覆盖操作。</p><p><img src="https://source.icode504.com/images/image-caab6b0724dd1d4c72ab937762927292.png"></p><p><img src="https://source.icode504.com/images/image-f986fdb6a83e1e3b0a343bae152f153a.png"></p><p><img src="https://source.icode504.com/images/image-c99787f82de44c3315ab0e1948e4474a.png"></p><p>5. （Redis 7.0.0新增）获取有序集合的交集后成员的数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZINTERCARD numkeys key [key ...] [LIMIT <span class="hljs-built_in">limit</span>]<br></code></pre></td></tr></table></figure><p>其中LIMIT是限定成员返回的数量：</p><p><img src="https://source.icode504.com/images/image-2a01c4234db3f186f4179624ddcbe236.png"></p><p>6. （6.2.0新增）获取有序集合的差集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZDIFF numkeys key [key ...] [WITHSCORES]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-11234087fcbe28fae0d9138cf5072c50.png"></p><p>7. 获取有序集合的差集并存储：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ZDIFFSTORE destination numkeys key [key ...]<br></code></pre></td></tr></table></figure><p>其中 <code>destination</code>是存储差集计算后的键名。如果 <code>destination</code>里面有数据，那么就会执行覆盖操作。</p><p>该命令默认返回的是差集计算后的元素个数：</p><p><img src="https://source.icode504.com/images/image-4db6776fb039c4835a292335731ccc07.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之无序集合类型Set</title>
    <link href="/posts/92.html"/>
    <url>/posts/92.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis集合类型介绍"><a href="#一、Redis集合类型介绍" class="headerlink" title="一、Redis集合类型介绍"></a>一、Redis集合类型介绍</h1><p><strong>Redis集合（Set）中的成员是唯一且无序的</strong>，成员（Member）是Redis集合的组成单位，多个成员组成了集合。Redis集合类型在以下场景中使用效率较高：</p><ul><li>记录当前用户访问网站页面时的IP地址；</li><li>社交APP中推荐可能认识的人；</li><li>查看微信朋友圈点赞的朋友；</li></ul><h1 id="二、Redis集合类型常用命令"><a href="#二、Redis集合类型常用命令" class="headerlink" title="二、Redis集合类型常用命令"></a>二、Redis集合类型常用命令</h1><h2 id="2-1-单个集合操作命令"><a href="#2-1-单个集合操作命令" class="headerlink" title="2.1 单个集合操作命令"></a>2.1 单个集合操作命令</h2><p>1. 添加一个或多个成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SADD key member [member ...]<br></code></pre></td></tr></table></figure><p>返回结果是成功添加到当前集合成员的个数：</p><p><img src="https://source.icode504.com/images/image-7cef9761aa2b9fc3670a4f27f0c2d53e.png"></p><p>2. 遍历集合中所有的成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SMEMBERS key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-a9b70a94d0b56a40dce689e0f2b67755.png"></p><p>3. 判断当前成员是否在集合中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SISMEMBER key member<br></code></pre></td></tr></table></figure><p>如果当前集合中存在该成员，返回结果是1；如果不存在，返回结果是0：</p><p><img src="https://source.icode504.com/images/image-325cf1a904c2c15f701c28584e6ee82b.png"></p><p>4. 删除一个或多个成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SREM key member [member ...]<br></code></pre></td></tr></table></figure><p>默认返回的是成功删除的成员数量：</p><p><img src="https://source.icode504.com/images/image-cce5054ee9a745b0a403f4d8d6215dcd.png"></p><p>5. 获取集合中成员数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SCARD key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-fa2c920cae97b9df5c2dab47cb3f0661.png"></p><p>6. 从集合中随机展现1个或多个成员作为展示（<strong>不执行删除操作</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SRANDMEMBER key [count]<br></code></pre></td></tr></table></figure><p>count可以分成如下情况（假设集合的长度是<code>set.length</code>并且$set.length \geq 1$）</p><ul><li>如果count没有值，那么随机展示一个成员；</li><li>如果count在$[1, set.length)$中，那么展示count个成员；</li><li>如果$count\geq set.length$，那么展示当前集合所有的成员；</li><li>如果$count&lt;0$，此时随机展示|count|个元素，展示过程中，可能出现成员重复的情况：</li></ul><p>以下是SRANDMEMBER的使用演示：</p><p><img src="https://source.icode504.com/images/image-f25c93d5fa489c4acab46e42c375084f.png"></p><p>7. 从集合中随机弹出一个或多个成员：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SPOP key [count]<br></code></pre></td></tr></table></figure><p>如果不指定count，默认只弹出一个成员；指定count可以弹出多个成员：</p><p><img src="https://source.icode504.com/images/image-5a3391a5b8a7dc2203ade48b472e168e.png"></p><h2 id="2-2-多个集合操作命令"><a href="#2-2-多个集合操作命令" class="headerlink" title="2.2 多个集合操作命令"></a>2.2 多个集合操作命令</h2><p>1. 将当前集合中已经存在某个成员赋值给另一个集合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SMOVE <span class="hljs-built_in">source</span> destination member<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-c26af97efba88bf7e2a595852cb865ee.png"></p><p>2. 集合的差集运算（$A-B$）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SDIFF key [key ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-acef2a21c121fcd6954763c73553768c.png"></p><p>3. 集合的并集运算（$A\cup B$）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SUNION key [key ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-e8c9847b0aae57d8d4fec7d52492bf36.png"></p><p>4. 集合的交集运算（$A \cap B$）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SINTER key [key ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-eb6fe0b6d739b14db810df5e96d35505.png"></p><h1 id="三、Redis集合类型的使用事项"><a href="#三、Redis集合类型的使用事项" class="headerlink" title="三、Redis集合类型的使用事项"></a>三、Redis集合类型的使用事项</h1><p>1. Redis集合最大可以存储$2^{32}-1$个元素。</p><p><img src="https://source.icode504.com/images/image-2462e9a545ecbe5797ef4616dcaeb797.png"></p><p>2. 大多数和集合相关的命令在执行过程中效率较高。然而，如果集合中几十万几百万的数据时，需要谨慎使用SMEMBERS命令，因为命令在执行过程中的时间复杂度是$O(n)$。为了解决上述问题，可以使用SSCAN命令（后续会讲到）获取到集合中所有成员。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之列表List</title>
    <link href="/posts/91.html"/>
    <url>/posts/91.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis列表类型介绍"><a href="#一、Redis列表类型介绍" class="headerlink" title="一、Redis列表类型介绍"></a>一、Redis列表类型介绍</h1><p>在正式讲解Redis列表时，我们需要对“列表”这一概念做一个详细说明：</p><p>列表是一种可以存储多个数据的结构，</p><p>在内存中，列表的存储主要有两种方式：一种是通过数组实现的列表（例如：Java中的ArrayList），另一种是通过链表实现的列表（例如：Java中的LinkedList），两种方式各有优缺点：</p><table><thead><tr><th align="left"></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td align="left">数组</td><td>数组元素在内存中是连续存储的，存储结构简单，访问速度块</td><td>1. 数组大小需要在创建过程中指定，不能动态调整<br>2. 插入和删除操作效率较低<br>3. 需要连续的内存空间</td></tr><tr><td align="left">链表</td><td>1. 可以动态调整链表大小，内存利用率较高<br>2. 插入和删除操作较为灵活<br>3. 元素可以分布在内存的任何位置，不需要连续的内存空间</td><td>1. 访问元素较慢，查找元素需要从头遍历<br>2. 由于链表元素在内存中分布不连续，访问速度较慢<br>3. 每个元素需要额外的指针存储前一个或后一个节点，内存开销增加</td></tr></tbody></table><p>首先，Redis列表（List）符合其本身和列表的基本特征：<strong>一个键（key）对应多个值（value）</strong>。</p><p>其次，Redis的列表是通过链表实现的，这也就意味着Redis添加元素效率非常高，并且Redis添加元素的主要方式是向列表的头部或者尾部添加元素。</p><p><img src="https://source.icode504.com/images/image-dee1d9ebc857aa35e7046d18c748fd49.png"></p><p>由于Redis列表本身是一个链表，它的缺点在于访问某个元素并没有这么快。因此，Redis列表适合于存储较少的数据。如果需要存储大量数据，并且需要快速访问，可以使用Sorted Set（ZSet）解决这一问题。</p><p>应用场景：</p><p>1. 记录用户在社交网络最新发送的内容，例如：微信公众号文章推送</p><p><img src="https://source.icode504.com/images/image-860a4d6465ac5d1b341439d9ec951286.png"></p><p>2. 进程间通信，使用生产者-消费者模式。生产者将数据存放到列表，消费者取出数据并执行相应的处理操作。</p><h1 id="二、Redis列表类型常用命令"><a href="#二、Redis列表类型常用命令" class="headerlink" title="二、Redis列表类型常用命令"></a>二、Redis列表类型常用命令</h1><p>1. （列表头部）从左向右依次将元素存入列表中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LPUSH key element [element ...]<br></code></pre></td></tr></table></figure><p>假设向当前列表list的左侧添加三个元素e1、e2和e3，这个存储过程如下图所示：</p><p><img src="https://source.icode504.com/images/image-a35b6eb0fc7026cfd25013d78ceb4faf.gif"></p><p>LPUSH命令执行成功默认返回数据存入到列表后<strong>列表中元素的总数量</strong>，以下是LPUSH命令的使用演示：</p><p><img src="https://source.icode504.com/images/image-50cef88b5f7e2183dc19eb0d93a3b5c0.png"></p><p>2. （列表尾部）从右向左依次将元素存入到列表中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RPUSH key element [element ...]<br></code></pre></td></tr></table></figure><p>假设向当前列表list的右侧添加两个元素e1、e2，这个存储过程如下图所示：</p><p><img src="https://source.icode504.com/images/image-9626c0ebf4462a432aacd7aeee9682d6.gif"></p><p>LPUSH命令执行成功默认返回数据存入到列表后<strong>列表中元素的总数量</strong>，以下是RPUSH命令的使用演示：</p><p><img src="https://source.icode504.com/images/image-69487ad9edddd6b78f2838e18f2c544f.png"></p><p>3. 从左向右获取列表指定范围的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LRANGE key start stop<br></code></pre></td></tr></table></figure><p>和字符串类型类似，Redis列表中每一个元素也有索引。假设当前Redis列表长度是 <code>list.length</code>：</p><p>从左到右计算出的索引值范围是$[0, list.length)$，索引最大值是 <code>list.length - 1</code>；</p><p>Redis也可以从右向左计算索引，默认最右侧的索引值为-1，到最左侧索引值为$-list.length$，右侧可以得出的索引值范围是$[-list.length, -1]$。</p><p>假设当前key对应的列表中有8个元素，以下是对索引值范围的分析图：</p><p><img src="https://source.icode504.com/images/image-d36d5732618fa3d5ab40efb380a2ef56.png"></p><p>我们在使用LRANGE命令时，start和stop可使用索引范围是$[0, list.length)$或者$[-list.length, -1]$，两个范围内的值可以混用。例如：start位置是0，stop表示列表最末尾的元素就可以使用-1表示，使用LRANGE获取整个列表的内容的执行命令是 <code>LRNAGE key 0 -1</code>。</p><p>以下是LRANGE命令的使用：</p><p><img src="https://source.icode504.com/images/image-56e3c8bde907a04c30e5dec120bb42cb.png"></p><p>4. 获取当前列表长度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LLEN key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-fe9b5c56c0c14f22e647694a7a89d065.png"></p><p>5. 从左侧弹出一个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LPOP key<br></code></pre></td></tr></table></figure><p>默认返回的就是当前弹出元素的值：</p><p><img src="https://source.icode504.com/images/image-d4547a38d967cd4b46cfc8d0630027ab.png"></p><p>以下是LPOP执行过程动画（橘黄色为弹出的元素）：</p><p><img src="https://source.icode504.com/images/image-fcdc521797a181d63ff094466518d079.gif"></p><p>6. 从右侧弹出一个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RPOP key<br></code></pre></td></tr></table></figure><p>默认返回就是当前弹出元素的值：</p><p><img src="https://source.icode504.com/images/image-a3c407d2ef19e089ef78d402c9983d6c.png"></p><p>以下是RPOP执行过程动画（橘黄色为弹出的元素）：</p><p><img src="https://source.icode504.com/images/image-a7c7fa7fc514a92f8fe21720c7142a29.gif"></p><p>7. 根据索引值获取列表指定元素（默认从0开始）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LINDEX key index<br></code></pre></td></tr></table></figure><p>这里的index就是列表的索引值，它的范围和我们在前面探讨列表的索引值范围一样。假设列表的长度是$list.length$，那么从左到右索引范围：$[0, list.length-1)$，从右向左计算得出的范围是$[-list.length, -1]$。</p><p>以下是LINDEX命令的使用：</p><p><img src="https://source.icode504.com/images/image-c5334e33690a30e593e821e89be1e10d.png"></p><p>8. 删除列表中count个值为element的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LREM key count element<br></code></pre></td></tr></table></figure><p>这里count分成如下几种情况：</p><ul><li>count &gt; 0：从头到尾删除count个值为element的元素；</li><li>count &#x3D; 0：删除列表中所有值为element的元素；</li><li>count &lt; 0：从尾到头删除countge值尾element的元素；</li></ul><p>如果当前的key不存在则视为空列表，此时执行LREM命令返回结果是0。</p><p>以下是LREM命令的使用：</p><p><img src="https://source.icode504.com/images/image-dde6f824f880f0e50dd9dc4cf6ccf96e.png"></p><p><img src="https://source.icode504.com/images/image-f1c6b2edc69b754087cdabf0f79a0cce.png"></p><p><img src="https://source.icode504.com/images/image-c5e68afb7b5a57d6b7b3434fb0dfef94.png"></p><p>9. 截取指定范围的值后，再赋值给当前的key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LTRIM key start stop<br></code></pre></td></tr></table></figure><p>这里start和stop的索引值范围和前面讨论的范围相同，需要保证start和stop在索引值范围内。</p><p>如果stop的值比当前列表长度大，那么在执行LTRIM操作时，得到的结果仍然是当前列表的尾部位置，即$[start, list.length)$。</p><p>以下是LTRIM命令的使用：</p><p><img src="https://source.icode504.com/images/image-28b914dc89df14be0e62e39ec6b6c6fa.png"></p><p>10. 当前列表右侧弹出一个元素，于此同时从另一个列表的左侧存入值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">RPOPLPUSH <span class="hljs-built_in">source</span> destination<br></code></pre></td></tr></table></figure><p>假设source列表中有如下元素：e1、e2、e3；destination列表有如下元素：e4、e5。</p><p>执行RPOPLPUSH后，source列表尾部元素e3弹出，然后马上在destination列表头部存入，此时得到的结果是：</p><ul><li>source列表：e1、e2；</li><li>destination列表：e3、e4、e5；</li></ul><p>以下是RPOPLPUSH命令演示：</p><p><img src="https://source.icode504.com/images/image-de65c3bb6010a89d80803ed932b4be3f.png"></p><p>下图演示了RPOPLPUSH命令如何将e3从source列表存入到destination列表中：</p><p><img src="https://source.icode504.com/images/image-1603cfd51fd1e418ed09bcc42452d6f2.gif"></p><p>11. 为当前列表指定位置设置新值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LSET key index element<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-3151d7637d8b62b1e951fa6cba3265f1.png"></p><p>12. 在列表某个已有值的前后再添加具体值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LINSERT key &lt;BEFORE | AFTER&gt; pivot element<br></code></pre></td></tr></table></figure><p>返回结果是当前列表的长度。</p><p>如果当前key对应的是空列表，那么此命令不会执行任何操作。</p><p>如果key存在，但是列表中不存在pivot的值，此时系统会提示错误信息。</p><p>以下是LINSERT命令的使用：</p><p><img src="https://source.icode504.com/images/image-92635ed22ef934d8e3f79be5de07b5a6.png"></p><h1 id="三、Redis列表类型的注意事项"><a href="#三、Redis列表类型的注意事项" class="headerlink" title="三、Redis列表类型的注意事项"></a>三、Redis列表类型的注意事项</h1><p>1. 访问列表的头部和尾部的时间复杂度是$O(1)$，这也就意味着访问这两个位置的效率非常高。然而，在列表内部需要操作元素的命令时间复杂度一般是$O(n)$，例如：</p><ul><li>LINDEX</li><li>LINSERT</li><li>LSET</li></ul><p>2. Redis列表最多可以存储$2^{32}-1$个元素：</p><p><img src="https://source.icode504.com/images/image-5a647975941707823d4f5eb60fcdc12b.png"></p><p>3. 如果列表为空，Redis会自动删除对应的key；如果执行添加操作时，如果key不存在，此时Redis会创建一个列表并向里面添加元素。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习前言</title>
    <link href="/posts/90.html"/>
    <url>/posts/90.html</url>
    
    <content type="html"><![CDATA[<p>Redis是一种开源的内存数据库，具有高性能、丰富的数据结构和简单易用的特点。它不仅支持键值对存储，还提供了列表、集合、有序集合和哈希等多种数据类型，使得处理复杂数据更加灵活高效。Redis常用于缓存、会话管理、实时分析、消息队列等场景，因其极快的读写速度和高可用性，成为许多互联网企业的首选。通过学习Redis，您将能够掌握如何优化系统性能，设计高效的数据存储方案，并应对大规模、高并发的应用需求。</p><p>以下是我个人整理的Redis学习笔记，希望能帮到你：</p><h1 id="第一部分-Redis基础知识"><a href="#第一部分-Redis基础知识" class="headerlink" title="第一部分 Redis基础知识"></a>第一部分 Redis基础知识</h1><h2 id="Redis-单机版"><a href="#Redis-单机版" class="headerlink" title="Redis 单机版"></a>Redis 单机版</h2><h3 id="一、Redis入门知识"><a href="#一、Redis入门知识" class="headerlink" title="一、Redis入门知识"></a>一、Redis入门知识</h3><table><thead><tr><th>教程名称</th><th>链接</th></tr></thead><tbody><tr><td>Redis相关内容介绍</td><td>敬请期待</td></tr><tr><td>Redis安装教程（Linux版）</td><td><a href="./83.html">点我查看</a></td></tr><tr><td>Redis远程连接工具TinyRDM安装、配置和卸载教程（Window版）</td><td><a href="./85.html">点我查看</a></td></tr><tr><td>Redis远程连接工具TinyRDM安装、配置和卸载教程（macOS版）</td><td>敬请期待</td></tr></tbody></table><h3 id="二、Redis数据类型"><a href="#二、Redis数据类型" class="headerlink" title="二、Redis数据类型"></a>二、Redis数据类型</h3><table><thead><tr><th>教程名称</th><th>链接</th></tr></thead><tbody><tr><td>Redis数据类型简介</td><td>敬请期待</td></tr><tr><td>Redis的key（键）相关操作</td><td><a href="./86.html">点我查看</a></td></tr><tr><td>Redis数据类型之字符串String</td><td><a href="./87.html">点我查看</a></td></tr><tr><td>Redis数据类型之哈希Hash</td><td><a href="./89.html">点我查看</a></td></tr><tr><td>Redis数据类型之列表List</td><td><a href="./91.html">点我查看</a></td></tr><tr><td>Redis数据类型之集合Set</td><td><a href="./92.html">点我查看</a></td></tr><tr><td>Redis数据类型之有序集合Sorted Set（ZSet）</td><td><a href="./93.html">点我查看</a></td></tr><tr><td>Redis数据类型之位图Bitmap</td><td><a href="./103.html">点我查看</a></td></tr><tr><td>Redis数据类型之基数统计HyperLogLog</td><td><a href="./106.html">点我查看</a></td></tr><tr><td>Redis数据类型之地理空间Geospatial</td><td>敬请期待</td></tr><tr><td>Redis数据类型之流Stream</td><td>敬请期待</td></tr><tr><td>Redis数据类型之位域BitField</td><td>敬请期待</td></tr></tbody></table><h3 id="三、Redis持久化机制"><a href="#三、Redis持久化机制" class="headerlink" title="三、Redis持久化机制"></a>三、Redis持久化机制</h3><table><thead><tr><th>教程名称</th><th>链接</th></tr></thead><tbody><tr><td>Redis持久化机制之RDB（Redis Database）</td><td>敬请期待</td></tr><tr><td>Redis持久化机制之AOF（Append Only File）</td><td>敬请期待</td></tr><tr><td>Redis混合持久化（RDB + AOF）</td><td>敬请期待</td></tr><tr><td>Redis纯缓存模式</td><td>敬请期待</td></tr></tbody></table><h3 id="四、Redis事务和管道"><a href="#四、Redis事务和管道" class="headerlink" title="四、Redis事务和管道"></a>四、Redis事务和管道</h3><table><thead><tr><th>教程名称</th><th>链接</th></tr></thead><tbody><tr><td>Redis事务</td><td>敬请期待</td></tr><tr><td>Redis管道</td><td>敬请期待</td></tr></tbody></table><h3 id="五、Redis发布和订阅（了解即可）"><a href="#五、Redis发布和订阅（了解即可）" class="headerlink" title="五、Redis发布和订阅（了解即可）"></a>五、Redis发布和订阅（了解即可）</h3><p>撰写中，敬请期待</p><h2 id="Redis-集群版"><a href="#Redis-集群版" class="headerlink" title="Redis 集群版"></a>Redis 集群版</h2><h3 id="七、Redis主从模式（replication）"><a href="#七、Redis主从模式（replication）" class="headerlink" title="七、Redis主从模式（replication）"></a>七、Redis主从模式（replication）</h3><p>撰写中，敬请期待</p><h3 id="八、Redis哨兵模式（sentinel）"><a href="#八、Redis哨兵模式（sentinel）" class="headerlink" title="八、Redis哨兵模式（sentinel）"></a>八、Redis哨兵模式（sentinel）</h3><p>撰写中，敬请期待</p><h3 id="九、Redis集群模式（cluster）"><a href="#九、Redis集群模式（cluster）" class="headerlink" title="九、Redis集群模式（cluster）"></a>九、Redis集群模式（cluster）</h3><p>撰写中，敬请期待</p><h3 id="十、SpringBoot集成Redis"><a href="#十、SpringBoot集成Redis" class="headerlink" title="十、SpringBoot集成Redis"></a>十、SpringBoot集成Redis</h3><p>撰写中，敬请期待</p><h1 id="第二部分-Redis-进阶篇"><a href="#第二部分-Redis-进阶篇" class="headerlink" title="第二部分 Redis 进阶篇"></a>第二部分 Redis 进阶篇</h1><p>撰写中，敬请期待</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>链接中的知识点主要参考如下内容：</p><ol><li><a href="https://redis.io/docs/latest/">Redis官方文档</a></li><li><a href="https://www.bilibili.com/video/BV13R4y1v7sP">【尚硅谷-周阳老师】Redis实战课程+面试题</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之哈希类型Hash</title>
    <link href="/posts/89.html"/>
    <url>/posts/89.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis哈希类型介绍"><a href="#一、Redis哈希类型介绍" class="headerlink" title="一、Redis哈希类型介绍"></a>一、Redis哈希类型介绍</h1><p>Redis的哈希（Hash）类型记录的是多个属性（field）及其对应的值（value）的集合，它本身仍然是键值对（key-value），但是value变为由多个field-value组成的结构，类似Java中的<code>Map&lt;String, Map&lt;String, Object&gt;&gt;</code>，下图是Redis哈希类型存储结构示意图：</p><p><img src="https://source.icode504.com/images/image-eecffbe113d8b40c145632b548403706.png"></p><p>应用场景：早期购物车的应用。</p><ul><li>新增商品使用HSET命令；</li><li>添加当前商品数量使用HINCRBY命令；</li><li>获取商品总数HLEN命令；</li><li>全部选择使用HGETALL命令；</li></ul><h1 id="二、Redis哈希类型常用命令"><a href="#二、Redis哈希类型常用命令" class="headerlink" title="二、Redis哈希类型常用命令"></a>二、Redis哈希类型常用命令</h1><p>1. 添加和修改key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HSET key field value [field value ...]<br></code></pre></td></tr></table></figure><p>该命令默认返回的是添加&#x2F;修改field的个数：</p><p><img src="https://source.icode504.com/images/image-cc58e26839d6f986cc6de8ef3b4eb1fb.png"></p><p>2. 如果当前key中属性field不存在则创建，存在则不创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HSETNX key field value [field value ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-1cfb6a17bfe021a8169bb20c0f9f722e.png"></p><p>3. 获取当前的key中属性field对应的value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HGET key field<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-b8e6af5ed05803707bcf49d4621d8c85.png"></p><p><del>4. 添加和修改key（该命令已经在Redis 4.0.0以后已过时，推荐使用前面的HSET命令）</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HMSET key field value [field value ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-8bfc512527b09d0918cd470b5605ed05.png"></p><p>5. 批量获取key中多个属性field对应的value</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HGET key field [field ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-7ddfdc27260741f8f4514de943117f13.png"></p><p>6. 获取当前key所有属性field对应的value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HGETALL key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-5675c5babff9315db80d476f5307c056.png"></p><p>7. 删除某一个key中的一个或多个属性field：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HDEL key field [field ...]<br></code></pre></td></tr></table></figure><p>该命令默认返回的是删除数量：</p><p><img src="https://source.icode504.com/images/image-76ca30147ab2b6e4e39aba0c99aa445b.png"></p><p>8. 获取当前key所拥有的属性field的数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HLEN key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-1f7f715bde5db10cb704763671d05863.png"></p><p>9. 判断当前key中里面是否存在某个属性field：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HEXISTS key field<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-9d7ca9906140236a1bcf9aa7455b0db3.png"></p><p>10. 获取当前key所有属性field名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HKEYS key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-1f4de46415af27494e4111960adb5677.png"></p><ol start="11"><li>获取当前key所有属性对应的值value：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HVALS key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-02a60584eb3b472d2c55be2de7969c36.png"></p><p>12. 将当前key中某个属性field对应的<strong>整数值</strong>进行增加操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HINCRBY key field increment<br></code></pre></td></tr></table></figure><p>该命令默认返回的是增加后的结果：</p><p><img src="https://source.icode504.com/images/image-4d6c76c473713f84c87341b8be05a548.png"></p><p>使用HINCRBY也可以执行减少操作，将increment对应的值改成负数即可：</p><p><img src="https://source.icode504.com/images/image-4e4661b57cad5ec06992439634323bbf.png"></p><p>如果key不存在，那么则执行创建操作；如果key存在，而field不存在，此时会创建一个field，并对field的值由0设置为对应的值：</p><p><img src="https://source.icode504.com/images/image-4988ba12daa7df5cad133c4681d52855.png"></p><p>13. 将当前key中某个属性field对应的小数值进行增加操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">HINCRBYFLOAT key field increment<br></code></pre></td></tr></table></figure><p>HINCRBYFLOAT命令的特性基本上和HINCRBY命令相同：</p><p><img src="https://source.icode504.com/images/image-52b730c8cc642cf39681fd9a7a751c89.png"></p><h1 id="三、使用Redis哈希类型的注意事项"><a href="#三、使用Redis哈希类型的注意事项" class="headerlink" title="三、使用Redis哈希类型的注意事项"></a>三、使用Redis哈希类型的注意事项</h1><p>1. 大部分的Redis哈希类型的命令的时间复杂度是$O(1)$，少部分命令，例如：</p><ul><li>HKEYS</li><li>HVALS</li><li>HGETALL</li></ul><p>这些命令的时间复杂度是$O(n)$，因为它们需要遍历当前key中所有的fields。</p><p>2. 哈希类型理论上可以存储$2^{32}-1$个键值对，但是实际上，这个存储上限取决于你的Redis实际在内存中占用的空间大小。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Ubuntu桌面版安装配置教程</title>
    <link href="/posts/88.html"/>
    <url>/posts/88.html</url>
    
    <content type="html"><![CDATA[<p>Ubuntu是一个基于Linux的开源操作系统，它遵循GNU通用公共许可证，用户可以自由使用、复制、分发和修改。它提供直观易用的桌面环境，适合新手和有经验用户。Ubuntu有强大的软件中心，支持多硬件架构，注重安全和稳定，并有庞大的用户社区提供支持。它适用于桌面、笔记本和服务器等多种设备，被广泛应用于教育、开发和科学等领域。</p><p>接下来就为大家介绍一下Ubuntu桌面版操作系统的安装与配置：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑中已经安装了VMware，如果没有安装的小伙伴可以点击下面的链接查看安装教程：</p><table><thead><tr><th>需要安装的软件名称</th><th>链接</th></tr></thead><tbody><tr><td>虚拟机软件VMWare Workstation</td><td><a href="./41.html">点我查看</a></td></tr><tr><td>下载器Neat Download Manager（推荐安装，可以加快下载速度）</td><td><a href="./24.html">点我查看</a></td></tr></tbody></table><p>建议电脑预留50G以上的存储空间。</p><h1 id="二、下载Ubuntu镜像"><a href="#二、下载Ubuntu镜像" class="headerlink" title="二、下载Ubuntu镜像"></a>二、下载Ubuntu镜像</h1><p>这里我安装的是22.04版本的Ubuntu服务器。</p><p>1. 点击右侧链接进入清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">点我查看</a></p><p>2. 这里我选择的是22.04版本下载，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240221212521251.png"></p><p>3. 下载桌面端的Ubuntu镜像，如下图所示：</p><p><img src="https://source.icode504.com/images/image-c81730feca4d51c04005cdf848f11034.png"></p><h1 id="三、创建Ubuntu虚拟机"><a href="#三、创建Ubuntu虚拟机" class="headerlink" title="三、创建Ubuntu虚拟机"></a>三、创建Ubuntu虚拟机</h1><p>1.打开VMware，按<kbd>Ctrl</kbd>和<kbd>N</kbd>键，新建虚拟机。</p><p>2. 进入新建虚拟机向导以后，选择第二个<strong>自定义(高级)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-5d8a8b52b3a1d293e052c802843a77a0.png" alt="https://source.icode504.com/images/image-5d8a8b52b3a1d293e052c802843a77a0.png"></p><p>3. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-dae74e0a9bfded71ec53de75250d67c7.png" alt="https://source.icode504.com/images/image-dae74e0a9bfded71ec53de75250d67c7.png"></p><p>4. 安装客户机操作系统选择<strong>稍后安装操作系统</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134527045.png"></p><p>5. 客户机操作系统选择<strong>Linux</strong>，版本选择<strong>Ubuntu 64位</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221215406394.png"></p><p>6. 自定义虚拟机名称和安装位置。安装位置建议安装在一个空间比较大的盘，这里我安装在了J盘：</p><p><img src="https://source.icode504.com/images/image-3ed1a9b7808131ce70e15639e91b246a.png" alt="https://source.icode504.com/images/image-3ed1a9b7808131ce70e15639e91b246a.png"></p><p><img src="https://source.icode504.com/images/image-8331b8d8676584f0e282ebb09d4e25d0.png" alt="https://source.icode504.com/images/image-8331b8d8676584f0e282ebb09d4e25d0.png"></p><p><img src="https://source.icode504.com/images/image-014ca958cb472efc80cca32cd14f8867.png" alt="https://source.icode504.com/images/image-014ca958cb472efc80cca32cd14f8867.png"></p><p>7. 处理器配置时处理器数量和内核数量不能超过电脑自身的数量，否则虚拟机无法正常运行，这里我设置的<strong>处理器内核总数</strong>为2：</p><p><img src="https://source.icode504.com/images/image-20240213135358478.png"></p><p>如何检查电脑本机的CPU信息：按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，即可查看到CPU信息：</p><p><img src="https://source.icode504.com/images/image-20240213135636008.png"></p><p>8. 设置虚拟机内存，内存大小按照VMware的要求设置在一定范围之内。这里我设置内存大小为4GB（4096M），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221213933440.png"></p><p>9. 网络类型选择<strong>网络地址转换(NAT)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153239112.png"></p><p>10. I&#x2F;O控制器类型按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153335558.png"></p><p>11. 虚拟磁盘类型按照默认选择即可，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153449643.png"></p><p>12. 选择磁盘按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153601825.png"></p><p>13. 最大磁盘大小建议设置在20GB及以上，这里我设置了50GB，磁盘分配按照默认勾选即可。完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153741099.png"></p><p>14. 指定磁盘文件位置可以自定义。这里需要设置的小伙伴点击<strong>浏览</strong>可以更改。不需要更改的小伙伴点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214019977.png"></p><p>15. 点击<strong>完成</strong>，虚拟机创建完成：</p><p><img src="https://source.icode504.com/images/image-20240221215930776.png"></p><p>16. 点击<strong>编辑虚拟机设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214109235.png"></p><p>17. 进入虚拟机设置后，左侧设备选择<strong>CD&#x2F;DVD</strong>，设备状态勾选<strong>启动时连接</strong>，连接选择<strong>使用ISO映像文件</strong>，点击<strong>浏览</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213160808035.png"></p><p>18. 找到前面我们下载的Ubuntu镜像并选中，完成后点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-f1504ad5a7def1dd636886f62647464b.png"></p><p>19. 镜像配置成功，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214534533.png"></p><h1 id="四、开启虚拟化"><a href="#四、开启虚拟化" class="headerlink" title="四、开启虚拟化"></a>四、开启虚拟化</h1><p>1. 开启刚刚创建好的虚拟机，此时VMware会弹出一个错误信息：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p><img src="https://source.icode504.com/images/image-20240227113330696.png"></p><p>2. 此时按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，虚拟化并未开启：</p><p><img src="https://source.icode504.com/images/image-20240227113646198.png"></p><p>3. 重新启动电脑，具体进入BIOS可以根据自身电脑品牌型号进入。这里我的电脑使用的是华硕，开机过程中一直按<kbd>F2</kbd>键即可进入BIOS，再点击右下角<strong>Advanced Mode</strong>，进入高级模式：</p><p><img src="https://source.icode504.com/images/image-20240227133747848.png"></p><p>4. 按照下图所示操作，点击<strong>高级</strong>，将<strong>Intel Virtualization Technology</strong>配置项开启：</p><p><img src="https://source.icode504.com/images/image-20240227134148071.png"></p><p>5. 按<kbd>F10</kbd>键保存上述配置并重启：</p><p><img src="https://source.icode504.com/images/image-20240227134402192.png"></p><p>6. 按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，左上角找到<strong>性能</strong>，发现虚拟化成功开启：</p><p><img src="https://source.icode504.com/images/image-20240227114535913.png"></p><h1 id="五、安装Ubuntu操作系统"><a href="#五、安装Ubuntu操作系统" class="headerlink" title="五、安装Ubuntu操作系统"></a>五、安装Ubuntu操作系统</h1><p>1. 开启刚刚创建好的虚拟机：</p><p><img src="https://source.icode504.com/images/image-c4b2e376f743d10bdaed76bb494015ce.png" alt="https://source.icode504.com/images/image-c4b2e376f743d10bdaed76bb494015ce.png"></p><p>2. 进入安装界面，选择第一个<strong>Try or Install Ubuntu Server</strong>，然后按一下回车：</p><p><img src="https://source.icode504.com/images/image-a45c1b00c888a3c60c9fb6eb62226d91.png" alt="https://source.icode504.com/images/image-a45c1b00c888a3c60c9fb6eb62226d91.png"></p><p>3. 此时会加载Ubuntu的安装界面，请耐心等待。</p><p>4. 加载完成后 ，进入Ubuntu安装界面，在左侧安装语言选择<strong>中文（简体）</strong>，然后点击<strong>安装Ubuntu</strong>：</p><p><img src="https://source.icode504.com/images/image-cc06ba35c387e0eadc83021df486d07a.png" alt="https://source.icode504.com/images/image-cc06ba35c387e0eadc83021df486d07a.png"></p><p>5. 键盘布局按照系统默认即可，点击右下角<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-b8f9fd9dafd565717b2333028469a3c7.png" alt="https://source.icode504.com/images/image-b8f9fd9dafd565717b2333028469a3c7.png"></p><p>6. 更新和安装软件界面按照系统默认即可，点击右下角<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-040276d5e0494d2e791c758ecfb72344.png" alt="https://source.icode504.com/images/image-040276d5e0494d2e791c758ecfb72344.png"></p><p>7. 安装类型按照系统默认选择即可，点击右下角<strong>现在安装</strong>：</p><p><img src="https://source.icode504.com/images/image-65f57f8dff166879820be93a517eefbf.png" alt="https://source.icode504.com/images/image-65f57f8dff166879820be93a517eefbf.png"></p><p>8. 此时会弹出是否写入磁盘的提示，点击右下角<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-085f4d8785529f2b79d1634221602f7c.png" alt="https://source.icode504.com/images/image-085f4d8785529f2b79d1634221602f7c.png"></p><p>9. 时区默认选择上海（Shanghai），点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-f075741396e1c22f7afa75d1841fb898.png" alt="https://source.icode504.com/images/image-f075741396e1c22f7afa75d1841fb898.png"></p><p>10. 按照下面内容进行配置用户名和密码，点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-2e3ad7e6782f73b6c58babe578f475c3.png" alt="https://source.icode504.com/images/image-2e3ad7e6782f73b6c58babe578f475c3.png"></p><p>11. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-7bb2634c42cb16c881c0feca7c6e0552.png" alt="https://source.icode504.com/images/image-7bb2634c42cb16c881c0feca7c6e0552.png"></p><p>12. 安装完成，点击<strong>立即重启</strong>：</p><p><img src="https://source.icode504.com/images/image-93bd6e17ef672a9c9ad8dceb317a8b0a.png" alt="https://source.icode504.com/images/image-93bd6e17ef672a9c9ad8dceb317a8b0a.png"></p><p>13. 重启以后，点击前面创建的用户，输入当前用户密码，按一下<kbd>Enter</kbd>键：</p><p><img src="https://source.icode504.com/images/image-e850bc14f3a1cbbb530b46e8849c63f2.png" alt="https://source.icode504.com/images/image-e850bc14f3a1cbbb530b46e8849c63f2.png"></p><p><img src="https://source.icode504.com/images/image-56d92f94483b5208f99664ffc0623f32.png" alt="https://source.icode504.com/images/image-56d92f94483b5208f99664ffc0623f32.png"></p>]]></content>
    
    
    <categories>
      
      <category>系统安装</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之字符串类型string</title>
    <link href="/posts/87.html"/>
    <url>/posts/87.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis字符串类型介绍"><a href="#一、Redis字符串类型介绍" class="headerlink" title="一、Redis字符串类型介绍"></a>一、Redis字符串类型介绍</h1><p>Redis字符串类型官网介绍（英文）</p><p><img src="https://source.icode504.com/images/image-20240724223009996.png"></p><p>Redis的字符串（string）存储字节序列，包含文本、序列化对象和二进制数组。字符串类型是Redis的key对应的值中最简单的类型。字符串类型通常用于缓存，但是它们也可以实现计数和位运算等功能。</p><p>Redis字符串类型特性：<strong>单个键（key）对应单个值（value）</strong>。</p><p><img src="https://source.icode504.com/images/image-f1474adb7a4a9785602de95d07b7154f.png"></p><p>默认情况下，一个字符串类型的值（value）最大可以存储<strong>512MB</strong>数据。</p><p><img src="https://source.icode504.com/images/image-20240724223651330.png"></p><p>应用场景：</p><p>1. 视频&#x2F;文章点赞功能；</p><p>2. 统计视频播放量、文章阅读量等。</p><h1 id="二、Redis字符串常用命令"><a href="#二、Redis字符串常用命令" class="headerlink" title="二、Redis字符串常用命令"></a>二、Redis字符串常用命令</h1><p>1. 添加和修改Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-2a901b0690611a7031359aae33788a63.png"></p><p>如果对应的value存在空格等特殊符号，需要使用双引号：</p><p><img src="https://source.icode504.com/images/image-77fbf8e4d87a87b69d254175fecc9b3c.png"></p><ul><li>为当前的key设置过期时间（单位：秒）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value EX seconds<br></code></pre></td></tr></table></figure><p>其中ex（expire）值的是当前的key-value存在过期时间，seconds就是我们自定义的过期时间（秒）：</p><p><img src="https://source.icode504.com/images/image-02b57f88cac1a9974ae8fad0599f60a1.png"></p><ul><li>为当前的key设置过期时间（单位：毫秒）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value PX milliseconds<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-705784c2a1f19ec632ec1db11eeaf33e.png"></p><ul><li>当前key如果不存在时，创建key，否则不创建，相当于后续学习的SETNX命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value NX<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-3e89873a762343855f4b2036fa932fc7.png"></p><ul><li>当前key如果存在时，对当前的value进行覆盖：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value XX<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-41cf5e3aae6b4e89b75a712179e30ed9.png"></p><p>2. 获取当前key对应的value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET key<br></code></pre></td></tr></table></figure><p>这里我们顺便验证一下上述set命令是否由修改key的功能（数据覆盖）：</p><p><img src="https://source.icode504.com/images/image-28cea7af55609ec0792a4ebe2d608691.png"></p><p>3. 批量设置多个key-value：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">MSET <span class="hljs-built_in">key</span> value [<span class="hljs-built_in">key</span> value ...]<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-e2536ace26340d57f76adef48331f83b.png"></p><p>4. 批量获取多个key对应的value：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">MGET <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span> ...]<br></code></pre></td></tr></table></figure><p>获取前面设置的key对应的value：</p><p><img src="https://source.icode504.com/images/image-9b58a9f114c3e1a30846ffff8cd8af5c.png"></p><p>5. 批量设置一个或多个key-value对，<strong>当前仅当所有给定的key都不存在</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MSETNX key value [key value ...]<br></code></pre></td></tr></table></figure><p>执行成功返回1，如果命令中的key已经存在，则执行失败，返回结果是0：</p><p><img src="https://source.icode504.com/images/image-fb8b56760bf93b030a66d9c43b3b823f.png"></p><p>MSETNX具有原子性，所给的key-value要么执行成功，如果有一个key已经存在，那么这个命令就不会执行成功。</p><p>6. 获取指定区间范围内的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GETRANGE key start end<br></code></pre></td></tr></table></figure><p>假设key对应的value默认的长度是<code>value.length</code>。和Java的字符串类似，Redis字符串从左向有得出的范围是$[0,value.length)$。</p><p>Redis对于value的索引值范围也可以从当前字符串最末尾的字符索引值是-1，前一个字符索引值为-2，以此类推（从右向左）。由此我们也可以得出Redis字符串索引值范围是$[-value.length, -1]$。</p><p>假设当前有一个key，对应的value是iCode504，下图就是对正向索引值范围和逆向索引值范围的分析：</p><p><img src="https://source.icode504.com/images/image-1076b561c2fa8becf4dd98d60323243f.png"></p><p>我们在使用上述GETRANGE命令时，start和end的索引值范围是$[0, value.length)$或者$[-value.length, -1]$，两个范围的值可以混用。例如：value的开始位置0，末尾是-1，如果想通过GETRANGE获取整个字符串，那么执行命令就是<code>GETRANGE 0 -1</code>。</p><p>以下是GETRANGE命令的使用：</p><p><img src="https://source.icode504.com/images/image-dcf603c77dbe6061d0dba8512660118f.png"></p><p>7. 将当前key对应的value某个偏移量覆盖新值（overwriteValue），</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">SETRANGE key <span class="hljs-built_in">offset</span> value<br></code></pre></td></tr></table></figure><p>其中offset是偏移量，它本质上就是一个索引值，这个命令是将当前offset及之后覆盖新值value，覆盖区间：$[offset, offset + value.length)$</p><p>以下是SETRANGE实现数据覆盖的原理图：</p><p><img src="https://source.icode504.com/images/image-9ad4794848618a4e0784890300a8d998.png"></p><p>以下是SETRANGE命令的使用：</p><p><img src="https://source.icode504.com/images/image-7e6e141d7031ea51939d41eb4f442f6c.png"></p><p>8. 数值加减操作：必须保证key对应的value是数字才可以进行加减操作。</p><p>下面命令的返回值都是数值增加&#x2F;减少的结果：</p><p>递增数值，每次自增1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INCR key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-e6c32a793ccd237c80cd561489f6b26a.png"></p><p>增加指定的整数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">INCRBY key increment<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-575a722e1c570676e93783735291f1cb.png"></p><p>递减数值，每次自减1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DECR key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-fe3517bfd85889618543507b47d496c8.png"></p><p>减少指定的整数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DECR key decrement<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-b27415726001c043d5860c790317574a.png"></p><p>9. 获取字符串长度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">STRLEN key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-3aa4ff5e2541e511d9cb20648b5c6e4c.png"></p><p>10. 内容追加（在字符串末尾添加内容）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">APPEND key value<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-32754c3500385b5f25a6238f2f9468b9.png"></p><p>11. 当前key不存在时，创建key；存在则不执行上述操作（该命令可用于分布式锁）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SETNX key value<br></code></pre></td></tr></table></figure><p>如果执行成功，返回结果是1；如果失败，返回结果是0</p><p><img src="https://source.icode504.com/images/image-4dae23cd2ea1dd158f9773bc134dd903.png"></p><p>12. 为当前key设置过期时间（单位：秒，该命令可用于分布式锁）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SETEX key seconds value<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-a5d91ddff5c5b28557b761e191b798e9.png"></p><ol start="13"><li>GETSET命令：先执行GET命令并返回当前key对应的value，然后对key<strong>立即执行</strong>GET操作：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GETSET key value<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-94033a91a726b3d72b0526a089dbb90b.png"></p><h1 id="三、Redis字符串命令的注意事项"><a href="#三、Redis字符串命令的注意事项" class="headerlink" title="三、Redis字符串命令的注意事项"></a>三、Redis字符串命令的注意事项</h1><p>大多数字符串命令的时间复杂度是$O(1)$，这也就意味着执行这些命令效率非常高。需要注意的是，如下几个命令的时间复杂度是$O(n)$：</p><ul><li>SUBSTR</li><li>GETRANGE</li><li>SETRANGE</li></ul><p>这几个随机访问的字符串命令在处理超大字符串的时候可能会出现性能问题。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的key（键）相关操作</title>
    <link href="/posts/86.html"/>
    <url>/posts/86.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><p>以下是Redis键（以下称作 key）的相关操作：</p><p>1. 添加一个key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET key value<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-b788c6b1211981fa4908a7286b3f93fb.png"></p><p>本文中涉及到的value默认都是Redis字符串（String）类型。</p><p>2. 获取key对应的value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET key<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-f1e5415d917fa4d114583692923f974e.png"></p><p>3. 查看当前库所有的 key名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">KEYS *<br></code></pre></td></tr></table></figure><p>这里我的库中有 3 个 key：k1、k2、k3：</p><p><img src="https://source.icode504.com/images/image-ffd4c285af89882da0374d2e6eec6c14.png"></p><p>4. 判断某个 key 是否存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXISTS key<br></code></pre></td></tr></table></figure><p>如果 key 存在，那么返回 1，不存在则返回 0：</p><p><img src="https://source.icode504.com/images/image-5602cf9de396706af8b6833254c22f24.png"></p><p>5. 查看当前 key 的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">TYPE key<br></code></pre></td></tr></table></figure><p>这里我们查看一下键 k1 的类型，它是 string（字符串）类型：</p><p><img src="https://source.icode504.com/images/image-93453d8afe5c7c3d278819ef938d7cb0.png"></p><p>6. 删除指定的 key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DEL key<br></code></pre></td></tr></table></figure><p>删除成功返回 1，失败返回 0：</p><p><img src="https://source.icode504.com/images/image-e3c13ff500eb3662e6d2dae08557b629.png"></p><p>7. 非阻塞删除：仅仅将当前 key 在 keyspace 元数据中删除，真正删除操作会在后续的异步中操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UNLINK key<br></code></pre></td></tr></table></figure><p>如果删除成功，返回结果是 1，失败则返回 0：</p><p><img src="https://source.icode504.com/images/image-72c1dbc529ff96ee3abce9ad163e077d.png"></p><p>DEL 命令在删除 key 对应的数据的时候，默认是阻塞的，如果不彻底将数据删除，后续的操作将无法执行。在一些高并发系统中，这样的删除方式可能会影响到程序的正常运行。而 UNLINK 命令做到数据在“表面上”删除，真正的数据删除在后续的异步中操作。</p><p>UNLINK 命令类似于 Windows 中的普通删除，如果我们想删除一个大文件，直接按<kbd>Delete</kbd>键会将其快速将文件放入到回收站，后续想删除直接鼠标右键点击清空回收站就真正执行删除数据操作；而 DEL 命令则类似选中这个文件直接按<kbd>Shift</kbd><kbd>Delete</kbd>键不通过回收站直接彻底删除文件。</p><p>8. 查看当前 key 过期时间（单位：秒）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">TTL key<br></code></pre></td></tr></table></figure><p>-1 表示当前 key 永不过期，-2 表示当前 key 已过期：</p><p><img src="https://source.icode504.com/images/image-34761b6bb584859d47f974b7dfba7feb.png"></p><p>9. 为给定的 key 设置过期时间（单位：秒）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">EXPIRE key seconds</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-18ff0e12cfa2ad0aa2f6d324ccee0ca5.png"></p><p>10. 将当前数据库的 key 移动到指定的数据库 db 当中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MOVE key dbindex [0-15]<br></code></pre></td></tr></table></figure><p>如果目标库中已经存在key，那么执行上述命令的结果是0；不存在的时候，返回结果是1。</p><p>11. 切换数据库[0-15]，默认使用的索引值为 0 数据库（这里我称之为db0，索引值为5的数据库称之为db5，以此类推）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT dbindex<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-707da910a57527cf478dc8de5e5eb6d8.png"></p><p>Redis 默认有 16 个数据库，编号范围是[0, 15]，在 Redis 配置文件 redis.conf 中有相应配置可以作证上述说法：</p><p><img src="https://source.icode504.com/images/image-20240724213929763.png"></p><p>配置数据库的数量，默认的数据库是索引为 0 的数据库（db0），你可以通过<code>select &lt;dbid&gt;</code>命令切换到另一个数据库，数据库 id（dbid）范围是 0 到 databases - 1（在配置文件中 databases 对应的值是 16），即可切换的数据库范围在[0, 15]这个区间内。</p><p>12. 查看当前数据库 key 的数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DBSIZE<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-bad2a23ae450b082a5eb5d5d16b051ac.png"></p><ol start="13"><li>清空当前库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FLUSHDB<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-73843f8f9abb8bd22c5efd728cd368d3.png"></p><p>14. 清空全部库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FLUSHALL<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-7fac8545aeb2cd3e504ad7c699caf5b8.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis远程连接工具TinyRDM安装、配置和卸载教程（Window版）</title>
    <link href="/posts/85.html"/>
    <url>/posts/85.html</url>
    
    <content type="html"><![CDATA[<p>TinyRDM是一款轻量级的Redis数据库管理工具，提供了用户友好的图形界面，便于开发者和数据库管理员进行Redis数据库的连接、管理和监控。它支持多种Redis命令操作，提供丰富的可视化功能，直观地展示数据结构和存储信息。TinyRDM简洁高效，适合日常的Redis管理工作。</p><p>以下是Windows环境下安装Tiny RDM教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>1. 请确保Linux操作系统上安装了Redis，需要安装的小伙伴点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/83.html">点我查看</a></p><p>2. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>进入命令行界面，执行如下命令查看当前操作系统信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systeminfo<br></code></pre></td></tr></table></figure><p>这里我的电脑是Windows操作系统，使用的是x64指令集：</p><p><img src="https://source.icode504.com/images/image-42448e12a41218868a6c13ecb9bb4fac.png"></p><h1 id="二、下载RDM"><a href="#二、下载RDM" class="headerlink" title="二、下载RDM"></a>二、下载RDM</h1><p>1. 打开Tiny RDM官网：<a href="https://redis.tinycraft.cc/zh/">点我查看</a></p><p>2. 鼠标移到<strong>下载安装</strong>按钮，根据前面我们查看的电脑指令集，x64的小伙伴点击第一个链接下载，arm64的小伙伴按照下图蓝色框找到arm64安装包下载：</p><p><img src="https://source.icode504.com/images/image-b59501b9a12f6cd374df34e6bbea4d73.png"></p><h1 id="三、安装Tiny-RDM"><a href="#三、安装Tiny-RDM" class="headerlink" title="三、安装Tiny RDM"></a>三、安装Tiny RDM</h1><p>1. 双击下载好的安装包，进入欢迎页面，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-5d61a9e5c54b2371c1de5f9bd7371741.png"></p><p>2. 选择安装位置，这里我安装在了D盘，完成后点击下方的<strong>Install</strong>：</p><p><img src="https://source.icode504.com/images/image-0338ea215e228ffe2f1f75d4f53756b0.png"></p><p><img src="https://source.icode504.com/images/image-cdb3280e85900997f87c56463a7321fa.png"></p><p><img src="https://source.icode504.com/images/image-366228e45dde0f2d6242215118aad761.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-19b9e279c735690243cb0c280afa633e.png"></p><p>4. 安装完成，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-41e953de613efc4a40ceb7f40bf5c63e.png"></p><p>5. 点击Finish，Tiny RDM安装完成：</p><p><img src="https://source.icode504.com/images/image-aea53fb429cfdcd78af24fe463d79aa1.png"></p><h1 id="四、使用Tiny-RDM远程连接Redis"><a href="#四、使用Tiny-RDM远程连接Redis" class="headerlink" title="四、使用Tiny RDM远程连接Redis"></a>四、使用Tiny RDM远程连接Redis</h1><p>1. 在桌面上打开Tiny RDM，点击左下角的加号，新建一个Redis连接：</p><p><img src="https://source.icode504.com/images/image-c9ca4f23e1de2fbae1604ab9d3e397d5.png"></p><p>2. 按照下图所示操作，配置Redis的连接配置，完成后点击左下角的<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-5f52a47a8b58ea3606d615f8dbd4737c.png"></p><p>3. 如果下方弹出提示“成功连接到Redis服务器”就说明前面的Redis配置没有问题，此时我们点击右下角的确认就可以使用Redis了：</p><p><img src="https://source.icode504.com/images/image-2e1872a9dac580830efd657e8e03d8cb.png"></p><p>4. 双击左侧的Redis连接，再点击控制台，我们就可以正常使用Redis命令了：</p><p><img src="https://source.icode504.com/images/image-e69cbbaec6fcf640e0fca44ae8e6d89b.png"></p><p><img src="https://source.icode504.com/images/image-ce17051a4ad9fa5e8e7760faea13b289.png"></p><h1 id="五、卸载Tiny-RDM"><a href="#五、卸载Tiny-RDM" class="headerlink" title="五、卸载Tiny RDM"></a>五、卸载Tiny RDM</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="./31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到Tiny RDM，鼠标右键点击卸载：</p><p><img src="https://source.icode504.com/images/image-1a599a7929a7e9d3ef67b9493ee14e36.png"></p><p>2. 卸载完成，点击<strong>Close</strong>：</p><p><img src="https://source.icode504.com/images/image-e8074c380dab1832a162f5f92945eb4e.png"></p><p>3. 此时Geek会我们检测出安装残留，我们只需要点击<strong>完成</strong>即可，清除卸载残留：</p><p><img src="https://source.icode504.com/images/image-1500d9efcb12ecffcfc0436750c6f07f.png"></p><p>4. 清理完毕，关闭Geek即可：</p><p><img src="https://source.icode504.com/images/image-7e0bc4c21357f1e25531850670e992fb.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Redis</tag>
      
      <tag>TinyRDM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js安装、配置教程（macOS版）</title>
    <link href="/posts/84.html"/>
    <url>/posts/84.html</url>
    
    <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，使 JavaScript 能够在服务器端运行，它提供了一个事件驱动的非阻塞 I&#x2F;O 模型，使得构建高效、可扩展的网络应用变得更加容易。而 npm（Node Package Manager）是 Node.js 的包管理工具，用于安装、分享、管理 JavaScript 代码包，使开发者能够轻松地将自己的代码与他人的代码集成，并且享受到社区共享的各种功能模块。Node.js 和 npm 的结合使得 JavaScript 开发者能够在服务器端和客户端都使用同一种语言，极大地提高了开发效率和跨平台能力。</p><p>以下是 macOS 环境下 Node.js 的安装教程。本文提供两种方式安装Node.js，读者任选一种方式安装即可：</p><h1 id="方式一：正常安装"><a href="#方式一：正常安装" class="headerlink" title="方式一：正常安装"></a>方式一：正常安装</h1><h2 id="一、下载-Node-js-安装包"><a href="#一、下载-Node-js-安装包" class="headerlink" title="一、下载 Node.js 安装包"></a>一、下载 Node.js 安装包</h2><p>1. 打开右侧链接地址，进入 Node.js 官方下载链接列表页：<a href="https://nodejs.org/dist/">点我查看</a></p><p>2. 这里我选择 v16.20.2 版本下载，找到这个文件夹，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240610231104421.png"></p><p>3. macOS 系统点击以<code>.pkg</code>结尾的安装包下载：</p><p><img src="https://source.icode504.com/images/image-20240720234836974.png"></p><h2 id="二、安装-Node-js"><a href="#二、安装-Node-js" class="headerlink" title="二、安装 Node.js"></a>二、安装 Node.js</h2><p>1. 打开安装包，进入欢迎界面，点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235111507.png"></p><p>2. 软件许可协议，点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235157923.png"></p><p>3. 点击<strong>同意</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235223513.png"></p><p>4. 点击<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235315573.png"></p><p>5. 输入当前用户名和密码，然后点击<strong>安装软件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235518573.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240720235554831.png"></p><p>7. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720235630219.png"></p><p>8. 如果不需要安装包，点击<strong>移到废纸篓</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240720235653399.png"></p><h2 id="三、npm-更换镜像源"><a href="#三、npm-更换镜像源" class="headerlink" title="三、npm 更换镜像源"></a>三、npm 更换镜像源</h2><p>Node.js 中包含一个重要模块：npm，它的作用是帮助我们下载项目中的依赖（你可以理解成下载对应的软件包），但是 npm 默认的下载地址在国外，如果使用了默认的下载地址，后续在使用 npm 的过程中下载依赖会非常慢，因此，我们需要将 npm 默认的下载地址改成国内镜像，这里我使用的是淘宝镜像源。</p><p>1. 执行如下命令查看当前<code>npm</code>的下载源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240721000008097.png"></p><p>2. 将镜像源更改成淘宝镜像源，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>3. 再次执行如下命令，镜像源成功修改为淘宝镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240721000256123.png"></p><h1 id="方式二：Homebrew-安装-Node-js"><a href="#方式二：Homebrew-安装-Node-js" class="headerlink" title="方式二：Homebrew 安装 Node.js"></a>方式二：Homebrew 安装 Node.js</h1><p>请确保电脑上已经安装了 Homebrew：<a href="https://www.icode504.com/posts/82.html">点我查看</a></p><h2 id="一、安装-Node-js-并配置环境变量"><a href="#一、安装-Node-js-并配置环境变量" class="headerlink" title="一、安装 Node.js 并配置环境变量"></a>一、安装 Node.js 并配置环境变量</h2><p>1. 打开终端，执行如下命令查找可安装的 Node.js 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search node<br></code></pre></td></tr></table></figure><p>等待一段时间后，我们可以看到如下几个版本的 Node.js：</p><p><img src="https://source.icode504.com/images/image-20240721102504550.png"></p><p>2. 这里我安装的是 Node.js 16 的最新稳定版本，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node@16<br></code></pre></td></tr></table></figure><p>等待一段时间后（预估 5~10 分钟），安装完成，接下来我们来配置环境变量。</p><p>3. 在当前目录下新建一个文件 node_env.sh，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim node_env.sh<br></code></pre></td></tr></table></figure><p>4. 复制如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#NODEJS_HOME</span><br>NODEJS_HOME=/usr/local/opt/node@16<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODEJS_HOME</span>/bin<br><span class="hljs-built_in">export</span> PATH NODEJS_HOME<br></code></pre></td></tr></table></figure><p>5. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第 4 步的代码，效果如下图所示：</p><blockquote><p>下图第 2 行中的路径需要根据你所安装的 Node.js 版本去更改，这里我安装的是 Node.js 16 版本，因此路径是<code>/usr/local/opt/node@16</code>，如果你安装的是其他版本的 Node.js，那么将路径改成其他版本的路径。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240721104239363.png"></p><p>6. 完成上述配置后，按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>并按一下回车（保存并退出）。</p><p>7. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> node_env.sh<br></code></pre></td></tr></table></figure><p>8. 执行如下两个命令即可查看 Node.js 和 npm 的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="二、npm-更换镜像源"><a href="#二、npm-更换镜像源" class="headerlink" title="二、npm 更换镜像源"></a>二、npm 更换镜像源</h2><p>Node.js 中包含一个重要模块：npm，它的作用是帮助我们下载项目中的依赖（你可以理解成下载对应的软件包），但是 npm 默认的下载地址在国外，如果使用了默认的下载地址，后续在使用 npm 的过程中下载依赖会非常慢，因此，我们需要将 npm 默认的下载地址改成国内镜像，这里我使用的是淘宝镜像源。</p><p>1. 执行如下命令查看当前<code>npm</code>的下载源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240721105347155.png"></p><p>2. 将镜像源更改成淘宝镜像源，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>3. 再次执行如下命令，镜像源成功修改为淘宝镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240721105711377.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>前端框架工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>Node.js</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问Github卡顿甚至进不去的解决办法（适用于macOS）</title>
    <link href="/posts/80.html"/>
    <url>/posts/80.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Github 是全球知名的开源宝库，但是对国内用户并不友好。当我们在浏览器中输入<code>www.github.com</code>时，如果你赶的时间点比较好可能会进去，但是大多数情况下浏览器不会对你的请求做出任何响应，就像下图这样：</p><p><img src="https://source.icode504.com/images/image-20231229085526297.png"></p><p>那么，有什么办法解决这个问题呢？</p><h1 id="二、访问-Github——Watt-Tookit（原-Steam-）"><a href="#二、访问-Github——Watt-Tookit（原-Steam-）" class="headerlink" title="二、访问 Github——Watt Tookit（原 Steam++）"></a>二、访问 Github——Watt Tookit（原 Steam++）</h1><p>官网介绍：Watt Tookit 是一个开源的跨平台的多功能 Stream 工具箱，它可以管理你 Steam 游戏库存，监控 Steam 游戏下载进度实现自动定时关机等功能。本文要介绍的是它的网络加速功能，它内部添加了 Github 网络加速功能。</p><p>原作者在 B 站有账号，感兴趣的小伙伴可以关注支持一下：<a href="https://space.bilibili.com/3546572635768935">点我传送到 B 站</a></p><p>接下来我们就来安装一下 Watt Tookit：</p><p>1. 点击右侧链接进入官网：<a href="https://steampp.net/">点我进入官网</a></p><p>2. 根据自己的操作系统下载，这里我使用的是 macOS 版本，点击下载按钮：</p><p><img src="https://source.icode504.com/images/image-20240720123429084.png"></p><p>3. 此时会弹出一个 GNU 通用公共许可证协议，点击右下角<strong>接受并下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229091615168.png"></p><p>4. 官方为我们提供多个下载渠道，这里我点击左下角Nas分流（德国）下载链接：</p><p><img src="https://source.icode504.com/images/image-20240720125053299.png"></p><p>5. 进入后，点击最新版本：</p><p><img src="https://source.icode504.com/images/image-20240720125252862.png"></p><p>6. 选择Mac版本的文件夹：</p><p><img src="https://source.icode504.com/images/image-20240720125357620.png"></p><p>7. 选中这个文件，点击右上角的<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720125531721.png"></p><p>8. 双击打开安装包，按照下图所示操作，将Steam++拖入到应用程序：</p><p><img src="https://source.icode504.com/images/240720001.gif"></p><p>9. 等待一段时间后，软件安装完成，找到Steam++并打开：</p><p><img src="https://source.icode504.com/images/image-20240720130155688.png"></p><p>10. 此时会系统会弹出一个错误：无法打开“Steam++”，因为它来自身份不明的开发者。点击窗口下方<strong>好</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720130427359.png"></p><p>11. 点击左上角苹果logo，然后点击<strong>系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155139125.png"></p><p>12. 点击<strong>左侧隐私与安全性</strong>，向下找安全性中有一个提示信息：已阻止使用“Steam++”，因为它来自身份不明的开发者。点击提示信息下方的<strong>仍要打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720130839492.png"></p><p>13. 输入本机的用户名和密码，完成后点击<strong>修改设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155514630.png"></p><p>14. 此时会弹出如下的提示信息，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720131206774.png"></p><p>15. 打开后，按照下图所示操作完成对Github的配置：</p><p><img src="https://source.icode504.com/images/image-20240720133958064.png"></p><p>16. 为了避免每次启动和关闭加速需要输入密码，打开终端执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 666 /etc/hosts<br></code></pre></td></tr></table></figure><p>输入本机用户密码（密码不在终端中显示），完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240720133727253.png"></p><p>17. 切回到Watt Tookit，点击一键加速，此时Github的加速已经成功开启：</p><p><img src="https://source.icode504.com/images/image-20240720134347410.png"></p><p>11. 此时在浏览器再次访问<a href="https://www.github.com/">Github</a>，就可以正常显示页面了。虽然访问速度还是慢，但是总比响应超时啥也不显示的强：</p><p><img src="https://source.icode504.com/images/image-20231229101555911.png"></p><p>此时我们使用<code>git clone</code>命令拉取仓库代码，或者是使用<code>git push</code>命令将代码推送到我们的 Github 仓库就不会因为网络问题而无法进行操作的问题了。</p><h1 id="三、下载-Github-中的内容"><a href="#三、下载-Github-中的内容" class="headerlink" title="三、下载 Github 中的内容"></a>三、下载 Github 中的内容</h1><p>Github 有很多优秀的开源作品可以下载，如果是大文件使用浏览器，等到猴年马月都下载不完（下载速度真的是太慢了），以下是使用 NDM 和 Github 加速网站下载 Github 的内容的实现步骤。</p><p>这里我想下载 Google 家的 Noto Serif 全语言字体包（<a href="https://github.com/notofonts/noto-cjk/releases">点我查看源网站</a>），文件大小 600M 左右，如果正常使用浏览器下载非常慢，接下来我们就使用 NDM+Github 加速网站解决上述问题。</p><blockquote><p>本文后续内容使用 NDM（Neat Download Manager）下载文件，如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器 NDM（Neat Download Manager）安装配置教程（适用于 Windows 和 MacOS）</a></p></blockquote><p><img src="https://source.icode504.com/images/image-20240720135903758.png"></p><p>3. 首先，我们对要下载的文件，鼠标右键<strong>复制链接</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720140012891.png"></p><p>4. 以下是我整理的 Github 镜像网站，大家任选一个链接进入即可，这里我选择第一个网站进入：</p><table><thead><tr><th>网站名称</th><th>链接</th></tr></thead><tbody><tr><td>Github 镜像站 1</td><td><a href="https://gitdl.cn/">https://gitdl.cn/</a></td></tr><tr><td>Github 镜像站 2</td><td><a href="https://moeyy.cn/gh-proxy">https://moeyy.cn/gh-proxy</a></td></tr><tr><td>Github 镜像站 3</td><td><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn/</a></td></tr></tbody></table><p>5. 将上面复制的链接粘贴到输入框中，点击下载即可</p><p><img src="https://source.icode504.com/images/image-20231229103230888.png"></p><p>6. 使用 NDM，下载速度直接原地起飞：</p><p><img src="https://source.icode504.com/images/image-20240720135740502.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Neat Download Manager</tag>
      
      <tag>NDM</tag>
      
      <tag>Github</tag>
      
      <tag>Watt Tookit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA安装配置教程（macOS版）</title>
    <link href="/posts/79.html"/>
    <url>/posts/79.html</url>
    
    <content type="html"><![CDATA[<p>Intellij IDEA（简称 IDEA）是 Java 语言的集成开发环境，在业界公认为是一款优秀的 Java 开发工具。分为 Community 社区版（免费）和 Untimate 终极版（付费）。</p><p>IDEA 是一款智能编译器。它可以进行智能代码补全、提供问题工具窗口、代码上下文检查操作、实时模板、项目级别代码重构、重复代码检测等功能。</p><p>IDEA 终极版为现代应用程序和 Java 相关微服务开发框架提供了一流的支持。IDEA 对 SpringBoot、Jakata EE、JPA 等框架提供一流的支持。其内部支持很多的内置工具，例如：调试器、数据库工具、终端、反编译器、WEB 开发、版本控制（Git）、导航和搜索功能等。</p><p>以下是 macOS 环境下 Intellij IDEA 安装和使用：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>检查本机信息：点击左上角苹果 logo，点击第一个<strong>关于本机</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224151904945.png"></p><p>这里需要留意一下处理器信息，这里我的电脑使用的是 Intel 芯片：</p><p><img src="https://source.icode504.com/images/image-20240224152112087.png"></p><h1 id="二、安装-Intellij-IDEA"><a href="#二、安装-Intellij-IDEA" class="headerlink" title="二、安装 Intellij IDEA"></a>二、安装 Intellij IDEA</h1><p>1. 进入 IDEA 的官方下载页面，<a href="https://www.jetbrains.com.cn/idea/download/other.html">点我查看</a>。向下找，找到 2021.1.3 版本（事实上，要下载的版本和最新版本使用 Java 编写代码的差异并不大）</p><p><img src="https://source.icode504.com/images/image-20240714200819541.png"></p><p>2. 按照下图所示操作，根据自己电脑所属的芯片，下载 IDEA 安装包：</p><p><img src="https://source.icode504.com/images/image-20240714201351730.png"></p><p>3. 双击打开 dmg 安装包：</p><p><img src="https://source.icode504.com/images/image-20240714202000237.png"></p><p>4. 将 IDEA 图标拖到 Applications 中：</p><p><img src="https://source.icode504.com/images/240714001.gif"></p><p>5. 等待一段时间后，IDEA 安装完成（上一步的窗口可以关闭了），双击打开 IDEA：</p><p><img src="https://source.icode504.com/images/image-20240714202540154.png"></p><p>6. 此时会弹出一个是否打开提示框，点击<strong>打开</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240714202719791.png"></p><p>7. 出现数据分享窗口后，选择<strong>Don’t Send</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714202840090.png"></p><p>8. 是否导入 IDEA 相关设置，这里我们选择第二个<strong>Do not import settings</strong>（不导入相关设置），然后点击 OK：</p><p><img src="https://source.icode504.com/images/image-20240714203008407.png"></p><p>9. 进入激活页面，我们下载的是 IDEA Ultimate 版，正常是需要按月或者按年支付费用的。此处我们先按照下图进行 30 天的免费试用：</p><p><img src="https://source.icode504.com/images/image-20240714203201339.png"></p><blockquote><p>如需正版，请点击右侧链接到官网购买（需要注册账号）：<a href="https://www.jetbrains.com.cn/idea/buy/?section=personal&billing=yearly">点我进入</a></p></blockquote><p>10. 出现下方这个页面以后，就说明我们 30 天使用申请成功，此时点击<strong>Continue</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714203307772.png"></p><p>11. 进入 IDEA 欢迎界面以后，点击<strong>Plugins</strong>进入插件下载页面：</p><p><img src="https://source.icode504.com/images/image-20240714203433311.png"></p><p>12. 点击右上角小齿轮，点击<strong>Manage Plugin Repositories</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714203742327.png"></p><p>13. 点击左上角的加号，复制下方链接并粘贴到输入框中，然后点击<strong>OK</strong>：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//plugins.zhile.io</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240714204038845.png"></p><p>14. 此时在插件下载页面中搜索<strong>IDE Eval Reset</strong>，然后点击<strong>Install</strong>：</p><blockquote><p><code>IDE Eval Reset</code>插件的作用是无限延长 IDEA 的试用期。正常 IDEA 给我们的试用是 30 天，使用这款插件以后，只要快到了需要激活 IDEA 的时间，他就会自动延长一个月的试用期。从理论上来讲，安装这款插件以后，理论上就可以实现永久使用。</p><p>这款插件仅限于在 IDEA 2021.2.2 以下的版本使用，往后的版本中不适用。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240714204528046.png"></p><p>15. 出现此弹框时，点击<strong>Accept</strong>，此时 IDEA 会安装此插件：</p><p><img src="https://source.icode504.com/images/image-20240714204615056.png"></p><p>16. 至此，IDEA 安装和简单的配置已经完成了。此插件具体使用详见下一部分内容。</p><p><img src="https://source.icode504.com/images/image-20240714204657381.png"></p><h1 id="三、使用-Intellij-IDEA-编写并运行-Java-程序"><a href="#三、使用-Intellij-IDEA-编写并运行-Java-程序" class="headerlink" title="三、使用 Intellij IDEA 编写并运行 Java 程序"></a>三、使用 Intellij IDEA 编写并运行 Java 程序</h1><p>1. 请确保本地已经安装了 JDK，如果没有安装的，查看此文章一步一步安装即可：<a href="./78.html">点我查看</a>。</p><p>2. 打开终端，输入<code>java -version</code>命令表示电脑上已经成功安装并配置了 JDK：</p><p><img src="https://source.icode504.com/images/image-20240714133339950.png"></p><p>3. 创建项目：点击左侧<strong>Projects</strong>，然后点击<strong>New Project</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714205132577.png"></p><p>4. 点击左侧创建 Java 项目，此时 IDEA 会自动为我们检测本机是否安装 JDK，下图表示本机已经成功安装了 JDK（1.8.0_401 版本），确认无误后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714205428656.png"></p><p>5. 直接点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714205515637.png"></p><p>6. 填写项目名称，建议是英文名称，项目存储路径建议是英文路径并且自己后续可以找到的位置，完成后点击<strong>Finish</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714205848653.png"></p><p>7. 进入 IDEA 主界面以后，会弹出一个每日小提示窗口，按照下图所示操作将其永久关闭：</p><p><img src="https://source.icode504.com/images/image-20240714210041158.png"></p><p>8. 在左侧文件夹中，鼠标右键点击<strong>src</strong>蓝色文件夹，选择第一个<strong>New</strong>，再选择<strong>Java Class</strong>，创建一个 Java 文件：</p><p><img src="https://source.icode504.com/images/image-20240714210404123.png"></p><p>9. 文件的命名必须符合 Java 类的命名规范：<a href="https://zhuanlan.zhihu.com/p/654107809">点我进入，查找标识符部分，查看标识符命名规范</a></p><p><img src="https://source.icode504.com/images/image-20240714210541388.png"></p><p>10. 输入<code>psvm</code>或者<code>main</code>，然后直接回车就可以生成<code>main</code>方法：</p><p><img src="https://source.icode504.com/images/240714002.gif"></p><p><img src="https://source.icode504.com/images/240714003.gif"></p><p>11. 在<code>main</code>方法里输入<code>sout</code>然后点击回车，就会生成一个换行输出的语句：</p><p><img src="https://source.icode504.com/images/240714004.gif"></p><p>12. 此时我们可以在程序中写点内容进行输出，效果图如下：</p><p><img src="https://source.icode504.com/images/image-20240714211413352.png"></p><p>13. 运行 Java 程序：这里的运行就直接包括了编译和运行两个操作，以下两种方式任选其一：</p><p>方式一：鼠标右键，点击<strong>Run MyFirstProgram</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714211459256.png"></p><p>方式二：使用快捷键，这里我使用的快捷键是<kbd>⌃</kbd><kbd>⇧</kbd><kbd>R</kbd>，具体的快捷键详见自己鼠标右键后<code>Run xxx</code>后面对应的快捷键执行即可。</p><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/image-20240714212131203.png"></p><p>14. IDE Eval Reset 插件的无限期使用：点击上方<strong>Help</strong>，然后点击最下面的<strong>Eval Reset</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714212109347.png"></p><p>15. 按照下图所示进行勾选，然后点击<strong>Reset</strong>，此时 IDEA 会自动重启。</p><p><img src="https://source.icode504.com/images/image-20240714212329830.png" alt="image-20240714212329830"></p><p>16. 此时会出现一个提示弹窗，点击 Yes，就会重启，此时 IDEA 的试用期就会延长：</p><p><img src="https://source.icode504.com/images/image-20240714212415949.png"></p><p>17. 是否退出，点击 Exit，IDEA 重启：</p><p><img src="https://source.icode504.com/images/image-20240714212511062.png"></p><h1 id="四、Intellij-IDEA-的卸载（可选）"><a href="#四、Intellij-IDEA-的卸载（可选）" class="headerlink" title="四、Intellij IDEA 的卸载（可选）"></a>四、Intellij IDEA 的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 打开程序最左边的访达，在最左侧点击应用程序：</p><p><img src="https://source.icode504.com/images/image-20240714213011161.png"></p><p>2. 找到 Intellij IDEA，按照下图所示操作将 IDEA 拖入到废纸篓中：</p><p><img src="https://source.icode504.com/images/240714005.gif"></p><p>3. 打开废纸篓，鼠标右键点击 Intellij IDEA 图标，选择<strong>立即删除</strong>，IDEA 就成功卸载了：</p><p><img src="https://source.icode504.com/images/image-20240714213454446.png"></p><p><img src="https://source.icode504.com/images/image-20240714213523268.png"></p><p>4. 清理残留数据：打开终端，执行如下命令，进入到 Library 目录下：</p><blockquote><p>xxx 表示当前用户的用户名，这里直接替换成本机用户的用户名即可</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /Users/xxx/Library<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240714214052411.png"></p><p>5. 依次执行如下命令，清理残留数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf Preferences/JetBrains/IntelliJIdea*<br><span class="hljs-built_in">rm</span> -rf Caches/JetBrains/IntelliJIdea*<br><span class="hljs-built_in">rm</span> -rf Application\ Support/JetBrains/IntelliJIdea*<br><span class="hljs-built_in">rm</span> -rf Logs/JetBrains/IntelliJIdea*<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240714214721811.png"></p><p>macOS版Intellij IDEA清理卸载残留参考自犬小哈清理IDEA卸载残留教程：<a href="https://www.quanxiaoha.com/idea/uninstall-idea.html#mac">https://www.quanxiaoha.com/idea/uninstall-idea.html#mac</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 8安装配置教程（macOS版）</title>
    <link href="/posts/78.html"/>
    <url>/posts/78.html</url>
    
    <content type="html"><![CDATA[<p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p><p>以下是macOS环境下JDK 8的安装和使用教程，以下两种方式任选其一：</p><h1 id="方式一：使用SDKMAN-安装"><a href="#方式一：使用SDKMAN-安装" class="headerlink" title="方式一：使用SDKMAN!安装"></a>方式一：使用SDKMAN!安装</h1><p>1. 打开终端，请确保macOS上已经安装了SDKMAN!，没有安装的小伙伴可以点击右侧链接查看安装教程：<a href="./108.html">点我查看</a></p><p>2. 执行如下命令，查看各大厂商可以安装的JDK相关版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk list java<br></code></pre></td></tr></table></figure><p>下图中提供了各个厂商提供的Java，翻到页面最下方，这里我下载的是ZuluJDK，按照下图中选中复制版本号：</p><blockquote><p>提示：上、下键可以翻页，或者按<kbd>PageUp</kbd>或<kbd>PageDown</kbd>翻页，按<kbd>Q</kbd>键退出。</p></blockquote><p><img src="https://source.icode504.com/images/image-b5b304b00a39ffda8a82861d3668fdc4.png"></p><p>3. 执行如下命令，安装ZuluJDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk install java 版本号-厂商名<br></code></pre></td></tr></table></figure><p>效果图如下（将前面复制的版本信息粘贴此处）：</p><p><img src="https://source.icode504.com/images/image-81de7f2d35d7de4a63d3923b67274dfd.png"></p><p>4. 等待一段时间后，JDK安装完成：</p><p><img src="https://source.icode504.com/images/image-20f70e229e4108efdc136e3cedbcc3c7.png"></p><p>5. 接下来，我们可以分别使用<code>java</code>、<code>javac</code>、<code>java -version</code>查看版本信息：</p><p><img src="https://source.icode504.com/images/image-fc97bf3c031cf0673f5bbf130412c693.png"></p><p><img src="https://source.icode504.com/images/image-5b8bc10be92b19950e5095215139e199.png"></p><p><img src="https://source.icode504.com/images/image-256ec5721d3cf0841b7cce8210f6c07d.png"></p><h1 id="方式二：正常安装"><a href="#方式二：正常安装" class="headerlink" title="方式二：正常安装"></a>方式二：正常安装</h1><h2 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h2><p>检查本机信息：点击左上角苹果logo，点击第一个<strong>关于本机</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224151904945.png"></p><p>这里需要留意一下处理器信息，这里我的电脑使用的是Intel芯片：</p><p><img src="https://source.icode504.com/images/image-20240224152112087.png"></p><h2 id="二、下载JDK"><a href="#二、下载JDK" class="headerlink" title="二、下载JDK"></a>二、下载JDK</h2><p>以下两种方式二选一下载即可：</p><h3 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h3><p>根据上方的处理器信息选择对应的下载链接：</p><table><thead><tr><th align="center">说明</th><th align="center">下载链接</th></tr></thead><tbody><tr><td align="center">macOS(Intel芯片, x64版本) JDK</td><td align="center"><a href="https://pan.baidu.com/s/1GGuNm0rp_BS58ds6jmua_g?pwd=1024">点我下载</a></td></tr><tr><td align="center">macOS(Intel芯片, arm64版本) JDK</td><td align="center"><a href="https://pan.baidu.com/s/1pwIRrLqfnDsTJdXTpyUMKA?pwd=1024">点我下载</a></td></tr></tbody></table><h3 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h3><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/downloads/archive/">点击进入</a></p><p>2. 根据自己的电脑的操作系统点击对应的链接进入，M1及之后的芯片的小伙伴点击**Java SE 8 (8u211 and later)**进入；Intel芯片的小伙伴点击任意一个Java SE 8进入即可。</p><p><img src="https://source.icode504.com/images/image-20240714125850370.png"></p><p>2. 找到以Java SE Development Kit开头的下载列表，按照下图所示的操作，根据自己的芯片下载JDK安装包：</p><p><img src="https://source.icode504.com/images/image-20240714130847156.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://source.icode504.com/images/image-20240714131651565.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://source.icode504.com/images/image-20240714131003147.png"></p><h2 id="三、安装JDK"><a href="#三、安装JDK" class="headerlink" title="三、安装JDK"></a>三、安装JDK</h2><p>1. 找到下载好的文件，双击文件dmg文件：</p><p><img src="https://source.icode504.com/images/image-20240714131920803.png"></p><p>2. 双击pkg安装包，开始安装JDK：</p><p><img src="https://source.icode504.com/images/image-20240714132042344.png"></p><p>3. 进入欢迎页面，点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714132136705.png"></p><p>4. 点击<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714132229961.png"></p><p>5. 输入本机用户密码，然后点击<strong>安装软件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714132349877.png"></p><p>6. 安装中，请耐心等待</p><p><img src="https://source.icode504.com/images/image-20240714132457319.png"></p><p>7. 安装成功，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240714132544426.png"></p><p>8. 这里弹出一个提示框，如果后续你还要继续使用JDK安装包，请点击保留，如果不需要，就点击移动到废纸篓。</p><h2 id="四、检查JDK相关命令是否在终端中可用"><a href="#四、检查JDK相关命令是否在终端中可用" class="headerlink" title="四、检查JDK相关命令是否在终端中可用"></a>四、检查JDK相关命令是否在终端中可用</h2><p>1. 打开终端，输入<code>javac</code>和<code>java</code>，会出现下图内容：</p><p><img src="https://source.icode504.com/images/image-20240714133154774.png"></p><p><img src="https://source.icode504.com/images/image-20240714133231247.png"></p><p>2. 输入<code>java -version</code>即可查看当前JDK版本信息：</p><p><img src="https://source.icode504.com/images/image-20240714133339950.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows通过命令行关闭某个端口</title>
    <link href="/posts/76.html"/>
    <url>/posts/76.html</url>
    
    <content type="html"><![CDATA[<p>按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，按回车键进入命令行界面。</p><p><img src="https://source.icode504.com/images/image-20240629111918689.png"></p><p>如果你想关闭某个端口号，需要先查找这个端口号对应的PID，执行如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netstat <span class="hljs-literal">-ano</span>|findstr 端口号<br></code></pre></td></tr></table></figure><p>这里我要关闭的是9068号端口，执行后得到两个结果，最右侧的一列就是进程的PID，这里我需要关闭PID是17952对应的进程：</p><p><img src="https://source.icode504.com/images/image-20240629112229955.png"></p><p>执行如下命令即可关闭PID对应的进程：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">taskkill /PID PID号 /F<br></code></pre></td></tr></table></figure><p>执行效果如下图，此时PID为17952对应的进程就关闭了：</p><p><img src="https://source.icode504.com/images/image-20240629112537455.png"></p>]]></content>
    
    
    <categories>
      
      <category>常用操作</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>常用操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装和配置教程（适用于Linux Ubuntu和Debian）</title>
    <link href="/posts/75.html"/>
    <url>/posts/75.html</url>
    
    <content type="html"><![CDATA[<p>Docker 是一种开源的平台，用于开发、运输和运行应用程序。它通过将应用程序及其依赖项打包在一个可移植的容器中，使得应用程序可以在任何环境中一致地运行。Docker 容器利用了操作系统的虚拟化技术，相比传统的虚拟机更加轻量级、高效。开发人员可以在本地构建和测试容器，然后将其部署到生产环境，确保环境一致性和快速部署。Docker 极大地简化了应用程序的开发和运维流程，提高了工作效率和系统的可扩展性。</p><p>以下是 Linux Ubuntu 和 Debian 系统环境下 Docker 的安装和配置教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>1. 需要安装 Ubuntu 或 Debian 操作系统的小伙伴，请根据自己的需要点击下方链接查看安装教程：</p><table><thead><tr><th align="center">系统&#x2F;软件名称</th><th align="center">安装教程</th></tr></thead><tbody><tr><td align="center">Ubuntu</td><td align="center"><a href="./51.html">点我查看</a></td></tr><tr><td align="center">Debian</td><td align="center"><a href="./52.html">点我查看</a></td></tr><tr><td align="center">Electerm</td><td align="center"><a href="./47.html">点我查看</a></td></tr></tbody></table><p>2. 执行如下命令可以查看当前操作系统信息，这里我使用的 Ubuntu 操作系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240623105752873.png"></p><p>3. 如果你要安装新版本的 Docker，需要将系统中安装的旧版本 Docker 卸载。执行如下命令卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> pkg <span class="hljs-keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="hljs-keyword">do</span> sudo apt-get remove <span class="hljs-variable">$pkg</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>4. 删除以前在 Docker 安装的镜像、容器等文件：Docker 在卸载过程中默认不会删除原来下载的镜像文件，它们默认存储在<code>/var/lib/docker</code>中，如果需要删除这些残留文件，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/lib/docker/<br></code></pre></td></tr></table></figure><p>5. 安装一些必要的工具，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get -y update<br>apt-get -y install vim apt-transport-https ca-certificates curl software-properties-common gpg-agent<br></code></pre></td></tr></table></figure><h1 id="二、安装-Docker"><a href="#二、安装-Docker" class="headerlink" title="二、安装 Docker"></a>二、安装 Docker</h1><p>接下来我们就可以安装 Docker 了，这里我使用的是<code>apt-get</code>方式安装 Docker。</p><p>1. 根据自己的操作系统，执行如下命令添加 Docker 官方 GPG key：</p><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>2. 根据自己的操作系统，写入软件源信息：</p><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><ul><li>Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span><br></code></pre></td></tr></table></figure><p>按一下回车键继续：</p><p><img src="https://source.icode504.com/images/image-20240623111157253.png"></p><p>3. 更新软件包列表，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get -y update<br></code></pre></td></tr></table></figure><p>3. 执行如下命令安装 Docker（下载安装的时间可能会较长，请耐心等待！）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>4. 安装完成后，执行如下命令即可查看 Docker 版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker version<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240623094637000.png"></p><h1 id="三、配置镜像加速器"><a href="#三、配置镜像加速器" class="headerlink" title="三、配置镜像加速器"></a>三、配置镜像加速器</h1><p>以下两种方式任选其一：</p><h2 id="方式一：配置镜像源（可能拉取不了最新版本镜像）"><a href="#方式一：配置镜像源（可能拉取不了最新版本镜像）" class="headerlink" title="方式一：配置镜像源（可能拉取不了最新版本镜像）"></a>方式一：配置镜像源（可能拉取不了最新版本镜像）</h2><blockquote><p>说明：镜像加速器面向个人开发者，仅适用于个人开发场景，<strong>请勿用于商业用途</strong>！</p></blockquote><p>我们使用 Docker 创建容器的时候，首先需要获取镜像，如果本地存在镜像就是用本地的镜像创建容器，如果本地不存在这个镜像，就需要到官方镜像仓库中下载镜像，但是官方镜像国内无法访问（除非你有特殊的方法）。为了解决上述问题，我们需要配置国内镜像加速器，这里我使用的阿里云的镜像加速器，确保后续能顺利拉取镜像。以下是配置阿里云镜像加速器教程：</p><p>1. 打开阿里云官网，注册一个阿里云账号（使用钉钉、支付宝、淘宝登录都 OK，毕竟它们都是一家的）：<a href="https://account.aliyun.com/login/login.htm">点我登录&#x2F;注册</a></p><p>2. 登陆后，在主页面搜索<strong>容器镜像服务</strong>，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240623100827340.png"></p><p>3. 点击<strong>管理控制台</strong>：</p><p><img src="https://source.icode504.com/images/image-20240623100914010.png"></p><p>4. 进入控制台，在左侧菜单栏单机镜像加速器，此时页面中有一给个人的加速器地址，点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240623101441310.png"></p><p>5. 回到命令行界面，我们使用 vim 命令，在<code>/etc/docker</code>目录下创建一个 daemon.json 文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>6. 按<kbd>i</kbd>键进入编辑模式（此时命令行左下角会有一个 INSERT 的提示），编写如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://source.icode504.com/images/image-20240623102231989.png"></p><p>7. 将光标移动到两个中括号内部的双引号中，按<kbd>Shift</kbd><kbd>Insert</kbd>键粘贴前面复制的镜像加速器地址，效果图如下：</p><p><img src="https://source.icode504.com/images/image-20240623102402464.png"></p><p>8. 检查无误后，按<kbd>Esc</kbd>键退出编辑模式，输入<kbd>:wq</kbd>（左下角有提示）并按一下回车保存并退出编辑。</p><p>9. 依次执行如下命令重新加载 daemon 和 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="方式二：通过Github拉取Dockerhub镜像并推送到阿里云"><a href="#方式二：通过Github拉取Dockerhub镜像并推送到阿里云" class="headerlink" title="方式二：通过Github拉取Dockerhub镜像并推送到阿里云"></a>方式二：通过Github拉取Dockerhub镜像并推送到阿里云</h2><p>该方案请点击右侧链接查看具体教程：<a href="./113.html">点我查看</a></p><h1 id="四、Docker-的简单使用"><a href="#四、Docker-的简单使用" class="headerlink" title="四、Docker 的简单使用"></a>四、Docker 的简单使用</h1><p>1. 使用<code>systemctl</code>命令启动 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start docker<br></code></pre></td></tr></table></figure><p>2. 运行<code>hello-world</code>镜像，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>执行这个命令时，首先去本地寻找是否存在 hello-world 镜像，如果没有，就去镜像仓库拉取（下载）Docker 镜像，拉取完成后会创建一个容器，此时 Docker 会运行这个容器并在控制台输出结果：</p><p><img src="https://source.icode504.com/images/image-20240623102936551.png"></p><p>3. （可选）如果想让 Docker 开机自启动，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>4. （可选）如果禁用 Docker 开机自启动，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> docker<br></code></pre></td></tr></table></figure><p>5. （可选）如果想停止 Docker，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl stop docker<br></code></pre></td></tr></table></figure><h1 id="五、卸载-Docker（可选）"><a href="#五、卸载-Docker（可选）" class="headerlink" title="五、卸载 Docker（可选）"></a>五、卸载 Docker（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 执行下面命令，卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get -y purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras<br></code></pre></td></tr></table></figure><p>2. 卸载时，镜像和容器文件默认不会删除，如果需要删除这些文件，请依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br>sudo <span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>容器化</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Debian</tag>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyExcel工作表操作</title>
    <link href="/posts/73.html"/>
    <url>/posts/73.html</url>
    
    <content type="html"><![CDATA[<p>这一部分，我们结合具体的案例介绍 EasyExcel 是如何将数据写入到一个或多个工作表中。</p><h1 id="一、一个实体类重复多次写入到一个工作表中"><a href="#一、一个实体类重复多次写入到一个工作表中" class="headerlink" title="一、一个实体类重复多次写入到一个工作表中"></a>一、一个实体类重复多次写入到一个工作表中</h1><p>首先我们来看一个简单的案例：利用循环将数据写到一个工作表中。</p><blockquote><p>案例：将员工信息重复 5 次写入到一个工作表中，并将下面的工作表名称设置成“测试工作表”。</p><p>实体类 Employee、工具类 EmployeeUtils 中一次性获取十条 Employee 数据的<code>getEmployeeList</code>方法也已经准备好：<a href="./60.html#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87">点我查看</a></p><p>导出的 Excel 文件显示效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240530191721087.png"></p></blockquote><p>以下是我的实现思路：</p><ol><li>创建一个可以执行 5 次的循环：案例中要求我们重复 5 次写入到一个工作表中，这里我们使用 for 循环、while 循环或者 do-while 循环都可以。</li><li>在这个循环中，获取到数据列表，调用<code>EmployeeUtils.getEmployeeList</code>方法。</li><li>使用前面学过的链式调用，将获取到的数据列表作为参数传入。</li></ol><p>以下是实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIterateWriteWorksheet1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        EasyExcel.write(filePath, Employee.class).sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>).doWrite(EmployeeUtils.getDataList());<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据已写入到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行这段代码，我们发现它在 resources 目录下生成了 Excel 文件，但是 Excel 文件中只有 10 条数据，显然并不符合案例中的要求：</p><p><img src="https://source.icode504.com/images/image-20240527150131749.png"></p><h2 id="1-1-为什么链式调用没有达到效果"><a href="#1-1-为什么链式调用没有达到效果" class="headerlink" title="1.1 为什么链式调用没有达到效果"></a>1.1 为什么链式调用没有达到效果</h2><p>为什么我们的链式调用没有达到效果呢？</p><p>要想解答上述疑问，我们需要观察一下链式调用写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">EasyExcel.write(filePath, Employee.class).sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>).doWrite(EmployeeUtils.getDataList());<br></code></pre></td></tr></table></figure><p>只凭英文语义我们也可以知道，真正将数据写入的是<code>doWrite</code>方法，查看<code>doWrite</code>方法源码我们可以看到如下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWrite</span><span class="hljs-params">(Collection&lt;?&gt; data)</span> &#123;<br>    <span class="hljs-keyword">if</span> (excelWriter == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelGenerateException</span>(<span class="hljs-string">&quot;Must use &#x27;EasyExcelFactory.write().sheet()&#x27; to call this method&quot;</span>);<br>    &#125;<br>    excelWriter.write(data, build());<br>    excelWriter.finish();<br>&#125;<br></code></pre></td></tr></table></figure><p>结合我们的链式调用内容，我们传入的参数<code>data</code>对应的是<code>EmployeeUtils.getDataList</code>方法的列表数据。</p><p>源码中 2~4 行是判断<code>excelWriter</code>是否为空，只要我们在使用链式调用方式，这个<code>excelWriter</code>就不为空，即<code>excelWriter != null</code>。接下来我们就通过源码来验证上述内容是否正确。</p><p>我们来查看一下链式调用的<code>sheet</code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ExcelWriterSheetBuilder <span class="hljs-title function_">sheet</span><span class="hljs-params">(Integer sheetNo, String sheetName)</span> &#123;<br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> build();<br>    <span class="hljs-type">ExcelWriterSheetBuilder</span> <span class="hljs-variable">excelWriterSheetBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelWriterSheetBuilder</span>(excelWriter);<br>    <span class="hljs-keyword">if</span> (sheetNo != <span class="hljs-literal">null</span>) &#123;<br>        excelWriterSheetBuilder.sheetNo(sheetNo);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sheetName != <span class="hljs-literal">null</span>) &#123;<br>        excelWriterSheetBuilder.sheetName(sheetName);<br>    &#125;<br>    <span class="hljs-keyword">return</span> excelWriterSheetBuilder;<br>&#125;<br><br><span class="hljs-keyword">public</span> ExcelWriter <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelWriter</span>(writeWorkbook);<br>&#125;<br></code></pre></td></tr></table></figure><p>在调用<code>sheet</code>方法时，源码中首先调用了<code>build</code>方法，而<code>build</code>方法中正好使用了<code>new</code>的方式创建了 ExcelWriter 对象，因此上述的<code>excelWriter != null</code>成立。</p><p>执行了上述判断以后，在<code>doWrite</code>方法中使用<code>excelWriter</code>依次调用了<code>write</code>和<code>finish</code>方法。其中<code>write</code>方法的作用是将数据写入到 Excel 文件中，<code>finish</code>方法是关闭文件资源流（毕竟写入到 Excel 操作属于文件 IO 操作），这一轮循环执行结束。</p><p>进行下一轮循环的时候，仍然执行上述的代码逻辑，数据再次写入 Excel 文件时，会覆盖掉上一次的 Excel 数据，以此类推，当循环结束时，Excel 文件中的内容是最后一次循环写入的数据。</p><h2 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h2><p>在循环中直接使用链式调用并不能达到效果，那么还有其他解决方案吗？</p><p>当然有！我们在<a href="https://www.icode504.com/posts/60.html#%E6%96%B9%E5%BC%8F%E4%B8%89%EF%BC%9Atry-with-resources%E5%86%99%E6%B3%95%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8EJDK-7%E5%8F%8A%E4%BB%A5%E4%B8%8A%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%89">前面</a>学过 try-with-resources 方式实现将数据写入到 Excel 文件中，这种方式的特点是在保证整个 try 块代码没有出现异常时，在整个 try 块代码执行完成后，自动关闭文件资源流，在循环过程中不涉及到数据覆盖的操作。</p><p>以下是使用 try-with-resources 方式的实现思路：</p><ol><li>在 try 小括号中创建 ExcelWriter 类型对象<code>excelWriter</code>：因为 ExcelWriter 类实现了 Closeable 接口，在 try 块执行完毕时，会自动调用<code>close</code>方法关闭文件资源流。</li><li>在 try 块中编写可以执行 5 次的循环，在循环中设置工作表相关信息（例如：工作表的名称）。</li><li>excelWriter 对象调用 write 方法，配置要写入的数据列表和工作表对象作为参数，执行数据写入操作。</li><li>如果整个 try 块执行过程中未出现异常，此时会自动关闭文件资源流。</li></ol><p>以下是使用 try-with-resources 方式的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIterateWriteWorksheet2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-comment">// try-with-resources方式实现数据的循环写入</span><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filePath, Employee.class).build()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;测试工作表&quot;</span>).build();<br>            excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据已写入到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码运行后，在 resources 目录下生成了一个 Excel 文件，此时 Excel 文件中除去表头，一共有 50 行数据（共循环了 5 次，每次有 10 条数据写入到 Excel 文件）：</p><p><img src="https://source.icode504.com/images/image-20240528105115386.png"></p><p>新思路和原思路相比，新思路在执行循环的过程中文件资源流一致保持开启状态，直到整个 try 块执行完毕自动关闭文件资源流；而原思路是每次执行循环时开启文件资源流，循环结束后关闭本次文件资源流。</p><p><img src="https://source.icode504.com/images/easyexcel%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.jpg"></p><h1 id="二、一个实体类重复多次写入到多个工作表中"><a href="#二、一个实体类重复多次写入到多个工作表中" class="headerlink" title="二、一个实体类重复多次写入到多个工作表中"></a>二、一个实体类重复多次写入到多个工作表中</h1><blockquote><p>案例：将上述的 Employee 列表数据重复写入到 5 张工作表中，效果如下图所示</p><p>已知 Employee 实体类和 EmployeeUtils 实体类已经准备好：<a href="">点我查看</a></p><p><img src="https://source.icode504.com/images/240511001.gif"></p></blockquote><p><a href="https://www.icode504.com/posts/60.html#%E4%BA%8C%E3%80%81Excel%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86">前面</a>我们提到过，一个 Excel 文件称作一个工作簿（Workbook），在一个工作簿中可以包含多张工作表（Worksheet）。我们在前面向 Excel 中写数据时，一般是一个对象写入到一个工作表中。但有的时候，我们需要向多个工作表中插入数据。</p><p><img src="https://source.icode504.com/images/image-20240320091713015.png"></p><p>EasyExcel 在处理多个工作表时，类似数组的索引，会将第一张要操作的工作表标记为 0，第二张要操作的工作表标记为 1，以此类推（如下图）：</p><p><img src="https://source.icode504.com/images/easyexcel%E5%A4%84%E7%90%86%E5%A4%9A%E5%BC%A0%E5%B7%A5%E4%BD%9C%E8%A1%A81.png"></p><p>结合上述分析，我们在调用 EasyExcel 类的静态方法<code>writerSheet</code>时，可以指定索引（sheetNo）和工作表名称（sheetName）。那么我们可以编写一个$[0,5)$的普通 for 循环，索引就是用 for 循环每一次迭代的数字，并为每一个工作表指定名称。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIterateWriteSheet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filePath, Employee.class).build()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(i, <span class="hljs-string">&quot;测试工作表&quot;</span> + (i + <span class="hljs-number">1</span>)).build();<br>            excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行这一段代码，发现生成的 Excel 文件中存在 5 个工作表，并且每一个工作表中存在表头和 10 行数据。</p><p><img src="https://source.icode504.com/images/240516003.gif"></p><h1 id="三、多个实体类写入到多个工作表中"><a href="#三、多个实体类写入到多个工作表中" class="headerlink" title="三、多个实体类写入到多个工作表中"></a>三、多个实体类写入到多个工作表中</h1><blockquote><p>案例：使用 EasyExcel 将学生数据和教师数据分别写入到一个 Excel 文件的两个工作表中，效果如下图所示：</p><p><img src="https://source.icode504.com/images/240516001.gif"></p><p>已知学生实体类 Student、教师实体类 Teacher 代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学生实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-05-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生id&quot;)</span><br>    <span class="hljs-keyword">private</span> String studentId;<br>    <span class="hljs-meta">@ExcelProperty(&quot;学生姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String studentName;<br>    <span class="hljs-meta">@ExcelProperty(&quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@ExcelProperty(&quot;性别&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 教师实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-05-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(&quot;教师id&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherId;<br>    <span class="hljs-meta">@ExcelProperty(&quot;教师姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherName;<br>    <span class="hljs-meta">@ExcelProperty(&quot;学科&quot;)</span><br>    <span class="hljs-keyword">private</span> String subject;<br>    <span class="hljs-meta">@ExcelProperty(&quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据处理类 PersonUtils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人员工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-05-10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] SUBJECTS = &#123;<span class="hljs-string">&quot;语文&quot;</span>, <span class="hljs-string">&quot;数学&quot;</span>, <span class="hljs-string">&quot;英语&quot;</span>, <span class="hljs-string">&quot;计算机&quot;</span>, <span class="hljs-string">&quot;物理&quot;</span>, <span class="hljs-string">&quot;化学&quot;</span>, <span class="hljs-string">&quot;生物&quot;</span>&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取学生信息列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 学生信息列表：学生id从1开始，姓名默认以student开头，性别随机生成</span><br><span class="hljs-comment">     * 年龄在12-18岁之间随机生成</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Student&gt; <span class="hljs-title function_">getStudentInfoList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>            student.setStudentId(String.valueOf(i + <span class="hljs-number">1</span>));<br>            student.setStudentName(<span class="hljs-string">&quot;student&quot;</span> + (i + <span class="hljs-number">1</span>));<br>            student.setGender(random.nextBoolean() ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>);<br>            student.setAge(random.nextInt(<span class="hljs-number">7</span>) + <span class="hljs-number">12</span>);<br>            list.add(student);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取教师信息列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 教师信息列表：教师id默认从1生成，姓名默认以teacher开头，年龄在30-59岁之间随机生成</span><br><span class="hljs-comment">     * 学科随机生成</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Teacher&gt; <span class="hljs-title function_">getTeacherInfoList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Teacher&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>            teacher.setTeacherId(String.valueOf(i + <span class="hljs-number">1</span>));<br>            teacher.setTeacherName(<span class="hljs-string">&quot;teacher&quot;</span> + (i + <span class="hljs-number">1</span>));<br>            teacher.setAge(random.nextInt(<span class="hljs-number">30</span>) + <span class="hljs-number">30</span>);<br>            teacher.setSubject(SUBJECTS[random.nextInt(SUBJECTS.length)]);<br>            list.add(teacher);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成Excel文件名称及所在路径，这里为了方便，我将最终生成的Excel放到了当前项目的resources目录下，以当前时间戳命名。方便后续使用</span><br><span class="hljs-comment">     * 如有需要，请将第66行代码替换成你自己的路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFilePath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;E:\\Code\\icode504-codespace\\easyexcel-study\\easyexcel-demo1\\src\\main\\resources\\&quot;</span><br>                + System.currentTimeMillis() + <span class="hljs-string">&quot;.xlsx&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>由于我们需要将两个不相同的实体列表（学生信息列表<code>PersonUtils.getStudentInfoList</code>和教师信息列表<code>PersonUtils.getTeacherInfoList</code>）写入到两张数据表中，无法使用循环实现上述过程。以下是解决上述案例的思路：</p><ol><li>使用<code>try-with-resources</code>方式创建。由于 ExcelWriter 类实现了 Closeable 接口，代码执行完成后会自动调用<code>close</code>方法自动关闭资源；</li><li>在<code>try</code>小括号中创建 ExcelWriter 类型对象<code>excelWriter</code>：调用<code>EasyExcel.write</code>方法时，只需要添加文件路径参数，不需要添加类的字节码参数（因为要写入的数据是两个实体类，<code>write</code>方法默认只能接收一个类字节码参数）。参数配置完成后，调用<code>build</code>方法创建<code>excelWriter</code>对象；</li><li>调用两次<code>EasyExcel.writeSheet</code>方法，第一个参数指定要写入哪一个数据表中（EasyExcel 处理数据表默认从 0 开始），第二个参数可以指定工作表的名称（后续更容易分辨）。参数配置完成后，调用<code>build</code>方法创建<code>writeSheet</code>对象；</li><li><code>excelWriter</code>对象调用<code>write</code>方法分别将学生和教师的数据列表分别写入 Excel 文件的两个数据表中。</li></ol><p>以下是代码是上述思路的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorksheet3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(PersonUtils.getFilePath()).build()) &#123;<br>        <span class="hljs-comment">// 分两次调用writerSheet和write方法，分别将学生信息和教师信息写入到两张数据表中</span><br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">studentWriteSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;学生信息表&quot;</span>).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">teacherWriteSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;教师信息表&quot;</span>).build();<br>        excelWriter.write(PersonUtils.getStudentInfoList(), studentWriteSheet);<br>        excelWriter.write(PersonUtils.getTeacherInfoList(), teacherWriteSheet);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据已写入到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行这段代码，生成的 Excel 文件确实有两张表：学生信息表、教师信息表，两张表里面确实有数据。但是有一点点小瑕疵：没有表头。</p><p><img src="https://source.icode504.com/images/240516002.gif"></p><p>解决这个问题也很简单，只需要在<code>writeSheet</code>方法后面再调用<code>head</code>方法，并在这个方法中指定类字节码参数，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorksheet3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(PersonUtils.getFilePath()).build()) &#123;<br>        <span class="hljs-comment">// 分两次调用writerSheet和write方法，分别将学生信息和教师信息写入到两张数据表中</span><br>        <span class="hljs-comment">// 如果需要将表头信息写入到工作表中，就在writerSheet方法后面再调用head方法并传入类的字节码信息</span><br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">studentWriteSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;学生信息表&quot;</span>).head(Student.class).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">teacherWriteSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;教师信息表&quot;</span>).head(Teacher.class).build();<br>        excelWriter.write(PersonUtils.getStudentInfoList(), studentWriteSheet);<br>        excelWriter.write(PersonUtils.getTeacherInfoList(), teacherWriteSheet);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据已写入到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时两张工作表中就都存在表头信息了：</p><p><img src="https://source.icode504.com/images/240516001.gif"></p><h1 id="四、知识点总结"><a href="#四、知识点总结" class="headerlink" title="四、知识点总结"></a>四、知识点总结</h1><p>Easyexcel 工作表操作知识点总结如下图所示：</p><p><img src="https://source.icode504.com/images/EasyExcel%E5%B7%A5%E4%BD%9C%E8%A1%A8%E6%93%8D%E4%BD%9C.svg"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>常用工具</category>
      
      <category>Java</category>
      
      <category>文档操作</category>
      
      <category>EasyExcel</category>
      
      <category>使用EasyExcel将数据写入到Excel文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git安装配置教程（Linux通用版）</title>
    <link href="/posts/72.html"/>
    <url>/posts/72.html</url>
    
    <content type="html"><![CDATA[<p>Git是一种分布式版本控制系统，用于跟踪文件和文件夹的变化，并协调多人在同一个项目中的工作。它允许开发者在不同的分支上并行开发，轻松地将更改合并到主分支中，并提供了强大的版本控制和协作功能。</p><p>以下是Linux环境下Git的安装教程。</p><p>有需要在虚拟机安装Linux系统的小伙伴，请点击下方任意一个链接查看安装配置教程：</p><table><thead><tr><th align="center"></th><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center">安装教程</td><td align="center"><a href="./48.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>执行如下命令查看当前Linux发行版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p>这里我使用的Debian操作系统：</p><p><img src="https://source.icode504.com/images/image-20240430090546557.png"></p><h1 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h1><p>1. 请根据当前操作系统，执行如下命令安装Git：</p><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y install git<br></code></pre></td></tr></table></figure><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install git<br></code></pre></td></tr></table></figure><p>2. 安装完成后，执行如下命令查看当前Git的版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>如果出现下图版本信息提示说明Git安装成功：</p><p><img src="https://source.icode504.com/images/image-20240430085355974.png"></p><h1 id="三、卸载Git（可选）"><a href="#三、卸载Git（可选）" class="headerlink" title="三、卸载Git（可选）"></a>三、卸载Git（可选）</h1><p>根据自己的操作系统，执行如下命令卸载Git：</p><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y remove git<br></code></pre></td></tr></table></figure><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y uninstall git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>版本控制工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>CentOS</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Debian</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qBittorrent安装教程（Windows版）</title>
    <link href="/posts/71.html"/>
    <url>/posts/71.html</url>
    
    <content type="html"><![CDATA[<p>qBittorrent是一款开源、免费的BitTorrent客户端，旨在提供一个功能强大且用户友好的文件共享平台。它具有跨平台兼容性，支持Windows、macOS、Linux等操作系统。qBittorrent具备许多高级功能，如内置搜索引擎、RSS订阅、远程控制、IP过滤和带宽管理等，且没有广告。由于其简洁的界面和强大的功能，qBittorrent成为许多用户下载和管理BT种子文件的首选工具。</p><p>以下是Windows环境下qBittorrent安装及简单使用教程：</p><h1 id="一、-安装前操作"><a href="#一、-安装前操作" class="headerlink" title="一、 安装前操作"></a>一、 安装前操作</h1><p>以下是本文需要用到的软件，如果需要直接点击对应的链接查看安装教程即可：</p><table><thead><tr><th align="left">软件名称</th><th align="left">教程链接</th><th>说明</th></tr></thead><tbody><tr><td align="left">下载神器Neat Download Manager</td><td align="left"><a href="./24.html">点我查看</a></td><td>本文所需要的软件下载源在国外，使用此软件可以加快下载速度。已经安装的小伙伴请直接跳过。</td></tr></tbody></table><h1 id="二、下载qBittorrent"><a href="#二、下载qBittorrent" class="headerlink" title="二、下载qBittorrent"></a>二、下载qBittorrent</h1><p>1. 打开官网下载链接：<a href="https://sourceforge.net/projects/qbittorrent/files/">点我查看</a>，Windows系统点击第一个文件夹<code>qbittorrent-win32</code>：</p><p><img src="https://source.icode504.com/images/image-20240528153138489.png"></p><p>2. 选择一个版本文件夹，这里我使用的4.6.5版本的文件夹：</p><p><img src="https://source.icode504.com/images/image-20240528153256475.png"></p><p>3. 点击后缀名exe文件下载：</p><p><img src="https://source.icode504.com/images/image-20240528153343650.png"></p><h1 id="三、安装qBittorrent"><a href="#三、安装qBittorrent" class="headerlink" title="三、安装qBittorrent"></a>三、安装qBittorrent</h1><p>1. 双击打开下载好的安装包，进入语言选择界面，这里按照默认选择<strong>中文（简体）</strong>，然后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528153556106.png"></p><p>2. 进入欢迎界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528153629679.png"></p><p>3. <strong>勾选下方的许可协议</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528153723081.png"></p><p>4. 选择组件，这里建议勾选第二个创建<strong>桌面快捷方式</strong>，方便我们直接在桌面上直接打开qBittorrent，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528153858093.png"></p><p>5. 选择安装位置，这里我安装了D盘，完成后点击<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528154109038.png"></p><p><img src="https://source.icode504.com/images/image-20240528154328982.png"></p><p><img src="https://source.icode504.com/images/image-20240528154424203.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240528154459300.png"></p><p>7. 安装成功，点击<strong>完成</strong>启动qBtorrent：</p><p><img src="https://source.icode504.com/images/image-20240528154518900.png"></p><h1 id="四、qBittorrent简单设置"><a href="#四、qBittorrent简单设置" class="headerlink" title="四、qBittorrent简单设置"></a>四、qBittorrent简单设置</h1><p>1. 首次打开qBittorrent会弹出一个法律声明，点击<strong>同意</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528154804473.png"></p><p>2. 此时进入qBittorrent界面，点击上方点击<strong>工具</strong>，然后点击<strong>设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528155839881.png"></p><p>3. 在左侧选项中点击<strong>下载</strong>，向下找，找到默认保存路径，点击右侧文件夹选择一个你熟悉的下载位置（推荐在C盘以外的位置）。配置完成后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528160209055.png"></p><p>4. 按照下图所示操作，配置文件默认保存路径：</p><p><img src="https://source.icode504.com/images/image-20240528160520370.png"></p><h1 id="五、qBittorrent的使用演示"><a href="#五、qBittorrent的使用演示" class="headerlink" title="五、qBittorrent的使用演示"></a>五、qBittorrent的使用演示</h1><h2 id="5-1-qBittorrent下载磁力链接"><a href="#5-1-qBittorrent下载磁力链接" class="headerlink" title="5.1 qBittorrent下载磁力链接"></a>5.1 qBittorrent下载磁力链接</h2><p>1. 这是我在某网站上找到的老版三国演义的磁力链接，复制下方链接：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">magnet:</span>?xt<span class="hljs-operator">=</span>urn:btih:afab<span class="hljs-number">6686072</span>f<span class="hljs-number">2</span>ff<span class="hljs-number">224</span>da<span class="hljs-number">8</span>bec<span class="hljs-number">41</span>eb<span class="hljs-number">6e08026353</span>d<span class="hljs-number">7</span>&amp;dn<span class="hljs-operator">=</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%89</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BD</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%94</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%89</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%E5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%A884</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%86</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%5</span>B<span class="hljs-variable">%E5</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%BD</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%85</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%E9</span><span class="hljs-variable">%9</span>F<span class="hljs-variable">%B3</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E4</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%96</span><span class="hljs-variable">%87</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%AD</span><span class="hljs-variable">%97</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%95</span><span class="hljs-variable">%5</span>D.The.Romance.of.Three.Kingdoms.<span class="hljs-number">1994.1080</span>p.WEB-DL.H<span class="hljs-number">264</span>.AAC-HotWEB<br></code></pre></td></tr></table></figure><p>2. 打开qBittorrent，点击左上角的链接图标：</p><p><img src="https://source.icode504.com/images/image-20240528161358700.png"></p><p>3. 将复制的磁力链接粘贴到此处，点击<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528161456328.png"></p><p>4. 这里我勾选一个视频文件下载，点击<strong>确定</strong>开始下载视频文件：</p><p><img src="https://source.icode504.com/images/image-20240528161832275.png"></p><p>5. 这里qBittorrent开始下载视频文件，我们需要等待一段时间（甚至更长时间）才能下载完这个文件：</p><blockquote><p>这里简单解释一下为什么下载速度这么慢？首先你要下载的资源的速度取决于这个资源下载的人数，如果下载人数确实很多，那么下载速度就会非常快；相反，如果是冷门资源，你的下载速度会非常慢，甚至在下载过程中没有速度。</p><p>当然，我这里解释的也比较浅，如果你想了解磁力、种子等相关知识，可以查看这篇文章：<a href="https://baike.baidu.com/item/%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5/5867775">点我查看</a>。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240528163715122.png"></p><h2 id="5-2-qBittorrent下载BT种子"><a href="#5-2-qBittorrent下载BT种子" class="headerlink" title="5.2 qBittorrent下载BT种子"></a>5.2 qBittorrent下载BT种子</h2><p>1. 这是我在是以哦那个老版三国演义的BT种子文件进行演示：<a href="https://source.icode504.com/images/%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89-%E7%A7%8D%E5%AD%90%E6%BC%94%E7%A4%BA%E6%96%87%E4%BB%B6.torrent">点我下载种子示例文件</a></p><p>2. 打开qBittorrent，点击左上角的加号图标：</p><p><img src="https://source.icode504.com/images/image-20240528172251776.png"></p><p>3. 找到第一步下载好的BT种子文件，点击右下角的<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240528172412936.png"></p><p>4. 这里我勾选一个视频文件下载，点击<strong>确定</strong>开始下载视频文件：</p><p><img src="https://source.icode504.com/images/image-20240528161832275.png"></p><p>5. 这里qBittorrent开始下载视频文件，我们需要等待一段时间（甚至更长时间）才能下载完这个文件：</p><p><img src="https://source.icode504.com/images/image-20240528163715122.png"></p><h1 id="六、卸载qBittorrent（可选）"><a href="#六、卸载qBittorrent（可选）" class="headerlink" title="六、卸载qBittorrent（可选）"></a>六、卸载qBittorrent（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到Pycharm，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240529090755971.png"></p><p>2. 进入qBittorrent卸载界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240529090830208.png"></p><p>3. 点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240529090919259.png"></p><p>4. 卸载完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240529090949273.png"></p><p>5. 此时Geek Uninstaller会清理卸载残留，点击<strong>完成</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240529091033009.png"></p><p>6. 点击<strong>关闭</strong>，qBittorrent卸载完成！</p><p><img src="https://source.icode504.com/images/image-20240529091126040.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>qBittorrent</tag>
      
      <tag>磁力</tag>
      
      <tag>BT种子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git安装配置教程（Windows版）</title>
    <link href="/posts/69.html"/>
    <url>/posts/69.html</url>
    
    <content type="html"><![CDATA[<p>Git是一种分布式版本控制系统，用于跟踪文件和文件夹的变化，并协调多人在同一个项目中的工作。它允许开发者在不同的分支上并行开发，轻松地将更改合并到主分支中，并提供了强大的版本控制和协作功能。</p><p>以下是Windows环境下Git的安装教程。</p><h1 id="一、下载Git"><a href="#一、下载Git" class="headerlink" title="一、下载Git"></a>一、下载Git</h1><p>以下两种下载方式任选其一：</p><h2 id="方式一：镜像网站下载（推荐）"><a href="#方式一：镜像网站下载（推荐）" class="headerlink" title="方式一：镜像网站下载（推荐）"></a>方式一：镜像网站下载（推荐）</h2><p>1. 点击右侧链接进入清华大学镜像网站：<a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/LatestRelease/">点我查看</a></p><p>2. 点击64位的安装包下载：</p><p><img src="https://source.icode504.com/images/image-20240509170526006.png"></p><h2 id="方式二：官网下载（下载地址来源于Github，速度较慢，不推荐）"><a href="#方式二：官网下载（下载地址来源于Github，速度较慢，不推荐）" class="headerlink" title="方式二：官网下载（下载地址来源于Github，速度较慢，不推荐）"></a>方式二：官网下载（下载地址来源于Github，速度较慢，不推荐）</h2><p>1. 点击右侧链接进入Git官网下载地址：<a href="https://git-scm.com/downloads">点我查看</a></p><p>2. 选择Windows系统安装包下载：</p><p><img src="https://source.icode504.com/images/image-20240205115812104.png"></p><p>3. 选择64位安装包下载：</p><p><img src="https://source.icode504.com/images/image-20240205161003502.png"></p><h1 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h1><p>1. 双击打开安装包，此时会弹出GNU通用公共协议界面，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205163219091.png"></p><p>2. 点击<strong>Browse</strong>选择安装路径，这里我安装在D盘。选择好路径以后，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205163336033.png"></p><p><img src="https://source.icode504.com/images/image-20240205163549635.png"></p><p><img src="https://source.icode504.com/images/image-20240205163649431.png"></p><p>3. 如果出现下图的弹窗提示文件夹已经存在，点击<strong>是</strong>即可（没有此提示的小伙伴直接跳转到下一步）：</p><p><img src="https://source.icode504.com/images/image-20240205163911992.png"></p><p>4. 选择要安装的组件：按照默认勾选即可，后面两个以<code>(NEW!)</code>开头的可以不勾选，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164025989.png"></p><p>5. 选择开始菜单文件夹，如果你对此操作不熟悉的话，就不用修改任何内容。完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164150833.png"></p><p>6. 默认编辑器选择Vim。点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164229347.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：Vim编辑器是一款高度可定制的编辑器，它是从Unix平台的Vi编辑器发展而来的，Vim在Vi的基础上添加了很多新特性。Vim包含多种模式：正常模式（查看文本内容）、插入模式（文本编辑）、命令行模式（执行各种命令，例如保存文件、查找或替换内容等）。</p></blockquote><p>7. 设置新仓库初始分支的名字，按照系统默认选择<strong>Let Git decide</strong>（让Git自己决定），完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164344584.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：使用<code>git --init</code>命令初始化一个仓库时，默认会创建一个名为<code>master</code>分支。</p></blockquote><p>8. 调整环境变量，按照系统推荐选择<strong>Git from the commond line and alos from 3rd-party software</strong>，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164432091.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：勾选上述选项的作用是将Git添加到环境变量中。后续你可以在Windows的命令行、PowerShell、Git Bash和其他第三方软件中使用Git命令。</p><p>以下是在Windows命令行（cmd）拉取代码的演示：</p><p><img src="https://source.icode504.com/images/240429001.gif"></p></blockquote><p>9. 选择可执行的SSH工具，这里按照默认勾选<strong>Use bundled OpenSSH</strong>（使用Git自带的SSH工具），点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164541084.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：OpenSSH的一个主要用途就是可以使用<code>ssh</code>命令远程登录服务器，以下是ssh命令在Git中的使用演示：</p><p><img src="https://source.icode504.com/images/240429002.gif"></p></blockquote><p>10. 选择HTTPS连接时，Git使用的是SSL还是TLS库，这里按照系统默认勾选<strong>Use the OpenSSL library</strong>，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164623393.png"></p><p>11. 换行风格选择，按照系统默认勾选<strong>Checkout Windows-style, commit Unix-style line endings</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164808355.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：LF（Line Feed）是Unix和类Unix系统的换行方式，CRLF（Carriage Return + Line Feed）是换行键+回车键，是Windows系统表示换行的方式。</p></blockquote><p>12. 按照系统默认勾选<strong>Use MinTTY(the default terminal of MSYS2)<strong>，点击</strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205164916315.png"></p><p>13. 配置从服务器拉取代码的默认操作，按照系统默认勾选<strong>Fast-forward or merge</strong>，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205165043193.png"></p><p>14. 按照系统默认勾选<strong>Git Credential Manager</strong>，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205165127672.png"></p><blockquote><p>说明（初次安装的小白可以跳过这段内容）：Git凭证管理工具（Git Credential Manager），主要用于存储和检索访问Git仓库的凭据，例如用户名、密码、访问Github&#x2F;Gitee所用到的token令牌等。</p></blockquote><p>15. 配置额外选项，按照系统默认勾选<strong>Enable file system caching</strong>（开启文件系统缓存），点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205165221025.png"></p><p>16. 配置实验性选项，这里全部不勾选，点击<strong>Install</strong>开始安装：</p><p><img src="https://source.icode504.com/images/image-20240205165328884.png"></p><p>17. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240205165358391.png"></p><p>18. 安装完成，上方内容全部取消勾选，点击<strong>Finish</strong>。至此，Git安装完成：</p><p><img src="https://source.icode504.com/images/image-20240205165528937.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>版本控制工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio安装配置教程（Windows版）</title>
    <link href="/posts/66.html"/>
    <url>/posts/66.html</url>
    
    <content type="html"><![CDATA[<p>Visual Studio是由微软开发的集成开发环境（IDE），用于软件开发和应用程序编程。它支持多种编程语言，包括C#、C++、Python、JavaScript等，因此广泛应用于各种软件开发项目中，包括桌面应用程序、网站、移动应用程序等。</p><p>Visual Studio拥有丰富的功能和工具，使开发人员能够高效地编写、调试和测试代码。其中一些主要特性包括：</p><ol><li><p><strong>代码编辑器</strong>：提供了强大的代码编辑功能，包括语法高亮、自动补全、代码片段等，以提高编码效率。</p></li><li><p><strong>调试工具</strong>：支持在代码中设置断点，逐步执行代码并观察变量的值，以便定位和修复程序中的错误。</p></li><li><p><strong>图形化设计工具</strong>：包括界面设计器、数据库设计器等，用于快速创建用户界面和数据库结构。</p></li><li><p><strong>版本控制集成</strong>：与版本控制系统（如Git、SVN）集成，方便团队协作开发，管理代码版本。</p></li><li><p><strong>扩展性</strong>：Visual Studio支持各种插件和扩展，可以根据需要添加新的功能和工具，以满足特定项目的需求。</p></li><li><p><strong>跨平台开发</strong>：Visual Studio支持开发各种平台的应用程序，包括Windows、Linux、iOS和Android等。</p></li></ol><p>以下是Windows环境下安装Visual Studio教程：</p><h1 id="一、下载Visual-Studio安装器"><a href="#一、下载Visual-Studio安装器" class="headerlink" title="一、下载Visual Studio安装器"></a>一、下载Visual Studio安装器</h1><p>1. 下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">点我查看</a></p><p>2. 对于个人学习开发，选择社区版的Visual Studio即可。点击左下角的下载按钮，开始下载VS的安装器</p><p><img src="https://source.icode504.com/images/image-20231229160920246.png"></p><h1 id="二、安装前准备——网络设置"><a href="#二、安装前准备——网络设置" class="headerlink" title="二、安装前准备——网络设置"></a>二、安装前准备——网络设置</h1><p>1. 在右下角<strong>鼠标右键点击</strong>网络，这里我使用的是宽带连接，<strong>打开“网络和Internet”设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229161633822.png"></p><p><img src="https://source.icode504.com/images/image-20231229161658718.png"></p><p>2. 在状态设置中，下方有一个高级网络设置，点击<strong>更改适配器选项</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229161755127.png"></p><p>3. <strong>鼠标右键</strong>点击网络，菜单倒数第二个，选择<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229161958376.png"></p><p>4. <strong>取消勾选</strong>Internet 协议版本 6（TCP&#x2F;IPv6）</p><p><img src="https://source.icode504.com/images/image-20231229162117601.png"></p><p>5. 选择<strong>Internet协议版本 4（TCP&#x2F;IPv4）</strong>，然后点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229162316539.png"></p><p>6. DNS服务器服务器地址选择<strong>使用下面的DNS服务器地址</strong>（下方第二个），首选DNS服务器设置为<code>8.8.8.8</code>，完成后点击确定：</p><p><img src="https://source.icode504.com/images/image-20231229162617811.png"></p><h1 id="三、安装Visual-Studio"><a href="#三、安装Visual-Studio" class="headerlink" title="三、安装Visual Studio"></a>三、安装Visual Studio</h1><p>1. 双击打开刚刚下载好的VS安装器，弹出一个小窗口，点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229161128976.png"></p><p>2. 准备VS安装程序中，请耐心等待（预计需要等待2~5分钟）：</p><p><img src="https://source.icode504.com/images/image-20231229161150347.png"></p><p>3. 进入安装界面后（页面加载预计需要3~5分钟，请耐心等待），左上角菜单选择第四个<strong>安装位置</strong>，推荐安装在除C盘以外的位置（这里我安装了D盘），并且路径中建议只包含英文字符：</p><p><img src="https://source.icode504.com/images/image-20231229163505725.png"></p><p>4. 点击左上角第三个菜单<strong>语言包</strong>，按照默认勾选的就可以（中文简体和英文）：</p><p><img src="https://source.icode504.com/images/image-20231229163823319.png"></p><p>5. 点击左上角<strong>工作负荷</strong>，根据自己使用场景来安装，这里我要学习C++开发，只需要<strong>勾选使用C++的桌面开发</strong>，完成后点击右下角的<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229164719742.png"></p><p>6. 安装中，请耐心等待（预计需要等待20~30分钟）：</p><p><img src="https://source.icode504.com/images/image-20231229164837515.png"></p><p>7. 安装完毕，点击<strong>确定</strong>（没有此窗口的小伙伴请跳转到下一步）：</p><p><img src="https://source.icode504.com/images/image-20231229171425937.png"></p><p>8. 点击启动，启动Visual Studio Community 2022：</p><p><img src="https://source.icode504.com/images/image-20231229175937840.png"></p><p>9. 推荐登录，没有账号可以创建账户：</p><p><img src="https://source.icode504.com/images/image-20231229180039421.png"></p><p>10. 登录成功，此时出现了创建项目界面：</p><p><img src="https://source.icode504.com/images/image-20231229180253254.png"></p><h1 id="四、创建C-项目"><a href="#四、创建C-项目" class="headerlink" title="四、创建C++项目"></a>四、创建C++项目</h1><p>1. 点击<strong>创建新项目</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229180329093.png"></p><p>2. 选择<strong>控制台应用</strong>，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229180424885.png"></p><p>3. 按照下图所示修改项目信息，完成后点击<strong>创建</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229180700557.png"></p><p>4. 进入编辑器界面以后，右侧解决方案资源管理器中已经为我们创建了一个实例文件：<code>MyWorkspace231229.cpp</code>，这个<code>cpp</code>文件我们点击上方的开始执行按钮（或者按<kbd>Ctrl</kbd><kbd>F5</kbd>）运行一下这个程序：</p><p><img src="https://source.icode504.com/images/image-20231229181024875.png"></p><p>5. 此时会弹出一个<code>Hello, world</code>控制台窗口就说明程序运行成功！</p><p><img src="https://source.icode504.com/images/image-20231229181107515.png"></p><h1 id="五、卸载Visual-Studio（可选）"><a href="#五、卸载Visual-Studio（可选）" class="headerlink" title="五、卸载Visual Studio（可选）"></a>五、卸载Visual Studio（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到Visual Studio，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240416160607127.png"></p><p>2. 此时会加载安装器，加载完成后会弹出一个是否卸载的窗口，选择<strong>是</strong>：</p><p><img src="https://source.icode504.com/images/image-20240416160729270.png"></p><p>3. 卸载中，请耐心等待（预计需要等待5分钟以上）：</p><p><img src="https://source.icode504.com/images/image-20240416160754932.png"></p><p>4. 卸载完成，点击关闭即可：</p><p><img src="https://source.icode504.com/images/image-20240416161511251.png"></p><p>5. 此时Geek扫描无残留文件，直接点击关闭即可：</p><p><img src="https://source.icode504.com/images/image-20240416161554587.png"></p><p>6. 将Visual Studio的安装器也卸载：找到Visual Studio Installer，鼠标右键点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240416162636148.png"></p><p>7. 此时弹窗一个卸载窗口，点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240416162738912.png"></p><p>8. 卸载完成，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240416162831757.png"></p><p>9. 此时Geek扫描到残留文件，直接点击完成就会清理卸载残留：</p><p><img src="https://source.icode504.com/images/image-20240416162917310.png"></p><p>10. 点击完成，至此Visual Studio卸载完成：</p><p><img src="https://source.icode504.com/images/image-20240416163020699.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Visual Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat安装配置教程（Windows版）</title>
    <link href="/posts/64.html"/>
    <url>/posts/64.html</url>
    
    <content type="html"><![CDATA[<p>Apache Tomcat（以下简称Tomcat）是一个开源的、轻量级的、容器式的Java Servlet容器。它是由Apache软件基金会开发的，用于托管Java Servlets和JavaServer Pages（JSP）的Web应用程序。Tomcat提供了一个环境，使开发者能够运行Java代码，以便构建动态的Web应用程序。作为一个Servlet容器，Tomcat可以在服务器上运行Java Servlets和JSP页面，通过处理HTTP请求和响应来动态生成网页内容。它是Java企业版（Java EE）规范的一个实现，并且易于安装和配置，因此被广泛用于Java Web应用程序的开发和部署。Tomcat还具有良好的可扩展性和灵活性，可以与其他Java框架和工具集成，以满足不同的需求。</p><p>以下是Windows环境下Tomcat的下载、安装与配置教程：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>1. 检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：</p><table><thead><tr><th><a href="./1.html">JDK 8</a></th><th><a href="./28.html">JDK 11</a></th><th><a href="./26.html">JDK 17</a></th><th><a href="./27.html">JDK 21</a></th></tr></thead></table><p>2. 如果电脑上已经安装JDK，按<kbd>Win</kbd> 和<kbd>R</kbd>键，输入<code>cmd</code>，然后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/9ab38a7b5187ce85e1ab08c48ccb99b7.png"></p><p>3. 输入<code>java -version</code>，按一下<code>回车</code>，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功</p><p><img src="https://source.icode504.com/images/a6b38a82a285cd7d777833b381c68362.png"></p><p>4. 推荐使用NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p><h1 id="二、下载并安装Tomcat"><a href="#二、下载并安装Tomcat" class="headerlink" title="二、下载并安装Tomcat"></a>二、下载并安装Tomcat</h1><p>1. 点击右侧链接进入Tomcat官网下载页面：<a href="https://archive.apache.org/dist/tomcat/">点我查看</a></p><p>2. 这里我下载的是Tomcat 8版本，点击<code>tomcat-8</code>文件夹：</p><p><img src="https://source.icode504.com/images/image-20240328171551789.png"></p><p>3. 这里我选择的是8.5.100版本的Tomcat：</p><p><img src="https://source.icode504.com/images/image-20240328171745250.png"></p><p>4. 点击第一个文件夹<code>bin</code>进入：</p><p><img src="https://source.icode504.com/images/image-20240328171822840.png"></p><p>5. 按照下图所示下载安装包：</p><p><img src="https://source.icode504.com/images/image-20240328172006970.png"></p><p>6. 将下载好的Tomcat安装包解压，建议解压在C盘以外的位置，路径只包含英文字符，这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240328173336823.png"></p><p>7. 至此，Tomcat安装完成。</p><h1 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h1><p>1. 找到Tomcat的解压位置，出现bin、conf、lib等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240328173701038.png"></p><p>2. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>5. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134919881.png"></p><p>6. 新建环境变量，变量名填写<strong>CATALINA_HOME</strong>，将前面复制的路径粘贴到变量值。按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240416134746024.png"></p><p>7. 双击<strong>Path</strong>进入：</p><p><img src="https://source.icode504.com/images/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240328174131191.png"></p><h1 id="四、启动Tomcat"><a href="#四、启动Tomcat" class="headerlink" title="四、启动Tomcat"></a>四、启动Tomcat</h1><p>1. 找到Tomcat安装路径，然后点击进入<code>bin</code>文件夹，然后双击<code>startup.bat</code>文件启动Tomcat：</p><p><img src="https://source.icode504.com/images/image-20240407160936012.png"></p><p>2. 出现最后一行提示说明Tomcat启动成功：</p><p><img src="https://source.icode504.com/images/image-20240328174458119.png"></p><p>3. 如需关闭Tomcat，只需要将当前窗口关闭即可。</p><h1 id="五、Tomcat启动过程中乱码问题解决（可选）"><a href="#五、Tomcat启动过程中乱码问题解决（可选）" class="headerlink" title="五、Tomcat启动过程中乱码问题解决（可选）"></a>五、Tomcat启动过程中乱码问题解决（可选）</h1><p>在上一部分内容中，Tomcat启动窗口的中文内容出现了乱码现象，其本身原因是因为控制台默认的编码集是<code>GBK</code>，而Tomcat日志配置文件中设置的编码集是<code>UTF-8</code>，二者编码集并不一致从而导致了上述现象。当然这不影响我们正常使用Tomcat，要想解决二者编码集不一致的问题，要么将Tomcat日志编码集修改成和系统中编码集保持一致，要么系统的编码集和Tomcat的编码集保持一致。这里我使用的是第一种方案（第二种方案需要改系统的注册表，比较麻烦不说，很有可能一改就翻车）：</p><p>1. 打开Tomcat安装路径，点击<code>conf</code>文件夹进入：</p><p><img src="https://source.icode504.com/images/image-20240328174800314.png"></p><p>2. 鼠标右键点击<code>logging.properties</code>，打开方式选择记事本打开：</p><p><img src="https://source.icode504.com/images/image-20240328175337169.png"></p><p><img src="https://source.icode504.com/images/image-20240328175414633.png"></p><p>3. 按<kbd>Ctrl</kbd>和<kbd>H</kbd>键，进入替换页面，替换内容填写<strong>UTF-8</strong>，替换为填写<strong>GBK</strong>，然后点击<strong>全部替换</strong>。完成后关闭替换窗口：</p><p><img src="https://source.icode504.com/images/image-20240407160507929.png"></p><p>4. 按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存文件。此时再按照第四部分内容重新启动Tomcat，此时输出的中文内容就不会出现乱码现象了：</p><p><img src="https://source.icode504.com/images/image-20240407160813956.png"></p><h1 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h1><ul><li>解决Tomcat中文乱码问题——windows平台：<a href="https://cloud.tencent.com/developer/article/2181734">https://cloud.tencent.com/developer/article/2181734</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>服务器&amp;虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code编写Vue3代码时提示[vue/no-multiple-template-root]The template root requires exactly one element.</title>
    <link href="/posts/63.html"/>
    <url>/posts/63.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h1><p>笔者使用VS Code写Vue2代码时，在<code>template</code>标签里只能写一个根标签，在这个根标签里面可以任意多个标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- Vue2在template标签里面只能写一个根标签，这里我使用的div标签 --&gt;<br>  &lt;div&gt;<br>      &lt;!-- 在这个根标签div中可以写多个标签 --&gt;<br>      &lt;h1&gt;员工信息&lt;/h1&gt;<br>      &lt;h2&gt;姓名: &#123;&#123;employeeName&#125;&#125;&lt;/h2&gt;<br>      &lt;!-- 其他代码已省略 --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>在Vue3中，可以不用在<code>&lt;template&gt;</code>中写根标签了，直接写成如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 直接在template标签中写代码 --&gt;<br>  &lt;h1&gt;员工信息&lt;/h1&gt;<br>  &lt;h2&gt;姓名: &#123;&#123;employeeName&#125;&#125;&lt;/h2&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>但是，VS Code会对当前代码进行语法检查，会出现如下报错提示，虽然不影响正常使用，但是这样挂着报错信息也不太好看（属于强迫症了哈哈哈）：</p><p><img src="https://source.icode504.com/images/image-20240401100744537.png"></p><p>出现上述问题的主要原因是VS Code中安装的插件Vetur中对<code>&lt;template&gt;</code>标签检查的问题。</p><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>1. 点击左侧插件商店（或者按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>X</kbd>）：</p><p><img src="https://source.icode504.com/images/image-20240401101233136.png"></p><p>2. 找到Vetur插件，点击<strong>设置</strong>（小齿轮），然后点击<strong>扩展设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240401101417022.png"></p><p>3. 在当前设置中一直向下翻到最后，找到<strong>Vetur &gt; Validation: Template</strong>，然后<strong>取消勾选</strong><code>Validate vue-html in &lt;template&gt; using eslint-plugin-vue</code>，如下图：</p><p><img src="https://source.icode504.com/images/image-20240401101539176.png"></p><p>4. 此时在<code>&lt;template&gt;</code>标签中就不会出现语法检查提示错误现象了，正常启动项目也不会出现错误信息：</p><p><img src="https://source.icode504.com/images/image-20240401101939631.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
      <category>Vue Bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyExcel的列操作</title>
    <link href="/posts/62.html"/>
    <url>/posts/62.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、只导出特定的列"><a href="#一、只导出特定的列" class="headerlink" title="一、只导出特定的列"></a>一、只导出特定的列</h1><blockquote><p>案例：只导出员工的序号、员工号、员工姓名和性别信息，其他内容（年龄、生日）不需要输出。</p><p>实体类Employee、工具类EmployeeUtils已经准备好：<a href="./60.html#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87">点我查看</a></p><p>导出的Excel文件显示效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240321155404585.png"></p></blockquote><h2 id="方式一：在实体类属性上添加-ExcelIgnore注解"><a href="#方式一：在实体类属性上添加-ExcelIgnore注解" class="headerlink" title="方式一：在实体类属性上添加@ExcelIgnore注解"></a>方式一：在实体类属性上添加@ExcelIgnore注解</h2><p>和<code>@ExcelProperty</code>注解一样，<code>@ExcelIgnore</code>注解也是标注在类属性上，这个注解的作用是在导出Excel文件时默认忽略这个列。由于我们不需要输出年龄<code>age</code>和生日<code>birthday</code>两列，只需要在这两个属性上标记上<code>@ExcelIgnore</code>注解即可，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelIgnore;<br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工--实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-comment">// 序号</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;序号&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">// 员工号</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;员工号&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br><br>    <span class="hljs-comment">// 员工姓名</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;员工姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeName;<br><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">// 性别（男/女）</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;性别&quot;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">// 生日</span><br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;生日&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">// 构造器、getter、setter已省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我使用EasyExcel的链式方法导出Excel文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    EasyExcel.write(filePath, Employee.class)<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>导出的Excel文件符合案例的预期：</p><p><img src="https://source.icode504.com/images/image-20240321160915285.png"></p><h2 id="方式二：调用includeColumnFieldNames方法实现导出特定的列"><a href="#方式二：调用includeColumnFieldNames方法实现导出特定的列" class="headerlink" title="方式二：调用includeColumnFieldNames方法实现导出特定的列"></a>方式二：调用includeColumnFieldNames方法实现导出特定的列</h2><p>方式一虽然能实现导出特定的列，但是后续如果我们还要使用年龄<code>age</code>和生日<code>birthday</code>两个属性，还需要将<code>@ExcelIgnore</code>注解去除，这并不是一个好办法。</p><p>EasyExcel框架中有一个抽象类AbstractExcelWriterParameterBuilder，这个类提供了<code>includeColumnFieldNames</code>方法，可以传入字符串类型的集合，它的作用是将字符串集合中的数据列输出到Excel文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Only output the custom columns.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">includeColumnFieldNames</span><span class="hljs-params">(Collection&lt;String&gt; includeColumnFieldNames)</span> &#123;<br>    parameter().setIncludeColumnFieldNames(includeColumnFieldNames);<br>    <span class="hljs-keyword">return</span> self();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只需要创建一个字符串列表，把<strong>导出的数据对应的属性名称</strong>存储到这个列表中，然后将这个列表作为参数传入上述方法中。以下是实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br><br>    <span class="hljs-comment">// 创建一个列表，这个列表中存储要导出的列对应的属性名称</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;id&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;employeeId&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;employeeName&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;gender&quot;</span>);<br>    <br>    EasyExcel.write(filePath, Employee.class)<br>            <span class="hljs-comment">// 调用includeColumnFieldNames方法，传入上述的列表</span><br>            .includeColumnFieldNames(list)<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br><br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的Excel文件符合预期：</p><p><img src="https://source.icode504.com/images/image-20240322084335128.png"></p><h2 id="方式三：调用excludeColumnFieldNames方法实现导出特定的列"><a href="#方式三：调用excludeColumnFieldNames方法实现导出特定的列" class="headerlink" title="方式三：调用excludeColumnFieldNames方法实现导出特定的列"></a>方式三：调用excludeColumnFieldNames方法实现导出特定的列</h2><p>和方式二实现方式相反，抽象类AbstractExcelWriterParameterBuilder也提供了<code>excludeColumnFieldNames</code>方法，它也可以传入字符串集合，只不过作用和方式二相反，传入的字符串集合不会输出到Excel文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Ignore the custom columns.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">excludeColumnFieldNames</span><span class="hljs-params">(Collection&lt;String&gt; excludeColumnFieldNames)</span> &#123;<br>    parameter().setExcludeColumnFieldNames(excludeColumnFieldNames);<br>    <span class="hljs-keyword">return</span> self();<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个列表，用于存储不导出列对应的属性名称（即年龄<code>age</code>、生日<code>birthday</code>），然后将这个列表作为参数传入到<code>excludeColumnFieldNames</code>方法中，实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br><br>    <span class="hljs-comment">// 创建一个列表，这个列表中存储不需要导出的列对应的属性名称</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;age&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;birthday&quot;</span>);<br><br>    EasyExcel.write(filePath, Employee.class)<br>            <span class="hljs-comment">// 调用excludeColumnFieldNames方法，传入上述的列表</span><br>            .excludeColumnFieldNames(list)<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br><br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的Excel文件效果和前两种方式效果相同：</p><p><img src="https://source.icode504.com/images/image-20240322084820562.png"></p><h1 id="二、将数据导出到Excel文件的特定列"><a href="#二、将数据导出到Excel文件的特定列" class="headerlink" title="二、将数据导出到Excel文件的特定列"></a>二、将数据导出到Excel文件的特定列</h1><blockquote><p>案例：使用EasyExcel实现数据隔列输出（每个数据列之间存在一个空列）</p><p>实体类Employee、工具类EmployeeUtils已经准备好：<a href="https://www.icode504.com/posts/60.html#%E4%B8%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87">点我查看</a></p><p>导出的Excel文件显示效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240322090743061.png"></p></blockquote><p>要想实现上述效果，我们对EasyExcel对Excel文件数据列的操作。</p><p>Excel文件中，横向（从左到右）是行，竖向（从上到下）是列。如下图所示，由于每一列有自己的名称：列A、列B、列C……</p><p><img src="https://source.icode504.com/images/image-20240322091435784.png"></p><p>前面我们使用过<code>@ExcelProperty</code>注解，这个注解中有一个属性<code>index</code>，它的默认值是-1，此时列输出的顺序按照Java实体类中属性进行输出；</p><p>如果我们在注解中指定了<code>index</code>属性，默认从0开始，以上述表格为例，列A对应的<code>index</code>值是0，列B对应的<code>index</code>值是1，列C对应的<code>index</code>值是2，依次类推。</p><p>要想实现案例中的效果，我们需要在<code>@ExcelProperty</code>注解上额外指定<code>index</code>值，“序号”列对应的<code>index</code>值是0，“员工号”列对应的值是2，“姓名”列对应的值是4，以此类推，实体类Employee对应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工--实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-comment">// 序号</span><br>    <span class="hljs-comment">// 由于我们既要输出表头，又要指定输出到特定的列，这里注解对应的属性名必须标记上</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;序号&quot;, index = 0)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">// 员工号</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;员工号&quot;, index = 2)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br><br>    <span class="hljs-comment">// 员工姓名</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;员工姓名&quot;, index = 4)</span><br>    <span class="hljs-keyword">private</span> String employeeName;<br><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-comment">// @ExcelIgnore</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;年龄&quot;, index = 6)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">// 性别（男/女）</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;性别&quot;, index = 8)</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">// 生日</span><br>    <span class="hljs-comment">// @ExcelIgnore</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;生日&quot;, index = 10)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">// 构造器、getter、setter已省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用EasyExcel输出文件的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br><br>    EasyExcel.write(filePath, Employee.class)<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br><br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上述代码，输出的Excel文件符合案例要求：</p><p><img src="https://source.icode504.com/images/image-20240322093022197.png"></p><blockquote><p>说明：</p><ol><li>如果你打开Excel文件时，“生日”一栏显示######，只需要将鼠标移动到生日一列，向右拉动即可查看日期信息。</li><li>上图员工号和员工姓名并不是相邻的，向右拉动员工号一列，就会发现员工号和员工姓名二者是隔开的。</li></ol></blockquote><h1 id="三、知识点总结"><a href="#三、知识点总结" class="headerlink" title="三、知识点总结"></a>三、知识点总结</h1><p>EasyExcel的列操作的知识点总结如下图所示：</p><p><img src="https://source.icode504.com/images/EasyExcel%E5%88%97%E6%93%8D%E4%BD%9C.svg"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>常用工具</category>
      
      <category>Java</category>
      
      <category>文档操作</category>
      
      <category>EasyExcel</category>
      
      <category>使用EasyExcel将数据写入到Excel文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyExcel的表头操作</title>
    <link href="/posts/61.html"/>
    <url>/posts/61.html</url>
    
    <content type="html"><![CDATA[<p><a href="./60.html">上一节</a>我们使用EasyExcel框架的四种方式将数据输出到Excel文件中，实现了如下图的效果：</p><p><img src="https://source.icode504.com/images/image-20240319160342595.png"></p><p>其中序号、员工号、员工姓名等是各个列的表头（灰色单元格），接下来这一部分我们要对表头进行相关操作。</p><h1 id="一、输出无表头数据"><a href="#一、输出无表头数据" class="headerlink" title="一、输出无表头数据"></a>一、输出无表头数据</h1><blockquote><p>案例：不输出表头，显示效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240320231754335.png"></p></blockquote><p>EasyExcel框架中有一个类AbstractExcelWriterParameterBuilder，这是一个抽象类，在这个类中有一个方法<code>needHead</code>，参数是Boolean类型，如果传入的值是false就可以确保表头不再输出，以下是执行的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    EasyExcel.write(filePath, Employee.class)<br>            <span class="hljs-comment">// 不输出表头</span><br>            .needHead(<span class="hljs-literal">false</span>)<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时执行这段代码就不会出现表头信息，符合我们预期目标：</p><p><img src="https://source.icode504.com/images/image-20240321102207670.png"></p><h1 id="二、输出复杂表头"><a href="#二、输出复杂表头" class="headerlink" title="二、输出复杂表头"></a>二、输出复杂表头</h1><blockquote><p>案例：输出的Excel文件表头如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240320113132026.png"></p></blockquote><p>由上述表头我们发现员工信息表和其他属性（例如：序号、员工号等）是一对多的关系，为了更加直观地在代码中显示，我们需要将图中的关系进一步拆解一对一的关系：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">员工信息表 <span class="hljs-comment">--&gt; 序号</span><br>员工信息表 <span class="hljs-comment">--&gt; 员工号</span><br>员工信息表 <span class="hljs-comment">--&gt; 员工姓名</span><br>员工信息表 <span class="hljs-comment">--&gt; 年龄</span><br>员工信息表 <span class="hljs-comment">--&gt; 性别</span><br>员工信息表 <span class="hljs-comment">--&gt; 生日</span><br></code></pre></td></tr></table></figure><p>这样拆解以后，我们就可以在<code>@ExcelProperty</code>中使用<code>value</code>属性了，这个属性本身是一个字符串数组，要想发生类似上图表头合并，需要满足如下条件：</p><ul><li>类中的属性之间必须相邻；</li><li>属性使用<code>@ExcelProprety</code>修饰并且注解中包含<code>value</code>属性（字符串数组）；</li><li>字符串数组中相同的索引值对应的字符串值完全相同。</li></ul><p>根据上述内容，我们将实体类Employee属性中的注解做一点改动，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工--实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-comment">// 序号</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;,&quot;序号&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">// 员工号</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;, &quot;员工号&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br><br>    <span class="hljs-comment">// 员工姓名</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;, &quot;员工姓名&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> String employeeName;<br><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;, &quot;年龄&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">// 性别（男/女）</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;, &quot;性别&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> String gender;<br><br>    <span class="hljs-comment">// 生日</span><br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;员工信息表&quot;, &quot;生日&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">// 构造器、getter、setter已省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们再运行一次EasyExcel代码来导出Excel文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    EasyExcel.write(filePath, Employee.class)<br>            .sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时生成的表头符合案例的要求：</p><p><img src="https://source.icode504.com/images/image-20240320224957864.png"></p><h1 id="三、知识点总结"><a href="#三、知识点总结" class="headerlink" title="三、知识点总结"></a>三、知识点总结</h1><p>EasyExcel的表头操作的知识点总结如下图所示：</p><p><img src="https://source.icode504.com/images/EasyExcel%E7%9A%84%E8%A1%A8%E5%A4%B4%E6%93%8D%E4%BD%9C.svg"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>常用工具</category>
      
      <category>Java</category>
      
      <category>文档操作</category>
      
      <category>EasyExcel</category>
      
      <category>使用EasyExcel将数据写入到Excel文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用EasyExcel将数据写入到Excel文件的四种方式</title>
    <link href="/posts/60.html"/>
    <url>/posts/60.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、数据准备"><a href="#一、数据准备" class="headerlink" title="一、数据准备"></a>一、数据准备</h1><p>已知有一个实体类Employee，其内部包含如下的属性：序号（id）、员工号（employeeId）、员工姓名（employeeName）、年龄（age）、性别（gender）、生日（birthday）</p><p>根据上述内容，我们将上述内容转化成Java实体类Employee（包名：<code>com.icode504.entity</code>）。</p><p>在这个实体类中每一个属性使用<code>@ExcelProperty</code>修饰，作为表格文件中每一列的表头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.entity;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 员工--实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-comment">// 序号</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;序号&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">// 员工号</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;员工号&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeId;<br><br>    <span class="hljs-comment">// 员工姓名</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;员工姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String employeeName;<br><br>    <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-comment">// 性别（男/女）</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;性别&quot;)</span><br>    <span class="hljs-keyword">private</span> Character gender;<br><br>    <span class="hljs-comment">// 生日</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;生日&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">// 构造器、getter、setter已省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>根据上述实体类，创建一个长度为10的数据列表，这里我创建一个工具类EmployeeUtils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.utils;<br><br><span class="hljs-keyword">import</span> com.icode504.entity.Employee;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] employeeArray = &#123;<span class="hljs-string">&quot;小陈&quot;</span>, <span class="hljs-string">&quot;小李&quot;</span>, <span class="hljs-string">&quot;小吴&quot;</span>, <span class="hljs-string">&quot;小孙&quot;</span>, <span class="hljs-string">&quot;小张&quot;</span>, <span class="hljs-string">&quot;小徐&quot;</span>, <span class="hljs-string">&quot;小马&quot;</span>, <span class="hljs-string">&quot;小赵&quot;</span>, <span class="hljs-string">&quot;小刘&quot;</span>, <span class="hljs-string">&quot;小王&quot;</span>&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取员工列表数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Employee&gt; <span class="hljs-title function_">getDataList</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Employee&gt; employeeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; employeeArray.length; i++) &#123;<br>            <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>            employee.setId(i + <span class="hljs-number">1</span>);<br>            employee.setEmployeeId(UUID.randomUUID().toString());<br>            employee.setEmployeeName(employeeArray[i]);<br>            <span class="hljs-comment">// 随机生成1995~2002年的生日</span><br>            calendar.set(random.nextInt(<span class="hljs-number">8</span>) + <span class="hljs-number">1995</span>,<br>                    random.nextInt(<span class="hljs-number">12</span>) + <span class="hljs-number">1</span>,<br>                    random.nextInt(<span class="hljs-number">28</span>) + <span class="hljs-number">1</span>);<br>            employee.setBirthday(calendar.getTime());<br>            <span class="hljs-comment">// 根据上述生日计算年龄</span><br>            employee.setAge(Calendar.getInstance().get(Calendar.YEAR) - calendar.get(Calendar.YEAR));<br>            <span class="hljs-comment">// 随机生成性别</span><br>            employee.setGender(random.nextInt(<span class="hljs-number">2</span>) == <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;男&#x27;</span> : <span class="hljs-string">&#x27;女&#x27;</span>);<br>            employeeList.add(employee);<br>        &#125;<br>        <span class="hljs-keyword">return</span> employeeList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成Excel文件名称及所在路径，这里为了方便，我将最终生成的Excel放到了当前项目的resources目录下，以当前时间戳命名。方便后续使用</span><br><span class="hljs-comment">     * 如有需要，请将第四十八行代码替换成你自己的路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getFilePath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;E:\\Code\\icode504-codespace\\easyexcel-demo01\\src\\main\\resources\\&quot;</span><br>            + System.currentTimeMillis() + <span class="hljs-string">&quot;.xlsx&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们的数据列表准备完毕。</p><h1 id="二、Excel相关知识"><a href="#二、Excel相关知识" class="headerlink" title="二、Excel相关知识"></a>二、Excel相关知识</h1><p>Excel是微软公司开发的一款电子表格软件，被广泛用于数据分析、财务管理、统计报表等各种应用场景，通常用于创建、编辑和管理电子表格。</p><p>Excel文件通常以.xlsx（Excel 2007及以后版本）或者.xls（Excel 2003及之前版本）的文件格式保存。</p><p>一个Excel文件可以包含一个或多个工作表（也称为工作簿），每个工作表都是一个电子表格，由行和列组成，交叉处是单元格，可以输入文字、数字、公式等数据。</p><p>每一个单独的Excel文件称作<strong>工作簿WorkBook</strong>（如下图所示）：</p><p><img src="https://source.icode504.com/images/image-20240320091321241.png"></p><p>一个工作簿中可以包含多个<strong>工作表WorkSheet</strong>（如下图所示）：</p><p><img src="https://source.icode504.com/images/image-20240320091713015.png"></p><p>单元格是工作表的基本组成单位，用户可以在单元格中输入文字、数字、公式等内容，并且可以对单元格添加样式（例如：调整字体大小、填充单元格颜色、给单元格添加边框等等）：</p><p><img src="https://source.icode504.com/images/image-20240320092457754.png"></p><h1 id="三、将数据列表通过EasyExcel写入到Excel"><a href="#三、将数据列表通过EasyExcel写入到Excel" class="headerlink" title="三、将数据列表通过EasyExcel写入到Excel"></a>三、将数据列表通过EasyExcel写入到Excel</h1><p>将数据通过EasyExcel框架写入到Excel文件中，主要有如下几种方式：</p><h2 id="方式一：链式写法"><a href="#方式一：链式写法" class="headerlink" title="方式一：链式写法"></a>方式一：链式写法</h2><p>要想实现数据写入到Excel文件，需要实现如下步骤：</p><pre><code class=" mermaid">flowchart TDid1[调用EasyExcel静态方法write，并配置文件信息、字节码等参数]id2[在上述基础上继续调用静态方法sheet，配置工作表信息]id3[在上述基础上继续调用静态方法doWrite，配置数据并输出到Excel文件中]id1:::someclass --&gt; id2:::someclass --&gt; id3:::someclassclassDef someclass fill:#66ccff, stroke-width: 2px, stroke: #000, backgroundColor: #66ccff</code></pre><p>按照上述步骤，我们将上述工具类中提供的列表数据写入到Excel文件中。</p><p>在<code>test\java</code>目录下创建一个测试类EmployeeDemo1（包名：<code>com.icode504.test</code>），在这个测试类中创建一个测试方法<code>testExcelWrite1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    EasyExcel.write(filePath, Employee.class)<br>            .sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            .doWrite(EmployeeUtils.getDataList());<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时在<code>resources</code>目录下生成了一个时间戳命名的文件，双击打开：</p><p><img src="https://source.icode504.com/images/image-20240318164412936.png"></p><p>此时我们发现数据已经成功写入到Excel文件中：</p><blockquote><p>注意：你生成的Excel数据中员工号、年龄、性别、生日和我下方的图片是不同的，因为再工具类中我将上述字段对应的数据都设置成了随机的。每运行一次代码，生成的数据都不相同。</p><p>如果你打开Excel文件时，“生日”一栏显示######，只需要将鼠标移动到生日一列，向右拉动即可查看日期信息。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240318164534312.png"></p><h2 id="方式二：doWrite中使用Lambda表达式（适用于JDK-8及以上的版本）"><a href="#方式二：doWrite中使用Lambda表达式（适用于JDK-8及以上的版本）" class="headerlink" title="方式二：doWrite中使用Lambda表达式（适用于JDK 8及以上的版本）"></a>方式二：doWrite中使用Lambda表达式（适用于JDK 8及以上的版本）</h2><p>JDK 8版本的一大特性就是匿名内部类对象可以使用Lambda表达式代替（匿名内部类中只能有一个方法），我们可以在<code>doWrite</code>方法中使用Lambda表达式代替：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    EasyExcel.write(filePath, Employee.class)<br>            .sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            <span class="hljs-comment">// doWrite内部使用Lambda表达式</span><br>            .doWrite(() -&gt; &#123;<br>                <span class="hljs-keyword">return</span> EmployeeUtils.getDataList();<br>            &#125;);<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样可以正常输出文件，并且数据成功写到Excel文件中。</p><p>以上述代码为例，<code>doWrite</code>方法之所以能编写Lambda表达式是因为其参数类型是<code>Supplier&lt;Collection&lt;?&gt;&gt;</code>，Supplier接口头部由<code>@FunctionalInterface</code>修饰，是一个函数式接口，这类接口要求当前接口中有且只能有一个抽象方法，这种方式最大的好处将匿名内部类对象写成Lambda表达式。</p><h2 id="方式三：try-with-resources写法（适用于JDK-7及以上的版本）"><a href="#方式三：try-with-resources写法（适用于JDK-7及以上的版本）" class="headerlink" title="方式三：try-with-resources写法（适用于JDK 7及以上的版本）"></a>方式三：try-with-resources写法（适用于JDK 7及以上的版本）</h2><p>JDK 7起支持try-with-resources写法，我们可以将EasyExcel中的逻辑写到try-with-resources中，步骤如下：</p><pre><code class=" mermaid">flowchart TDid1[在try的小括号中创建一个ExcelWriter对象，即调用EasyExcel类静态方法write，在方法内配置参数]id2[在try块中调用EasyExcel类的静态方法writeSheet并配置参数，创建WriteSheet对象]id3[ExcelWriter对象调用write方法，在此方法中配置数据和WriteSheet对象]id1:::someclass --&gt; id2:::someclass --&gt; id3:::someclassclassDef someclass fill:#66ccff, stroke-width: 2px, stroke: #000</code></pre><ol><li>在<code>try</code>块中（小括号）调用EasyExcel类的静态方法<code>write</code>并配置参数，并在这个方法中创建一个ExcelWriter对象。</li><li>创建一个WriteSheet对象，配置工作表的信息。</li><li>ExcelWriter对象调用write方法，并在write方法中配置要导出的数据等配置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-comment">// try-catch-resources写法</span><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filePath, Employee.class).build()) &#123;<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="探究：使用try-catch-finally替换的方式是否可行"><a href="#探究：使用try-catch-finally替换的方式是否可行" class="headerlink" title="探究：使用try-catch-finally替换的方式是否可行"></a>探究：使用try-catch-finally替换的方式是否可行</h2><p>既然能使用try-with-resources写法，那么普通的try-catch和在方法上抛出throws是否能达到同样的效果呢？</p><p>只使用try-catch数据无法写入文件中，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filePath, Employee.class).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们运行这个程序，发现它的确是在<code>resources</code>目录下确实生成了一个Excel文件，但是我们打开后发现这个Excel文件中并没有实际的数据写入。为什么会产生上述原因？</p><p>这里我们就要详细谈一下try-catch-finally和try-with-resources的区别了：</p><p>表面上看，二者的区别相差不大，都可以处理异常，只不过try-with-resources更加简洁。二者的主要区别在于文件资源管理类的处理方式不同：</p><p>对于普通的try-catch-finally，我们在try块中写可能抛出异常的代码，在catch块中捕获并处理这些异常，无论try块是否由异常，最终都会走finally块的代码。以文件资源处理类FileInputStream为例，读取一个文件以后，无论是否抛出异常，最终都需要在finally块中关闭，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;demo.txt&quot;</span>);<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span> (inputStream.read() != -<span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, buffer.length));<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>            inputStream.close();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然这样可以正常处理一个文件内容读入，但是在finally块中又嵌套了一个try-catch，里面又嵌套了一个if，代码就显得十分臃肿！</p><p>为了解决上述问题，JDK 7引入了try-with-resources语法糖，用于<strong>实现了AutoCloseable和Closeable接口的文件资源类自动关闭流的操作</strong>。这样做的好处就是我们不需要再手动写finally块关闭资源。</p><p>使用try-with-resources时，文件资源在try块的小括号内声明并初始化，无论try块中是否发生异常，在try块执行结束后自动关闭流。如果这个资源类中实现了AutoCloseable和Closeable接口，在关闭资源流时会自动调用重写的<code>close</code>方法。</p><p>接下来我们就来自定义一个类PigInputStream，实现Closeable接口，任意定义几个方法并重写原接口中的<code>close</code>方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504.service;<br><br><span class="hljs-keyword">import</span> java.io.Closeable;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义一个实现Closeable接口的类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-03-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PigInputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Closeable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PigInputStream</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猪猪吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猪猪的产后护理&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猪猪以每小时80迈的速度向大树撞去&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行关闭操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来编写一个我们使用try-with-resources创建对象，并调用实例方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">PigInputStream</span> <span class="hljs-variable">pigInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PigInputStream</span>()) &#123;<br>    pigInputStream.treat();<br>    pigInputStream.eat();<br>    <span class="hljs-comment">// 执行过程中抛出异常</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    pigInputStream.run();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240319152716892.png"></p><p>从输出结果可以直接验证try-with-resources可以自动调用类中已经重写的<code>close</code>方法（前提是实现了Closeable&#x2F;AutoCloseable接口）。这种写法确实可以省去finally块中再次执行<code>close</code>方法，可以简化部分代码。</p><p>接下来我们还可以验证try-with-resources是否是语法糖。使用Intellij IDEA打开编译过程中的字节码，即可查看反编译的内容（如下图所示）：</p><p><img src="https://source.icode504.com/images/image-20240319153824494.png"></p><p>通过反编译的内容我们发现，还是正常执行原有try-catch-finally。和反编译的代码相比，源代码更加简洁。使用语法糖的目的就是高效编写代码，提高代码可读性，让代码编写更加容易。</p><p>上面说了这么多try-catch-finally和try-with-resources的区别，那么我们接着将目光转到EasyExcel第三种方式：为什么使用普通的try-catch无法将数据写入到Excel文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> EasyExcel.write(filePath, Employee.class).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其实问题出在try块中真正将数据写入到Excel文件的代码<code>excelWriter.write(EmployeeUtils.getDataList(), writeSheet);</code>中，<kbd>Ctrl</kbd>+<kbd>鼠标左键</kbd>点击<code>write</code>方法可以发现返回类型是ExcelWriter：</p><p><img src="https://source.icode504.com/images/image-20240319155448858.png"></p><p><kbd>Ctrl</kbd>+<kbd>鼠标左键</kbd>点击ExcelWriter，我们发现这个类本身实现了Closeable接口：</p><p><img src="https://source.icode504.com/images/image-20240319155625130.png"></p><p>这个类中已经存在重写的<code>close</code>方法：</p><p><img src="https://source.icode504.com/images/image-20240319155726043.png"></p><p>因此，使用try-with-resources方式时，执行完<code>excelWriter.write(EmployeeUtils.getDataList(), writeSheet);</code>代码以后，会自动调用<code>excelWriter.close();</code>方法（不需要我们来调用）了，这一步主要是关闭IO流，确保文件正常输出。</p><p>再将目光返回到普通的try-catch的代码，我们会发现一个问题：在调用完EasyExcel相关的方法后，我们并没有手动将文件流关闭，数据并没有正常写入到表格文件中，解决上述问题的方式是在原有的基础上再添加一个finally块来执行资源关闭的操作，调整后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        excelWriter = EasyExcel.write(filePath, Employee.class).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        excelWriter.write(EmployeeUtils.getDataList(), writeSheet);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">assert</span> excelWriter != <span class="hljs-literal">null</span>;<br>        excelWriter.close();<br>        System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次执行这段代码，发现<code>resources</code>目录下正常输出文件，并将原有的数据写入到Excel文件中：</p><p><img src="https://source.icode504.com/images/image-20240319160342595.png"></p><h2 id="方式四：不创建对象写入Excel文件"><a href="#方式四：不创建对象写入Excel文件" class="headerlink" title="方式四：不创建对象写入Excel文件"></a>方式四：不创建对象写入Excel文件</h2><p>上述几种方式我们都使用到Employee实体类，但是在有些时候我们不需要实体类，只提供表头信息以及对应的数据列表，示例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 表头信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">getHead</span><span class="hljs-params">()</span> &#123;<br>    List&lt;List&lt;String&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;String&gt; head0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    head0.add(<span class="hljs-string">&quot;字符串&quot;</span>);<br>    List&lt;String&gt; head1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    head1.add(<span class="hljs-string">&quot;数字&quot;</span>);<br>    List&lt;String&gt; head2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    head2.add(<span class="hljs-string">&quot;日期&quot;</span>);<br><br>    list.add(head0);<br>    list.add(head1);<br>    list.add(head2);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么表头信息方法设计成<code>List&lt;List&lt;String&gt;&gt;</code>类型，主要有以下两个原因：</p><ul><li>EasyExcel中AbstractParameterBuilder类中提供了一个<code>head</code>方法（返回类型是一个泛型），这个方法目前只支持两种类型参数：<code>List&lt;List&lt;String&gt;&gt;</code>或<code>Class&lt;?&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * You can only choose one of the &#123;<span class="hljs-doctag">@link</span> #head(List)&#125; and &#123;<span class="hljs-doctag">@link</span> #head(Class)&#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> head</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">head</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; head)</span> &#123;<br>    parameter().setHead(head);<br>    <span class="hljs-keyword">return</span> self();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>设计成这种类型的优点是：在导出的Excel表中，每一列可能存在多个表头（如下图）</li></ul><p><img src="https://source.icode504.com/images/image-20240321141328874.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据列表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;List&lt;Object&gt;&gt; <span class="hljs-title function_">getNoModelDataList</span><span class="hljs-params">()</span> &#123;<br>    List&lt;List&lt;Object&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        List&lt;Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        data.add(<span class="hljs-string">&quot;字符串&quot;</span> + i);<br>        data.add(random.nextDouble());<br>        data.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        list.add(data);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用前面方式一的链式写法，由于目前我们并没有实体类，因此在静态方法<code>write</code>中只需要传如文件信息参数，并在此基础上调用<code>head</code>方法传入表头列表，后续内容和方式一写法基本相同，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> EmployeeUtils.getFilePath();<br>    <span class="hljs-comment">// write方法中只需要传入文件信息参数即可（例如：文件路径）</span><br>    EasyExcel.write(filePath)<br>            <span class="hljs-comment">// 传入表头，这里需要传入的参数类型是List&lt;List&lt;String&gt;&gt;</span><br>            .head(EmployeeUtils.getHead())<br>            .sheet(<span class="hljs-string">&quot;测试工作表&quot;</span>)<br>            .doWrite(EmployeeUtils.getNoModelDataList());<br>    System.out.println(<span class="hljs-string">&quot;数据成功写出到Excel文件中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>导出的Excel文件包含表头信息和数据列表：</p><p><img src="https://source.icode504.com/images/image-20240321140536248.png"></p><p>文章参考：<a href="https://zhuanlan.zhihu.com/p/269208361">浅谈 Java 中的 AutoCloseable 接口</a></p><h1 id="四、知识点总结"><a href="#四、知识点总结" class="headerlink" title="四、知识点总结"></a>四、知识点总结</h1><p>使用EasyExcel将数据写入到Excel文件的三种方式的知识点总结如下图所示：</p><p><img src="https://source.icode504.com/images/%E4%BD%BF%E7%94%A8EasyExcel%E5%B0%86%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E5%88%B0Excel%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F.svg"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>常用工具</category>
      
      <category>Java</category>
      
      <category>文档操作</category>
      
      <category>EasyExcel</category>
      
      <category>使用EasyExcel将数据写入到Excel文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSS订阅指南</title>
    <link href="/posts/59.html"/>
    <url>/posts/59.html</url>
    
    <content type="html"><![CDATA[<p>RSS是一种简易的网页内容聚合格式，其全称为“Really Simple Syndication”（简易消息聚合）。它允许用户获取网站更新的摘要或完整内容，而无需访问网站本身。RSS以XML格式发布，允许内容从一个源（网站）传送到另一个源（RSS阅读器）。</p><p>RSS的好处包括：</p><ol><li><p><strong>便利的信息获取</strong>: 用户可以通过RSS阅读器一次性获取多个网站的更新内容，无需逐个访问网站，节省时间和精力。</p></li><li><p><strong>定制化订阅</strong>: 用户可以根据个人兴趣订阅特定网站或特定主题的内容，使其阅读体验更加个性化。</p></li><li><p><strong>实时更新</strong>: RSS阅读器能够及时获取更新内容，使用户随时了解最新信息。</p></li><li><p><strong>减少信息干扰</strong>: 通过RSS，用户可以将感兴趣的内容集中在一个平台上，减少了在各个网站间的跳转，避免了信息干扰。</p></li><li><p><strong>隐私保护</strong>: RSS阅读器通常不需要用户提供个人信息，因此能够保护用户的隐私。</p></li></ol><p>以下是RSS相关插件安装及在浏览器中使用教程：</p><h1 id="一、下载插件"><a href="#一、下载插件" class="headerlink" title="一、下载插件"></a>一、下载插件</h1><table><thead><tr><th>插件名称</th><th>下载链接</th></tr></thead><tbody><tr><td>RSS阅读器——Feedbro插件</td><td><a href="https://icode504.lanzn.com/inWah1p1vh6h">点我下载</a></td></tr><tr><td>信息抓取——Rsshub插件</td><td><a href="https://icode504.lanzn.com/iXhFp1p1vhab">点我下载</a></td></tr></tbody></table><h1 id="二、安装插件"><a href="#二、安装插件" class="headerlink" title="二、安装插件"></a>二、安装插件</h1><p>1. 打开谷歌浏览器，按照下图所示打开管理扩展程序：</p><p><img src="https://source.icode504.com/images/image-20231127152259082.png"></p><p>2. 在浏览器右上角打开开发者模式：</p><p><img src="https://source.icode504.com/images/image-20231127152522395.png"></p><p>3. 将下载好的两个插件<strong>依次拖入</strong>浏览器的扩展程序中，如果开关打开，就说明两个插件已经安装成功了。</p><p><img src="https://source.icode504.com/images/240222009.gif"></p><p>4. 安装完成后，点击右上角的插件图标，将这两个插件置顶显示：</p><p><img src="https://source.icode504.com/images/image-20240317211639175.png"></p><p>5. 此时在搜索栏就会出现这两个图标：</p><p><img src="https://source.icode504.com/images/image-20240317211752012.png"></p><h1 id="三、Feedbro插件汉化"><a href="#三、Feedbro插件汉化" class="headerlink" title="三、Feedbro插件汉化"></a>三、Feedbro插件汉化</h1><p>1. 按照下图所示打开Feedbro插件设置：</p><p><img src="https://source.icode504.com/images/image-20240317212017375.png"></p><p>2. 复制下面的链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>source.icode504.com<span class="hljs-regexp">/images/</span>feedbro-locale-zh_CN.json<br></code></pre></td></tr></table></figure><p>3. 找到Settings –&gt; User interface language，点击<strong>Import Locale</strong>：</p><p><img src="https://source.icode504.com/images/image-20240222170611845.png"></p><p>4. 将前面复制的链接粘贴到此处，完成后点击OK：</p><p><img src="https://source.icode504.com/images/image-20240222171356676.png"></p><p>5. 汉化完成：</p><p><img src="https://source.icode504.com/images/image-20240222171438729.png"></p><h1 id="四、抓取RSS订阅源"><a href="#四、抓取RSS订阅源" class="headerlink" title="四、抓取RSS订阅源"></a>四、抓取RSS订阅源</h1><p>1. 以我的个人网站为例：<a href="https://www.icode504.com，此时RSSHub图标有一个数字，点击图标：">https://www.icode504.com，此时RSSHub图标有一个数字，点击图标：</a></p><p><img src="https://source.icode504.com/images/image-20240318203343379.png"></p><p>2. 点击Feedbro插件图标，然后点击<strong>打开订阅源阅读器</strong>：</p><p><img src="https://source.icode504.com/images/image-20240318203509688.png"></p><p>3. 进入到主页面以后，点击<strong>添加新的源</strong>：</p><p><img src="https://source.icode504.com/images/image-20240318203630935.png"></p><p>4. 将第一步复制的链接粘贴到订阅源URL，然后点击<strong>加载</strong>，此时会显示标题内容，然后点击<strong>保存</strong>：</p><p><img src="https://source.icode504.com/images/image-20240318203911654.png"></p><p>5. 此时点击左侧标题，界面会显示最近抓取的内容，点击任意一个链接可以跳转到网站查看对应的内容：</p><blockquote><p>  说明：以本网站为例，后续文章更新都可以在Feedbro中可以查看阅读</p></blockquote><p><img src="https://source.icode504.com/images/image-20240318204226290.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>RSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyExcel介绍与依赖导入</title>
    <link href="/posts/58.html"/>
    <url>/posts/58.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、EasyExcel介绍"><a href="#一、EasyExcel介绍" class="headerlink" title="一、EasyExcel介绍"></a>一、EasyExcel介绍</h1><p>EasyExcel是由阿里巴巴一款开源的读写Excel项目，和Apache POI相比，它的最大优势就是在尽可能节省内存的情况下支持读写百兆的Excel，目前维护的版本是3.1.x-3.2.x（截止到2024年3月），更多内容说明可以到官网查看：<a href="https://easyexcel.opensource.alibaba.com/">点我进入官网</a></p><p><img src="https://source.icode504.com/images/large-20799fd0a966e90931a35cbfff69253d.png" alt="16M内存23秒读取了75M（46W行25列）的Excel"></p><h1 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h1><p>1. 请确保电脑上已经安装如下软件：</p><ul><li>Java开发工具：JDK</li><li>集成开发环境：Intellij IDEA或者Eclipse</li><li>项目构建工具：Maven或者Gradle</li></ul><p>需要安装的小伙伴根据自身操作系统查看安装教程：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">JDK 8</td><td align="center"><a href="./1.html">点我查看</a></td><td align="center">敬请期待</td><td align="center"><a href="./55.html">点我查看</a></td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="./14.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">暂无</td></tr><tr><td align="center">Eclipse</td><td align="center"><a href="./30.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">暂无</td></tr><tr><td align="center">Maven</td><td align="center"><a href="./22.html">点我查看</a></td><td align="center">敬请期待</td><td align="center"><a href="./56.html">点我查看</a></td></tr><tr><td align="center">Gradle</td><td align="center"><a href="./23.html">点我查看</a></td><td align="center">敬请期待</td><td align="center"><a href="./57.html">敬请期待</a></td></tr></tbody></table><p>2. 打开Intellij IDEA，创建一个项目：</p><blockquote><p>以下提供了Maven和Gradle两种方式创建项目，任选其一创建项目即可。</p></blockquote><table><thead><tr><th align="center">Maven构建项目</th><th align="center">Gradle构建项目</th></tr></thead><tbody><tr><td align="center"><img src="https://source.icode504.com/images/image-20240305172709416.png"></td><td align="center"><img src="https://source.icode504.com/images/image-20240305173309106.png" alt="image-20240305173309106"></td></tr><tr><td align="center"><img src="https://source.icode504.com/images/image-20240305173055254.png"></td><td align="center"><img src="https://source.icode504.com/images/image-20240305173055254.png"></td></tr></tbody></table><p>3. 导入依赖（这里我使用的是3.1.1版本）</p><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- easyexcel --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 日志框架slf4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.36<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- lombok(简化getter/setter、构造器，仅推荐学习阶段使用) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 测试工具Junit5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>build.gradle</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">implementation <span class="hljs-string">&#x27;com.alibaba:easyexcel:3.1.1&#x27;</span><br>implementation <span class="hljs-string">&#x27;org.slf4j:slf4j-api:1.7.36&#x27;</span><br>compileOnly <span class="hljs-string">&#x27;org.projectlombok:lombok:1.18.24&#x27;</span><br>testImplementation <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.2&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>常用工具</category>
      
      <category>Java</category>
      
      <category>文档操作</category>
      
      <category>EasyExcel</category>
      
      <category>使用EasyExcel将数据写入到Excel文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>EasyExcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle安装配置教程（Linux通用版）</title>
    <link href="/posts/57.html"/>
    <url>/posts/57.html</url>
    
    <content type="html"><![CDATA[<p>有需要安装Linux系统的小伙伴，可以点击下面任意一个链接查看安装教程：</p><table><thead><tr><th align="center"></th><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center">安装教程</td><td align="center"><a href="./48.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><h1 id="一、安装前检查（Linux端）"><a href="#一、安装前检查（Linux端）" class="headerlink" title="一、安装前检查（Linux端）"></a>一、安装前检查（Linux端）</h1><p>1. 检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：<a href="./55.html">点我查看</a></p><p>2. 已经安装JDK的小伙伴，请在命令行执行如下命令，如果出现下图的版本信息，就说明JDK环境变量配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240225121013682.png"></p><p>3. 检查Ubuntu发行版本信息，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240310222707920.png"></p><h1 id="二、下载Gradle安装包（Windows端）"><a href="#二、下载Gradle安装包（Windows端）" class="headerlink" title="二、下载Gradle安装包（Windows端）"></a>二、下载Gradle安装包（Windows端）</h1><p>1. 点击右侧链接打开官网页面：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><blockquote><p>  如果你使用的SpringBoot项目，建议使用6.8及以上的版本。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240307110337332.png"></p><p>2. 这里我选择8.0.2版本下载。点击<strong>complete</strong>下载：</p><p><img src="https://source.icode504.com/images/image-20240307110441377.png"></p><h1 id="三、安装并配置Gradle环境变量"><a href="#三、安装并配置Gradle环境变量" class="headerlink" title="三、安装并配置Gradle环境变量"></a>三、安装并配置Gradle环境变量</h1><p>1. 将前面下载好的Gradle安装包使用SFTP工具（这里我使用的是Eleterm）由Windows端传输到Linux端（请先确保Windows本身已经通过SSH方式连接到Linux）：</p><p><img src="https://source.icode504.com/images/image-20240224172925751.png"></p><p>2. 在左侧Windows端找到下载好的安装包：</p><p><img src="https://source.icode504.com/images/image-20240310214142976.png"></p><p>3. 在右侧Linux端设置安装包存放路径，这里我将安装包存放在<code>/opt</code>下：</p><p><img src="https://source.icode504.com/images/image-20240224173503187.png"></p><p>4. 按照下图所示操作，将Maven安装包传到Linux端的<code>/opt</code>目录下：</p><p><img src="https://source.icode504.com/images/24010310001.gif"></p><p>5. 等待一段时间后，此时Linux端的<code>/opt</code>目录下已经存放了刚才我们传输的文件：</p><p><img src="https://source.icode504.com/images/image-20240310214339373.png"></p><p>6. 此时我们切换回命令行，执行如下命令切换到<code>/opt</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br></code></pre></td></tr></table></figure><p>7. 在Linux端下载安装unzip（解压缩工具）：</p><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install unzip<br></code></pre></td></tr></table></figure><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install unzip<br></code></pre></td></tr></table></figure><p>7. 解压刚刚传输过来的安装包，执行如下命令：</p><blockquote><p>  小技巧：在命令行中输入文件名时，我们可以只写文件的前一部分，然后按一下<kbd>Tab</kbd>键补齐文件名。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip gradle-8.0.2-all.zip<br></code></pre></td></tr></table></figure><p>8. 等待一段时间后，解压完成，执行如下命令，进入解压后的文件夹名称：</p><p><img src="https://source.icode504.com/images/image-20240310214538214.png"></p><p>使用<code>cd</code>命令进入解压后的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> gradle-8.0.2<br></code></pre></td></tr></table></figure><p>9. 安装vim编辑器，根据自己的操作系统执行如下命令来安装：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install vim<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install vim<br></code></pre></td></tr></table></figure><p>10. 在<code>/etc/profile.d</code>目录下创建<code>gradle_env.sh</code>文件，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile.d/gradle_env.sh<br></code></pre></td></tr></table></figure><p>11. 复制如下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">GRADLE_HOME</span>  <br>GRADLE_HOME=<br>PATH=$PATH:$GRADLE_HOME/bin<br>export PATH GRADLE_HOME<br></code></pre></td></tr></table></figure><p>12. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第十步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240310220804783.png"></p><p>13. 完成后按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。</p><p>14. 输入如下命令，查看当前文件路径，选中这个路径并复制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240310220307085.png"></p><p>15. 再次打开<code>gradle_env.sh</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile.d/gradle_env.sh<br></code></pre></td></tr></table></figure><p>16. 将光标移动到第2行，按<kbd>i</kbd>进入编辑模式，将<code>GRADLE_HOME</code>对应的值替换成第14步复制的路径，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴，最终效果如下图：</p><p><img src="https://source.icode504.com/images/image-20240310220723840.png"></p><p>17. 完成后按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。</p><p>18. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile.d/gradle_env.sh<br></code></pre></td></tr></table></figure><p>19. 执行如下命令可以查看Gradle版本，如果出现如下提示信息，说明Gradle环境变量配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gradle -v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240310221119015.png"></p><h1 id="四、配置Gradle下载源"><a href="#四、配置Gradle下载源" class="headerlink" title="四、配置Gradle下载源"></a>四、配置Gradle下载源</h1><p>由于Gradle自带Maven下载源是国外的，在后续下载依赖的过程中会比较慢。这里我们需要将下载源换成国内镜像。</p><p>1. 找一个你熟悉的位置存放Gradle依赖，这里我创建一个目录专门存放Gradle依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/gradle/repository<br></code></pre></td></tr></table></figure><p>2. 进入Gradle安装目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/gradle-8.0.2<br></code></pre></td></tr></table></figure><p>3. 执行如下命令，查看当前目录下的所有文件和文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>4. 执行如下命令，查看当前目录下的所有文件和文件夹：</p><p><img src="https://source.icode504.com/images/image-20240310221640106.png"></p><p>5. 进入<code>init.d</code>文件夹，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> init.d/<br></code></pre></td></tr></table></figure><p>6. 执行<code>ls</code>命令，我们发现这个目录下有一个<code>readme.txt</code>文件。执行<code>cat readme.txt</code>命令可以查看文件内容：</p><p><img src="https://source.icode504.com/images/image-20240310221945889.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">You can add .gradle (e.g. test.gradle) init scripts to this directory. Each one is executed at the start of the build.<br></code></pre></td></tr></table></figure><p>简单翻译一下就是在<code>init.d</code>目录下创建一个初始化文件，这里我们需要新建一个<code>init.gradle</code>文件。</p><p>3. 新建一个<code>init.gradle</code>文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim init.gradle<br></code></pre></td></tr></table></figure><p>4. 复制如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">allprojects &#123;<br>    repositories &#123; <br>        mavenLocal() <br>        maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125; <br>        maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&quot;https://nexus.bsdn.org/content/groups/public/&quot;</span> &#125; <br>        mavenCentral()<br>    &#125;<br>    buildscript &#123;<br>        repositories &#123; <br>            maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&#x27;https://nexus.bsdn.org/content/groups/public/&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;M2&quot;</span> ; url <span class="hljs-string">&#x27;https://plugins.gradle.org/m2/&#x27;</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第十步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240310222300304.png"></p><p>6. 完成后按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。至此，Gradle下载源配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>项目构建工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gradle</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装配置教程（Linux通用版）</title>
    <link href="/posts/56.html"/>
    <url>/posts/56.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前检查（Linux端）"><a href="#一、安装前检查（Linux端）" class="headerlink" title="一、安装前检查（Linux端）"></a>一、安装前检查（Linux端）</h1><p>1. 检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：<a href="https://www.icode504.com/posts/55.html">点我查看</a></p><p>2. 已经安装JDK的小伙伴，请在命令行执行如下命令，如果出现下图的版本信息，就说明JDK环境变量配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240225121013682.png"></p><h1 id="二、下载Maven安装包（Windows端）"><a href="#二、下载Maven安装包（Windows端）" class="headerlink" title="二、下载Maven安装包（Windows端）"></a>二、下载Maven安装包（Windows端）</h1><p>以下两种下载Maven安装包方式二选一：</p><h2 id="方式一：网盘下载（强烈推荐，下载速度非常快）"><a href="#方式一：网盘下载（强烈推荐，下载速度非常快）" class="headerlink" title="方式一：网盘下载（强烈推荐，下载速度非常快）"></a>方式一：网盘下载（强烈推荐，下载速度非常快）</h2><p>点击右侧链接，进入下载界面：<a href="https://icode504.lanzn.com/b014acbmb">点我下载，密码1024</a></p><p><img src="https://source.icode504.com/images/image-20240306103605021.png"></p><h2 id="方式二：官网下载（不推荐，下载速度较慢）"><a href="#方式二：官网下载（不推荐，下载速度较慢）" class="headerlink" title="方式二：官网下载（不推荐，下载速度较慢）"></a>方式二：官网下载（不推荐，下载速度较慢）</h2><p>1. 点击进入官网下载链接：<a href="https://archive.apache.org/dist/maven/maven-3/">点我进入</a></p><p>2. 选择一个版本，点击进入，这里我以3.6.3版本为例，按照下图所示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240305223639246.png"></p><p><img src="https://source.icode504.com/images/image-20230508214809153.png"></p><blockquote><p>  说明：source目录下的文件是Maven的源码文件，如果有查看的源码的小伙伴，也可以点击进入下载，这里就不过多赘述了。</p></blockquote><p>3. 选择<code>.tar.gz</code>结尾的安装包下载：</p><p><img src="https://source.icode504.com/images/image-20240305223849713.png"></p><h1 id="三、安装并配置Maven环境变量"><a href="#三、安装并配置Maven环境变量" class="headerlink" title="三、安装并配置Maven环境变量"></a>三、安装并配置Maven环境变量</h1><p>1. 将前面下载好的Maven安装包使用SFTP工具（这里我使用的是Eleterm）由Windows端传输到Linux端（请先确保Windows本身已经通过SSH方式连接到Linux）：</p><p><img src="https://source.icode504.com/images/image-20240224172925751.png"></p><p>2. 在左侧Windows端找到下载好的安装包：</p><p><img src="https://source.icode504.com/images/image-20240305225348678.png"></p><p>3. 在右侧Linux端设置安装包存放路径，这里我将安装包存放在<code>/opt</code>下：</p><p><img src="https://source.icode504.com/images/image-20240224173503187.png"></p><p>4. 按照下图所示操作，将Maven安装包传到Linux端的<code>/opt</code>目录下：</p><p><img src="https://source.icode504.com/images/24010304001.gif"></p><p>5. 等待一段时间后，此时Linux端的<code>/opt</code>目录下已经存放了刚才我们传输的文件：</p><p><img src="https://source.icode504.com/images/image-20240305225844104.png"></p><p>6. 此时我们切换回命令行，执行如下命令切换到<code>/opt</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br></code></pre></td></tr></table></figure><p>7. 解压刚刚传输过来的安装包，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf apache-maven-3.6.3-bin.tar.gz<br></code></pre></td></tr></table></figure><blockquote><p>  小技巧：在命令行中输入文件名时，我们可以只写文件的前一部分，然后按一下<kbd>Tab</kbd>键补齐文件名。</p></blockquote><p>8. 等待一段时间后，解压完成，执行如下命令，进入解压后的文件夹名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240305230159629.png"></p><p>使用<code>cd</code>命令进入解压后的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> apache-maven-3.6.3/<br></code></pre></td></tr></table></figure><p>9. 输入如下命令，查看当前文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240305230416205.png"></p><p>10. 复制如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">MAVEN_HOME</span>  <br>MAVEN_HOME=/opt/apache-maven-3.6.3<br>PATH=$PATH:$MAVEN_HOME/bin<br>export PATH MAVEN_HOME<br></code></pre></td></tr></table></figure><p>11. 在<code>/etc/profile.d</code>目录下创建<code>maven_env.sh</code>文件，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile.d/maven_env.sh<br></code></pre></td></tr></table></figure><blockquote><p>没有<code>vim</code>根据自己的操作系统执行如下命令安装：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install vim<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt -y install vim<br></code></pre></td></tr></table></figure></blockquote><p>12. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第十步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240305230648113.png"></p><p>13. 将光标移动到第二行，将<code>MAVEN_HOME</code>对应的值替换成第9步复制的路径。完成后按一下Esc键，然后输入<code>:wq</code>保存并退出。</p><p>14. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile.d/maven_env.sh<br></code></pre></td></tr></table></figure><p>15. 执行如下命令即可查看当前Maven版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn -v<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240305231236570.png"></p><h1 id="四、配置Maven"><a href="#四、配置Maven" class="headerlink" title="四、配置Maven"></a>四、配置Maven</h1><p>前面我们已经配置好Maven，但是我们在以后导入依赖的时候默认使用的是Maven的中央仓库，而中央仓库是国外网站，下载速度比较慢。因此我们需要将Maven下载源设置成国内镜像仓库，提高导入依赖的速度。以下是下载源配置教程。</p><p>1. 找一个你熟悉的位置存放Maven依赖，这里我创建一个目录专门存放Maven依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/maven/repository<br></code></pre></td></tr></table></figure><p>2. 进入Maven安装目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/apache-maven-3.6.3/<br></code></pre></td></tr></table></figure><p>3. 执行如下命令，查看当前目录下的所有文件和文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240305231857803.png"></p><p>4. 进入<code>conf</code>文件夹，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> conf/<br></code></pre></td></tr></table></figure><p>5. 再次执行<code>ls</code>命令，可以看到里面有一个<code>settings.xml</code>文件，这个文件就是我们后续需要修改的配置文件：</p><p><img src="https://source.icode504.com/images/image-20240305232035444.png"></p><p>6. 使用<code>vim</code>命令编辑<code>settings.xml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim settings.xml<br></code></pre></td></tr></table></figure><p>7. 执行如下命令并回车，开启行号显示（命令在左下角显示）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br></code></pre></td></tr></table></figure><p>8. 复制下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p>9. 按<kbd>i</kbd>进入编辑模式，在第246行末尾换行，将上一步代码按<kbd>Shiht</kbd>和<kbd>Insert</kbd>键粘贴到247行中，效果如下图：</p><p><img src="https://source.icode504.com/images/image-20240305232911281.png"></p><p>此时我们配好了Maven的全局JDK版本，使用的是JDK 8版本。</p><p>10. 复制下面的代码：</p><blockquote><p>  这段代码的含义是将Maven下载依赖源更改为国内的阿里云，可以大幅加快下载速度。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11. 在第158行末尾处换行，粘贴上一步代码，效果如下图：</p><p><img src="https://source.icode504.com/images/image-20240305233219372.png"></p><p>12. 跳转到第55行，创建一个<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，并在二者中间填写第一步你创建的Maven依赖路径，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240306090505257.png"></p><p>13. 至此，Maven配置完成，按<kbd>Esc</kbd>键退出编辑模式，按<kbd>:wq</kbd>保存并退出。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>项目构建工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code开启多个标签页</title>
    <link href="/posts/54.html"/>
    <url>/posts/54.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、VS-Code开启多个标签页"><a href="#一、VS-Code开启多个标签页" class="headerlink" title="一、VS Code开启多个标签页"></a>一、VS Code开启多个标签页</h1><p>VS Code在打开多个文件时，总是使用一个页签显示，这对于切换多个标签页的小伙伴很不友好</p><p><img src="https://source.icode504.com/images/240301006.gif"></p><p>打开左下角小齿轮，点击设置：</p><p><img src="https://source.icode504.com/images/image-20240301115459948.png"></p><p>在左侧找到工具台–&gt;编辑管理，将<strong>Enable Preview From Quick Open</strong>取消勾选：</p><p><img src="https://source.icode504.com/images/image-20240301115739501.png"></p><h1 id="二、VS-Code开启多个标签页换行显示"><a href="#二、VS-Code开启多个标签页换行显示" class="headerlink" title="二、VS Code开启多个标签页换行显示"></a>二、VS Code开启多个标签页换行显示</h1><p>在设置上方搜索框中搜索wrapTabs，将第一个搜索结果<strong>Workbench &gt; Editor: Wrap Tabs</strong>勾选：</p><p><img src="https://source.icode504.com/images/image-20240301133726842.png"></p><p>此时打开多个标签页时就会换行显示了：</p><p><img src="https://source.icode504.com/images/240301007.gif"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Visual Studio Code（VS Code）</category>
      
      <category>使用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目启动报错 Component name xxx should always be multi-word vue/multi-word-component-names</title>
    <link href="/posts/53.html"/>
    <url>/posts/53.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h1><p>今天在写Vue代码时，启动时出现了报错信息：</p><p><img src="https://source.icode504.com/images/image-20240229143247782.png"></p><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><p>出现上述错误的主要原因就是我们的Vue文件名不符合Vue官方的命名规范</p><p><img src="https://source.icode504.com/images/image-20240229143710857.png"></p><p><a href="https://cn.vuejs.org/style-guide/rules-essential">Vue官方文档</a>提供了详细的说明：</p><p><font color="FF0000">除了App组件以外，其他所有的组件都应该以多个单词组合命名</font>。这样做的目的是避免和HTML自带的标签冲突（因为所有HTML标签都是用单个单词命名）。</p><p><img src="https://source.icode504.com/images/image-20240229143934337.png"></p><h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><p>共有两种解决方案任选其一：</p><h2 id="方案一：修改文件名（虽然麻烦，但是推荐）"><a href="#方案一：修改文件名（虽然麻烦，但是推荐）" class="headerlink" title="方案一：修改文件名（虽然麻烦，但是推荐）"></a>方案一：修改文件名（虽然麻烦，但是推荐）</h2><p>将所有组件中出现的单个单词都修改成多个单词命名（大驼峰命名法或者单词之间使用<code>-</code>做分隔），这里我将我的组件都命名成<code>My</code>+<code>xxx</code>的形式，例如：<code>MySchool</code>、<code>MyStudent</code>：</p><p><img src="https://source.icode504.com/images/image-20240229150105631.png"></p><p>需要注意的是，文件名修改后，文件中出现和文件名相关的内容也需要修改：</p><p><img src="https://source.icode504.com/images/image-20240229150407355.png"></p><h2 id="方案二：修改vue-config-js文件（简单，但只推荐在学习中使用）"><a href="#方案二：修改vue-config-js文件（简单，但只推荐在学习中使用）" class="headerlink" title="方案二：修改vue.config.js文件（简单，但只推荐在学习中使用）"></a>方案二：修改vue.config.js文件（简单，但只推荐在学习中使用）</h2><p>打开<code>vue.config.js</code>文件，添加如下内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">lintOnSave: true<br></code></pre></td></tr></table></figure><p>添加效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240229150713246.png"></p><p>通过<code>npm run</code>命令也可以运行：</p><p><img src="https://source.icode504.com/images/image-20240229150916373.png"></p><p>虽然这样改确实很方便，但是文件命名方式有可能违背了Vue组件命名规范，仅限制在学习过程中使用！</p><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><p><a href="https://www.cnblogs.com/XYH-Learning/p/16305348.html">https://www.cnblogs.com/XYH-Learning/p/16305348.html</a></p><p><a href="https://vuejs.org/style-guide/rules-essential">https://vuejs.org/style-guide/rules-essential</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
      <category>Vue Bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Debian安装教程</title>
    <link href="/posts/52.html"/>
    <url>/posts/52.html</url>
    
    <content type="html"><![CDATA[<p>Debian 是一个免费的开源操作系统，是最古老的 Linux 发行版之一，于 1993 年由 Ian Murdock 创建。它采用了自由软件协议，并且由志愿者社区维护和支持。Debian 的目标是创建一个稳定、安全且易于维护的操作系统，以自由软件为基础，同时保持尽可能广泛的硬件兼容性。</p><p>Debian 的特点包括强大的软件包管理系统，用户可以轻松地安装、更新和移除软件。此外，Debian 也是一种多平台操作系统，支持多种硬件架构，如 x86、x86-64、ARM 和 MIPS 等。</p><p>Debian 的稳定版本以命名的方式发布，当前的稳定版本为 Debian 12（截止至2024年2月），其每个版本都经过了严格的测试和审查，以确保稳定性和安全性。此外，Debian 还有测试版（testing）和不稳定版（unstable），供用户尝试最新的软件包和功能，但相对较不稳定。</p><p>Debian 社区强调自由软件的原则，并且积极参与自由软件基金会（Free Software Foundation）的活动，致力于推动自由软件的发展和使用。作为一种非商业性质的操作系统，Debian 的开发和维护主要依赖于志愿者的贡献和捐赠，体现了自由软件社区的合作和共享精神。</p><p>接下来就为大家介绍一下Debian 12的安装与使用：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>1. 请确保电脑中已经安装了VMware和Electerm，如果没有安装的小伙伴可以点击下面的链接查看安装教程：</p><table><thead><tr><th>需要安装的软件名称</th><th>链接</th></tr></thead><tbody><tr><td>虚拟机软件VMware Workstation</td><td><a href="./41.html">点我查看</a></td></tr><tr><td>远程连接软件Electerm</td><td><a href="./47.html">点我查看</a></td></tr><tr><td>下载器Neat Download Manager（推荐安装，可以加快下载速度）</td><td><a href="./24.html">点我查看</a></td></tr></tbody></table><p>2. 建议电脑预留50G的存储空间。</p><p>3. 按<kbd>win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令行后执行如下命令查看本机的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo<br></code></pre></td></tr></table></figure><p>这里我的电脑系统类型是<code>x64</code>：</p><p><img src="https://source.icode504.com/images/image-20240225124629558.png"></p><h1 id="二、下载Debian镜像"><a href="#二、下载Debian镜像" class="headerlink" title="二、下载Debian镜像"></a>二、下载Debian镜像</h1><p>1. 点击右侧链接进入清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/debian-cd/">点我查看</a></p><p>2. 目前Debian稳定版的版本号是12。点击<code>12.5.0</code>文件夹进入：</p><p><img src="https://source.icode504.com/images/image-20240228092317768.png"></p><p>3. 根据电脑的系统类型进入相应的文件夹，这里我的电脑系统类型是<code>x64</code>，进入第一个文件夹<code>amd64</code>；系统类型是<code>arm64</code>的小伙伴点击第二个文件夹进入：</p><p><img src="https://source.icode504.com/images/image-20240228092447384.png"></p><p>4. 点击<code>iso-cd</code>文件夹进入：</p><p><img src="https://source.icode504.com/images/image-20240228092534470.png"></p><p>5. <code>x64</code>的小伙伴点击<font color='#EE0000'>debian-12.5.0-amd64-netinst.iso</font>下载；<code>arm64</code>的小伙伴点击<font color='#66CCFF'>debian-12.5.0-amd64-netinst.iso</font>下载：</p><p><img src="https://source.icode504.com/images/image-20240228092635236.png"></p><p><img src="https://source.icode504.com/images/image-20240228092738189.png"></p><h1 id="三、创建Debian虚拟机"><a href="#三、创建Debian虚拟机" class="headerlink" title="三、创建Debian虚拟机"></a>三、创建Debian虚拟机</h1><p>1. 打开VMware，按<kbd>Ctrl</kbd>和<kbd>N</kbd>键，新建虚拟机。</p><p>2. 进入新建虚拟机向导以后，选择第二个<strong>自定义(高级)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213123956847.png"></p><p>3. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213124330853.png"></p><p>4. 安装客户机操作系统选择<strong>稍后安装操作系统</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134527045.png"></p><p>5. 客户机操作系统选择<strong>Linux</strong>，版本选择<strong>Debian 12.x 64位</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240225130850086.png"></p><p>6. 自定义虚拟机名称和安装位置。安装位置建议安装在一个空间比较大的盘，这里我安装在了J盘：</p><p><img src="https://source.icode504.com/images/image-20240225130958798.png"></p><p><img src="https://source.icode504.com/images/image-20240225131111472.png"></p><p><img src="https://source.icode504.com/images/image-20240225131143476.png"></p><p>7. 处理器配置时处理器数量和内核数量不能超过电脑自身的数量，否则虚拟机无法运行。</p><p><img src="https://source.icode504.com/images/image-20240213135358478.png"></p><p>如何检查电脑本机的CPU信息：按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，即可查看到CPU信息：</p><p><img src="https://source.icode504.com/images/image-20240213135636008.png"></p><p>8. 设置虚拟机内存，内存大小按照VMware的要求设置在一定范围之内。这里我设置内存大小为2GB（2048M），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153034658.png"></p><p>9. 网络类型选择<strong>网络地址转换(NAT)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153239112.png"></p><p>10. I&#x2F;O控制器类型按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153335558.png"></p><p>11. 虚拟磁盘类型按照默认选择即可，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153449643.png"></p><p>12. 选择磁盘按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153601825.png"></p><p>13. 最大磁盘大小建议设置在20GB及以上，这里我设置了50GB，磁盘分配按照默认勾选即可。完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153741099.png"></p><p>14. 指定磁盘文件位置可以自定义。这里需要设置的小伙伴点击<strong>浏览</strong>可以更改。不需要更改的小伙伴点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240225131356612.png"></p><p>15. 点击<strong>完成</strong>，虚拟机创建完成：</p><p><img src="https://source.icode504.com/images/image-20240225131421581.png"></p><p>16. 点击<strong>编辑虚拟机设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240225131445919.png"></p><p>17. 进入虚拟机设置后，左侧设备选择<strong>CD&#x2F;DVD</strong>，设备状态勾选<strong>启动时连接</strong>，连接选择<strong>使用ISO映像文件</strong>，点击<strong>浏览</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213160808035.png"></p><p>18. 找到前面我们下载的Debian镜像并选中，完成后点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240225131657328.png"></p><p>19. 镜像配置成功，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240225131717256.png"></p><h1 id="四、开启虚拟化"><a href="#四、开启虚拟化" class="headerlink" title="四、开启虚拟化"></a>四、开启虚拟化</h1><p>1. 开启刚刚创建好的虚拟机，此时VMware会弹出一个错误信息（无报错信息的小伙伴请直接跳转到第五部分：安装Debian操作系统）：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p><img src="https://source.icode504.com/images/image-20240227113330696.png"></p><p>2. 此时按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，虚拟化并未开启（虚拟化已启用的小伙伴请直接跳转到第五部分：安装Debian操作系统）：</p><p><img src="https://source.icode504.com/images/image-20240227113646198.png"></p><p>3. 重新启动电脑，具体进入BIOS可以根据自身电脑品牌型号进入。这里我的电脑使用的是华硕，开机过程中一直按<kbd>F2</kbd>键即可进入BIOS，再点击右下角<strong>Advanced Mode</strong>，进入高级模式：</p><p><img src="https://source.icode504.com/images/image-20240227133747848.png"></p><p>4. 按照下图所示操作，点击<strong>高级</strong>，将<strong>Intel Virtualization Technology</strong>配置项开启：</p><p><img src="https://source.icode504.com/images/image-20240227134148071.png"></p><p>5. 按<kbd>F10</kbd>键保存上述配置并重启：</p><p><img src="https://source.icode504.com/images/image-20240227134402192.png"></p><p>6. 按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，左上角找到<strong>性能</strong>，发现虚拟化成功开启：</p><p><img src="https://source.icode504.com/images/image-20240227114535913.png"></p><h1 id="五、安装Debian操作系统"><a href="#五、安装Debian操作系统" class="headerlink" title="五、安装Debian操作系统"></a>五、安装Debian操作系统</h1><p>1. 开启刚刚创建好的虚拟机：</p><p><img src="https://source.icode504.com/images/image-20240225131832301.png"></p><p>2. 进入安装界面，选择第二个<strong>Install</strong>并按回车键：</p><p><img src="https://source.icode504.com/images/image-20240225131923455.png"></p><p>3. 安装语言选择<strong>中文（简体）</strong>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225132129467.png"></p><p>4. 位置选择<strong>中国</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225132229190.png"></p><p>5. 配置键盘选择<strong>汉语</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225132322128.png"></p><p>6. 加载中，请稍后：</p><p><img src="https://source.icode504.com/images/image-20240225132404673.png"></p><p>7. 配置主机名：主机名自定义，命名完成后，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225132539246.png"></p><p>8. 域名配置：按照默认配置即可，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225132740615.png"></p><p>9. 为root用户设置密码。这里为了方便记忆，我将密码设置为123456。配置完成后按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225133045442.png"></p><p>10. 再输入一遍密码，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225133246881.png"></p><p>11. 自定义普通用户设置用户全名。设置完成后，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225133640872.png"></p><p>12. 设置普通用户登录时的用户名（要求：小写字母开头，其他由数字和小写字母组合），完成后按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225133739744.png"></p><p>13. 为普通用户设置密码，为了方便记忆，这里我将密码设置成123456。配置完成后，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225133959435.png"></p><p>14. 再输入一次密码，设置完成后，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134109134.png"></p><p>15. 磁盘分区方法选择第一个<strong>向导-使用整个磁盘</strong>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134334702.png"></p><p>16. 选择要分区的磁盘：按照默认选择即可（如下图所示），完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134404483.png"></p><p>17. 分区方案选择第一个<strong>将所有文件放在同一个分区中（推荐新手使用）</strong>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134519910.png"></p><p>18. 磁盘分区信息选择第二个<strong>完成分区操作并将修改写入磁盘</strong>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134541790.png"></p><p>19. 是否写入磁盘，选择<strong>是</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225134616567.png"></p><p>20. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240225134700746.png"></p><p>21. 此时会弹出一个扫描额外的安装介质，这里我们选择<strong>否</strong>，不需要扫描：</p><p><img src="https://source.icode504.com/images/image-20240225135126880.png"></p><p>22. 镜像站点所在国家选择中国，按<kbd>Tab</kbd>键切换，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225135506413.png"></p><p>23. 镜像站点选择倒数第二个，清华大学镜像站，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225135601278.png"></p><p>24. 代理配置不需要填写，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225135837806.png"></p><p>25. 正在配置apt，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240225135857066.png"></p><p>26. 此时会弹出一个软件包流行度调查，选择<strong>否</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225140038768.png"></p><p>27. 软件只需要选择后两个：<strong>SSH Server</strong>和<strong>标准系统工具</strong>。完成后按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225140419193.png"></p><p>28. 安装中，请耐心等待（预计需要3-5分钟）：</p><p><img src="https://source.icode504.com/images/image-20240225140433642.png"></p><p>29. 设定<code>grub-pc</code>引导器安装到著驱动器，选择<strong>是</strong>，然后选择<code>/dev/sda</code>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225140851905.png"></p><p>30. 等待一段时间后，安装完成，按<kbd>Tab</kbd>键切换到<strong>继续</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240225141106119.png"></p><p>31. 重新启动后，进入命令行界面，用户名输入<code>root</code>，密码填写前面设置的密码（不在命令行显示）。输入无误后，登录成功界面如下：</p><p><img src="https://source.icode504.com/images/image-20240225163130844.png"></p><h1 id="六、使用SSH工具（Electerm）远程连接Debian"><a href="#六、使用SSH工具（Electerm）远程连接Debian" class="headerlink" title="六、使用SSH工具（Electerm）远程连接Debian"></a>六、使用SSH工具（Electerm）远程连接Debian</h1><p>1. 安装远程SSH工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y openssh-server<br></code></pre></td></tr></table></figure><p>OpenSSH已经是最新版本：</p><p><img src="https://source.icode504.com/images/image-20240222100044844.png"></p><p>2. 开启SSH服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh start<br></code></pre></td></tr></table></figure><p>3. 检查SSH服务是否开启，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status sshd<br></code></pre></td></tr></table></figure><p>下图状态说明SSH服务已经成功开启：</p><p><img src="https://source.icode504.com/images/image-20240225163950058.png"></p><p>4. 由于<code>root</code>用户默认是不能使用SSH的方式登录，因此我们需要更改一下对配置文件<code>/etc/ssh/sshd_config</code>进行修改。执行如下命令：</p><ul><li>安装vim编辑器：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y vim<br></code></pre></td></tr></table></figure><ul><li>编辑<code>/etc/ssh/sshd_config</code>文件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>5. 此时会进入<code>sshd_config</code>配置文件中，我们依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br>/PermitRootLogin<br></code></pre></td></tr></table></figure><p>此时我们在33行可以看到如下信息<code>PermitRootLogin prohibit-password</code>，这段配置的含义是使用SSH方式登录root用户是禁止的，因此我们需要对这段代码进行修改：</p><p><img src="https://source.icode504.com/images/image-20240223164810399.png"></p><p>6. 按<kbd>i</kbd>键进入编辑模式，需要对32-34行代码修改成下图所示的效果：</p><p><img src="https://source.icode504.com/images/image-20240223165235024.png"></p><p>7. 完成编辑后，先按一下<kbd>Esc</kbd>键，再输入<code>:wq</code>保存并退出编辑。</p><p>8. 重启SSH服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart sshd<br></code></pre></td></tr></table></figure><p>9. 安装防火墙软件<code>ufw</code>，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -y ufw<br></code></pre></td></tr></table></figure><p>10. 查看防火墙状态，在命令行中执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw status<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240225164534894.png"></p><p>11. 为了保障系统安全，我们需要开启防火墙，只开放特定的端口。输入如下命令开启防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><p>再次查看防火墙状态，此时防火墙已经开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw status<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240225164806115.png"></p><p>12. SSH默认是22号端口，此时我们需要开启22号端口。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ufw allow 22/tcp<br></code></pre></td></tr></table></figure><p>执行成功，规则已添加：</p><p><img src="https://source.icode504.com/images/image-20240225164907144.png"></p><p>13. 输入如下命令，查看Ubuntu的IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240225165034441.png"></p><p>14. 打开Electerm，点击左侧的书签：</p><p><img src="https://source.icode504.com/images/image-20240213171858078.png"></p><p>15. 按照下图操作填写连接信息：</p><p><img src="https://source.icode504.com/images/image-20240222094417131.png"></p><p>16. 向下找，点击<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221134731866.png"></p><p>等待一段时间后，如果上方出现一个<code>connection is ok</code>，说明前面填写内容没有问题：</p><p><img src="https://source.icode504.com/images/image-20240221134841255.png"></p><p>如果出现的时<code>connection is failed</code>，说明填写的内容有问题，需要更改后再次测试连接。</p><p><img src="https://source.icode504.com/images/image-20240221135000261.png"></p><p>17. 测试连接成功后，点击<strong>保存并连接</strong>后，此时我们就可以在Electerm中登录root用户并执行命令了：</p><p><img src="https://source.icode504.com/images/image-20240221135129497.png"></p><p><img src="https://source.icode504.com/images/image-20240228092035868.png"></p>]]></content>
    
    
    <categories>
      
      <category>系统安装</category>
      
      <category>Debian</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Ubuntu安装配置教程</title>
    <link href="/posts/51.html"/>
    <url>/posts/51.html</url>
    
    <content type="html"><![CDATA[<p>Ubuntu是一个基于Linux的开源操作系统，它遵循GNU通用公共许可证，用户可以自由使用、复制、分发和修改。它提供直观易用的桌面环境，适合新手和有经验用户。Ubuntu有强大的软件中心，支持多硬件架构，注重安全和稳定，并有庞大的用户社区提供支持。它适用于桌面、笔记本和服务器等多种设备，被广泛应用于教育、开发和科学等领域。</p><p>接下来就为大家介绍一下Ubuntu操作系统的安装与配置</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑中已经安装了VMware和Electerm，如果没有安装的小伙伴可以点击下面的链接查看安装教程：</p><table><thead><tr><th>需要安装的软件名称</th><th>链接</th></tr></thead><tbody><tr><td>虚拟机软件VMware Workstation</td><td><a href="./41.html">点我查看</a></td></tr><tr><td>远程连接软件Electerm</td><td><a href="./47.html">点我查看</a></td></tr><tr><td>下载器Neat Download Manager（推荐安装，可以加快下载速度）</td><td><a href="./24.html">点我查看</a></td></tr></tbody></table><p>建议电脑预留50G的存储空间。</p><h1 id="二、下载Ubuntu镜像"><a href="#二、下载Ubuntu镜像" class="headerlink" title="二、下载Ubuntu镜像"></a>二、下载Ubuntu镜像</h1><p>截止到2024年2月，Ubuntu有两个长期支持的版本：22.04版本和20.04版本。这里我选择安装的是22.04版本的Ubuntu服务器。</p><p>1. 点击右侧连接进入清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">点我查看</a></p><p>2. 这里我选择的是22.04版本下载，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240221212521251.png"></p><p>3. 下载服务器端的Ubuntu，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240221215234033.png"></p><h1 id="三、创建Ubuntu虚拟机"><a href="#三、创建Ubuntu虚拟机" class="headerlink" title="三、创建Ubuntu虚拟机"></a>三、创建Ubuntu虚拟机</h1><p>1. 打开VMware，按<kbd>Ctrl</kbd>和<kbd>N</kbd>键，新建虚拟机。</p><p>2. 进入新建虚拟机向导以后，选择第二个<strong>自定义(高级)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213123956847.png"></p><p>3. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213124330853.png"></p><p>4. 安装客户机操作系统选择<strong>稍后安装操作系统</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134527045.png"></p><p>5. 客户机操作系统选择<strong>Linux</strong>，版本选择<strong>Ubuntu 64位</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221215406394.png"></p><p>6. 自定义虚拟机名称和安装位置。安装位置建议安装在一个空间比较大的盘，这里我安装在了J盘：</p><p><img src="https://source.icode504.com/images/image-20240221213314426.png"></p><p><img src="https://source.icode504.com/images/image-20240221215802166.png"></p><p><img src="https://source.icode504.com/images/image-20240221215842308.png"></p><p>7. 处理器配置时处理器数量和内核数量不能超过电脑自身的数量，否则虚拟机无法正常运行，这里我设置的<strong>处理器内核总数</strong>为2：</p><p><img src="https://source.icode504.com/images/image-20240213135358478.png"></p><p>如何检查电脑本机的CPU信息：按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，即可查看到CPU信息：</p><p><img src="https://source.icode504.com/images/image-20240213135636008.png"></p><p>8. 设置虚拟机内存，内存大小按照VMware的要求设置在一定范围之内。这里我设置内存大小为4GB（4096M），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221213933440.png"></p><p>9. 网络类型选择<strong>网络地址转换(NAT)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153239112.png"></p><p>10. I&#x2F;O控制器类型按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153335558.png"></p><p>11. 虚拟磁盘类型按照默认选择即可，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153449643.png"></p><p>12. 选择磁盘按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153601825.png"></p><p>13. 最大磁盘大小建议设置在20GB及以上，这里我设置了50GB，磁盘分配按照默认勾选即可。完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153741099.png"></p><p>14. 指定磁盘文件位置可以自定义。这里需要设置的小伙伴点击<strong>浏览</strong>可以更改。不需要更改的小伙伴点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214019977.png"></p><p>15. 点击<strong>完成</strong>，虚拟机创建完成：</p><p><img src="https://source.icode504.com/images/image-20240221215930776.png"></p><p>16. 点击<strong>编辑虚拟机设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214109235.png"></p><p>17. 进入虚拟机设置后，左侧设备选择<strong>CD&#x2F;DVD</strong>，设备状态勾选<strong>启动时连接</strong>，连接选择<strong>使用ISO映像文件</strong>，点击<strong>浏览</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213160808035.png"></p><p>18. 找到前面我们下载的Ubuntu镜像并选中，完成后点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221215053525.png"></p><p>19. 镜像配置成功，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221214534533.png"></p><h1 id="四、开启虚拟化"><a href="#四、开启虚拟化" class="headerlink" title="四、开启虚拟化"></a>四、开启虚拟化</h1><p>1. 开启刚刚创建好的虚拟机，此时VMware会弹出一个错误信息：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p><img src="https://source.icode504.com/images/image-20240227113330696.png"></p><p>2. 此时按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，虚拟化并未开启：</p><p><img src="https://source.icode504.com/images/image-20240227113646198.png"></p><p>3. 重新启动电脑，具体进入BIOS可以根据自身电脑品牌型号进入。这里我的电脑使用的是华硕，开机过程中一直按<kbd>F2</kbd>键即可进入BIOS，再点击右下角<strong>Advanced Mode</strong>，进入高级模式：</p><p><img src="https://source.icode504.com/images/image-20240227133747848.png"></p><p>4. 按照下图所示操作，点击<strong>高级</strong>，将<strong>Intel Virtualization Technology</strong>配置项开启：</p><p><img src="https://source.icode504.com/images/image-20240227134148071.png"></p><p>5. 按<kbd>F10</kbd>键保存上述配置并重启：</p><p><img src="https://source.icode504.com/images/image-20240227134402192.png"></p><p>6. 按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，左上角找到<strong>性能</strong>，发现虚拟化成功开启：</p><p><img src="https://source.icode504.com/images/image-20240227114535913.png"></p><h1 id="五、安装Ubuntu操作系统"><a href="#五、安装Ubuntu操作系统" class="headerlink" title="五、安装Ubuntu操作系统"></a>五、安装Ubuntu操作系统</h1><p>1. 开启刚刚创建好的虚拟机：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p>2. 进入安装界面，选择第一个<strong>Try or Install Ubuntu Server</strong>，然后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221220105109.png"></p><p>3. 此时会加载Ubuntu的安装界面，请耐心等待。</p><p>4. 加载完成后 ，进入Ubuntu安装界面，安装语言选择<strong>English</strong>，完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221220404108.png"></p><p>5. （无下图内容可以跳转到下一步）此时弹出安装器可更新提示，下方选项选择第二个<strong>Continue  without updating</strong>（不更新，继续安装），完成后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221220520438.png"></p><p>6. 键盘布局按照系统默认使用英文（美国）布局即可，选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221221207754.png"></p><p>7. 安装类型选择第一个<strong>Ubuntu Server</strong>即可，完成后选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221221446276.png"></p><p>8. 网络连接：如果电脑本机已经连接网络，此时虚拟机为我们提供了一个IP地址，按照默认配置选择即可。选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221221802787.png"></p><p>9. 这里我们不需要配置代理。选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221222005115.png"></p><p>10. 配置镜像地址，这里我们将原有的镜像地址替换为清华大学镜像地址：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/ubuntu</span><br></code></pre></td></tr></table></figure><p>完成后，选择Done，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221222454818.png"></p><p>11. 配置存储位置，按照默认选择即可，按向上&#x2F;下键可以选择，选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221222633089.png"></p><p>12. 存储大小配置，按照默认配置即可，选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221222821884.png"></p><p>13. 此时会弹出一个确认提示，选择Continue会开始安装，会替换掉原有的磁盘空间，这里我们选择<strong>Continue</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221222939475.png"></p><p>14. 配置用户名和密码，如下图所示，完成后选择<strong>Done</strong>，按一下回车：</p><p>个人名称、服务器名称、用户名可以自定义（要求是：英文小写或者英文小写+数字）</p><p><img src="https://source.icode504.com/images/image-20240222085916366.png"></p><p>15. 是否升级到Ubuntu Pro，这里我们选择<strong>Skip for now</strong>（不升级），完成后选择<strong>Continue</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221223617619.png"></p><p>16. 这里我们将光标移动到Install OpenSSH server，按空格键勾选安装OpenSSH。然后选择<strong>Done</strong>，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240410155303916.png"></p><p>17. 上述组件不需要安装，选择Done，按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240221224049360.png"></p><p>18. 安装完成，选择第二个<strong>Cancel Update And Reboot</strong>（取消更新并重启）：</p><p><img src="https://source.icode504.com/images/image-20240222090135758.png"></p><p>19. 重启中，请耐心等待（预计需要5分钟以上）。出现下面界面以后，按一下回车，继续重启：</p><p><img src="https://source.icode504.com/images/image-20240222090759375.png"></p><p>20. 等待了3~5分钟以后，会出现登录页面，输入以下用户名（这里我设置的是<code>icode504</code>）和密码（这里我设置的是<code>123456</code>，密码不会在命令行中显示）。输入完成后会出现欢迎界面，此时我们可以在命令行中输入命令了：</p><p><img src="https://source.icode504.com/images/image-20240222091618140.png"></p><h1 id="六、为root用户分配密码"><a href="#六、为root用户分配密码" class="headerlink" title="六、为root用户分配密码"></a>六、为root用户分配密码</h1><p>作为最高权限的root用户，我们在安装过程中并没有给root用户分配密码。</p><p>执行如下命令，为root用户分配密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo passwd<br></code></pre></td></tr></table></figure><p>此时会输入两次密码（不会在控制台显示）。为了方便记忆，我将root密码设置成123456：</p><p><img src="https://source.icode504.com/images/image-20240222092902842.png"></p><p>切换到root用户，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su root<br></code></pre></td></tr></table></figure><p>此时Ubuntu会提醒我们输入密码，完成后按一下回车，此时成功切换到root用户：</p><p><img src="https://source.icode504.com/images/image-20240222093247305.png"></p><h1 id="七、使用SSH工具（Electerm）远程连接Ubuntu"><a href="#七、使用SSH工具（Electerm）远程连接Ubuntu" class="headerlink" title="七、使用SSH工具（Electerm）远程连接Ubuntu"></a>七、使用SSH工具（Electerm）远程连接Ubuntu</h1><p>请保证当前宿主机（电脑本机）处于联网状态：</p><p>1. 开启SSH服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh start<br></code></pre></td></tr></table></figure><p>2. 检查SSH服务是否开启，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status sshd<br></code></pre></td></tr></table></figure><p>下图状态说明SSH服务已经成功开启：</p><p><img src="https://source.icode504.com/images/image-20240223163734033.png"></p><p>3. 由于<code>root</code>用户默认是不能使用SSH的方式登录，因此我们需要更改一下对配置文件<code>/etc/ssh/sshd_config</code>进行修改。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>4. 此时会进入<code>sshd_config</code>配置文件中，我们依次执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br>/PermitRootLogin<br></code></pre></td></tr></table></figure><p>此时我们在33行可以看到如下信息<code>PermitRootLogin prohibit-password</code>，这段配置的含义是使用SSH方式登录root用户是禁止的，因此我们需要对这段代码进行修改：</p><p><img src="https://source.icode504.com/images/image-20240223164810399.png"></p><p>5. 按<kbd>i</kbd>键进入编辑模式，需要对32-34行代码修改成下图所示的效果：</p><p><img src="https://source.icode504.com/images/image-20240223165235024.png"></p><p>6. 完成编辑后，先按一下<kbd>Esc</kbd>键，再输入<code>:wq</code>保存并退出编辑。</p><p>7. 重启SSH服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart sshd<br></code></pre></td></tr></table></figure><p>8. 在Ubuntu命令行中查看防火墙状态，在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw status<br></code></pre></td></tr></table></figure><p>此时会提示输入密码（这里我已经输入过了）后即可查看防火墙状态是<code>inactive</code>（未开启）：</p><p><img src="https://source.icode504.com/images/image-20240222092256776.png"></p><p>9. 为了保障系统安全，我们需要开启防火墙，只开放特定的端口。输入如下命令开启防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw <span class="hljs-built_in">enable</span><br></code></pre></td></tr></table></figure><p>再次查看防火墙状态，此时防火墙已经开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw status<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240222092440839.png"></p><p>10. SSH默认是22号端口，此时我们需要开启22号端口。执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw allow 22/tcp<br></code></pre></td></tr></table></figure><p>执行成功，规则已添加：</p><p><img src="https://source.icode504.com/images/image-20240222093510263.png"></p><p>11. 输入如下命令，查看Ubuntu的IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240222094049603.png"></p><p>12. 打开Electerm，点击左侧的书签：</p><p><img src="https://source.icode504.com/images/image-20240213171858078.png"></p><p>13. 按照下图操作填写连接信息：</p><p><img src="https://source.icode504.com/images/image-20240222094417131.png"></p><p>14. 向下找，点击<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221134731866.png"></p><p>等待一段时间后，如果上方出现一个<code>connection is ok</code>，说明前面填写内容没有问题：</p><p><img src="https://source.icode504.com/images/image-20240221134841255.png"></p><p>如果出现的时<code>connection is failed</code>，说明填写的内容有问题，需要更改后再次测试连接。</p><p><img src="https://source.icode504.com/images/image-20240221135000261.png"></p><p>15. 测试连接成功后，点击<strong>保存并连接</strong>后，此时我们就可以在Electerm中登录root用户并执行命令了：</p><p><img src="https://source.icode504.com/images/image-20240221135129497.png"></p><p><img src="https://source.icode504.com/images/image-20240223170311453.png"></p>]]></content>
    
    
    <categories>
      
      <category>系统安装</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm的安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/50.html"/>
    <url>/posts/50.html</url>
    
    <content type="html"><![CDATA[<p>PyCharm是一种功能强大的Python集成开发环境（IDE），由JetBrains开发，旨在提高开发者的工作效率和便利性。它提供了一系列工具和功能，帮助开发者更快速地编写代码、调试程序、进行单元测试以及管理项目。</p><p>PyCharm的主要特点包括：</p><ol><li>智能代码补全：PyCharm具备智能代码补全功能，能够根据上下文自动推荐合适的代码片段，从而加快编写速度。</li><li>语法高亮：通过语法高亮，开发者可以清晰地看到代码的结构和语法，有助于减少错误并提高可读性。</li><li>调试功能：PyCharm提供了强大的调试工具，允许开发者设置断点、单步执行代码、查看变量值等，从而更容易地找到和修复错误。</li><li>代码重构：该IDE支持代码重构功能，可以帮助开发者改进代码结构，提高代码质量。</li><li>单元测试：PyCharm内置了单元测试框架，方便开发者编写和执行测试用例，确保代码的正确性。</li><li>版本控制：PyCharm支持多种版本控制系统（如Git），可以帮助开发者管理代码版本，协同开发。</li></ol><p>此外，PyCharm还提供了其他一些高级功能，如支持Django框架下的专业Web开发、支持科学计算库（例如：numpy、pytorch、panda）等。它支持多种Python解释器，可以与多种数据库和Web服务器进行集成，为开发者提供了全面的开发环境。</p><p>接下来就为大家介绍一下Windows环境下Pycharm的安装与使用：</p><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 请确保本地已经安装了Python，如果没有安装的，查看此文章一步一步安装即可：点我查看</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux通用版</th></tr></thead><tbody><tr><td align="center">Python安装教程</td><td align="center"><a href="https://www.icode504.com/posts/49.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><p>2. 输入<code>python --version</code>命令表示电脑上已经成功安装了Python：</p><p><img src="https://source.icode504.com/images/image-20240226141207153.png"></p><h1 id="二、Pycharm下载"><a href="#二、Pycharm下载" class="headerlink" title="二、Pycharm下载"></a>二、Pycharm下载</h1><p>1. 进入Pycharm的官方下载页面，<a href="https://www.jetbrains.com.cn/pycharm/download/other.html">点我查看</a>。这里我使用的是2021.1.3版本（事实上，要下载的版本和最新版本使用Python编写代码的差异并不大）</p><p><img src="https://source.icode504.com/images/image-20240226145214009.png"></p><p>2. Windows选择2021.1.3版本的安装包进行下载（如下图所示）：</p><p><img src="https://source.icode504.com/images/image-20240226145256169.png"></p><h1 id="三、Pycharm安装"><a href="#三、Pycharm安装" class="headerlink" title="三、Pycharm安装"></a>三、Pycharm安装</h1><p>1. 双击打开安装包，进入欢迎界面后，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226133856208.png"></p><p>2. 点击Browse选择安装位置，这里我将Pycharm安装在了D盘，完成后点击Next：</p><p><img src="https://source.icode504.com/images/image-20240226134014038.png"></p><p><img src="https://source.icode504.com/images/image-20240226134219637.png"></p><p><img src="https://source.icode504.com/images/image-20240226134252053.png"></p><p>3. 安装操作中，勾选<strong>64-bit launcher</strong>（在桌面上生成快捷方式），完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226134402753.png"></p><p>4. 点击<strong>Install</strong>，开始安装：</p><p><img src="https://source.icode504.com/images/image-20240226134536277.png"></p><p>5. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240226134601699.png"></p><p>6. 点击<strong>Finish</strong>，安装完成：</p><p><img src="https://source.icode504.com/images/image-20240226134736032.png"></p><h1 id="四、Pycharm开启30天免费实用-插件安装"><a href="#四、Pycharm开启30天免费实用-插件安装" class="headerlink" title="四、Pycharm开启30天免费实用&amp;插件安装"></a>四、Pycharm开启30天免费实用&amp;插件安装</h1><p>1. 在桌面上双击打开Pycharm，首次安装的小伙伴，可能会弹出如下的弹出一个协议，按照下图所示勾选，然后点击<strong>Continue</strong>（没有的下图弹窗的请跳转到第三步）：</p><p><img src="https://source.icode504.com/images/image-20231026114146154.png"></p><p>2. 出现数据分享窗口后，选择<strong>Don’t Send</strong>（没有的下图弹窗的请跳转到第三步）：</p><p><img src="https://source.icode504.com/images/image-20231026114256575.png"></p><p>3. 是否导入Pycharm配置，这里我选择第二个<strong>Do not import settings</strong>（不导入配置），完成后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226135256036.png"></p><p>4. 进入激活页面，我们下载的是Pycharm Profession版，正常是需要按月或者按年支付费用的。此处我们先按照下图进行30天的免费试用：</p><p><img src="https://source.icode504.com/images/image-20240226135537943.png"></p><blockquote><p>如需正版，请点击右侧链接到官网购买（需要注册账号）：<a href="https://www.jetbrains.com.cn/pycharm/buy/#personal">点我进入</a></p></blockquote><p>5. 出现下方这个页面以后，就说明我们30天使用申请成功，此时点击<strong>Continue</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226135758110.png"></p><p>6. 进入Pycharm欢迎界面以后，点击Plugins进入插件下载页面：</p><p><img src="https://source.icode504.com/images/image-20240226135859295.png"></p><p>7. 点击右上角小齿轮，点击<strong>Manage Plugin Repositories</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226140203135.png"></p><p>8. 点击左上角的加号，复制下方链接并粘贴到输入框中，然后点击OK：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//plugins.zhile.io</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240226140313487.png"></p><p>9. 此时在插件下载页面中搜索<code>IDE Eval Reset</code>，然后点击<code>Install</code>：</p><blockquote><p><code>IDE Eval Reset</code>插件的作用是无限延长IDEA的试用期。正常IDEA给我们的试用是30天，使用这款插件以后，只要快到了需要激活IDEA的时间，他就会自动延长一个月的试用期。从理论上来讲，安装这款插件以后，理论上就可以实现永久使用。</p><p>这款插件仅限于在IDEA 2021.2.2以下的版本使用，往后的版本中不适用。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240226140649592.png"></p><p>10. 出现此弹框时，点击<code>Accept</code>，此时IDEA会安装此插件：</p><p><img src="https://source.icode504.com/images/image-20240226140715561.png"></p><p>11. 至此，插件已经成功安装了。此插件具体使用详见下一部分内容。</p><p><img src="https://source.icode504.com/images/image-20240226140745622.png"></p><h1 id="五、使用Pycharm编写并运行Python程序"><a href="#五、使用Pycharm编写并运行Python程序" class="headerlink" title="五、使用Pycharm编写并运行Python程序"></a>五、使用Pycharm编写并运行Python程序</h1><p>1. 创建项目：点击左侧<strong>Projects</strong>，然后点击<strong>New Project</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226141337128.png"></p><p>2. 进入创建项目后，点击Location右侧的小文件夹，修改写代码的位置，建议将这个路径修改成你熟悉的文件路径，这里我将项目位置存放到E盘：</p><p><img src="https://source.icode504.com/images/image-20240226141639600.png"></p><p><img src="https://source.icode504.com/images/image-20240226141812068.png"></p><p><img src="https://source.icode504.com/images/image-20240226141850171.png"></p><p>3. Pycharm会自动检查Python安装位置，点击<strong>Create</strong>，创建项目：</p><p><img src="https://source.icode504.com/images/image-20240226142439706.png"></p><p>4. 此时会弹出一个每日小提醒，勾选左下角<strong>Don’t show tips</strong>，然后点击右下角<strong>Close</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226142721480.png"></p><p>5. 鼠标右键点击项目文件夹，选择第一个<strong>New</strong>，再选择<strong>Python File</strong>，创建一个Python文件：</p><p><img src="https://source.icode504.com/images/image-20240226143312984.png"></p><p>6. 输入文件名称，这里我将文件命名为<code>MyDemo01</code>，类型选择<code>Python file</code>，然后按一下回车：</p><p><img src="https://source.icode504.com/images/image-20240226143502795.png"></p><p>7. 复制下方代码，并粘贴到Pycharm中，效果图如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;秋容浅淡映重门，七节攒成雪满盆。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;出浴太真冰作影，捧心西子玉为魂。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;晓风不散愁千点，宿雨还添泪一痕。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;独倚画栏如有意，清砧怨笛送黄昏。&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选自《红楼梦》第三十七回&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240226144259362.png"></p><p>8. 运行Python程序：</p><p>方式一：鼠标右键，点击<code>Run MyDemo01.py</code>：</p><p><img src="https://source.icode504.com/images/image-20240226144424753.png"></p><p>方式二：使用快捷键，这里我使用的快捷键是<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F10</kbd>，具体的快捷键详见自己鼠标右键后<code>Run xxx</code>后面对应的快捷键执行即可。</p><p>运行结果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240226144541010.png"></p><p>9. IDE Eval Reset插件的无限期使用：点击上方<strong>Help</strong>，然后点击最下面的<strong>Eval Reset</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226144708487.png"></p><p>10. 按照下图所示进行勾选，然后点击Reset，此时IDEA会自动重启。</p><p><img src="https://source.icode504.com/images/image-20231026160856389.png"></p><p>11. 点击Yes，就会重启，此时IDEA的试用期就会延长。</p><p><img src="https://source.icode504.com/images/image-20240226144850168.png"></p><p><img src="https://source.icode504.com/images/image-20240226144904782.png"></p><h1 id="六、Pycharm卸载（可选）"><a href="#六、Pycharm卸载（可选）" class="headerlink" title="六、Pycharm卸载（可选）"></a>六、Pycharm卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到Pycharm，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240227104420588.png"></p><p>2. 卸载向导中会询问是否删除Pycharm缓存、配置文件和插件。如果需要彻底删除的话，请将下图两个选项进行勾选。完成后点击<strong>Uninstall</strong>，开始卸载：</p><p><img src="https://source.icode504.com/images/image-20240227104604708.png"></p><p>3. 卸载中，请耐心等待。</p><p><img src="https://source.icode504.com/images/image-20240227104722141.png"></p><p>4. 卸载完成，点击Close关闭窗口：</p><p><img src="https://source.icode504.com/images/image-20240227104755189.png"></p><p>5. 此时Geek会我们检测出安装残留，我们只需要点击<strong>完成</strong>即可，清除卸载残留：</p><p><img src="https://source.icode504.com/images/image-20240227104821350.png"></p><p>6. 清理完毕，关闭Geek即可：</p><p><img src="https://source.icode504.com/images/image-20240121164930832.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/49.html"/>
    <url>/posts/49.html</url>
    
    <content type="html"><![CDATA[<p>Python 是一种高级编程语言，由 Guido van Rossum 在 1989 年创造，并于 1991 年第一次公开发布。Python 的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块），这使得 Python 成为初学者和专家都喜欢的语言。</p><p>以下是 Python 的一些主要特点：</p><ol><li><strong>易于学习</strong>：Python 是一种解释型语言，语法简洁明了，代码结构清晰，易于上手。</li><li><strong>跨平台</strong>：Python 是跨平台的，可以在多种操作系统上运行，包括 Windows、Linux、macOS 等。</li><li><strong>免费和开源</strong>：Python 是开源的，任何人都可以获取源代码并修改。它也有一个庞大的社区和丰富的第三方库，这些库覆盖了各种任务，从 Web 开发到科学计算。</li><li><strong>动态类型</strong>：Python 是动态类型的语言，这意味着你不需要在声明变量时指定其类型，Python 会在运行时确定类型。</li><li><strong>面向对象</strong>：Python 支持面向对象编程，包括类和继承。</li><li><strong>强大的库</strong>：Python 标准库包含了许多常用的功能，如文件处理、网络编程、数据库接口、图形界面开发、科学计算等。此外，还有大量的第三方库，如 NumPy、Pandas、Matplotlib 用于数据处理和可视化，Django、Flask 用于 Web 开发，以及 TensorFlow、PyTorch 用于机器学习。</li><li><strong>可扩展性</strong>：Python 可以调用 C、C++ 等语言的代码，也可以将 Python 代码编译成 C 扩展模块，从而提高执行效率。</li><li><strong>脚本编写</strong>：Python 常被用于编写脚本，自动化日常任务，如文件处理、数据转换等。</li><li><strong>科学计算和数据分析</strong>：Python 在科学计算和数据分析领域非常受欢迎，特别是在数据科学、机器学习和人工智能领域。</li><li><strong>Web 开发</strong>：Python 有多个 Web 框架，如 Django 和 Flask，使得 Python 成为 Web 开发的流行选择。</li></ol><p>目前主要使用的版本是Python 3.x.x版本（Python 2.x.x版本）以下是Windows环境下Python的安装教程：</p><h1 id="一、Python的下载"><a href="#一、Python的下载" class="headerlink" title="一、Python的下载"></a>一、Python的下载</h1><p>1. 打开Python官网下载连接：<a href="https://www.python.org/downloads/windows/">点我查看</a>（加载可能会比较慢，请耐心等待）</p><p>2. 这里我下载的是Python 3.7.9，点击<strong>Windows x86-64-executable installer</strong>下载：</p><p><img src="https://source.icode504.com/images/image-20240226160327855.png"></p><h1 id="二、Python的安装"><a href="#二、Python的安装" class="headerlink" title="二、Python的安装"></a>二、Python的安装</h1><p>1. 双击打开Python安装包：</p><p><img src="https://source.icode504.com/images/image-20240226172043318.png"></p><p>2. 进入安装界面后，将最下方<strong>Add Python 3.7 to PATH</strong>（将Python添加到环境变量），然后点击<strong>Customize installation</strong>（自定义安装）</p><p><img src="https://source.icode504.com/images/image-20240226172222002.png"></p><p>3. 安装额外组件按照系统默认勾选即可，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226172312844.png"></p><p>4. 点击<strong>Browse</strong>修改安装路径，这里我安装在了D盘，修改完成后，点击<strong>Install</strong>：</p><p><img src="https://source.icode504.com/images/image-20240226172557771.png"></p><p><img src="https://source.icode504.com/images/image-20240226172718016.png"></p><p><img src="https://source.icode504.com/images/image-20240226172808930.png"></p><p>5. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240226172841392.png"></p><p>6. 安装完成，点击<strong>Close</strong>关闭此窗口：</p><p><img src="https://source.icode504.com/images/image-20240226172922054.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并按一下回车，进入命令行，输入<code>python --version</code>，出现如下信息就说明Python已经安装并配置成功了：</p><p><img src="https://source.icode504.com/images/image-20240226110954813.png"></p><h1 id="三、pip更换源"><a href="#三、pip更换源" class="headerlink" title="三、pip更换源"></a>三、pip更换源</h1><p>pip是官方提供的一款Python包下载安装工具，但是它的默认下载源在国外，下载速度比较慢，因此我们需要将下载源更改为国内的镜像源。</p><p>执行如下命令，既可以将下载源更换为国内镜像，这里我使用的是清华大学的镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/<br></code></pre></td></tr></table></figure><p>（以下是演示内容）配置完成后，这里我想下载一个Python Web框架Django，直接在命令行执行如下命令即可安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install Django<br></code></pre></td></tr></table></figure><p>下载过程中我们可以看到镜像源更换成功！</p><p><img src="https://source.icode504.com/images/image-20240628112818394.png"></p><h1 id="四、Python的卸载（可选）"><a href="#四、Python的卸载（可选）" class="headerlink" title="四、Python的卸载（可选）"></a>四、Python的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到Python，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240226174232044.png"></p><p>2. 卸载中，请耐心等待。</p><p><img src="https://source.icode504.com/images/image-20240226174249116.png"></p><p>3. 卸载完成，点击Close关闭此窗口：</p><p><img src="https://source.icode504.com/images/image-20240226174758587.png"></p><p>4. 此时Geek会我们检测安装残留，这里我的电脑未检测出卸载残留，只需要点击<strong>关闭</strong>即可，卸载完成：</p><p><img src="https://source.icode504.com/images/image-20240226101538583.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux CentOS 7安装教程</title>
    <link href="/posts/48.html"/>
    <url>/posts/48.html</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>请注意，CentOS 7已于2024年6月30日终止支持，其软件仓库也相应被上游移除。</p><p>点击右侧连接查看官方公告：<a href="https://blog.centos.org/2023/04/end-dates-are-coming-for-centos-stream-8-and-centos-linux-7/">点我查看</a></p><p>如需安装新版本的CentOS，请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/94.html">点我查看</a></p>          </div><p>CentOS是一种基于Linux的免费、开源的操作系统，它是Red Hat Enterprise Linux（RHEL）源代码的重建版本。CentOS致力于提供稳定、可靠的服务器操作系统，广泛应用于企业级服务器和Web服务器。它具有强大的安全性和稳定性，并且提供长期支持（LTS）版本，使其成为企业级应用程序和服务的首选。CentOS还拥有庞大的软件包仓库，用户可以方便地安装和管理各种应用程序和工具。</p><p>接下来为大家介绍一下CentOS 7的安装和配置：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑中已经安装了VMware和Electerm，如果没有安装的小伙伴可以点击下面的链接查看安装教程：</p><table><thead><tr><th>需要安装的软件名称</th><th>链接</th></tr></thead><tbody><tr><td>虚拟机软件VMware Workstation</td><td><a href="https://www.icode504.com/posts/41.html">点我查看</a></td></tr><tr><td>远程连接软件Electerm</td><td><a href="https://www.icode504.com/posts/47.html">点我查看</a></td></tr><tr><td>下载器Neat Download Manager（推荐安装，可以加快下载速度）</td><td><a href="https://www.icode504.com/posts/24.html">点我查看</a></td></tr></tbody></table><p>建议电脑预留50G的存储空间。</p><h1 id="二、下载CentOS镜像"><a href="#二、下载CentOS镜像" class="headerlink" title="二、下载CentOS镜像"></a>二、下载CentOS镜像</h1><p>（由于CentOS镜像安装包文件大小为4.39G，使用百度网盘共享）点击右侧链接下载CentOS 7最新的安装镜像：<a href="https://pan.baidu.com/s/1zJmEWpIq1U3oZRpiOf5drQ?pwd=1024">点我查看</a></p><h1 id="三、创建CentOS虚拟机"><a href="#三、创建CentOS虚拟机" class="headerlink" title="三、创建CentOS虚拟机"></a>三、创建CentOS虚拟机</h1><p>1. 打开VMware，按<kbd>Ctrl</kbd>和<kbd>N</kbd>键，新建虚拟机。</p><p>2. 进入新建虚拟机向导以后，选择第二个<strong>自定义(高级)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213123956847.png"></p><p>3. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213124330853.png"></p><p>4. 安装客户机操作系统选择<strong>稍后安装操作系统</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134527045.png"></p><p>5. 客户机操作系统选择<strong>Linux</strong>，版本选择<strong>CentOS 7 64位</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213134720664.png"></p><p>6. 自定义虚拟机名称和安装位置。安装位置建议安装在一个空间比较大的盘，这里我安装在了J盘：</p><p><img src="https://source.icode504.com/images/image-20240213135011029.png"></p><p><img src="https://source.icode504.com/images/image-20240213135141593.png"></p><p><img src="https://source.icode504.com/images/image-20240213135218720.png"></p><p>7. 处理器配置时处理器数量和内核数量不能超过电脑自身的数量，否则虚拟机无法运行。</p><p><img src="https://source.icode504.com/images/image-20240213135358478.png"></p><p>如何检查电脑本机的CPU信息：按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，即可查看到CPU信息：</p><p><img src="https://source.icode504.com/images/image-20240213135636008.png"></p><p>8. 设置虚拟机内存，内存大小按照VMware的要求设置在一定范围之内。这里我设置内存大小为2GB（2048M），完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153034658.png"></p><p>9. 网络类型选择<strong>网络地址转换(NAT)<strong>，完成后点击</strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153239112.png"></p><p>10. I&#x2F;O控制器类型按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153335558.png"></p><p>11. 虚拟磁盘类型按照默认选择即可，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153449643.png"></p><p>12. 选择磁盘按照系统默认选择即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153601825.png"></p><p>13. 最大磁盘大小建议设置在20GB及以上，这里我设置了50GB，磁盘分配按照默认勾选即可。完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213153741099.png"></p><p>14. 指定磁盘文件位置可以自定义。这里需要设置的小伙伴点击<strong>浏览</strong>可以更改。不需要更改的小伙伴点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213154004431.png"></p><p>15. 点击<strong>完成</strong>，虚拟机创建完成：</p><p><img src="https://source.icode504.com/images/image-20240213154042917.png"></p><p>16. 点击<strong>编辑虚拟机设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213155240997.png"></p><p>17. 进入虚拟机设置后，左侧设备选择<strong>CD&#x2F;DVD</strong>，设备状态勾选<strong>启动时连接</strong>，连接选择<strong>使用ISO映像文件</strong>，点击<strong>浏览</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213160808035.png"></p><p>18. 找到前面我们下载的CentOS镜像并选中，完成后点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213155803316.png"></p><p>19. 镜像配置成功，点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213155857614.png"></p><h1 id="四、开启虚拟化"><a href="#四、开启虚拟化" class="headerlink" title="四、开启虚拟化"></a>四、开启虚拟化</h1><p>1. 开启刚刚创建好的虚拟机，此时VMware会弹出一个错误信息：</p><p><img src="https://source.icode504.com/images/image-20240221214629072.png"></p><p><img src="https://source.icode504.com/images/image-20240227113330696.png"></p><p>2. 此时按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，找到性能，虚拟化并未开启：</p><p><img src="https://source.icode504.com/images/image-20240227113646198.png"></p><p>3. 重新启动电脑，具体进入BIOS可以根据自身电脑品牌型号进入。这里我的电脑使用的是华硕，开机过程中一直按<kbd>F2</kbd>键即可进入BIOS，再点击右下角<strong>Advanced Mode</strong>，进入高级模式：</p><p><img src="https://source.icode504.com/images/image-20240227133747848.png"></p><p>4. 按照下图所示操作，点击<strong>高级</strong>，将<strong>Intel Virtualization Technology</strong>配置项开启：</p><p><img src="https://source.icode504.com/images/image-20240227134148071.png"></p><p>5. 按<kbd>F10</kbd>键保存上述配置并重启：</p><p><img src="https://source.icode504.com/images/image-20240227134402192.png"></p><p>6. 按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Esc</kbd>，打开任务管理器，左上角找到<strong>性能</strong>，发现虚拟化成功开启：</p><p><img src="https://source.icode504.com/images/image-20240227114535913.png"></p><h1 id="五、安装CentOS操作系统"><a href="#五、安装CentOS操作系统" class="headerlink" title="五、安装CentOS操作系统"></a>五、安装CentOS操作系统</h1><p>1. 开启刚刚创建好的虚拟机：</p><p><img src="https://source.icode504.com/images/image-20240213154149205.png"></p><p>2. 进入安装界面，选择<strong>Install CentOS 7</strong>并按回车键：</p><p><img src="https://source.icode504.com/images/image-20240213162009857.png"></p><p>3. 安装语言选择<strong>中文</strong>，<strong>简体中文（中国）</strong>，完成后点击<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213162405815.png"></p><p>4. 在下方系统中，点击<strong>安装位置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213162624440.png"></p><p>5. 进入安装目标位置，点击左上角<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213162739441.png"></p><p>6. 点击<strong>网络和主机名</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213162826207.png"></p><p>7. 开启<strong>以太网（ens33）</strong>，确保虚拟机能连接网络。然后点击<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213162956766.png"></p><p>8. 点击<strong>软件选择</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213163100879.png"></p><p>9. 选择<strong>最小安装</strong>，然后点击左上角<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213163228777.png"></p><p>10. 点击右下角<strong>开始安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213165505273.png"></p><p>11. 安装中，此时我们为最高权限用户——root用户设置密码：</p><p><img src="https://source.icode504.com/images/image-20240213165542509.png"></p><p>12. 设置密码，如果你记不住密码，请将密码设置为123456，然后连续按两次<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213165717743.png"></p><p>13. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240213165922454.png"></p><p>14. 安装完成，点击右下角的<strong>重启</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213170233895.png"></p><p>15. 重启后，进入CentOS命令行界面，用户名输入 <code>root</code>，输入前面我们设置的密码（密码不会在命令行中显示），完成后按回车：</p><p><img src="https://source.icode504.com/images/image-20240213170559674.png"></p><p>16. CentOS登录成功：</p><p><img src="https://source.icode504.com/images/image-20240213170629407.png"></p><h1 id="六、使用SSH工具（Electerm）远程连接CentOS"><a href="#六、使用SSH工具（Electerm）远程连接CentOS" class="headerlink" title="六、使用SSH工具（Electerm）远程连接CentOS"></a>六、使用SSH工具（Electerm）远程连接CentOS</h1><p>1. 在CentOS命令行中查看防火墙状态，在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status firewalld<br></code></pre></td></tr></table></figure><p>防火墙正常运行：</p><p><img src="https://source.icode504.com/images/image-20240213171051245.png"></p><p>2. 开放22号端口（确保Electerm通过SSH方式连接到CentOS），执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --permanent --add-port=22/tcp<br></code></pre></td></tr></table></figure><p>22号端口开启成功！</p><p><img src="https://source.icode504.com/images/image-20240213171417549.png"></p><p>3. 重新加载防火墙，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>4. 输入下面的命令，查看虚拟机的ip地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240221133557223.png"></p><p>5. 打开Electerm，点击左侧的书签：</p><p><img src="https://source.icode504.com/images/image-20240213171858078.png"></p><p>6. 按照下图操作填写连接信息：</p><p><img src="https://source.icode504.com/images/image-20240221134323586.png"></p><p>7. 向下找，点击<strong>测试连接</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221134731866.png"></p><p>等待一段时间后，如果上方出现一个 <code>connection is ok</code>，说明前面填写内容没有问题：</p><p><img src="https://source.icode504.com/images/image-20240221134841255.png"></p><p>如果出现的时 <code>connection is failed</code>，说明填写的内容有问题，需要更改后再次测试连接。</p><p><img src="https://source.icode504.com/images/image-20240221135000261.png"></p><p>8. 测试连接成功后，点击<strong>保存并连接</strong>后，此时我们就可以在Electerm中登录root用户并执行命令了：</p><p><img src="https://source.icode504.com/images/image-20240221135129497.png"></p><p><img src="https://source.icode504.com/images/image-20240221135430687.png"></p>]]></content>
    
    
    <categories>
      
      <category>系统安装</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electerm安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/47.html"/>
    <url>/posts/47.html</url>
    
    <content type="html"><![CDATA[<p>Electerm 是一款开源免费的终端模拟器，集终端模拟器、文件管理器、SSH 远程连接、SFTP 客户端等功能于一体。它可以在 Windows、macOS 和 Linux 操作系统上运行，为用户提供一个功能丰富、易于使用的终端环境。</p><p>通过 Electerm，用户可以在同一窗口中运行多个 SSH 会话，轻松管理远程服务器，并使用各种 Shell 命令。它还支持多种认证方式，包括密码、密钥、双因素认证等，以满足不同用户的需求，使得使用 SSH 会话更加高效方便。</p><p>在文件传输方面，Electerm 支持 SFTP 功能，可以方便地传输文件和管理网络连接。它还支持多语言，包括英语、中文等。</p><p>接下来介绍一下 Windows 环境下的 Electerm 的安装和简单配置。</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>在正式下载Electerm安装包时，推荐下载安装如下两个软件：</p><table><thead><tr><th align="left">软件名称</th><th align="left">安装教程</th><th>说明</th></tr></thead><tbody><tr><td align="left">NDM（Neat Download Manager）</td><td align="left"><a href="./24.html">点我查看</a></td><td>本文后续内容使用 NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。</td></tr></tbody></table><h1 id="二、下载-Electerm"><a href="#二、下载-Electerm" class="headerlink" title="二、下载 Electerm"></a>二、下载 Electerm</h1><p>1. 打开 Electerm 官网：<a href="https://electerm.html5beta.com/index-zh_cn.html">点我查看</a></p><p>2. 在下方页面找到 Windows 相关的安装包，鼠标右键选择复制链接地址：</p><p><img src="https://source.icode504.com/images/a9b3cdfb87b75ab5759586ea0e6320eb.png"></p><p>3. 点击右侧链接进入Github镜像加速站：<a href="https://gitdl.cn/">点我查看</a></p><blockquote><p>说明：如果上述链接无法进入，请点击<a href="./25.html#%E4%B8%89%E3%80%81%E4%B8%8B%E8%BD%BD-Github-%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9">此链接</a>进入查看其它镜像加速站。</p></blockquote><p>4. 打开镜像加速站，将前面复制的链接粘贴到此处，然后点击<strong>下载</strong>即可：</p><p><img src="https://source.icode504.com/images/17101011d63791e5788d21f4e16c9f64.png"></p><h1 id="三、安装-Electerm"><a href="#三、安装-Electerm" class="headerlink" title="三、安装 Electerm"></a>三、安装 Electerm</h1><p>1. 双击打开安装包，进入欢迎界面，选择<strong>为使用这台电脑的任何人安装（所有用户）</strong>，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213104457865.png"></p><p>2. 点击<strong>浏览</strong>选择安装位置，这里我安装在了 D 盘。完成后点击安装：</p><p><img src="https://source.icode504.com/images/image-20240213104628885.png"></p><p><img src="https://source.icode504.com/images/image-20240213104832549.png"></p><p><img src="https://source.icode504.com/images/image-20240213104912247.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240213105024765.png"></p><p>4. 安装完成，点击<strong>完成</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213105113276.png"></p><h1 id="四、Electerm-的简单配置"><a href="#四、Electerm-的简单配置" class="headerlink" title="四、Electerm 的简单配置"></a>四、Electerm 的简单配置</h1><blockquote><p>说明：以下包含“可选”的标题中可以自行修改，并不影响实际使用。</p></blockquote><h2 id="4-1-更换主题风格（可选）"><a href="#4-1-更换主题风格（可选）" class="headerlink" title="4.1 更换主题风格（可选）"></a>4.1 更换主题风格（可选）</h2><p>在桌面打开 Electerm，默认是黑色界面：</p><p><img src="https://source.icode504.com/images/image-20240213105358335.png"></p><p>如果你不喜欢这个纯黑界面，可以在左侧找到<strong>设置</strong>（小齿轮）对主题进行更改：</p><p><img src="https://source.icode504.com/images/image-20240213105514644.png"></p><p>在设置中，找到 UI 主题（内置了多个主题，也可以自定义主题，这里我选用的是 Github 主题），在下方搜索框中输入 Github，其中第二个搜索结果就是我们想要的：</p><p><img src="https://source.icode504.com/images/image-20240213110343282.png"></p><p>选择 Github 主题，此时最右侧会出现一个对号图标，点击这个图标就是应用这个主题：</p><p><img src="https://source.icode504.com/images/image-20240213110645152.png"></p><p>点击左上角的关闭图标，此时我们发现界面变成了白色风格：</p><p><img src="https://source.icode504.com/images/image-20240213110745168.png"></p><p><img src="https://source.icode504.com/images/image-20240213111646109.png"></p><h2 id="4-2-设置背景图片（可选）"><a href="#4-2-设置背景图片（可选）" class="headerlink" title="4.2 设置背景图片（可选）"></a>4.2 设置背景图片（可选）</h2><p>界面上有一个 Electerm 的大 logo，其实这是一张背景图片。软件本身支持修改背景图片。</p><p><img src="https://source.icode504.com/images/image-20240213111722825.png"></p><p>点击左侧菜单，打开<strong>设置</strong>（小齿轮）：</p><p><img src="https://source.icode504.com/images/image-20240213111908999.png"></p><p>在设置下方，找到<strong>终端</strong>，右侧有<strong>终端背景图片</strong>设置：</p><p><img src="https://source.icode504.com/images/image-20240213112130980.png"></p><p>如果你不需要背景图片，就点击以下输入框，此时会弹出一个列表框，选择无背景图片即可：</p><p><img src="https://source.icode504.com/images/image-20240213112256558.png"></p><p>需要更换背景图片的小伙伴，建议是保存在本地的电脑壁纸（虽然 Electerm 支持在线图片链接，但是没有网了以后图片也不会显示）。点击右侧<strong>选择文件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213114042874.png"></p><p>在本地选择一张壁纸（壁纸建议是简约风，否则花里胡哨可能会影响使用体验）：</p><p><img src="https://source.icode504.com/images/image-20240213114529925.png"></p><p>图片设置好以后，我们可以在下方设置图片的透明度和模糊度：</p><ul><li>透明度（Opacity），值在 0~1 之间，数值越小，图片的透明度越低。</li><li>模糊度（Blur），数值越大，图片越模糊。</li></ul><p><img src="https://source.icode504.com/images/image-20240213115310321.png"></p><p>修改后界面效果如下：</p><p><img src="https://source.icode504.com/images/image-20240213115750587.png"></p><h2 id="4-3-关闭检查更新"><a href="#4-3-关闭检查更新" class="headerlink" title="4.3 关闭检查更新"></a>4.3 关闭检查更新</h2><p>Electerm 更新软件默认会从 Github 下载，但是 Github 对国内用户并不友好（因为网络原因经常访问失败）。如果你不想使用新版本的 Electerm，建议关闭检查更新这一项。</p><p>点击右侧的<strong>设置</strong>（小齿轮）：</p><p><img src="https://source.icode504.com/images/image-20240213111908999.png"></p><p>在设置中的 Common，在下方设置中关闭<strong>检查应用程序启动时的更新</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213120341726.png"></p><h2 id="4-4-将-PowerShell-换成命令提示符-cmd（可选）"><a href="#4-4-将-PowerShell-换成命令提示符-cmd（可选）" class="headerlink" title="4.4 将 PowerShell 换成命令提示符 cmd（可选）"></a>4.4 将 PowerShell 换成命令提示符 cmd（可选）</h2><p>Electerm 在 Windows 环境下默认使用的是 PowerShell，如果你经常使用的是普通的命令提示行（cmd），也可以在 Electerm 中设置。</p><p>点击右侧的<strong>设置</strong>（小齿轮）：</p><p><img src="https://source.icode504.com/images/image-20240213111908999.png"></p><p>在设置下方，找到 Common，右侧设置中找到默认 ExecWindows，将里面的内容替换成<code>System32/cmd.exe</code>：</p><p><img src="https://source.icode504.com/images/image-20240213121100847.png"></p><p>重启 Electerm，此时成功切换成命令提示行（cmd）：</p><p><img src="https://source.icode504.com/images/image-20240213121325959.png"></p><h1 id="五、卸载-Electerm（可选）"><a href="#五、卸载-Electerm（可选）" class="headerlink" title="五、卸载 Electerm（可选）"></a>五、卸载 Electerm（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到 Geek Uninstaller 卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开 Geek Uninstaller，找到 Electerm，鼠标右键选中并点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240213102955160.png"></p><p>2. 进入卸载界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240213103036789.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240213103211137.png"></p><p>4. 点击<strong>完成</strong>，Electerm 卸载完成：</p><p><img src="https://source.icode504.com/images/image-20240213103301823.png"></p><p>5. 此时打开 Geek Uninstaller，会清理卸载残留，点击<strong>完成</strong></p><p><img src="https://source.icode504.com/images/image-20240213103421082.png"></p><p>6. 至此，Electerm 卸载成功，直接关闭这个窗口即可：</p><p><img src="https://source.icode504.com/images/image-20240213103523562.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>服务器&amp;虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Electerm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse配置MySQL 8.0教程</title>
    <link href="/posts/46.html"/>
    <url>/posts/46.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装MySQL和Eclipse，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">MySQL 8.0</td><td align="center"><a href="./20.html">点我查看</a></td><td align="center"><a href="./68.html">点我查看</a></td><td align="center">敬请期待</td></tr><tr><td align="center">Eclipse</td><td align="center"><a href="./30.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">-</td></tr></tbody></table><ul><li>Windows检查MySQL安装版本：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并回车，在命令行中输入<code>mysql --version</code>，确保本机安装的MySQL版本在8.0及以上：</li></ul><p><img src="https://source.icode504.com/images/image-20240220151342379.png"></p><ul><li>macOS检查MySQL安装版本：如果你是按照上面的链接一步一步安装的MySQL。在安装完成后，重新打开终端，在终端中输入<code>mysql --version</code>，即可查看当前MySQL版本信息。</li></ul><h1 id="一、下载MySQL数据库驱动"><a href="#一、下载MySQL数据库驱动" class="headerlink" title="一、下载MySQL数据库驱动"></a>一、下载MySQL数据库驱动</h1><p>1. 点击右侧链接进入MySQL数据库驱动下载页面：<a href="https://downloads.mysql.com/archives/c-j/">点我查看</a></p><p>2. 前面我们检查了MySQL是8.0.xx版本，数据库驱动建议选择8版本、操作系统我选择的是平台独立（Platform Independent）。选择完成后，点击下方ZIP压缩包下载：</p><p><img src="https://source.icode504.com/images/image-20240221084519626.png"></p><p>3. 将下载好的压缩包解压到一个你熟悉的位置，这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240221084705705.png"></p><p><img src="https://source.icode504.com/images/image-20240221084851937.png"></p><h1 id="二、Eclipse配置MySQL"><a href="#二、Eclipse配置MySQL" class="headerlink" title="二、Eclipse配置MySQL"></a>二、Eclipse配置MySQL</h1><p>1. 打开Eclipse，在上方菜单栏选择Window –&gt; Show View –&gt; Other：</p><p><img src="https://source.icode504.com/images/image-20240131100443322.png"></p><p>2. 双击打开<strong>Data Management</strong>，选择<strong>Data Source Explorer</strong>，完成后点击<strong>Open</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131100530658.png"></p><p>3. 此时会弹出一个Data Source Explorer窗口，鼠标右键选中第一个<strong>Database Connections</strong>，点击<strong>New</strong>新建一个连接：</p><p><img src="https://source.icode504.com/images/image-20240131102657948.png"></p><p>4. 连接类型<strong>选择MySQL并选中</strong>，Name和Description自定义，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220154033412.png"></p><p>5. 点击右上角<strong>加号</strong>修改数据库驱动和连接信息：</p><p><img src="https://source.icode504.com/images/image-20240131103041407.png"></p><p>6. 选中数据库驱动模板<strong>MySQL JDBC Driver</strong>，此时上方弹出一个错误信息：在本地系统中无法找到<code>mysql-connector-java-5.1.0-bin.jar</code>，这说明我们需要将Eclipse原有的数据库驱动改成前面我们下载安装的MySQL的JDBC：</p><p><img src="https://source.icode504.com/images/image-20240221083249950.png"></p><p>7. 选择<strong>JAR List</strong>，点击右侧的<strong>Clear All</strong>，清空驱动文件（下图列出来的JAR包本地不存在）</p><p><img src="https://source.icode504.com/images/image-20240221083702299.png"></p><p>8. 点击<strong>Add JAR&#x2F;Zip</strong>，找到前面我们下载的MySQL JDBC的位置，选中<code>postgresql-42.6.0.jar</code>文件，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131104057823.png"></p><p>9. 找到MySQL数据库驱动包解压位置，并选中文件夹中的JAR包<code>mysql-connector-j-xxx.jar</code>（这里xxx指的是版本号）。选择完成后，点击右下角<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221085426164.png"></p><p>10. 此时数据库驱动JAR包添加成功，并且上方报错信息也消失了：</p><p><img src="https://source.icode504.com/images/image-20240221085711987.png"></p><p>11. 点击上方的<strong>Properties</strong>，按照下图所给的提示填写好配置信息，完成后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221090247443.png"></p><p>12. 记不住密码的小伙伴，请将下图的<strong>Save password</strong>勾选上（记住密码），上述内容填写完成后，点击<strong>Test Connection</strong>测试连接：</p><p><img src="https://source.icode504.com/images/image-20240221101736075.png"></p><p>13. 连接成功，点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221101905828.png"></p><p>14. 点击<strong>Finish</strong>，MySQL安装配置完成，此时我们可以看到名为<code>mysql</code>的数据库：</p><p><img src="https://source.icode504.com/images/image-20240221102428971.png"></p><p>15. 如果想连接其他数据库，鼠标右键点击MySQL，选择最后一个<strong>Properties</strong>，修改数据库属性：</p><p><img src="https://source.icode504.com/images/image-20240221102727558.png"></p><p>16. 将下图中两处数据库名称修改即可，完成后点击<strong>Apply and Close</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221103016323.png"></p><p>17. 此时会有一个弹窗提示说数据库配置信息发生变动，是否重新连接，点击<strong>Yes</strong>：</p><p><img src="https://source.icode504.com/images/image-20240221103111141.png"></p><p>18. 数据库切换成功：</p><p><img src="https://source.icode504.com/images/image-20240221103230805.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Eclipse</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Live Server插件安装、使用与卸载教程</title>
    <link href="/posts/44.html"/>
    <url>/posts/44.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、下载安装Live-Server插件"><a href="#一、下载安装Live-Server插件" class="headerlink" title="一、下载安装Live Server插件"></a>一、下载安装Live Server插件</h1><p>1. 打开VS Code左侧插件商店，搜索Live Server并<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240206101011065.png"></p><p>2. 安装完成后，点击插件右下角的小齿轮，点击<strong>扩展设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240206104022501.png"></p><p>3. 找到<strong>Custom Browser</strong>，在这里可以选择你要使用的浏览器。这里我选择的是chrome（需要保证电脑本地已经安装了浏览器）：</p><ul><li>null是系统默认的浏览器。</li><li>带PrivateMode是以隐私保护模式打开浏览器。</li></ul><p><img src="https://source.icode504.com/images/image-20240206104446439.png"></p><h1 id="二、Live-Server使用演示"><a href="#二、Live-Server使用演示" class="headerlink" title="二、Live Server使用演示"></a>二、Live Server使用演示</h1><p>1. 在VS Code中创建一个HTML文件：<code>page01.html</code>，代码如下图所示（浏览器页面中无内容），<strong>鼠标右键点击Open with Live Server</strong>：</p><p><img src="https://source.icode504.com/images/image-20240206101705146.png"></p><p>2. 此时我在body标签内写内容，可以在右侧浏览器页面中实时显示：</p><p><img src="https://source.icode504.com/images/240206001.gif"></p><h1 id="三、卸载Live-Server插件（可选）"><a href="#三、卸载Live-Server插件（可选）" class="headerlink" title="三、卸载Live Server插件（可选）"></a>三、卸载Live Server插件（可选）</h1><div class="note note-danger">            <p>这一部分会将插件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 打开左侧VS Code左侧插件商店，找到已经安装的Live Server，点击齿轮，然后点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240206100359816.png"></p><p>2. 点击<strong>需要重新加载</strong>。至此，Live Server卸载成功：</p><p><img src="https://source.icode504.com/images/image-20240206100553238.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Visual Studio Code（VS Code）</category>
      
      <category>Live Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio Code</tag>
      
      <tag>Live Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code查看Git提交记录</title>
    <link href="/posts/43.html"/>
    <url>/posts/43.html</url>
    
    <content type="html"><![CDATA[<p>在IDEA中，我们可以看到项目中Git的提交记录，但是VS Code中默认没有Git历史记录。</p><p><img src="https://source.icode504.com/images/image-20240205141727113.png"></p><p>我们可以到VS Code插件商店中搜索<code>Git Graph</code>插件并安装：</p><p><img src="https://source.icode504.com/images/image-20240205142106021.png"></p><p>安装完成，点击左侧<strong>Git图标</strong>，选择<strong>Git分支图标</strong>：</p><p><img src="https://source.icode504.com/images/image-20240205142400893.png"></p><p>此时我们就可以看到这个项目的Git提交历史了：</p><p><img src="https://source.icode504.com/images/image-20240205142643306.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Visual Studio Code（VS Code）</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Winodws Subsystem for Linux（WSL）安装教程</title>
    <link href="/posts/42.html"/>
    <url>/posts/42.html</url>
    
    <content type="html"><![CDATA[<p>WSL，全称Windows Subsystem for Linux，中文翻译过来是Windows环境下的Linux子系统。可以在Windows电脑上运行Linux环境，不需要单独安装VMWare等虚拟机软件，使用WSL的目的是为同时使用Windows和Linux操作系统的开发人员提供高效体验。</p><p>你可以使用WSL安装并运行各种Linux的发行版，例如：Ubantu、Debian、Kali等，并且在提供命令行工具（Bash）运行Linux命令。</p><p>官网提供了更多关于WSL的介绍，感兴趣的小伙伴可以点击右侧链接查看：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">点我查看</a></p><p>接下来就讲一下WSL的安装与使用：</p><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并点击<strong>确定</strong>，进入命令行窗口。在命令行中输入<code>winver</code>查看操作系统版本，请确保操作系统是<strong>Windows 10</strong>和<strong>Windows 11</strong>，并且版本在<strong>2004版本以后</strong>，这里我的操作系统是22H2版本，符合安装要求：</p><p><img src="https://source.icode504.com/images/image-20240202135450995.png"></p><p>2. 电脑从来没有安装过WSL（也就是说你之前从没听说过有这个东西）</p><p>3. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>control</code>并回车，右上角查看类别改成<strong>小图标</strong>，点击<strong>程序与功能</strong>：</p><p><img src="https://source.icode504.com/images/image-20240202142340458.png"></p><p>3. 选择<strong>启动或关闭Windows功能</strong>：</p><p><img src="https://source.icode504.com/images/image-20240202142540342.png"></p><p>4. 勾选<strong>适用于Linux的Windows子系统</strong>，完成后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240202142612124.png"></p><h1 id="二、安装WSL"><a href="#二、安装WSL" class="headerlink" title="二、安装WSL"></a>二、安装WSL</h1><p>1. 打开Windows应用商店（Microsoft Store）。</p><p><img src="https://source.icode504.com/images/image-20240202142905182.png"></p><p>2. 在上方搜索框中输入你想要的Linux发行版，这里我安装的是Ubantu 长期支持版（LTS）：</p><p><img src="https://source.icode504.com/images/image-20240202143659607.png"></p><p>3. 进入详情页后，点击<strong>安装</strong>，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240202143750193.png"></p><p>4. 下载完成，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240202143847804.png"></p><p>5. Ubantu正在安装，请耐心等待（期间不要关闭这个窗口）：</p><p><img src="https://source.icode504.com/images/image-20240202143923385.png"></p><p>6. 等待了1~3分钟以后，此时Ubantu系统要我们自己输入用户名（英文名称要符合Unix的命名规则，命名规则可以自行百度）：</p><p><img src="https://source.icode504.com/images/image-20240202144259062.png"></p><p>7. 进入输入密码界面，注意密码默认是不显示在控制台的，一共需要输入两次（如果你记不住密码，建议将密码设置成123456）。输入完毕后，你就可以在Windows上正常使用Linux啦！</p><p><img src="https://source.icode504.com/images/image-20240202144643586.png"></p><h1 id="四、修改WSL主题风格（可选）"><a href="#四、修改WSL主题风格（可选）" class="headerlink" title="四、修改WSL主题风格（可选）"></a>四、修改WSL主题风格（可选）</h1><div class="note note-success">            <p>感兴趣的小伙伴按照下面内容自己动手修改。</p>          </div><p>1. <kbd>Ctrl</kbd>和鼠标滚轮可以调整窗口和字体大小。</p><p>2. <strong>鼠标右键</strong>点击WSL上方白色部分，点击<strong>属性</strong>，可以修改界面风格：</p><p><img src="https://source.icode504.com/images/image-20240202145311680.png"></p><p>3. 在字体窗口自行调整字体类型和大小，这里我选择的是Consolas字体（Windows自带，挺好看的），大小20号：</p><p><img src="https://source.icode504.com/images/image-20240202145530346.png"></p><h1 id="五、卸载WSL（可选）"><a href="#五、卸载WSL（可选）" class="headerlink" title="五、卸载WSL（可选）"></a>五、卸载WSL（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 按<kbd>Win</kbd>键，找到Ubantu，鼠标右键点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240202143332649.png"></p><p>2. 点击<strong>卸载</strong>，过一会以后应用列表Ubantu的图标就会消失，卸载完成：</p><p><img src="https://source.icode504.com/images/image-20240202143404859.png"></p><h1 id="六、安装WSL可能会出现的问题"><a href="#六、安装WSL可能会出现的问题" class="headerlink" title="六、安装WSL可能会出现的问题"></a>六、安装WSL可能会出现的问题</h1><p>如果在微软商店安装Ubantu并打开的时候报错：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Installing, <span class="hljs-keyword">this</span> may take a few minutes…<br>WslRegisterDistribution failed with error: <span class="hljs-number">0x8007019e</span><br>The Windows Subsystem <span class="hljs-keyword">for</span> Linux optional component <span class="hljs-keyword">is</span> not enabled. Please enable it and <span class="hljs-keyword">try</span> again.<br>See https:<span class="hljs-comment">//aka.ms/wslinstall for details.</span><br>Press any key to <span class="hljs-keyword">continue</span>…<br></code></pre></td></tr></table></figure><p>可以参考这篇文章，之前我也遇到过，就是按照博主的方案解决了：<a href="https://blog.csdn.net/qq_17576885/article/details/126707239">https://blog.csdn.net/qq_17576885/article/details/126707239</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>服务器&amp;虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation安装+彻底卸载教程（Windows版）</title>
    <link href="/posts/41.html"/>
    <url>/posts/41.html</url>
    
    <content type="html"><![CDATA[<p>VMware Workstation是一款虚拟机软件，它允许你在一台电脑上创建并运行多个虚拟操作系统。就像在一台电脑上同时运行多个计算机一样，你可以在VMware Workstation中创建虚拟计算机，安装不同的操作系统（如Windows、Linux等），并在它们之间轻松切换。这对普通用户来说，就好像在电脑上开设了多个独立的虚拟环境，方便进行软件测试、学习和实验，而不用担心影响到主机系统。</p><p>接下来为大家讲解Windows环境下个人版VMware Workstation的安装：</p><h1 id="一、下载VMware-Workstation"><a href="#一、下载VMware-Workstation" class="headerlink" title="一、下载VMware Workstation"></a>一、下载VMware Workstation</h1><p>以下提供两种方式下载VMware Workstation，任选其一即可。</p><h2 id="方式一：百度网盘下载"><a href="#方式一：百度网盘下载" class="headerlink" title="方式一：百度网盘下载"></a>方式一：百度网盘下载</h2><p>点击右侧连接下载VMWare安装包：<a href="https://pan.baidu.com/s/1aYOCmjHPW7n8_KjJ2e56GA?pwd=1024">点我查看</a></p><p>选择任意一个安装包下载即可。</p><h2 id="方式二：官网下载（操作较为繁琐，不推荐）"><a href="#方式二：官网下载（操作较为繁琐，不推荐）" class="headerlink" title="方式二：官网下载（操作较为繁琐，不推荐）"></a>方式二：官网下载（操作较为繁琐，不推荐）</h2><blockquote><p>2023年年末VMware被知名半导体厂商Broadcom（博通）收购，我们需要到博通官网注册账号下载VMware的安装包，以下是注册、登录账号下载安装包操作。</p></blockquote><p>1. 点击右侧链接进入官网账号注册页面：<a href="https://support.broadcom.com/group/ecx/downloads">点我查看</a></p><p>2. 此时会进入一个登录页面，没有账号的小伙伴需要注册。这里我们点击右上角的<strong>LOGIN</strong>，然后点击<strong>REGISTER</strong>注册账号：</p><p><img src="https://source.icode504.com/images/image-20240522112320246.png"></p><p>3. 在注册页面，我们先输入自己的邮箱（可以使用自己的QQ邮箱），然后输入图片验证码，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522112713958.png"></p><p>4. 找到官方发送过来的验证码邮件，输入验证码，然后点击<strong>Verify &amp; Continue</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522134002848.png"></p><p>5. 按照下面的提示补充注册信息和密码，完成后点击<strong>Create Account</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522135157928.png"></p><p>6. （可选）此时浏览器会弹出一个存储密码信息，如果你记不住密码的话可以点击保存来存储密码：</p><p><img src="https://source.icode504.com/images/image-20240522135306156.png"></p><p>7. 注册成功，点击最下方的按钮<strong>I’ll do again later</strong>（稍后再做）：</p><p><img src="https://source.icode504.com/images/image-20240522135512531.png"></p><p>8. 再次点击右侧链接进入登陆页面：<a href="https://support.broadcom.com/group/ecx/downloads">点我查看</a>，用户名输入刚刚我们注册的邮箱，记不住密码的小伙伴可以勾选<strong>Remember me</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522135930427.png"></p><p>9. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522140135070.png"></p><p>10. 输入密码（可以使用前面浏览器记住的密码），记不住密码的小伙伴可以勾选<strong>保存我的信息</strong>，然后点击<strong>登录</strong>：</p><p><img src="https://source.icode504.com/images/image-7bf43e27097b48ee4297fe5c48e811b7.png"></p><p>11. 登录成功，此时进入个人控制台，点击上方图标，选择<strong>VMware Cloud Foundation</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522141632590.png"></p><p>12. 在下方页面找到<strong>VMware Workstation Pro</strong>，点击打开：</p><p><img src="https://source.icode504.com/images/image-20240522141753889.png"></p><p>13. 这里我选择的是17.0版本，Windows个人使用：</p><p><img src="https://source.icode504.com/images/image-20240522142009010.png"></p><p>14. 此时上方有一个许可协议需要勾选（由于前面我勾选过了，这里并没有显示），然后再点击下载按钮：</p><p><img src="https://source.icode504.com/images/image-20240522142151695.png"></p><p>15. 此时会弹出一个确认提示，点击<strong>Yes</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522142213363.png"></p><p>16. 按照下图提示填写表单信息，填写完成后点击右下角的<strong>Submit</strong>提交：</p><p><img src="https://source.icode504.com/images/image-20240522142500089.png"></p><p>17. 点击下载按钮，下载安装包：</p><p><img src="https://source.icode504.com/images/image-20240522142551657.png"></p><h1 id="二、安装VMware-Workstation"><a href="#二、安装VMware-Workstation" class="headerlink" title="二、安装VMware Workstation"></a>二、安装VMware Workstation</h1><p>1. 下载完成后双击打开安装包，进入欢迎界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522144112400.png"></p><p>2. 进入用户协议以后，勾选左下方的协议，完成后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522144212006.png"></p><p>3. 兼容设置（没有此页面的小伙伴直接跳转到下一步），这里不需要勾选下面的内容，直接点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522144335207.png"></p><p>4. 点击右上角<strong>更改</strong>，更改安装路径，这里我安装在D盘：</p><p><img src="https://source.icode504.com/images/image-20240121170033841.png"></p><p><img src="https://source.icode504.com/images/image-20240121170339244.png"></p><p><img src="https://source.icode504.com/images/image-20240121170431309.png"></p><p>5. 用户体验设置页面，<strong>取消勾选</strong><u>启动时检查产品更新</u>和<u>加入VMware客户体验提升计划</u>，完成后点击下一步：</p><p><img src="https://source.icode504.com/images/image-20240121170532539.png"></p><p>6. 快捷方式按照默认勾选的即可，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240121170655703.png"></p><p>7. 点击<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240522144440486.png"></p><p>8. 安装中，请耐心等待。期间电脑可能会断网，这是因为VMWare需要配置自身网络驱动。</p><p><img src="https://source.icode504.com/images/image-20240121170947012.png"></p><p>9. 安装完毕。点击右下角<strong>许可证</strong>，接下来我们填写许可证密钥信息：</p><p><img src="https://source.icode504.com/images/image-20240121171554249.png"></p><p>10. 获取许可证密钥：点击右侧链接获取VMware的许可证密钥：<a href="https://www.bilibili.com/read/cv25413961/">点我查看</a></p><blockquote><p>密钥仅供学习使用，请勿用于商业用途！</p></blockquote><p>11. 将许可证密钥信息填入，完成后点击<strong>输入</strong>：</p><p><img src="https://source.icode504.com/images/image-20240121171805677.png"></p><p>12. 点击<strong>完成</strong>。VMware安装完成：</p><p><img src="https://source.icode504.com/images/image-20240121172001187.png"></p><h1 id="三、VMware-Workstation的卸载（可选）"><a href="#三、VMware-Workstation的卸载（可选）" class="headerlink" title="三、VMware Workstation的卸载（可选）"></a>三、VMware Workstation的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到VMware Worksation，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240121164255938.png"></p><p>2. 此时会弹出一个提示窗口，选择<strong>是</strong>：</p><p><img src="https://source.icode504.com/images/image-20240121164336939.png"></p><p>3. 卸载过程比较慢，请耐心等待。</p><p>4. 卸载完成，此时Geek会我们检测出安装残留，我们只需要点击<strong>完成</strong>即可，清除卸载残留：</p><p><img src="https://source.icode504.com/images/image-20240121164745966.png"></p><p>5. 清理完毕，关闭Geek即可：</p><p><img src="https://source.icode504.com/images/image-20240121164930832.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>服务器&amp;虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>VMware Workstation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code配置MinGW并编写运行C/C++代码（适用于Windows）</title>
    <link href="/posts/40.html"/>
    <url>/posts/40.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装了VS Code和MinGW，没有安装的小伙伴按照下方链接给出的教程进行安装：</p><table><thead><tr><th align="center"><a href="./39.html">MinGW安装配置教程（Windows版）</a></th><th align="center"><a href="./38.html">Visual Studio Code安装配置教程（Windows版）</a></th></tr></thead></table><p>1. 找一个你熟悉的位置写代码，建议文件路径只包含英文字符。这里我在F盘的Code文件夹下创建了一个C-Project文件夹：</p><p><img src="https://source.icode504.com/images/image-20240203202836440.png"></p><p>2. 打开VS Code，点击左上角文件 –&gt; 打开文件夹。打开上一步我们创建的C-Project空文件夹：</p><p><img src="https://source.icode504.com/images/image-20240203203122206.png"></p><p><img src="https://source.icode504.com/images/image-20240203203324194.png"></p><p>3. 点击左上角的插件商店：</p><p><img src="https://source.icode504.com/images/image-20240203203432028.png"></p><p>4. 在上方搜索框中输入C，下载前三个微软官方提供的插件：C&#x2F;C++、C&#x2F;C++ Themes、C++ Extension Pack：</p><p><img src="https://source.icode504.com/images/image-20240203204408841.png"></p><p>5. 上方弹出一个颜色主题，这里我选择的是第一个：</p><p><img src="https://source.icode504.com/images/image-20240203204538939.png"></p><p>5. 安装完成，我们点击上方的项目写代码。这里我创建一个C语言文件：<code>swap.c</code>，代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 两数交换</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>, y = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;两个数未交换之前的值, x = %d, y = %d\n&quot;</span>, x, y);<br><br>    <span class="hljs-comment">// 额外定义一个变量，实现两数的交换</span><br>    <span class="hljs-type">int</span> temp = x;<br>    x = y;<br>    y = temp;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;交换后两个数的值, x = %d, y = %d\n&quot;</span>, x, y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6. 按<kbd>Ctrl</kbd>和<kbd>F5</kbd>键，以非调试状态运行程序。在上方调试器选择**C++ (GDB&#x2F;LLDB)**：</p><p><img src="https://source.icode504.com/images/image-20240203210122970.png"></p><p>7. 选择<strong>C&#x2F;C++: gcc.exe 生成和调试活动文件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240203210217881.png"></p><p>8. 此时左上角生成了一个<code>.vscode</code>文件夹，里面包含配置文件，此时点击终端，就可以看到C语言代码的输出结果：</p><p><img src="https://source.icode504.com/images/image-20240203211336203.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Visual Studio Code（VS Code）</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio Code</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>MinGW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MinGW安装配置教程（Windows版）</title>
    <link href="/posts/39.html"/>
    <url>/posts/39.html</url>
    
    <content type="html"><![CDATA[<p>MinGW，全称为Minimalist GNU for Windows，是一个可自由使用和发布的Windows特定头文件和使用GNU工具集导入库的集合。它允许在GNU&#x2F;Linux和Windows平台生成本地的Windows程序而不需要第三方C运行时（C Runtime）库。使用MinGW开发的程序不需要额外的第三方DLL支持就可以在Windows下运行。</p><p>以下是MinGW在Windows环境下的安装和配置教程：</p><h1 id="一、下载MinGW-w64"><a href="#一、下载MinGW-w64" class="headerlink" title="一、下载MinGW-w64"></a>一、下载MinGW-w64</h1><p>1. 打开MinGW-w64官网下载页面（托管到了SourceForge上）：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">点我查看</a></p><p>2. 向下找，找到最新版本的MinGW，选择seh下载：</p><p><img src="https://source.icode504.com/images/image-20240201104452235.png"></p><blockquote><p>说明（第2、3、4、5点总结的可能不太严谨，如果您在这方面有很深入的了解，可以评论区或者私信告诉我）：</p><p>1. <font color="FF0000">不要</font>安装上面的<code>MinGW-W64-install.exe</code>，这个是联网安装的，服务器在国外，在国内安装因为网络原因大概率会失败。</p><p>2. x86_64简单而言是64位的操作系统（绝大部分电脑都是64位的），i686属于32位操作系统</p><p>3. posix（全称Portable Operating System Interface of UNIX，翻译过来就是UNIX可移植操作系统接口），是<a href="http://www.ieee.com/">IEEE</a>为要在各种UNIX操作系统上运行的软件而定义的一系列API标准总称。</p><p>4. win32是由Windows操作系统的API，主要也是应用在Windows操作系统上。</p><p>5. seh（Structured Exception Handling）是Windows操作系统中默认的异常处理机制，sjlj（Signal Set JMP）是Unix及类Unix系统中的一种轻量级异常处理机制。</p></blockquote><h1 id="二、安装配置MinGW-w64"><a href="#二、安装配置MinGW-w64" class="headerlink" title="二、安装配置MinGW-w64"></a>二、安装配置MinGW-w64</h1><p>1. 将下载的7z压缩包（推荐使用<a href="https://www.bandisoft.com/bandizip/">Bandzip</a>、<a href="https://7-zip.org/">7-zip</a>等解压工具）解压到一个你熟悉的地方（建议是英文路径），这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240131155552319.png"></p><p><img src="https://source.icode504.com/images/image-20240131155721190.png"></p><p>2. 为MinGW配置环境变量：找到MinGW的安装路径，出现bin、etc、include等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131160221163.png"></p><p>3. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th align="center"><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td align="center"><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>6. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134919881.png"></p><p>7. 配置安装路径，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240131162334741.png"></p><p>8. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240131162546989.png"></p><p>9. 检查Mingw环境变量是否配置成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并回车，进入控制台，输入<code>gcc -v</code>和<code>g++ -v</code>，出现版本信息说明环境变量配置成功！</p><p><img src="https://source.icode504.com/images/image-20240131162902042.png"></p><p><img src="https://source.icode504.com/images/image-20240131162938776.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>MinGW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio Code安装配置教程（Windows版）</title>
    <link href="/posts/38.html"/>
    <url>/posts/38.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、下载Visual-Studio-Code（VS-Code）"><a href="#一、下载Visual-Studio-Code（VS-Code）" class="headerlink" title="一、下载Visual Studio Code（VS Code）"></a>一、下载Visual Studio Code（VS Code）</h1><blockquote><p>本文后续内容使用NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a>，已经安装的小伙伴接着往下看。</p></blockquote><p>1. 打开官网下载地址：<a href="https://code.visualstudio.com/Download">点我查看</a></p><p>2. 根据自己的操作系统，选择下载安装包。这里我使用的是Windows，只需要点击第一个即可：</p><p><img src="https://source.icode504.com/images/image-20231222155257752.png"></p><p>3. 如果浏览器没有下载，就点击页面中的这个链接下载（浏览器已下载的请忽略这条）：</p><p><img src="https://source.icode504.com/images/image-20231222155506749.png"></p><h1 id="二、安装Visual-Studio-Code（VS-Code）"><a href="#二、安装Visual-Studio-Code（VS-Code）" class="headerlink" title="二、安装Visual Studio Code（VS Code）"></a>二、安装Visual Studio Code（VS Code）</h1><p>1. 双击打开安装包。按照下图所示<strong>勾选协议</strong>，点击下一步：</p><p><img src="https://source.icode504.com/images/image-20231222160359382.png"></p><p>2. 点击<strong>浏览</strong>选择安装路径，这里我安装在了D盘（如不需要更改安装路径的请跳转至下一步）：</p><p><img src="https://source.icode504.com/images/image-20231222160520232.png"></p><p><img src="https://source.icode504.com/images/image-20231222160616103.png"></p><p><img src="https://source.icode504.com/images/image-20231222160650958.png"></p><p>3. 点击下一步</p><p><img src="https://source.icode504.com/images/image-20231222160715044.png"></p><p>4. 附加服务页面建议全部勾选，然后点击下一步：</p><p><img src="https://source.icode504.com/images/image-20231222160944031.png"></p><p>5. 上述内容确认无误后，点击安装：</p><p><img src="https://source.icode504.com/images/image-20231222161027142.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231222161056793.png"></p><p>7. 安装完成，勾选<strong>运行Visual Studio Code</strong></p><p><img src="https://source.icode504.com/images/image-20231222161130731.png"></p><h1 id="三、Visual-Studio-Code（VS-Code）的简单配置"><a href="#三、Visual-Studio-Code（VS-Code）的简单配置" class="headerlink" title="三、Visual Studio Code（VS Code）的简单配置"></a>三、Visual Studio Code（VS Code）的简单配置</h1><h2 id="3-1-页面汉化（可选）"><a href="#3-1-页面汉化（可选）" class="headerlink" title="3.1 页面汉化（可选）"></a>3.1 页面汉化（可选）</h2><p>VS Code默认是英文界面，对于一些英文不太好的小伙伴可能不太友好，好在官方为我们提供了VS Code的汉化包。</p><p>1. 在左侧菜单找到插件商店：</p><p><img src="https://source.icode504.com/images/image-20240131170427487.png"></p><p>2. 在搜索框中搜索<code>Chinese Simplified</code>，搜索结果第一个就是我们要安装插件，点击Install安装插件：</p><p><img src="https://source.icode504.com/images/image-20240131170733135.png"></p><p>3. 安装完成后，右下角会弹出一个窗口提示，点击<code>Change Language and Restart</code>，重新加载：</p><p><img src="https://source.icode504.com/images/image-20240131170831058.png"></p><p>4. 汉化成功！页面如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240131170910022.png"></p><h2 id="3-2-开启文件自动保存（可选）"><a href="#3-2-开启文件自动保存（可选）" class="headerlink" title="3.2 开启文件自动保存（可选）"></a>3.2 开启文件自动保存（可选）</h2><p>在VS Code中写代码，默认是需要按<kbd>Ctrl</kbd>+<kbd>S</kbd>键保存文件。但是如果出现意外状况（例如电脑突然断电），你编写的代码如果没保存，绝对能搞炸你的心态。因此，我们需要开启文件自动保存功能</p><p>1. 点击左下角的齿轮（或者按快捷键<kbd>Ctrl</kbd>和<kbd>,</kbd>），进入设置：</p><p><img src="https://source.icode504.com/images/image-20240131213903209.png"></p><p>2. 在上方搜索框中输入<code>auto save</code>，常用设置中改为<code>afterDelay</code>：</p><p><img src="https://source.icode504.com/images/image-20240131171830424.png"></p><p>3. 左侧菜单选择<strong>文件</strong>，将保存方式更改成<strong>afterDelay</strong>，保存时间间隔自定义（以毫秒为单位）：</p><p><img src="https://source.icode504.com/images/image-20240131172107593.png"></p><h2 id="3-3-主题风格配置（可选）"><a href="#3-3-主题风格配置（可选）" class="headerlink" title="3.3 主题风格配置（可选）"></a>3.3 主题风格配置（可选）</h2><p>VS Code支持多种主题风格配置。例如：暗黑风格、纯白风格等等。</p><blockquote><p>说明：如果系统自带的风格都不符合，可以到插件商店自行下载其他风格的主题。</p></blockquote><p>1. 点击左下角的齿轮，选择主题：</p><p><img src="https://source.icode504.com/images/image-20240131214819974.png"></p><p>2. 此时浏览器上方会弹出系统自带的颜色主题。2024是龙年，也是我的本命年，这里我选个红色，图个喜庆！</p><p><img src="https://source.icode504.com/images/image-20240131214912974.png"></p><p>3. 修改后的颜色风格如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240131215053668.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse配置PostgreSQL教程（Windows版）</title>
    <link href="/posts/37.html"/>
    <url>/posts/37.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装PostgresSQL和Eclipse，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">PostgreSQL</td><td align="center"><a href="./35.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr><tr><td align="center">Eclipse</td><td align="center"><a href="./30.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><h1 id="一、下载并安装pgJDBC"><a href="#一、下载并安装pgJDBC" class="headerlink" title="一、下载并安装pgJDBC"></a>一、下载并安装pgJDBC</h1><p>1. 按<kbd>Win</kbd>和<kbd>S</kbd>键，在搜索框中搜索Stack Builder并打开：</p><p><img src="https://source.icode504.com/images/image-20240131100854755.png"></p><p>2. 这里我们选择本地安装的PostgreSQL，完成后点击<strong>下一个</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131101117119.png"></p><p>3. 按照下图操作，选择pgJDBC：</p><p><img src="https://source.icode504.com/images/image-20240131101409184.png"></p><p>4. 下载目录自定义，这里我安装在D盘，完成后点击<strong>下一个</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131101553293.png"></p><p>5. 下载完成，点击<strong>下一个</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131101620551.png"></p><p>6. 进入pgJDBC安装界面，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131101713249.png"></p><p>7. 选择一个你熟悉的安装位置，这里我安装在了D盘，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131101906926.png"></p><p><img src="https://source.icode504.com/images/image-20240131102038330.png"></p><p><img src="https://source.icode504.com/images/image-20240131102113012.png"></p><p>8. 点击<strong>Next</strong>，开始安装：</p><p><img src="https://source.icode504.com/images/image-20240131102151200.png"></p><p>9. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240131102227258.png"></p><p>10. 点击<strong>Finish</strong>，安装完成：</p><p><img src="https://source.icode504.com/images/image-20240131102245360.png"></p><p>11. 点击<strong>完成</strong>，关闭Stack Builder：</p><p><img src="https://source.icode504.com/images/image-20240131102428855.png"></p><h1 id="二、Eclipse配置PostgreSQL"><a href="#二、Eclipse配置PostgreSQL" class="headerlink" title="二、Eclipse配置PostgreSQL"></a>二、Eclipse配置PostgreSQL</h1><p>1. 打开Eclipse，在上方菜单栏选择<strong>Window</strong> –&gt; <strong>Show View</strong> –&gt; <strong>Other</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131100443322.png"></p><p>2. 双击打开<strong>Data Management</strong>，选择<strong>Data Source Explorer</strong>，完成后点击<strong>Open</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131100530658.png"></p><p>3. 此时会弹出一个Data Source Explorer窗口，鼠标右键选中第一个<strong>Database Connections</strong>，点击<strong>New</strong>新建一个连接：</p><p><img src="https://source.icode504.com/images/image-20240131102657948.png"></p><p>4. 连接类型<strong>选择PostgreSQL并选中</strong>，Name和Description自定义，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131102920348.png"></p><p>5. 点击右上角<strong>加号</strong>修改数据库驱动和连接信息：</p><p><img src="https://source.icode504.com/images/image-20240131103041407.png"></p><p>6. 选中数据库驱动模板<strong>PostgreSQL JDBC Driver</strong>，此时上方弹出一个错误信息：在本地系统中无法找到<code>postgresql-8.1-xxxx.jdbc2.jar</code>，这说明我们需要将Eclipse原有的数据库驱动改成前面我们下载安装的pgJDBC：</p><p><img src="https://source.icode504.com/images/image-20240131103624152.png"></p><p>7. 选择<strong>JAR List</strong>，点击右侧的<strong>Clear All</strong>，清空驱动文件（下图列出来的JAR包本地不存在）</p><p><img src="https://source.icode504.com/images/image-20240131103928756.png"></p><p>8. 点击<strong>Add JAR&#x2F;Zip</strong>，找到前面我们安装的pgJDBC的位置，选中<code>postgresql-42.6.0.jar</code>文件，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131104057823.png"></p><p><img src="https://source.icode504.com/images/image-20240131104254745.png"></p><p><img src="https://source.icode504.com/images/image-20240131104425996.png"></p><p>9. 点击上方的<strong>Properties</strong>，按照下图所给的提示填写好配置信息：</p><p><img src="https://source.icode504.com/images/image-20240131104642198.png"></p><p>10. 记不住密码的小伙伴建议勾选<code>Save Password</code>，点击右下角的<strong>Test Connection</strong>，测试一下数据库连接：</p><p><img src="https://source.icode504.com/images/image-20240131105018333.png"></p><p>11. 此时弹出一个窗口：<code>Ping succeeded</code>，说明数据库测试连接成功，点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240131105137424.png"></p><p>12. 点击<strong>Finish</strong>，PostgreSQL连接成功：</p><p><img src="https://source.icode504.com/images/image-20240131105306411.png"></p><p><img src="https://source.icode504.com/images/image-20240131105549246.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Eclipse</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA/DataGrip配置PostgreSQL教程</title>
    <link href="/posts/36.html"/>
    <url>/posts/36.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装PostgresSQL和Intellij IDEA，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">PostgreSQL</td><td align="center"><a href="./35.html">点我查看</a></td><td align="center">敬请期待</td><td align="center"><a href="./104.html">点我查看</a></td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="./14.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><p>1. 按照下图所示操作，数据源选择PostgreSQL：</p><p><img src="https://source.icode504.com/images/image-20240105174627593.png"></p><p>2. 在Driver处，点击<strong>PostgreSQL</strong>，点击<strong>Go to Driver</strong>：</p><p><img src="https://source.icode504.com/images/image-20240105175052684.png"></p><p>3. 在Driver Files处，点击<strong>加号</strong>，选择<strong>Proviced Dirver</strong>，数据库驱动选择PostgreSQL官网最新稳定版本：</p><p><img src="https://source.icode504.com/images/image-20240130111433876.png"></p><p>4. 点击<strong>Download</strong>，下载数据库驱动文件：</p><p><img src="https://source.icode504.com/images/image-20240130111631704.png"></p><p>5. 下载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240130111649561.png"></p><p>5. Postgres驱动包添加成功，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240130114135936.png"></p><p>6. 点击左上角的Data Sources。用户名Username输入<strong>postgres</strong>，密码是你在安装Postgres的时候设置的密码（我当时设置的是123456）。配置完成后，点击左下角的<strong>Test Connection</strong>测试我们填写的内容是否正确：</p><p><img src="https://source.icode504.com/images/image-20240130114220813.png"></p><p><img src="https://source.icode504.com/images/image-20240130094448766.png"></p><p>7. 左下角出现Succeeded弹窗表示Postgres连接成功。重新输入一遍密码，点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240130094755483.png"></p><p>8. 连接成功，接下来你就可以在console中写SQL语句了！</p><p><img src="https://source.icode504.com/images/image-20240130100150910.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Intellij IDEA</category>
      
      <category>PostgreSQL</category>
      
      <category>DataGrip</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>PostgreSQL</tag>
      
      <tag>DataGrip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/35.html"/>
    <url>/posts/35.html</url>
    
    <content type="html"><![CDATA[<p>PostgreSQL是基于<a href="https://dsf.berkeley.edu/postgres.html">POSTGRES 4.2</a>版本的对象-关系型数据库，由加州大学伯克利分校计算机系研发。POSTGRES开创了许多先进理念，这些概念后来才在一些数据库系统中出现（他们的<a href="https://www.postgresql.org/">官网</a>标题宣传的是世界上最先进的开源关系型数据库）。</p><p>PostgreSQL是原伯克利代码的后代，它是开源的，支持大部分SQL标准并提供很多现代化特性：复杂查询、外键、触发器、更新视图等。</p><p>此外，用户能以多种方式扩展PostgreSQL，例如可以添加新数据类型、新函数、新操作符等。由于自由的许可，PostgreSQL可以被任何人使用、修改、发布。</p><p>以下是Windows环境下PostgreSQL的安装、配置与卸载教程：</p><h1 id="一、下载PostgreSQL"><a href="#一、下载PostgreSQL" class="headerlink" title="一、下载PostgreSQL"></a>一、下载PostgreSQL</h1><p>1. 进入官网下载链接：<a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">点我进入</a>（网页加载可能比较慢，请耐心等待）</p><p>2. 根据自己的操作系统下载，这里我选择Windows版PostgreSQL 15版本：</p><p><img src="https://source.icode504.com/images/image-5adb5c7f3f9993b49cf13cadf5133070.png"></p><h1 id="二、安装PostgreSQL"><a href="#二、安装PostgreSQL" class="headerlink" title="二、安装PostgreSQL"></a>二、安装PostgreSQL</h1><p>1. 双击打开安装包，进入欢迎界面，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-f9f077db3caecb00a08503191143d6bc.png"></p><p>2. 选择安装路径，建议安装路径是全英文的（小白安装可以不用修改此路径），完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240105161313262.png"></p><p>3. 选择组件：这里安装器为我们默认勾选了四个组件，简单解释一下这些组件的作用。</p><table><thead><tr><th>组件名称</th><th>说明</th></tr></thead><tbody><tr><td>PostgreSQL Server</td><td>PostgreSQL数据库服务器（首次安装必须勾选）</td></tr><tr><td>pgAdmin 4</td><td>pgAdmin 4是PostgreSQL图形管理界面，用来管理PostgreSQL数据库和服务器，可以在内部编写SQL语句</td></tr><tr><td>Stack Builder</td><td>Stack Builder通过下载安装工具、驱动和应用，可以补充PostgreSQL未安装的内容。</td></tr><tr><td>Command Line Tools</td><td>PostgreSQL的命令行工具，如果需要使用pgAdmin 4，需要安装命令行工具</td></tr></tbody></table><p>如果你是新手小白，按照系统默认勾选即可，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230911145322812.png"></p><p>4. 选择数据存储路径：第2步如果选择了安装路径，那么这一步就按照系统默认安装位置即可（不用修改），点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240105163356163.png"></p><p>5. 为超级管理员设置密码。注意：如果你记不住密码，就将密码设置成123456即可，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230911145851183.png"></p><p>7. PostgreSQL默认端口是<strong>5432</strong>，保持默认即可，不用修改。点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230911150036442.png"></p><p>8. 地区按照系统默认选择<strong>Default Locale</strong>，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230911150143566.png"></p><p>9. 对前面安装选项进行确认，如果没有问题点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240105164020363.png"></p><p>10. 点击<strong>Next</strong>，开始安装：</p><p><img src="https://source.icode504.com/images/image-20230911150301037.png"></p><p>11. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20230911150326605.png"></p><p>12. 安装完毕，点击<strong>Finish</strong>。Postgres安装完成：</p><p><img src="https://source.icode504.com/images/image-20240130105919293.png"></p><h1 id="三、卸载PostgreSQL"><a href="#三、卸载PostgreSQL" class="headerlink" title="三、卸载PostgreSQL"></a>三、卸载PostgreSQL</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到PostgreSQL 15，鼠标右键，点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240130101637247.png"></p><p>2. 此时卸载模式，默认选择第一个<strong>Entire Application</strong>（完全卸载），点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240130101833493.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240130101938418.png"></p><p>4. 此时弹出一个卸载成功的小窗口，点击OK：</p><p><img src="https://source.icode504.com/images/image-20240130102132979.png"></p><p>5. 在Geek Uninstaller中清理注册表等卸载残留，点击<strong>完成</strong>，卸载残留清理完毕。至此，Postgres卸载完成。</p><p><img src="https://source.icode504.com/images/image-20240130102238678.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Groovy安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/34.html"/>
    <url>/posts/34.html</url>
    
    <content type="html"><![CDATA[<p>Groovy是一种基于JVM（Java 虚拟机）的动态脚本语言，它结合了Python、Ruby等语言的特性，旨在提供一种更简洁、更灵活的编程方式。以下是 Groovy 的一主要特点：</p><ol><li><p><strong>动态性：</strong> Groovy是一种动态类型的语言，不需要在编写代码时指定变量的类型，可以根据上下文自动推断类型。</p></li><li><p><strong>与Java互操作性：</strong> Groovy可以与Java无缝互操作，可以直接调用Java类库和代码，并且可以被 Java 代码调用。</p></li><li><p><strong>闭包支持：</strong>Groovy 支持闭包（Closures），可以轻松实现函数式编程的特性，简化代码结构。</p></li><li><p><strong>简化语法：</strong>Groovy提供了简洁的语法，例如支持点操作符、集合操作、字符串插值等，使得代码更加清晰易读。</p></li><li><p><strong>元编程特性：</strong>Groovy具有强大的元编程特性，包括运行时元编程和编译时元编程，使得可以在运行时动态修改类和对象的行为。</p></li><li><p><strong>脚本语言特性：</strong>Groovy可以作为脚本语言使用，不需要显式的类和方法定义，可以直接编写执行代码。</p></li><li><p><strong>丰富的标准库：</strong>Groovy提供了丰富的标准库，包括文件操作、XML&#x2F;JSON 处理、数据库访问等功能，可以满足各种开发需求。</p></li></ol><p>Groovy适用于开发 Web 应用、脚本编写、测试自动化等各种场景。它可以充分发挥 Java 平台的优势，同时提供更加便捷的编程体验。</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>安装Groovy前请确保电脑本机安装了JDK，没有安装的小伙伴，请点击下方任意一个链接查看安装教程（这里我安装的是JDK 8版本的）：</p><table><thead><tr><th align="center"><a href="./1.html">JDK 8安装教程</a></th><th align="center"><a href="./28.html">JDK 11安装教程</a></th><th align="center"><a href="./26.html">JDK 17安装教程</a></th></tr></thead></table><p>JDK安装完成后，按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入控制台，输入<code>java -version</code>，如果出现如下内容，就说明JDK已经安装成功了。</p><p><img src="https://source.icode504.com/images/image-20230314140629530.png"></p><p>由于我们要安装的是4.0版本的Groovy，需要保证JDK版本至少在8以上。以下是官网对不同版本的Groovy安装要求：</p><p><img src="https://source.icode504.com/images/image-20231226172918718.png" alt="官网对不同的Groovy版本所需的JVM版本要求"></p><h1 id="二、下载Groovy"><a href="#二、下载Groovy" class="headerlink" title="二、下载Groovy"></a>二、下载Groovy</h1><blockquote><p>推荐使用NDM（Neat Download Manager）下载文件，可以加快下载速度。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p>1. 打开Groovy官网下载链接：<a href="https://groovy.apache.org/download.html">点我查看</a>。向下找到各个版本的下载页：</p><p><img src="https://source.icode504.com/images/image-20240129144559883.png"></p><p>2. 笔者在撰写这篇文章的时候，Groovy最新稳定版本是4.0版本，我们下载SDK bundle安装包：</p><p><img src="https://source.icode504.com/images/image-20240129144815996.png"></p><h1 id="三、安装配置Groovy"><a href="#三、安装配置Groovy" class="headerlink" title="三、安装配置Groovy"></a>三、安装配置Groovy</h1><p>1. 将下载好的安装包解压到一个你熟悉的位置，这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240129150722591.png"></p><p><img src="https://source.icode504.com/images/image-20240129150612519.png"></p><p>2. 接下来我们为Groovy来配置环境变量。找到Groovy安装路径，直到出现bin、conf、doc等文件夹。点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240129151122757.png"></p><p>3. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://source.icode504.com/images/image-20240101011132186.png"></p></blockquote><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>6. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002302057.png"></p><p>7. 配置系统变量，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240129151523312.png"></p><p>8. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>9. 按照图示操作即可，然后<strong>一路点击确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240129151715260.png"></p><p>10. 检查Groovy环境变量是否配置成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令行窗口。输入<code>groovy -v</code>或者<code>groovy -version</code>，下方出现版本信息就说明Groovy安装成功：</p><p><img src="https://source.icode504.com/images/image-20240129152111794.png"></p><h1 id="四、卸载Groovy"><a href="#四、卸载Groovy" class="headerlink" title="四、卸载Groovy"></a>四、卸载Groovy</h1><p>1. 找到Groovy安装目录，按<kbd>Shift</kbd><kbd>Delete</kbd>彻底删除：</p><p><img src="https://source.icode504.com/images/image-20240129145348459.png"></p><p>2. 删除环境变量：打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://source.icode504.com/images/image-20240101011132186.png"></p></blockquote><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>5. 在下方系统变量中，找到<code>GROOVY_HOME</code>并选中，点击右下角<strong>删除</strong>：</p><p><img src="https://source.icode504.com/images/image-20240129145751651.png"></p><p>6. 双击<strong>Path</strong>进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>7. 找到下方配置的<code>%GROOVY_HOME%\bin</code>并选中，点击右上角的<strong>删除</strong>，完成后<strong>一路点击确定</strong>。至此，Groovy卸载完成。</p><p><img src="https://source.icode504.com/images/image-20240129150138239.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Groovy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Live Server插件打开浏览器时：该网页无法正常运作，127.0.0.1未发送任何数据的问题解决</title>
    <link href="/posts/33.html"/>
    <url>/posts/33.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h1><p>今天使用Vs Code写HTML代码时，使用Live Server打开预览时，发现浏览器显示“该网页无法正常运作，127.0.0.1未发送任何数据”的问题。</p><p><img src="https://source.icode504.com/images/image-20231127110434914.png"></p><h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p>1. 在左侧工具栏找到扩展商店，找到Live Server，然后点击对应的小齿轮，进入插件设置。</p><p><img src="https://source.icode504.com/images/image-20231127111656933.png"></p><p>2. 选择<code>Extension Settings</code></p><p><img src="https://source.icode504.com/images/image-20231127111808544.png"></p><p>3. 进入设置以后，在最下方有一个<code>Use Local Ip</code>的一个设置，将<code>Use local IP as host</code>勾选即可。</p><p><img src="https://source.icode504.com/images/image-20231127112103103.png"></p><p>4. 此时在HTML文件中鼠标右键点击<code>Open with Live Server</code>，再次弹出浏览器，此时Live Server就正常工作了。</p><p><img src="https://source.icode504.com/images/231127001.gif"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Visual Studio Code（VS Code）</category>
      
      <category>Live Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Visual Studio Code</tag>
      
      <tag>Live Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卸载神器：Geek Uninstaller安装使用教程（Windows版）</title>
    <link href="/posts/31.html"/>
    <url>/posts/31.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://geekuninstaller.com/">Geek Uninstaller</a> 是一款 Windows 平台上的免费软件卸载工具，它的主要功能是帮助用户彻底删除计算机上的程序，包括那些难以通过标准程序卸载方式完全删除的软件。以下是 Geek Uninstaller 的一些主要特点和功能：</p><ol><li><p><strong>彻底卸载：</strong> 与 Windows 自带的程序卸载功能相比，Geek Uninstaller 能够更彻底地卸载程序，包括清理残留的注册表项和文件，确保程序的所有相关文件和设置都被完全删除。</p></li><li><p><strong>轻量级：</strong> Geek Uninstaller 是一款非常轻量级的程序（7z格式的压缩包仅为1.98MB），下载和安装速度快，占用系统资源少。</p></li><li><p><strong>用户友好界面：</strong> 界面简洁直观，易于使用，即使对于不擅长计算机操作的用户也很容易上手。</p></li><li><p><strong>批量卸载：</strong> 支持批量卸载多个程序，方便快捷。</p></li><li><p><strong>强大的强制卸载功能：</strong> 对于一些顽固的软件，Geek Uninstaller 提供了强制卸载功能（例如系统自带的Edge浏览器也可以卸载），可以强制删除相关文件和注册表项。</p></li></ol><p>总的来说，Geek Uninstaller 是一款功能强大、简单易用的程序卸载工具，适用于需要彻底清理计算机中无用软件和残留文件的用户。</p><h1 id="一、下载Geek-Uninstaller"><a href="#一、下载Geek-Uninstaller" class="headerlink" title="一、下载Geek Uninstaller"></a>一、下载Geek Uninstaller</h1><p>1. 点击右侧链接进入下载页面：<a href="https://geekuninstaller.com/download">点我进入下载页面</a></p><p>2. 选择左侧免费版，这里我选择ZIP压缩包下载：</p><p><img src="https://source.icode504.com/images/image-20240121162105283.png"></p><p>3. 将下载好的文件解压到一个你熟悉的文件路径，这里我解压到D盘：</p><p><img src="https://source.icode504.com/images/image-20240121162416854.png"></p><p>4. 发送到桌面，方便下次使用：鼠标右键点击<code>geek.exe</code>，下方选择<strong>发送到</strong>，选择最后一个<strong>桌面快捷方式</strong>：</p><p><img src="https://source.icode504.com/images/image-20240121162526552.png"></p><p>5. 在桌面上双击打开快捷方式，打开软件：</p><p><img src="https://source.icode504.com/images/image-20240121162743623.png"></p><h1 id="二、Geek-Uninstaller使用演示"><a href="#二、Geek-Uninstaller使用演示" class="headerlink" title="二、Geek Uninstaller使用演示"></a>二、Geek Uninstaller使用演示</h1><div class="note note-success">            <p>以下是Geek Unistaller的使用演示</p>          </div><p>这里我以卸载Adobe Acrobat DC为例：</p><p><img src="https://source.icode504.com/images/image-20240121163355153.png"></p><p>鼠标右键点击这款软件，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240121163449906.png"></p><p>卸载完成，此时Geek会检测是否存在卸载残留，如果存在，直接点击<strong>完成</strong>，此时Geek就会为我们清除：</p><p><img src="https://source.icode504.com/images/image-20240121163833750.png"></p><p>清理完成，Adobe Acrobat CC这款软件就彻底卸载了。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Geek Uninstaller</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang安装、配置和卸载教程（Windows版）</title>
    <link href="/posts/32.html"/>
    <url>/posts/32.html</url>
    
    <content type="html"><![CDATA[<p>Golang，也称为Go语言，是由Google开发的一种静态类型、编译型的编程语言。以下是关于Go语言的一些重要特点和特性：</p><ol><li><p><strong>简洁易读：</strong> Go语言设计简洁，语法清晰，易于阅读和学习。它借鉴了C语言的部分特性，但去除了一些复杂的特性和语法，使得代码更加简洁明了。</p></li><li><p><strong>并发支持：</strong> Go语言内置了轻量级的并发支持，通过goroutine和channel来实现并发编程。这使得编写并发程序变得更加简单和高效。</p></li><li><p><strong>垃圾回收：</strong> Go语言拥有自动垃圾回收机制，可以帮助程序员管理内存，减少内存泄漏问题。</p></li><li><p><strong>静态类型：</strong> Go语言是一种静态类型语言，变量在编译时需要声明其类型，这有助于提高代码的可读性和稳定性。</p></li><li><p><strong>快速编译：</strong> Go语言的编译速度非常快，可以快速生成可执行文件，适合于快速开发和部署应用程序。</p></li><li><p><strong>跨平台支持：</strong> Go语言提供了良好的跨平台支持，可以在不同的操作系统上进行开发和部署，包括Windows、Linux和MacOS等。</p></li><li><p><strong>丰富的标准库：</strong> Go语言拥有丰富的标准库，涵盖了网络、文件操作、并发等各个领域，使得开发者可以更加高效地编写各种类型的应用程序。</p></li></ol><p>Golang主要应用于Web开发、云计算、区块链等领域。</p><p>Windows安装Golang有两种方式：直接安装、ZIP解压缩安装（需要配置环境变量）。两种方式<strong>二选一</strong>即可。</p><h1 id="方式一：直接安装"><a href="#方式一：直接安装" class="headerlink" title="方式一：直接安装"></a>方式一：直接安装</h1><h2 id="一、下载Golang安装包"><a href="#一、下载Golang安装包" class="headerlink" title="一、下载Golang安装包"></a>一、下载Golang安装包</h2><p>1. 打开右侧链接，进入Go语言官网下载页面：<a href="https://golang.google.cn/dl/">点我查看</a></p><p><img src="https://source.icode504.com/images/image-20231017111013563.png"></p><p>2. 在下方<strong>Stable versions</strong>（稳定版本），选择相应的操作系统对应的安装包下载。这里我使用的是Windows 64位，直接下载下图的安装包即可。</p><p><img src="https://source.icode504.com/images/image-20240129110522537.png"></p><h2 id="二、安装Golang"><a href="#二、安装Golang" class="headerlink" title="二、安装Golang"></a>二、安装Golang</h2><p>1. 双击打开安装包：</p><p><img src="https://source.icode504.com/images/image-20231017112220938.png"></p><p>2. 如果弹出安全警告，直接勾选下面选项，然后点击<strong>运行</strong>即可（没有此弹窗的直接跳转到下一步）。</p><p><img src="https://source.icode504.com/images/image-20231017112356575.png"></p><p>3. 进入安装欢迎页面以后，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20231017112444322.png"></p><p>4. 在协议下方勾选<strong>I accept the terms in the Lincense Agreement</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20231017112652583.png"></p><p>5. 点击<strong>Change</strong>选择安装路径，建议安装在除C盘外的路径，路径中建议只包含英文（避免后续使用过程中出现各种各样未知的bug），这里我安装在了D盘：</p><p><img src="https://source.icode504.com/images/image-20231017113238490.png"></p><p>6. 点击<strong>Install</strong>：</p><p><img src="https://source.icode504.com/images/image-20231017113305680.png"></p><p>7. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231017113326710.png"></p><p>8. 点击<strong>Finish</strong>，Golang安装完成：</p><p><img src="https://source.icode504.com/images/image-20231017113409596.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面后，输入<code>go version</code>，如果出现下方的界面就说明你的Golang安装成功并且可以正常使用了：</p><p><img src="https://source.icode504.com/images/image-20231017113724236.png"></p><h2 id="三、卸载Golang（可选）"><a href="#三、卸载Golang（可选）" class="headerlink" title="三、卸载Golang（可选）"></a>三、卸载Golang（可选）</h2><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到<code>Go Programming Language amd64 go.xxx</code>，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240127160904157.png"></p><p>2. 此时弹出一个窗口，选择<strong>是</strong>：</p><p><img src="https://source.icode504.com/images/image-20240127160943100.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240127161051126.png"></p><p>4. 卸载完毕，Golang程序卸载完成。</p><h1 id="方式二：ZIP解压缩安装并配置"><a href="#方式二：ZIP解压缩安装并配置" class="headerlink" title="方式二：ZIP解压缩安装并配置"></a>方式二：ZIP解压缩安装并配置</h1><h2 id="一、下载Golang安装包-1"><a href="#一、下载Golang安装包-1" class="headerlink" title="一、下载Golang安装包"></a>一、下载Golang安装包</h2><p>1. 打开右侧链接，进入Go语言官网下载页面：<a href="https://golang.google.cn/dl/">点我查看</a></p><p><img src="https://source.icode504.com/images/image-20240127161816194.png"></p><p>2. 在下方<strong>Stable versions</strong>（稳定版本），选择相应的操作系统对应的安装包下载。这里我使用的是Windows 64位，直接下载下图的zip压缩包即可。</p><p><img src="https://source.icode504.com/images/image-20240129115224186.png"></p><h2 id="二、安装并配置Golang"><a href="#二、安装并配置Golang" class="headerlink" title="二、安装并配置Golang"></a>二、安装并配置Golang</h2><p>1. 将下载好的压缩包解压到一个你熟悉的位置（建议是全英文路径），这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240127162207325.png"></p><p><img src="https://source.icode504.com/images/image-20240127162317618.png"></p><p>2. 接下来我们为Golang配置一下环境变量。找到Golang的安装路径，出现api、bin、doc等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240127162639860.png"></p><p>3. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://source.icode504.com/images/image-20240101011132186.png"></p></blockquote><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>6. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002302057.png"></p><p>7. 配置系统变量，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240127163059204.png"></p><p>8. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>9. 按照图示操作即可，然后<strong>一路点击确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240129115523661.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面后，输入<code>go version</code>，如果出现下方的界面就说明你的Golang安装成功并且可以正常使用了：</p><p><img src="https://source.icode504.com/images/image-20240127163412787.png"></p><h2 id="三、卸载Golang（可选）-1"><a href="#三、卸载Golang（可选）-1" class="headerlink" title="三、卸载Golang（可选）"></a>三、卸载Golang（可选）</h2><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 找到go的安装路径，按<kbd>Shift</kbd><kbd>Delete</kbd>彻底删除：</p><p><img src="https://source.icode504.com/images/image-20240127163842351.png"></p><p>2. 删除环境变量：打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://source.icode504.com/images/image-20240101011132186.png"></p></blockquote><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>5. 在下方系统变量中，找到<code>GO_HOME</code>并选中，点击右下角<strong>删除</strong>：</p><p><img src="https://source.icode504.com/images/image-20240127164226369.png"></p><p>6. 双击<strong>Path</strong>进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>7. 找到下方配置的<code>%GO_HOME%\bin</code>并选中，点击右上角的<strong>删除</strong>，完成后<strong>一路点击确定</strong>。至此，Golang卸载完成。</p><p><img src="https://source.icode504.com/images/image-20240129115642752.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Go</tag>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA/DataGrip配置MySQL8.0教程</title>
    <link href="/posts/45.html"/>
    <url>/posts/45.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装MySQL和Intellij IDEA&#x2F;DataGrip，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">MySQL 8.0</td><td align="center"><a href="./20.html">点我查看</a></td><td align="center"><a href="./68.html">点我查看</a></td><td align="center">敬请期待</td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="./14.html">点我查看</a></td><td align="center"><a href="./79.html">点我查看</a></td><td align="center">敬请期待</td></tr><tr><td align="center">DataGrip</td><td align="center">敬请期待</td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><ul><li>Windows检查MySQL安装版本：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并回车，在命令行中输入<code>mysql --version</code>，确保本机安装的MySQL版本在8.0及以上：</li></ul><p><img src="https://source.icode504.com/images/image-20240220151342379.png"></p><ul><li>macOS检查MySQL安装版本：如果你是按照上面的链接一步一步安装的MySQL。在安装完成后，重新打开终端，在终端中输入<code>mysql --version</code>，即可查看当前MySQL版本信息。</li></ul><p>1. 打开Intellij IDEA，按照下图所示操作，数据源选择<strong>MySQL</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220143236662.png"></p><p>2. 在Driver处，点击<strong>MySQL</strong>，点击<strong>Go to Driver</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220143412262.png"></p><p>3. 在Driver Files处，点击<strong>加号</strong>，选择<strong>Proviced Dirver</strong>，数据库驱动选择MySQL官网最新稳定版本：</p><p><img src="https://source.icode504.com/images/image-20240220143707207.png"></p><p>4. 由于我的电脑中已经下载最新版本的MySQL数据库驱动（JDBC），直接点击右侧的<code>Switch to ver. xxxx</code>即可：</p><blockquote><p>如果你没有数据库驱动，此时右侧应该是<code>Download ver. xxxx</code>，直接点击下载即可。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240220144109011.png"></p><p>5. 此时数据库驱动切换成功，我们再点击左上角的<strong>Data Sources</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220144741605.png"></p><p>6. 按照下图操作，根据自己的实际情况添加数据库配置信息：</p><p><img src="https://source.icode504.com/images/image-20240220145242313.png"></p><p>7. 填写完成后，点击右下角的<strong>Test Connection</strong>测试一下数据库连接，出现下图所示的连接就说明MySQL连接成功：</p><p><img src="https://source.icode504.com/images/image-20240220145404194.png"></p><p>8. 此时再次输入以下密码，直接点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220145705718.png"></p><p>9. 连接成功，接下来你就可以在console中写SQL语句了：</p><p><img src="https://source.icode504.com/images/image-20240220145832765.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Intellij IDEA</category>
      
      <category>MySQL</category>
      
      <category>DataGrip</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>MySQL</tag>
      
      <tag>DataGrip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 8安装配置教程（Linux通用版）</title>
    <link href="/posts/55.html"/>
    <url>/posts/55.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下Linux环境下JDK 8如何安装与配置。</p><p>有需要在虚拟机安装Linux系统的小伙伴，请点击下方任意一个链接查看安装配置教程：</p><table><thead><tr><th align="center"></th><th align="center">CentOS</th><th align="center">Ubuntu</th><th align="center">Debian</th></tr></thead><tbody><tr><td align="center">安装教程</td><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./51.html">点我查看</a></td><td align="center"><a href="./52.html">点我查看</a></td></tr></tbody></table><h1 id="方式一：使用SDKMAN-安装"><a href="#方式一：使用SDKMAN-安装" class="headerlink" title="方式一：使用SDKMAN!安装"></a>方式一：使用SDKMAN!安装</h1><p>1. 请确保Linux上已经安装了SDKMAN!，没有安装的小伙伴可以点击右侧链接查看安装教程：<a href="./107.html">点我查看</a></p><p>2. 执行如下命令，查看各大厂商可以安装的JDK相关版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk list java<br></code></pre></td></tr></table></figure><p>下图中提供了各个厂商提供的Java，翻到页面最下方，这里我下载的是ZuluJDK，按照下图中选中复制版本号：</p><blockquote><p>提示：上、下键可以翻页，或者按<kbd>PageUp</kbd>或<kbd>PageDown</kbd>翻页，按<kbd>Q</kbd>键退出。</p></blockquote><p><img src="https://source.icode504.com/images/image-b5b304b00a39ffda8a82861d3668fdc4.png"></p><p>3. 执行如下命令，安装ZuluJDK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sdk install java 版本号-厂商名<br></code></pre></td></tr></table></figure><p>效果图如下（将前面复制的版本信息粘贴此处）：</p><p><img src="https://source.icode504.com/images/image-81de7f2d35d7de4a63d3923b67274dfd.png"></p><p>4. 等待一段时间后，JDK安装完成：</p><p><img src="https://source.icode504.com/images/image-20f70e229e4108efdc136e3cedbcc3c7.png"></p><p>5. 接下来，我们可以分别使用<code>java</code>、<code>javac</code>、<code>java -version</code>查看版本信息：</p><p><img src="https://source.icode504.com/images/image-fc97bf3c031cf0673f5bbf130412c693.png"></p><p><img src="https://source.icode504.com/images/image-5b8bc10be92b19950e5095215139e199.png"></p><p><img src="https://source.icode504.com/images/image-256ec5721d3cf0841b7cce8210f6c07d.png"></p><h1 id="方式二：正常下载安装"><a href="#方式二：正常下载安装" class="headerlink" title="方式二：正常下载安装"></a>方式二：正常下载安装</h1><h2 id="一、安装前检查（Linux端）"><a href="#一、安装前检查（Linux端）" class="headerlink" title="一、安装前检查（Linux端）"></a>一、安装前检查（Linux端）</h2><p>执行如下命令，查看当前系统的指令集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure><p>我的电脑是<code>x86_64</code>系统：</p><p><img src="https://source.icode504.com/images/image-20240224090038508.png"></p><h2 id="二、下载JDK（Windows端）"><a href="#二、下载JDK（Windows端）" class="headerlink" title="二、下载JDK（Windows端）"></a>二、下载JDK（Windows端）</h2><p>提供了两种下载方式：百度网盘下载和官网下载。以下两种方式二选一<strong>下载到本地</strong>即可：</p><h3 id="方式一：百度网盘下载（推荐）"><a href="#方式一：百度网盘下载（推荐）" class="headerlink" title="方式一：百度网盘下载（推荐）"></a>方式一：百度网盘下载（推荐）</h3><p>点击下方任意一个链接（百度网盘）进入下载页面：</p><table><thead><tr><th align="center"><a href="https://pan.baidu.com/s/12sU6r_YTYpkXF28IiiTayw?pwd=1024">点击下载</a></th><th align="center"><a href="https://pan.baidu.com/s/14zMAuIRLSpHU-PHrGw672Q?pwd=1024">备用下载1</a></th><th align="center"><a href="https://pan.baidu.com/s/1XqxmHf5fRXl0ovz5zK-xbw?pwd=1024">备用下载2</a></th></tr></thead></table><p><img src="https://source.icode504.com/images/image-20240224171106909.png"></p><p>根据上面检查的指令集，进入相应的文件夹：</p><p><img src="https://source.icode504.com/images/image-20240224171230465.png"></p><p><img src="https://source.icode504.com/images/image-20240224171648598.png"></p><h3 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h3><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/downloads/archive/">点击进入</a></p><p><img src="https://source.icode504.com/images/image-20240224171904465.png"></p><p>2. 找到以Java SE Development Kit开头的下载列表，找到64位的版本版本下载：</p><p><img src="https://source.icode504.com/images/image-20240224172241466.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://source.icode504.com/images/image-20240224172411350.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://source.icode504.com/images/image-20240101133536759.png"></p><h3 id="三、安装并配置JDK"><a href="#三、安装并配置JDK" class="headerlink" title="三、安装并配置JDK"></a>三、安装并配置JDK</h3><p>1. 将前面下载好的JDK安装包使用SFTP工具（这里我使用的是Eleterm）由Windows端传输到Linux端（请先确保Windows本身已经通过SSH方式连接到Linux）：</p><p><img src="https://source.icode504.com/images/image-20240224172925751.png"></p><p>2. 在左侧Windows端找到下载好的安装包：</p><p><img src="https://source.icode504.com/images/image-20240224173324597.png"></p><p>3. 在右侧Linux端设置安装包存放路径，这里我将安装包存放在<code>/opt</code>下：</p><p><img src="https://source.icode504.com/images/image-20240224173503187.png"></p><p>4. 按照下图所示操作，将JDK安装包传到Linux端的<code>/opt</code>目录下：</p><p><img src="https://source.icode504.com/images/24010224004.gif"></p><p>5. 等待一段时间后，此时Linux端的<code>/opt</code>目录下已经存放了刚才我们传输的文件：</p><p><img src="https://source.icode504.com/images/image-20240224173926690.png"></p><p>6. 此时我们切换回命令行，执行如下命令切换到<code>/opt</code>目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br></code></pre></td></tr></table></figure><p>7. 解压刚刚传入过来的压缩包，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u331-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><blockquote><p>小技巧：在命令行中输入文件名时，我们可以只写文件的前一部分，然后按一下<kbd>Tab</kbd>键补齐文件名。</p></blockquote><p>8. 等待一段时间后，解压完成，执行如下命令，进入解压后的文件夹名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240224175030125.png"></p><p>使用<code>cd</code>命令进入解压后的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> jdk1.8.0_331<br></code></pre></td></tr></table></figure><p>9. 输入如下命令，查看并复制当前文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240224175326821.png"></p><p>10. 复制如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">JAVA_HOME</span>  <br>JAVA_HOME=/opt/jdk1.8.0_331<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME<br></code></pre></td></tr></table></figure><p>11. 在<code>/etc/profile.d</code>目录下创建<code>java_env.sh</code>文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile.d/java_env.sh<br></code></pre></td></tr></table></figure><p>12. 按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第十步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240225120311514.png"></p><p>13. 将光标移动到第二行，将<code>JAVA_HOME</code>对应的值替换成第9步复制的路径。完成后按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。</p><p>14. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile.d/java_env.sh<br></code></pre></td></tr></table></figure><p>15. 执行<code>java</code>、<code>javac</code>命令，可以看到如下内容：</p><p><img src="https://source.icode504.com/images/image-20240225120919666.png"></p><p><img src="https://source.icode504.com/images/image-20240225120949167.png"></p><p>16. 输入<code>java -version</code>，出现下图信息表示JDK安装成功：</p><p><img src="https://source.icode504.com/images/image-20240225121013682.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js安装、配置和卸载教程（Windows版）</title>
    <link href="/posts/67.html"/>
    <url>/posts/67.html</url>
    
    <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，使 JavaScript 能够在服务器端运行，它提供了一个事件驱动的非阻塞 I&#x2F;O 模型，使得构建高效、可扩展的网络应用变得更加容易。而 npm（Node Package Manager）是 Node.js 的包管理工具，用于安装、分享、管理 JavaScript 代码包，使开发者能够轻松地将自己的代码与他人的代码集成，并且享受到社区共享的各种功能模块。Node.js 和 npm 的结合使得 JavaScript 开发者能够在服务器端和客户端都使用同一种语言，极大地提高了开发效率和跨平台能力。</p><p>以下是Windows环境下Node.js的安装教程：</p><h1 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h1><p>推荐安装如下软件（不强制要求）：</p><table><thead><tr><th>软件</th><th>安装教程</th><th>说明</th></tr></thead><tbody><tr><td>NDM（Neat Download Manager）</td><td><a href="./24.html">点我查看</a></td><td>推荐使用NDM（Neat Download Manager）下载文件，可以加快下载速度。</td></tr></tbody></table><h1 id="二、下载Node-js"><a href="#二、下载Node-js" class="headerlink" title="二、下载Node.js"></a>二、下载Node.js</h1><p>1. 点击右侧链接下载Node.js：<a href="https://nodejs.org/dist/">点我查看</a></p><p>2. 下载页面中有Node.js过去的各个发行版本，这里我选择的是最新的16版本的Node.js，如下图，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240619232411366.png"></p><p>3. Windows 64位操作系统的小伙伴推荐下载msi方式的安装包下载（如下图）：</p><p><img src="https://source.icode504.com/images/image-20240619232609935.png"></p><h1 id="三、安装Node-js"><a href="#三、安装Node-js" class="headerlink" title="三、安装Node.js"></a>三、安装Node.js</h1><p>1. 双击打开安装包，进入安装界面，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240426110553409.png"></p><p>2. <strong>勾选</strong>用户许可协议，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240426110726211.png"></p><p>3. 点击<strong>Change</strong>修改安装路径，这里我安装在了D盘（建议安装路径存放在一个你熟悉的位置，并且是英文路径），完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240426110747764.png"></p><p><img src="https://source.icode504.com/images/image-20240426111024855.png"></p><p><img src="https://source.icode504.com/images/image-20240426111136195.png"></p><p>4. 选择要安装的模块，不熟悉的小伙伴直接按照系统默认选择的模块即可，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240426111203354.png"></p><p>5. 本地模块工具，如果你使用Python或者Visual Studio的构建工具，就将下图内容勾选即可（这里我并没有用到上述内容，我选择<strong>不勾选</strong>），完成后点击Next：</p><p><img src="https://source.icode504.com/images/image-20240426111238393.png"></p><p>6. 点击<strong>Install</strong>开始安装：</p><p><img src="https://source.icode504.com/images/image-20240426111249199.png"></p><p>7. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240426111304999.png"></p><p>8. 点击<strong>Finish</strong>，Node.js安装完成：</p><p><img src="https://source.icode504.com/images/image-20240426111317567.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>进入命令行，分别输入<code>node -v</code>和<code>npm -v</code>，如果能够查看到响应的版本信息就说明Node.js安装成功！</p><p><img src="https://source.icode504.com/images/image-20240426111504600.png"></p><h1 id="四、npm更换镜像源"><a href="#四、npm更换镜像源" class="headerlink" title="四、npm更换镜像源"></a>四、npm更换镜像源</h1><p>Node.js中包含一个重要模块：npm，它的作用是帮助我们下载项目中的依赖（你可以理解成下载对应的软件包），但是npm默认的下载地址在国外，如果使用了默认的下载地址，后续在使用npm的过程中下载依赖会非常慢，因此，我们需要将npm默认的下载地址改成国内镜像，这里我使用的是淘宝镜像源。</p><p>1. 执行如下命令查看当前<code>npm</code>的下载源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240428091353944.png"></p><p>2. 将镜像源更改成淘宝镜像源，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>3. 再次执行如下命令，镜像源成功修改为淘宝镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240426111933066.png"></p><h1 id="五、Node-js的卸载"><a href="#五、Node-js的卸载" class="headerlink" title="五、Node.js的卸载"></a>五、Node.js的卸载</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴请继续往下看！</p></blockquote><p>1. 打开Geek Uninstalller，找到Node.js，鼠标右键点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240426105703719.png"></p><p>2. 选择是，卸载Node.js：</p><p><img src="https://source.icode504.com/images/image-20240426105801702.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240426105842216.png"></p><p>4. 卸载完成，此时Geek Uninstaller并没有卸载残留，点击关闭，Geek Uninstaller卸载完毕：</p><p><img src="https://source.icode504.com/images/image-20240426105948110.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0安装、配置与卸载教程（macOS版）</title>
    <link href="/posts/68.html"/>
    <url>/posts/68.html</url>
    
    <content type="html"><![CDATA[<p>MySQL是一个关系型数据库管理系统，目前为Oracle旗下产品，它具有开源、体积小、速度快的优点，许多网站使用的都是MySQL数据库。</p><p>简单而言，MySQL数据库核心功能就是用来存储数据的。</p><p>MySQL数据库分为社区版和商业版，这里介绍的是社区版的安装教程：</p><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>检查本机信息：点击左上角苹果logo，点击第一个<strong>关于本机</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224151904945.png"></p><p>这里需要留意一下处理器信息，这里我的电脑使用的是Intel芯片：</p><p><img src="https://source.icode504.com/images/image-20240224152112087.png"></p><h1 id="二、下载MySQL"><a href="#二、下载MySQL" class="headerlink" title="二、下载MySQL"></a>二、下载MySQL</h1><p>1. 打开MySQL官网下载链接：<a href="https://downloads.mysql.com/archives/community/">点我查看</a></p><p>2. 按照下图所示选择对应版本的MySQL安装包下载，这里我选择的是8.0.30版本的MySQL：</p><p><img src="https://source.icode504.com/images/image-20240224152756696.png"></p><h1 id="三、安装并配置MySQL"><a href="#三、安装并配置MySQL" class="headerlink" title="三、安装并配置MySQL"></a>三、安装并配置MySQL</h1><p>安装MySQL过程中，<strong>请保持网络畅通</strong>！！！</p><p>1. 双击打开dmg磁盘影像文件：</p><p><img src="https://source.icode504.com/images/image-20240224154757639.png"></p><p>2. 进入磁盘映像文件中，双击打开pkg软件安装包：</p><p><img src="https://source.icode504.com/images/image-20240224154853841.png"></p><p>3. 此时会弹出一个错误信息：<strong>无法打开“mysql-8.0.30-macos12-86_64.pkg”，因为它来自身份不明的开发者。</strong>（没有这个错误信息并且能正常打开上述软件包的小伙伴请跳转到<strong>第8步</strong>）我们需要解决这个问题：</p><p><img src="https://source.icode504.com/images/image-20240224155004670.png"></p><p>4. 点击左上角苹果logo，然后点击<strong>系统设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155139125.png"></p><p>5. 点击<strong>左侧隐私与安全性</strong>，向下找安全性中有一个提示信息：已阻止使用“mysql-8.0.30-macos12-86_64.pkg”，因为它来自身份不明的开发者。点击提示信息下方的<strong>仍要打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155406642.png"></p><p>6. 输入本机的用户名和密码，完成后点击<strong>修改设置</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155514630.png"></p><p>7. 再次双击打开pkg软件安装包，此时会弹出如下的提示信息，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155622622.png"></p><p>8. 此时会弹出一个信息：<strong>此软件包将运行一个程序以确定该软件能否安装</strong>，选择<strong>允许</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155700068.png"></p><p>9. 进入MySQL安装器欢迎页面，点击右下角<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155745310.png"></p><p>10. 进入软件许可协议页面，点击右下角的<strong>继续</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224155810677.png"></p><p>11. 点击<strong>同意</strong>，继续安装：</p><p><img src="https://source.icode504.com/images/image-20240224155823918.png"></p><p>12. 点击<strong>安装</strong>，安装MySQL：</p><p><img src="https://source.icode504.com/images/image-20240224155915966.png"></p><p>13. 输入用户名和密码，然后点击<strong>安装软件</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224160017901.png"></p><p>14. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240224160032278.png"></p><p>15. 进入配置页面，加密方式选择第一个<strong>Use Strong Password Encryption</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224160125824.png"></p><p>16. 为root用户设置密码。勾选<strong>Start MySQL Server once the installation is complete.<strong>（MySQL配置完成后开启服务）。完成后点击</strong>Finish</strong>：</p><blockquote><p>密码要求至少8位，并且由字母、数字和其他字符混合而成。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240224160705939.png"></p><p>17. 此时需要再次输入一次用户名和密码，然后点击<strong>好</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224160832172.png"></p><p>18. 配置中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240224160843908.png"></p><p>19. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224160936245.png"></p><p>20. 不需要安装包的小伙伴，可以点击<strong>移至废纸篓</strong>：</p><p><img src="https://source.icode504.com/images/image-20240224161023547.png"></p><h1 id="四、配置MySQL环境变量"><a href="#四、配置MySQL环境变量" class="headerlink" title="四、配置MySQL环境变量"></a>四、配置MySQL环境变量</h1><p>为了后续我们打开终端后直接使用MySQL命令登录数据库，我们需要配置一下环境变量。</p><p>1. 按<kbd>Command</kbd>和<kbd>空格</kbd>，搜索终端并打开。</p><p>2. 在当前目录下创建一个<code>mysql_env.sh</code>文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim mysql_env.sh<br></code></pre></td></tr></table></figure><p>3. 按<kbd>i</kbd>键进入编辑模式，复制下面的内容，在Vim编辑器中鼠标右键粘贴，效果如下图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">MYSQL</span><br>PATH=/usr/local/mysql/bin<br>export PATH<br></code></pre></td></tr></table></figure><blockquote><p>  说明：如果你的MySQL安装在了其他位置，请将第二行等号右面的值改成你的安装路径。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240429232916930.png"></p><p>4. 按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。</p><p>5. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> mysql_env.sh<br></code></pre></td></tr></table></figure><p>6. 执行如下命令登录<code>root</code>用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>此时输入密码不会显示在命令行中，下图界面说明<code>root</code>用户登录成功！</p><p><img src="https://source.icode504.com/images/image-20240429233700930.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装和配置教程（Linux CentOS版）</title>
    <link href="/posts/70.html"/>
    <url>/posts/70.html</url>
    
    <content type="html"><![CDATA[<p>Docker 是一种开源的平台，用于开发、运输和运行应用程序。它通过将应用程序及其依赖项打包在一个可移植的容器中，使得应用程序可以在任何环境中一致地运行。Docker 容器利用了操作系统的虚拟化技术，相比传统的虚拟机更加轻量级、高效。开发人员可以在本地构建和测试容器，然后将其部署到生产环境，确保环境一致性和快速部署。Docker 极大地简化了应用程序的开发和运维流程，提高了工作效率和系统的可扩展性。</p><p>以下是 Linux CentOS 系统环境下 Docker 的安装和配置教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>1. 本文使用的是 CentOS 操作系统安装 Docker，如果需要在虚拟机安装 CentOS，可以点击右侧链接查看教程：<a href="./48.html">点我查看</a></p><p>2. 如果你要安装新版本的 Docker，需要将系统中安装的旧版本 Docker 卸载。执行如下命令卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker \<br>                docker-client \<br>                docker-client-latest \<br>                docker-common \<br>                docker-latest \<br>                docker-latest-logrotate \<br>                docker-logrotate \<br>                docker-engine<br></code></pre></td></tr></table></figure><p>3. 删除以前在 Docker 安装的镜像、容器等文件：Docker 在卸载过程中默认不会删除原来下载的镜像文件，它们默认存储在<code>/var/lib/docker</code>中，如果需要删除这些残留文件，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/lib/docker/<br></code></pre></td></tr></table></figure><h1 id="二、安装-Docker"><a href="#二、安装-Docker" class="headerlink" title="二、安装 Docker"></a>二、安装 Docker</h1><p>接下来我们就可以安装 Docker 了，这里我使用的是 yum 的方式安装 Docker。</p><p>1. 使用 yum 安装<code>yum-utils</code>包，这个包可以提供<code>yum-config-manager</code>工具，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install yum-utils<br></code></pre></td></tr></table></figure><p>等待一段时间后，安装成功：</p><p><img src="https://source.icode504.com/images/image-20240527105817903.png"></p><p>2. 接下来我们使用<code>yum-config-manager</code>命令设置后续 Docker 的下载源，这里我们使用国内的阿里云的下载源，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240527110224870.png"></p><p>3. 安装 Docker，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>4. 等待一段时间后，下方如下提示信息就说明 Docker 安装成功！</p><p><img src="https://source.icode504.com/images/image-20240527112307239.png"></p><h1 id="三、配置镜像源"><a href="#三、配置镜像源" class="headerlink" title="三、配置镜像源"></a>三、配置镜像源</h1><p>以下两种方式任选其一：</p><h2 id="方式一：配置镜像源（可能拉取不了最新版本镜像）"><a href="#方式一：配置镜像源（可能拉取不了最新版本镜像）" class="headerlink" title="方式一：配置镜像源（可能拉取不了最新版本镜像）"></a>方式一：配置镜像源（可能拉取不了最新版本镜像）</h2><blockquote><p>说明：镜像加速器面向个人开发者，仅适用于个人开发场景，<strong>请勿用于商业用途</strong>！</p></blockquote><p>我们使用 Docker 创建容器的时候，首先需要获取镜像，如果本地存在镜像就是用本地的镜像创建容器，如果本地不存在这个镜像，就需要到官方镜像仓库中下载镜像，但是官方镜像国内无法访问（除非你有特殊的方法）。为了解决上述问题，我们需要配置国内镜像加速器，这里我使用的阿里云的镜像加速器，确保后续能顺利拉取镜像。以下是配置叫长城</p><p>1. 打开阿里云官网，注册一个阿里云账号（使用钉钉、支付宝、淘宝登录都 OK，毕竟它们都是一家的）：<a href="https://account.aliyun.com/login/login.htm">点我登录&#x2F;注册</a></p><p>2. 登陆后，在主页面搜索<strong>容器镜像服务</strong>，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240623100827340.png"></p><p>3. 点击<strong>管理控制台</strong>：</p><p><img src="https://source.icode504.com/images/image-20240623100914010.png"></p><p>4. 进入控制台，在左侧菜单栏单机镜像加速器，此时页面中有一给个人的加速器地址，点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240623101441310.png"></p><p>5. 回到命令行界面，我们使用 vim 命令，在<code>/etc/docker</code>目录下创建一个 daemon.json 文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>6. 按<kbd>i</kbd>键进入编辑模式（此时命令行左下角会有一个 INSERT 的提示），编写如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [“”]<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://source.icode504.com/images/image-20240623102231989.png"></p><p>7. 将光标移动到两个中括号内部的双引号中，按<kbd>Shift</kbd><kbd>Insert</kbd>键粘贴前面复制的镜像加速器地址，效果图如下：</p><p><img src="https://source.icode504.com/images/image-20240623102402464.png"></p><p>8. 检查无误后，按<kbd>Esc</kbd>键退出编辑模式，输入<kbd>:wq</kbd>（左下角有提示）并按一下回车保存并退出编辑。</p><p>9. 依次执行如下命令重新加载 daemon 和 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="方式二：通过Github拉取Dockerhub镜像并推送到阿里云"><a href="#方式二：通过Github拉取Dockerhub镜像并推送到阿里云" class="headerlink" title="方式二：通过Github拉取Dockerhub镜像并推送到阿里云"></a>方式二：通过Github拉取Dockerhub镜像并推送到阿里云</h2><p>该方案请点击右侧链接查看具体教程：<a href="./113.html">点我查看</a></p><h1 id="四、Docker-的简单使用"><a href="#四、Docker-的简单使用" class="headerlink" title="四、Docker 的简单使用"></a>四、Docker 的简单使用</h1><p>1. 使用<code>systemctl</code>命令启动 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start docker<br></code></pre></td></tr></table></figure><p>2. 运行<code>hello-world</code>镜像，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run hello-world<br></code></pre></td></tr></table></figure><p>这个命令在执行时，会先拉取<code>hello-world</code>镜像，下载完成后会创建一个容器，此时 Docker 会运行这个容器并在控制台输出结果：</p><p><img src="https://source.icode504.com/images/image-20240527113203614.png"></p><p>3. （可选）如果想让 Docker 开机自启动，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>4. （可选）如果禁用 Docker 开机自启动，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">disable</span> docker<br></code></pre></td></tr></table></figure><p>5. （可选）如果想停止 Docker，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl stop docker<br></code></pre></td></tr></table></figure><h1 id="五、卸载-Docker（可选）"><a href="#五、卸载-Docker（可选）" class="headerlink" title="五、卸载 Docker（可选）"></a>五、卸载 Docker（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 执行如下命令即可卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras<br></code></pre></td></tr></table></figure><p>2. Docker 镜像、容器等文件在卸载过程中不会删除，如果想清理这些文件，可以执行如下命令彻底删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br>sudo <span class="hljs-built_in">rm</span> -rf /var/lib/containerd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>容器化</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js安装、配置教程（Linux通用版）</title>
    <link href="/posts/74.html"/>
    <url>/posts/74.html</url>
    
    <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，使 JavaScript 能够在服务器端运行，它提供了一个事件驱动的非阻塞 I&#x2F;O 模型，使得构建高效、可扩展的网络应用变得更加容易。而 npm（Node Package Manager）是 Node.js 的包管理工具，用于安装、分享、管理 JavaScript 代码包，使开发者能够轻松地将自己的代码与他人的代码集成，并且享受到社区共享的各种功能模块。Node.js 和 npm 的结合使得 JavaScript 开发者能够在服务器端和客户端都使用同一种语言，极大地提高了开发效率和跨平台能力。</p><p>以下是 Linux 环境下 Node.js 的安装教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>1. 需要安装Linux操作系统的小伙伴，可以根据需要点击下方任意一个链接查看安装教程：</p><table><thead><tr><th>Cent OS</th><th>Ubuntu</th><th>Debian</th></tr></thead><tbody><tr><td><a href="./94.html">点我查看</a></td><td><a href="./51.html">点我查看</a></td><td><a href="./52.html">点我查看</a></td></tr></tbody></table><p>2. 本文使用到如下软件，需要安装的小伙伴可以点击对应的链接查看安装教程：</p><table><thead><tr><th>软件</th><th>安装教程</th><th>说明</th></tr></thead><tbody><tr><td>Electerm</td><td><a href="./47.html">点我查看</a></td><td>一款比较好用的通过SSH远程连接Linux的工具，支持Windows&#x2F;macOS以SFTP的方式传输文件</td></tr><tr><td>Neat Download Manager</td><td><a href="./24.html">点我查看</a></td><td>使用此软件下载安装包可以加快下载速度。</td></tr></tbody></table><ol start="3"><li>打开Electerm并连接上Linux服务器，执行如下命令查看当前操作系统信息：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p>这里我使用的是 x86_64 的 Debian 操作系统：</p><p><img src="https://source.icode504.com/images/image-20240611073052595.png"></p><p>4. 下载并安装如下工具：wget、vim、tar</p><blockquote><p>wget 是 Linux 下载文件常用的命令。</p><p>vim 是一款编辑器，里面包含编辑模式、查看模式和命令模式。</p><p>tar 用来解压 tar 类型相关压缩包的命令。</p></blockquote><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget vim tar<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y install wget vim tar<br></code></pre></td></tr></table></figure><h1 id="二、下载-Node-js-安装包"><a href="#二、下载-Node-js-安装包" class="headerlink" title="二、下载 Node.js 安装包"></a>二、下载 Node.js 安装包</h1><p>1. 打开右侧链接地址，进入 Node.js 官方下载链接列表页：<a href="https://nodejs.org/dist/">点我查看</a></p><p>2. 这里我选择 v16.20.2 版本下载，找到这个文件夹，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240610231104421.png"></p><p>3. 根据前面的指令集下载对应的安装包，由于我的 Linux 是 x86_64 指令集，因此需要鼠标点击下图的红色框链接再点击复制链接：</p><p><img src="https://source.icode504.com/images/image-20240611080533882.png"></p><p>4. 在命令行中，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget 上一步复制的链接地址<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240611080811017.png"></p><p>5. 等待一段时间后，下载完成，执行<code>ls</code>文件就可以看到当前目录下存在一个 node.js 的安装包：</p><p><img src="https://source.icode504.com/images/image-20240611081213944.png"></p><p>6. 这里我将压缩包解压到<code>/usr/local</code>目录下，执行如下命令：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">tar -zxvf <span class="hljs-keyword">node</span><span class="hljs-title">-v16</span>.<span class="hljs-number">20.2</span>-linux-x64.tar.gz -C /usr/local<br></code></pre></td></tr></table></figure><p>7. 解压完成，切换到<code>/usr/local</code>目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br></code></pre></td></tr></table></figure><p>8. 执行<code>ls</code>命令可以看到我们刚刚解压到的文件目录：</p><p><img src="https://source.icode504.com/images/image-20240611081956844.png"></p><h1 id="三、设置环境变量"><a href="#三、设置环境变量" class="headerlink" title="三、设置环境变量"></a>三、设置环境变量</h1><p>1. 鼠标<strong>移到</strong>上方的加号位置，找到你现在所连接的服务器，再开启一个窗口：</p><p><img src="https://source.icode504.com/images/image-20240611091759323.png"></p><p>此时有弹出了一个命令行窗口，我们将这个窗口称作窗口 2，原来的窗口称作窗口 1：</p><p><img src="https://source.icode504.com/images/image-20240611092026272.png"></p><p>2. （当前位置：窗口 2）在当前目录下新建一个文件 node_env.sh，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim node_env.sh<br></code></pre></td></tr></table></figure><p>3. 复制如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">NODEJS_HOME</span><br>NODEJS_HOME=/usr/local/node-v16.20.2-linux-x64<br>PATH=$PATH:$NODEJS_HOME/bin<br>export PATH NODEJS_HOME<br></code></pre></td></tr></table></figure><p>4. （当前位置：窗口 2）按<kbd>i</kbd>键进入编辑模式，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴第 4 步的代码，效果如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240611085017634.png"></p><p>5. 切换到窗口 1，进入解压后的文件目录，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> node-v16.20.2-linux-x64/<br></code></pre></td></tr></table></figure><p>6. （当前位置：窗口 1）输入<code>pwd</code>命令查看当前文件所在路径并复制：</p><blockquote><p>说明：鼠标直接选中红色框中的内容，按<kbd>Ctrl</kbd><kbd>C</kbd>复制（或者鼠标右键点击复制也可以）。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240611082219906.png"></p><p>7. （当前位置：窗口 2）将光标移动到第二行，将<code>NODEJS_HOME</code>对应的值替换成第 6 步复制的路径。完成后按一下<kbd>Esc</kbd>键，然后输入<code>:wq</code>保存并退出。</p><p>8. 执行如下命令，让环境变量配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile/node_env.sh<br></code></pre></td></tr></table></figure><p>9. 依次执行<code>node -v</code>和<code>npm -v</code>命令，如果能查看到对应的版本号，就说明上面的环境变量已生效：</p><p><img src="https://source.icode504.com/images/image-20240611085516463.png"></p><h1 id="四、npm-更换镜像源"><a href="#四、npm-更换镜像源" class="headerlink" title="四、npm 更换镜像源"></a>四、npm 更换镜像源</h1><p>Node.js 中包含一个重要模块：npm，它的作用是帮助我们下载项目中的依赖（你可以理解成下载对应的软件包），但是 npm 默认的下载地址在国外，如果使用了默认的下载地址，后续在使用 npm 的过程中下载依赖会非常慢，因此，我们需要将 npm 默认的下载地址改成国内镜像，这里我使用的是淘宝镜像源。</p><p>1. 执行如下命令查看当前<code>npm</code>的下载源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240611085737362.png"></p><p>2. 将镜像源更改成淘宝镜像源，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>3. 再次执行如下命令，镜像源成功修改为淘宝镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240611085952087.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库管理软件DBeaver安装、配置和卸载教程（Windows版）</title>
    <link href="/posts/77.html"/>
    <url>/posts/77.html</url>
    
    <content type="html"><![CDATA[<p>DBeaver是一款通用的数据库管理工具和SQL客户端，适用于开发人员和数据库管理员。它支持多种关系数据库和NoSQL数据库，提供直观的用户界面、高级SQL编辑器、数据可视化工具和数据迁移功能，跨平台运行并支持插件扩展，是管理和分析数据库的强大利器。</p><p>以下是Windows环境下DBeaver安装教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>推荐电脑上安装的软件：</p><table><thead><tr><th>软件名称</th><th>教程链接</th><th>说明</th></tr></thead><tbody><tr><td>MySQL</td><td><a href="./20.html">点我查看</a></td><td>在Windows本地安装MySQL教程，已安装的小伙伴请忽略。</td></tr><tr><td>下载神器Neat Download Manager</td><td><a href="./24.html">点我查看</a></td><td>本文所需要的软件下载源在国外，使用此软件可以加快下载速度。已经安装的小伙伴请直接跳过。</td></tr><tr><td>Github加速访问软件Watt Tookit</td><td><a href="./25.html">点我查看</a></td><td>本文需要下载的软件在Github上，目前国内访问Github访问速度较慢，推荐大家看一下本文教程，可以模仿文中的方式下载安装包</td></tr></tbody></table><h1 id="二、下载DBeaver"><a href="#二、下载DBeaver" class="headerlink" title="二、下载DBeaver"></a>二、下载DBeaver</h1><p>1. 点击右侧连接打开DBeaver官网：<a href="https://github.com/dbeaver/dbeaver/releases">点我查看</a></p><blockquote><p>注意：请确保已经打开了Watt Tookit的Github加速（教程请跳转到第一部分去查看）。加载速度可能会较慢，请耐心等待！</p></blockquote><p>2. 这里我下载的是最新版的24.1.2（截止至2024年7月13日发布的最新版本），向下找到Assets并展开即可看到各个操作系统对应的安装包：</p><p><img src="https://source.icode504.com/images/image-20240713135720470.png"></p><p>3. 找到exe结尾的安装包，鼠标右键，复制链接地址：</p><p><img src="https://source.icode504.com/images/image-20240713135852009.png"></p><p>4. 点击右侧链接打开Github加速站：<a href="https://moeyy.cn/gh-proxy">点我查看</a></p><blockquote><p>说明：如果这个加速网站失效，请到第一部分的Github加速教程中寻找可加速的网站地址！</p></blockquote><p>5. 将前面复制的链接地址粘贴到此处，点击<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140225258.png"></p><p>6. 下载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240713140322465.png"></p><h1 id="三、安装DBeaver"><a href="#三、安装DBeaver" class="headerlink" title="三、安装DBeaver"></a>三、安装DBeaver</h1><p>1. 打开前面下载好的安装包，此时会弹出一个语言选择窗口，按照默认选择<strong>中文（简体）</strong>即可，然后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140522081.png"></p><p>2. 进入欢迎页面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140629386.png"></p><p>3. 许可证协议界面，点击<strong>我接受</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140721087.png"></p><p>4. 选择为那些用户安装DBeaver，这里我选择第一个<strong>For anyone who uses this computer (all users)<strong>（为本机所有用户安装），然后点击</strong>下一步</strong>（需要管理员权限）：</p><p><img src="https://source.icode504.com/images/image-20240713140918366.png"></p><p>5. 此时会再次选择语言，按照第一步选择中文（简体），然后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713141158997.png"></p><p>6. 进入欢迎页面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140629386.png"></p><p>7. 进入许可证协议界面后点击<strong>我接受</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140721087.png"></p><p>8. 选择要安装的组件：如果你不熟悉里面的组件的作用，就按照系统默认即可，然后点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713141654132.png"></p><p>9. 选择安装位置，这里我安装在了D盘（推荐是全英文目录，避免出现不必要的麻烦）：</p><p><img src="https://source.icode504.com/images/image-20240713141909875.png"></p><p><img src="https://source.icode504.com/images/image-20240713142216382.png"></p><p><img src="https://source.icode504.com/images/image-20240713142342949.png"></p><p>10. 点击<strong>安装</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713142432104.png"></p><p>11. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240713142517716.png"></p><p>12. 安装完成，勾选<strong>Create Desktop shortcut</strong>即可在桌面上创建桌面快捷方式，点击<strong>完成</strong>，DBeaver安装完成：</p><p><img src="https://source.icode504.com/images/image-20240713142923438.png"></p><h1 id="四、连接数据库"><a href="#四、连接数据库" class="headerlink" title="四、连接数据库"></a>四、连接数据库</h1><p>1. 在桌面上找到DBeaver，双击打开：</p><p><img src="https://source.icode504.com/images/image-20240713143436878.png"></p><p>2. 此时会弹出一个创建样本数据库的提示，这里选择<strong>否</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713143614282.png"></p><p>3. 此时会弹出一个连接数据库界面，在上方的搜索框中输入你要连接的关系型数据库，这里我要连接MySQL数据库。选中第一个MySQL，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713144145836.png"></p><p>4. 按照下图所示配置数据库连接：</p><p><img src="https://source.icode504.com/images/image-20240713145311611.png"></p><p>5. 初次点击左下角的测试连接，会下载MySQL JDBC驱动文件，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240713144440746.png"></p><p>6. 下载完成后，再次点击左下角的测试连接，如果出现下图的弹窗，就说明MySQL数据库连接成功！点击确认即可：</p><p><img src="https://source.icode504.com/images/image-20240713145507350.png"></p><p>7. 点击右下角的完成，数据库成功连接：</p><p><img src="https://source.icode504.com/images/image-20240713145557976.png"></p><p>8. 接下来我们就可以正常使用MySQL数据库了：</p><p><img src="https://source.icode504.com/images/image-20240713145928196.png"></p><h1 id="五、DBeaver加快下载依赖的速度（推荐）"><a href="#五、DBeaver加快下载依赖的速度（推荐）" class="headerlink" title="五、DBeaver加快下载依赖的速度（推荐）"></a>五、DBeaver加快下载依赖的速度（推荐）</h1><p><a href="https://www.icode504.com/posts/105.html">点我查看</a></p><h1 id="六、卸载DBeaver（可选）"><a href="#六、卸载DBeaver（可选）" class="headerlink" title="六、卸载DBeaver（可选）"></a>六、卸载DBeaver（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到 Geek Uninstaller 卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到DBeaver，<strong>鼠标右键</strong>点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713151956348.png"></p><p>2. 点击<strong>卸载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713152040318.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240713152105862.png"></p><p>4. 卸载完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713152140401.png"></p><p>5. 此时Geek Uninstaller会检查卸载残留，如果没有卸载残留，点击<strong>关闭</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240713152250626.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>DBeaver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库管理软件DBeaver安装、配置和卸载教程（macOS版）</title>
    <link href="/posts/81.html"/>
    <url>/posts/81.html</url>
    
    <content type="html"><![CDATA[<p>DBeaver是一款通用的数据库管理工具和SQL客户端，适用于开发人员和数据库管理员。它支持多种关系数据库和NoSQL数据库，提供直观的用户界面、高级SQL编辑器、数据可视化工具和数据迁移功能，跨平台运行并支持插件扩展，是管理和分析数据库的强大利器。</p><p>以下是macOS环境下DBeaver安装教程：</p><h1 id="一、安装前操作"><a href="#一、安装前操作" class="headerlink" title="一、安装前操作"></a>一、安装前操作</h1><p>推荐电脑上安装的软件：</p><table><thead><tr><th>软件名称</th><th>教程链接</th><th>说明</th></tr></thead><tbody><tr><td>MySQL</td><td><a href="./68.html">点我查看</a></td><td>在macOS本地安装MySQL教程，已安装的小伙伴请忽略。</td></tr><tr><td>下载神器Neat Download Manager</td><td><a href="./24.html">点我查看</a></td><td>本文所需要的软件下载源在国外，使用此软件可以加快下载速度。已经安装的小伙伴请直接跳过。</td></tr><tr><td>Github加速访问软件Watt Tookit</td><td><a href="./80.html">点我查看</a></td><td>本文需要下载的软件在Github上，目前国内访问Github访问速度较慢，推荐大家看一下本文教程，可以模仿文中的方式下载安装包</td></tr></tbody></table><h1 id="二、下载DBeaver"><a href="#二、下载DBeaver" class="headerlink" title="二、下载DBeaver"></a>二、下载DBeaver</h1><p>1. 点击右侧连接打开DBeaver官网：<a href="https://github.com/dbeaver/dbeaver/releases">点我查看</a></p><blockquote><p>注意：请确保已经打开了Watt Tookit的Github加速（教程请跳转到第一部分去查看）。加载速度可能会较慢，请耐心等待！</p></blockquote><p>2. 这里我下载的是最新版的24.1.2（截止至2024年7月20日发布的最新版本），向下找到Assets并展开即可看到各个操作系统对应的安装包：</p><p><img src="https://source.icode504.com/images/image-20240720142359918.png"></p><p>3. 按照上面查看的信息，找到对应的dmg结尾的安装包，鼠标右键，复制链接地址：</p><p><img src="https://source.icode504.com/images/image-20240720142726246.png"></p><p>4. 点击右侧链接打开Github加速站：<a href="https://moeyy.cn/gh-proxy">点我查看</a></p><blockquote><p>说明：如果这个加速网站失效，请到第一部分的Github加速教程中寻找可加速的网站地址！</p></blockquote><p>5. 将前面复制的链接地址粘贴到此处，点击<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240713140225258.png"></p><p>6. 下载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240720142956051.png"></p><h1 id="三、安装DBeaver"><a href="#三、安装DBeaver" class="headerlink" title="三、安装DBeaver"></a>三、安装DBeaver</h1><p>打开下载好的安装包，按照下图所示操作，将DBeaver拖入到应用程序即可完成安装：</p><p><img src="https://source.icode504.com/images/240720002.gif"></p><h1 id="四、连接数据库"><a href="#四、连接数据库" class="headerlink" title="四、连接数据库"></a>四、连接数据库</h1><p>1. 在应用中找到DBeaver并打开：</p><p><img src="https://source.icode504.com/images/image-20240720201756339.png"></p><p>2. 此时会有一个弹窗提示，选择<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720201910026.png"></p><p>3. 初次使用会弹出一个创建样本数据库的提示，这里选择<strong>否</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720202025821.png"></p><p>4. 此时会弹出一个连接数据库界面，在上方的搜索框中输入你要连接的关系型数据库，这里我要连接MySQL数据库。选中第一个MySQL，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720202431054.png"></p><p>5. 按照下图所示配置数据库连接：</p><p><img src="https://source.icode504.com/images/image-20240720203219249.png"></p><p>6. 初次点击左下角的测试连接，点击<strong>下载</strong>，会下载MySQL JDBC驱动文件，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240720203433931.png"></p><p>7. 下载完成后，再次点击左下角的测试连接，如果出现下图的弹窗，就说明MySQL数据库连接成功！点击<strong>确定</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240720203529687.png"></p><p>8. 点击右下角的<strong>完成</strong>，数据库成功连接：</p><p><img src="https://source.icode504.com/images/image-20240720203912319.png"></p><p>9. 数据分享窗口，勾选<strong>Do not share data.<strong>，然后点击右下角</strong>Confirm</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720203829717.png"></p><p>10. 接下来我们就可以正常使用MySQL数据库了：</p><p><img src="https://source.icode504.com/images/image-20240720204119672.png"></p><h1 id="五、DBeaver加快下载依赖的速度（推荐）"><a href="#五、DBeaver加快下载依赖的速度（推荐）" class="headerlink" title="五、DBeaver加快下载依赖的速度（推荐）"></a>五、DBeaver加快下载依赖的速度（推荐）</h1><p><a href="https://www.icode504.com/posts/105.html">点我查看</a></p><h1 id="六、卸载DBeaver（可选）"><a href="#六、卸载DBeaver（可选）" class="headerlink" title="六、卸载DBeaver（可选）"></a>六、卸载DBeaver（可选）</h1><p>打开访达，在左侧找到<strong>应用程序</strong>，找到DBeaver，将其拖入到废纸篓即可完成卸载：</p><p><img src="https://source.icode504.com/images/240720003.gif"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>DBeaver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件包管理器Homebrew安装教程（适用于macOS系统）</title>
    <link href="/posts/82.html"/>
    <url>/posts/82.html</url>
    
    <content type="html"><![CDATA[<p>Homebrew 是一个面向 macOS 和 Linux 的包管理系统，可以轻松地安装、更新和管理软件包。它通过简单的命令行接口，让用户可以快速获取并安装各种开源软件和工具，而不需要复杂的配置过程。Homebrew 的核心理念是让用户能够轻松地管理软件环境，并保持系统的整洁和高效。它的主要优点是使用方便、社区活跃以及广泛的包支持，使其成为开发者和技术爱好者的理想选择。</p><p>以下是 macOS 环境下 Homebrew 的安装教程。本文参考自此文章：<a href="https://zhuanlan.zhihu.com/p/111014448">点我查看原文章</a></p><h1 id="一、安装Homebrew"><a href="#一、安装Homebrew" class="headerlink" title="一、安装Homebrew"></a>一、安装Homebrew</h1><p>1. 执行如下命令同意许可协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo xcodebuild -license<br></code></pre></td></tr></table></figure><p>需要输入密码（默认不在命令行显示）</p><p>查看许可协议后，输入<code>agree</code>，按一下回车<kbd>Return</kbd>：</p><p><img src="https://source.icode504.com/images/image-20240721001448428.png"></p><p>2. 安装Homebrew，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>3. 进入安装界面，输入<strong>1</strong>，通过清华大学下载Homebrew：</p><p><img src="https://source.icode504.com/images/image-20240721001800397.png"></p><p>4. 初次安装的小伙伴输入本机密码（默认不在命令行显示）：</p><p><img src="https://source.icode504.com/images/image-20240721001856160.png"></p><p>5. 此时会有一个检测本机是否安装Homebrew，这里输入<strong>Y</strong>，按一下回车<kbd>Return</kbd>：</p><p><img src="https://source.icode504.com/images/image-20240721002054581.png"></p><p>6. 等待一段时间后，出现下面的提示后，按一下回车键<kbd>Return</kbd>：</p><p><img src="https://source.icode504.com/images/image-20240721002253336.png"></p><p>7. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240721002415491.png"></p><p>8. 等待一段时间后，Homebrew安装完成，接下来我们需要配置国内软件下载源，这里输入<strong>5</strong>，使用阿里国内镜像源下载软件包，并按一下回车<kbd>Return</kbd>：</p><p><img src="https://source.icode504.com/images/image-20240721002617846.png"></p><p>9. 配置中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240721002728440.png"></p><p>10. 出现下面的提示后，说明Homebrew安装配置成功，重启终端：</p><p><img src="https://source.icode504.com/images/image-20240721002838422.png"></p><h1 id="二、卸载Homebrew（可选）"><a href="#二、卸载Homebrew（可选）" class="headerlink" title="二、卸载Homebrew（可选）"></a>二、卸载Homebrew（可选）</h1><p>卸载Homebrew十分简单，只需要执行如下命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>macOS</category>
      
      <category>软件包管理工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis单机版安装教程（Linux版）</title>
    <link href="/posts/83.html"/>
    <url>/posts/83.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><p>Redis是一种开源的、内存中的键值存储数据库，通常用作缓存、消息代理和持久化存储。它支持丰富的数据结构，如字符串、哈希、列表、集合和有序集合等，能够高效地执行各种操作。Redis具有极高的性能，常被用于需要快速数据读写的场景，同时提供持久化选项，可以将数据定期保存到磁盘上，以确保数据的持久性。其丰富的功能和灵活性使其在分布式系统和实时应用中非常受欢迎。</p><p>以下是Redis的安装教程，两种方式任选其一：</p><h1 id="方式一：源码安装"><a href="#方式一：源码安装" class="headerlink" title="方式一：源码安装"></a>方式一：源码安装</h1><h2 id="一、准备操作"><a href="#一、准备操作" class="headerlink" title="一、准备操作"></a>一、准备操作</h2><p>1. 请根据自己的操作系统，安装以下软件，如果里面的软件你已经安装可以直接跳过：</p><table><thead><tr><th></th><th align="center">Windows</th><th align="center">macOS</th><th>说明</th></tr></thead><tbody><tr><td>解决Github国内无法访问问题</td><td align="center"><a href="./25.html">点我查看</a></td><td align="center"><a href="./80.html">点我查看</a></td><td>本文需要下载的软件在Github上，目前国内访问Github访问速度较慢，推荐大家看一下本文教程，可以模仿文中的方式下载安装包</td></tr><tr><td>Neat Download Manager</td><td align="center"><a href="./24.html">点我查看</a></td><td align="center"><a href="./24.html">点我查看</a></td><td>本文所需要的软件下载源在国外，使用此软件可以加快下载速度。</td></tr><tr><td>Electerm</td><td align="center"><a href="./47.html">点我查看</a></td><td align="center"><a href="./99.html">点我查看</a></td><td>一款比较好用的通过SSH远程连接Linux的工具，支持Windows&#x2F;macOS以SFTP的方式传输文件</td></tr></tbody></table><p>2. 打开Electerm并连接Linux服务器后，执行如下命令查看操作系统信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p>这里我使用的是Debian操作系统：</p><p><img src="https://source.icode504.com/images/image-20240725214016476.png"></p><p>3. 根据所在的操作系统，安装如下的依赖：</p><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc-c++ make vim<br></code></pre></td></tr></table></figure><ul><li>Ubuntu&#x2F;Debian</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt -y install gcc-c++ make vim<br></code></pre></td></tr></table></figure><h2 id="二、下载Redis安装包"><a href="#二、下载Redis安装包" class="headerlink" title="二、下载Redis安装包"></a>二、下载Redis安装包</h2><p>1. 打开Redis官方Github仓库：<a href="https://github.com/redis/redis/tags">点我查看</a></p><p>2. 这里我下载的是6.2.14版本的Redis，点击进入：</p><p><img src="https://source.icode504.com/images/image-20240722215142941.png"></p><p>3. 在下方Assets中鼠标右键点击<code>.tar.gz</code>结尾的安装包，然后点击<strong>复制链接地址</strong>：</p><p><img src="https://source.icode504.com/images/image-20240722215323382.png"></p><p>4. 点击右侧链接打开Github加速站：<a href="https://moeyy.cn/gh-proxy">点我查看</a></p><blockquote><p>说明：如果这个加速网站失效，请到第一部分《准备操作》中的Github加速教程中寻找可加速的网站地址！</p></blockquote><p>5. 将前面复制的链接地址粘贴到此处，点击<strong>下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20240722215812500.png"></p><p>6. 打开Electerm并连接到远程Linux服务器，点击左上角的SFTP，在左侧找到本地下载好的Redis安装包，</p><p><img src="https://source.icode504.com/images/image-20240722220910319.png"></p><p><img src="https://source.icode504.com/images/image-20240722221051181.png"></p><p>7. 按照下图所示操作，将Redis安装包传输到Linux端：</p><p><img src="https://source.icode504.com/images/240722001.gif"></p><p>8. 此时Linux端有一个Redis安装包，我们再点击左上角SSH，返回命令行：</p><p><img src="https://source.icode504.com/images/image-20240722221409176.png"></p><p>9. 执行<code>ls</code>命令即可查看当前目录下的文件，此时我们发现Redis安装包也在此目录下：</p><p><img src="https://source.icode504.com/images/image-20240722221541947.png"></p><p>10. 解压这个安装包，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf redis-6.2.14.tar.gz<br></code></pre></td></tr></table></figure><p>11. 在执行一遍<code>ls</code>命令，可以看到解压后的文件夹：</p><p><img src="https://source.icode504.com/images/image-20240722221732124.png"></p><p>12. 进入<code>redis-6.2.14</code>目录下，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> redis-6.2.14<br></code></pre></td></tr></table></figure><p>13. 执行如下命令，对源码进行编译和安装，这一过程消耗的时间教程，请耐心等待（预计需要5分钟）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>14. 出现下面的提示后，说明Redis已经安装成功：</p><p><img src="https://source.icode504.com/images/image-20240725100221971.png"></p><h2 id="三、修改Redis配置文件"><a href="#三、修改Redis配置文件" class="headerlink" title="三、修改Redis配置文件"></a>三、修改Redis配置文件</h2><p>1. （当前位置：解压后的redis文件夹）执行<code>ls</code>命令，我们可以看到当前文件夹下有一个<code>redis.conf</code>文件，这个文件是Redis的配置文件，我们需要将其复制到Redis安装位置下：</p><p><img src="https://source.icode504.com/images/image-20240725100556725.png"></p><p>2. Redis的安装位置在<code>/usr/local/bin</code>目录下，我们需要切到这个目录下，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/lobal/bin<br></code></pre></td></tr></table></figure><p>3. （当前位置：Redis安装目录）在这个目录下创建一个文件夹<code>redis-config</code>用于存放Redis配置文件，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> redis-config<br></code></pre></td></tr></table></figure><p>4. 将配置文件redis.conf复制到redis-config目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/redis-6.2.14/redis.conf /usr/local/bin/redis-config/<br></code></pre></td></tr></table></figure><p>5. 使用vim命令修改复制的redis.conf文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim redis-config/redis.conf<br></code></pre></td></tr></table></figure><p>6. 执行如下命令并回车显示行号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> nu<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240725111632228.png"></p><p>7. 执行如下命令并按一下回车（按<kbd>N</kbd>键查找下一个，按<kbd>P</kbd>查找上一个），查找Redis后台运行相关配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/daemonize<br></code></pre></td></tr></table></figure><p>在259行，Redis默认是不能后台运行，即<code>damonize no</code>，我们需要将no改为yes，将其更改为能后台运行：</p><p><img src="https://source.icode504.com/images/image-20240725112834580.png"></p><p>按<kbd>i</kbd>进入编辑模式（左下角会有INSERT提示），将这个地方改成yes（如下图），修改完成后按一下<kbd>Esc</kbd>键退出编辑模式：</p><p><img src="https://source.icode504.com/images/image-20240725113130945.png"></p><p>8. 执行如下命令并按一下回车（按<kbd>N</kbd>键查找下一个，按<kbd>P</kbd>查找上一个），查找Redis保护模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/protected-mode<br></code></pre></td></tr></table></figure><p>在94行，Redis默认开启了保护模式，即<code>protect-mode yes</code>，我们需要将yes改为no，保证后续其他的客户端也能连接到Redis：</p><p><img src="https://source.icode504.com/images/image-20240725113635641.png"></p><p>按<kbd>i</kbd>进入编辑模式（左下角会有INSERT提示），将这个地方改成no（如下图），修改完成后按一下<kbd>Esc</kbd>键退出编辑模式：</p><p><img src="https://source.icode504.com/images/image-20240725114022138.png"></p><p>9. 执行如下命令并按一下回车（按<kbd>N</kbd>键查找下一个，按<kbd>P</kbd>查找上一个），查看Redis所绑定的ip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bind<br></code></pre></td></tr></table></figure><p>在75行，Redis默认只允许本机访问，其他IP在访问都会被拒绝，这里为了演示，我将第75行的代码注释掉，让所有IP都可以访问到Redis服务端：</p><blockquote><p>说明：上述做法只适合学习环境中使用。在生产环境中，bind后面只能填写一个或多个可以访问到redis的IP地址。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240725114711153.png"></p><p>按<kbd>i</kbd>进入编辑模式（左下角会有INSERT提示），将第75号注掉，修改完成后按一下<kbd>Esc</kbd>键退出编辑模式：</p><p><img src="https://source.icode504.com/images/image-20240725115136412.png"></p><p>10. 执行如下命令并按一下回车（按<kbd>N</kbd>键查找下一个，按<kbd>P</kbd>查找上一个），查看访问Redis是否需要密码访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/requirepass<br></code></pre></td></tr></table></figure><p>在903行，这段配置默认是被注掉的，说明不需要密码也可以访问到Redis服务器。处理安全考虑，我们需要为Redis访问设置密码：</p><p><img src="https://source.icode504.com/images/image-20240725115520187.png"></p><p>按<kbd>i</kbd>进入编辑模式（左下角会有INSERT提示），将第903号注释去掉，为了方便记忆，我将密码设置为123456，修改完成后按一下<kbd>Esc</kbd>键退出编辑模式：</p><p><img src="https://source.icode504.com/images/image-20240725115705245.png"></p><p>11. 上述配置完成后，输入<kbd>:wq</kbd>命令保存并退出。</p><h2 id="四、启动Redis"><a href="#四、启动Redis" class="headerlink" title="四、启动Redis"></a>四、启动Redis</h2><p>1. （当前位置：Redis安装目录<code>/usr/local/bin</code>）启动Redis服务端（后台启动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server redis-config/redis.conf<br></code></pre></td></tr></table></figure><p>此时命令行没有提示说明Redis启动成功，那么我们如何验证Redis是否在后台正常运行呢？使用如下命令即可查看Redis服务端是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef |grep redis|grep -v grep<br></code></pre></td></tr></table></figure><p>这里我的Redis正常运行，使用6379号端口（Redis默认端口）：</p><p><img src="https://source.icode504.com/images/image-20240725172804006.png"></p><p>2. 连接到Redis服务端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli<br></code></pre></td></tr></table></figure><p>此时命令提示变成了<code>127.0.0.1:6379</code>：</p><p><img src="https://source.icode504.com/images/image-20240725173225493.png"></p><p>3. 由于前面我们设置了密码，我们需要使用下面的命令去登录且输入前面的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">auth 前面设置的密码<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240725173428604.png"></p><p>4. 执行如下命令，如果返回结果是PONG，就说明我们的Redis可以正常使用了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PING<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20240725173708679.png"></p><p>5. 退出Redis：使用下面任意一个命令都可以退出Redis客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>quit<br></code></pre></td></tr></table></figure><h2 id="五、关闭Redis"><a href="#五、关闭Redis" class="headerlink" title="五、关闭Redis"></a>五、关闭Redis</h2><p>1. 关闭单个的客户端命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -a 密码 shutdown<br></code></pre></td></tr></table></figure><p>2. 关闭6379端口下的所有客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli -p 6379 shutdown<br></code></pre></td></tr></table></figure><h2 id="六、卸载Redis（可选）"><a href="#六、卸载Redis（可选）" class="headerlink" title="六、卸载Redis（可选）"></a>六、卸载Redis（可选）</h2><p>1. 停止Redis服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli shutdown<br></code></pre></td></tr></table></figure><p>2. 删除<code>/usr/lobal/bin</code>目录下的所有和redis相关的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /usr/lobal/bin/redis-*<br></code></pre></td></tr></table></figure><h1 id="方式二：Docker方式安装并启动Redis"><a href="#方式二：Docker方式安装并启动Redis" class="headerlink" title="方式二：Docker方式安装并启动Redis"></a>方式二：Docker方式安装并启动Redis</h1><p>请确保电脑上已经安装了Docker，需要安装Docker的小伙伴根据自己的操作系统去安装Docker：</p><table><thead><tr><th></th><th align="center">CentOS</th><th align="center">Ubuntu&#x2F;Debian</th></tr></thead><tbody><tr><td>Docker安装教程</td><td align="center"><a href="./94.html">点我查看</a></td><td align="center"><a href="./75.html">点我查看</a></td></tr></tbody></table><p>这里我使用的是Redis 6.0.10版本。</p><p>1. 拉取Redis镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis:6.0.10<br></code></pre></td></tr></table></figure><p>2. 创建一个文件目录，用来存储redis配置文件，这里我创建了<code>/opt/redis/conf</code>目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/redis/conf<br></code></pre></td></tr></table></figure><p>3. 下载Redis配置文件到上面的目录中，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -P /opt/redis/conf/ https://source.icode504.com/data/conf/redis/redis.conf<br></code></pre></td></tr></table></figure><p>这个配置文件中一共修改了4个地方：</p><ul><li>将第259行的修改为可以后台运行<code>daemonize yes</code>；</li><li>第94行的保护模式<code>protect-mode</code>的值改为了no；</li><li>将第75行默认只能本机访问的<code>bind 127.0.0.1 -::1</code>注释掉，改成所有IP都可以访问Redis；</li><li>第903行访问Redis需要输入密码，默认是123456</li></ul><p>4. 根据第1步拉取的镜像创建Redis容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 6379:6379 -d\<br> --privileged=<span class="hljs-literal">true</span>\<br> -v /opt/redis/conf/redis.conf:/etc/redis/redis.conf\<br> -v /opt/redis/data:/data\<br> --name redis\<br> redis:6.0.10<br></code></pre></td></tr></table></figure><p>5. 查看所有容器的运行情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure><p>此时我们发现redis正常运行：</p><p><img src="https://source.icode504.com/images/image-20240725213246978.png"></p><p>6. 进入到容器（<code>/bin/bash</code>命令行方式），执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it redis /bin/bash<br></code></pre></td></tr></table></figure><p>7. 此时我们进入了Redis容器的内部，接下来我们来既可以使用客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-cli<br></code></pre></td></tr></table></figure><p>此时左侧提示变为<code>127.0.0.1:6379</code>：</p><p><img src="https://source.icode504.com/images/image-20240725222722661.png"></p><p>8. 执行如下命令，如果返回结果是PONG，就说明我们的Redis可以正常使用了：</p><p><img src="https://source.icode504.com/images/image-20240725173708679.png"></p><p>9. 退出Redis客户端，执行如下任意一个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br>quit<br></code></pre></td></tr></table></figure><p>10. 退出当前Docker容器，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Linux</category>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依环境部署教程</title>
    <link href="/posts/102.html"/>
    <url>/posts/102.html</url>
    
    <content type="html"><![CDATA[<p>官网介绍：RuoYi 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf、Bootstrap），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、通知公告等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p><p>以下是若以框架环境部署教程：</p><h1 id="第一部分-准备操作"><a href="#第一部分-准备操作" class="headerlink" title="第一部分 准备操作"></a>第一部分 准备操作</h1><p>根据自己的操作系统安装如下软件：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">系统版本要求</th></tr></thead><tbody><tr><td align="center">JDK 8</td><td align="center"><a href="https://www.icode504.com/posts/1.html">点我查看</a></td><td align="center"><a href="https://www.icode504.com/posts/78.html">点我查看</a></td><td align="center">JDK &gt;&#x3D; 8</td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="https://www.icode504.com/posts/10.html">点我查看</a></td><td align="center"><a href="https://www.icode504.com/posts/79.html">点我查看</a></td><td align="center">无版本要求</td></tr><tr><td align="center">Maven</td><td align="center"><a href="https://www.icode504.com/posts/19.html">点我查看</a></td><td align="center"><a href="https://www.icode504.com/posts/96.html">点我查看</a></td><td align="center">Maven &gt;&#x3D; 3.0</td></tr><tr><td align="center">MySQL</td><td align="center"><a href="https://www.icode504.com/posts/18.html">点我查看</a></td><td align="center"><a href="https://www.icode504.com/posts/68.html">点我查看</a></td><td align="center">MySQL &gt;&#x3D; 5.7</td></tr><tr><td align="center">DBeaver</td><td align="center"><a href="https://www.icode504.com/posts/77.html">点我查看</a></td><td align="center"><a href="https://www.icode504.com/posts/81.html">点我查看</a></td><td align="center">无版本要求</td></tr><tr><td align="center">Git</td><td align="center"><a href="https://www.icode504.com/posts/69.html">点我查看</a></td><td align="center">系统默认已安装</td><td align="center">无版本要求</td></tr></tbody></table><h1 id="第二部分-拉取若依代码"><a href="#第二部分-拉取若依代码" class="headerlink" title="第二部分 拉取若依代码"></a>第二部分 拉取若依代码</h1><p>1. 打开文件夹，找到一个你熟悉的位置，鼠标右键点击<strong>Git Bash Here</strong>，打开Git命令行窗口：</p><p><img src="https://source.icode504.com/images/image-20240612090244663.png"></p><p>2. 使用Git拉取若依代码，以下两种方式任选其一：</p><ul><li>国内用户建议在Gitee上拉取若依代码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/y_project/RuoYi.git<br></code></pre></td></tr></table></figure><ul><li>如果你已经有Gitee账号（没有的小伙伴可以注册一个）并对SSH Key做了配置，可以执行如下命令拉取代码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:y_project/RuoYi.git<br></code></pre></td></tr></table></figure><p>3. 在Git命令行中，按<kbd>Shift</kbd>和<kbd>Insert</kbd>键粘贴上一步复制的命令：</p><blockquote><p>笔记本用户可能还需要按<kbd>Fn</kbd>键，因为你的<kbd>Insert</kbd>键可能会被占用。</p></blockquote><p><img src="https://source.icode504.com/images/image-81c9da5d1dbcdc180b47aa37dc547baa.png"></p><p>4. 代码拉取中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-a55841fcb49e28caf7e622555d2f9de4.png"></p><p>5. 拉取完成，此时关闭Git命令行窗口，我们发现此时有一个RuoYi的文件夹，点击进入：</p><p><img src="https://source.icode504.com/images/image-8d029f12967a66dc344d8f3c713bc093.png"></p><p>6. 点击上方路径，鼠标右键，点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-d95e42a5b5fe833185c55a48613cd408.png"></p><h1 id="第三部分-加载并启动项目"><a href="#第三部分-加载并启动项目" class="headerlink" title="第三部分 加载并启动项目"></a>第三部分 加载并启动项目</h1><h2 id="3-1-Intellij-IDEA导入后端项目"><a href="#3-1-Intellij-IDEA导入后端项目" class="headerlink" title="3.1 Intellij IDEA导入后端项目"></a>3.1 Intellij IDEA导入后端项目</h2><p>1. 打开Intellij IDEA，点击左上角File，点击Open：</p><p><img src="https://source.icode504.com/images/image-20240612093338341.png"></p><p>2. 此时会弹出一个文件路径，将上一部分复制的文件路径，粘贴到上面的文件路径框中，完成后点击<strong>OK</strong>：</p><p><img src="https://source.icode504.com/images/image-12656211ac3229e289a7eb3687c06f80.png"></p><p>3. 此时会加载项目。按<kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>S</kbd>，进入设置界面，按照下图所示找到Maven并进行配置：</p><p><img src="https://source.icode504.com/images/image-20240612094117863.png"></p><p>4. （未出现下面情况的可以跳过这一步）导入后如果你的Maven项目也是下图这样，鼠标右键点击pom.xml，然后点击Add as Maven Project，加载Maven项目：</p><blockquote><p>说明：如果你的IDEA没有侧边栏，如下图所示，点击左下角的图标即可显示侧边栏菜单。</p></blockquote><p><img src="https://source.icode504.com/images/image-20240615141217194.png"></p><p>5. 加载过程中会下载很多的依赖，需要保证网络畅通。等待一段时间后，Maven项目加载成功，此时IDEA左侧文件夹目录变成了模块图标，右侧Maven菜单中也存在对应的模块：</p><p><img src="https://source.icode504.com/images/image-5b081eb2748e01a177f3ec4330596026.png"></p><h2 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2 数据库操作"></a>3.2 数据库操作</h2><p>1. 打开DBeaver，按照下图所示连接数据库：</p><p><img src="https://source.icode504.com/images/image-20240720215317528.png"></p><p><img src="https://source.icode504.com/images/image-20240713145311611.png"></p><p>2. 鼠标右键选中数据库，鼠标右键点击<strong>新建数据库</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720215815009.png"></p><p>3. 这里我将数据库命名为<code>ruoyi</code>，字符集是<strong>utf8mb4</strong>，排序规则<strong>utf8mb4_0900_ai_ci</strong>，完成后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720215926863.png"></p><p>4. 打开IDEA，在左侧找到sql文件夹，选中<code>ry_xxx.sql</code>，按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>C</kbd>，复制文件所在路径：</p><p><img src="https://source.icode504.com/images/image-bff0f0d9ff6ce356c30bf4a0b13d7c85.png"></p><p>5. 打开DBeaver，在左侧找到并选中刚刚创建好的数据库，鼠标右键点击<strong>工具</strong>，选择<strong>执行脚本</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720222126116.png"></p><p>6. 按照下图所示完成SQL导入操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">--default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-7ec695c0b64d9c4622d3b6da361c1a2b.png"></p><p>如果出现这个窗口提示，选择<strong>是</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720223047365.png"></p><p>5. 导入完成，点击右下角<strong>取消</strong>：</p><p><img src="https://source.icode504.com/images/image-20240720223144515.png"></p><h2 id="3-3-启动项目"><a href="#3-3-启动项目" class="headerlink" title="3.3 启动项目"></a>3.3 启动项目</h2><p>1. 打开IDEA，按照下图所示操作找到application-druid.yml配置文件：</p><p><img src="https://source.icode504.com/images/image-f63fce31e7346faf7f1aec80cde26107.png"></p><p>2. 双击打开application-druid.yml，第九行数据库名称改为ruoyi；第10行用户名填写root即可，第11行密码是MySQL的root用户密码，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240612102449230.png"></p><p>3. 点击右上角的Debug图标，以调试的方式启动：</p><p><img src="https://source.icode504.com/images/image-20240612102553143.png"></p><p>4. 如果控制台出现如下图所示内容，说明若依后端项目启动成功！</p><p><img src="https://source.icode504.com/images/image-20240612102816451.png"></p><blockquote><p>（正常启动的小伙伴请忽略这部分内容）如果你在启动时报错，出现如下错误信息：</p><p><img src="https://source.icode504.com/images/image-e0a622632e9b61fc2641bbe47e5dc4f6.png"></p><p>打开application.yml，找到服务器端口，将其改为其他端口，为了方便展示，我将其改为8888：</p><p><img src="https://source.icode504.com/images/image-651763bafc9cd8f35b346d5015ee885e.png"></p><p>重新启动就不会报错啦：</p><p><img src="https://source.icode504.com/images/image-a6ee86fc3d4623839e9abca5d14e36d6.png"></p></blockquote><p>5. 打开浏览器，在上方搜索框中输入<code>localhost</code>即可访问：</p><blockquote><p>如果你修改了服务端口，访问地址是<code>localhost:端口号</code>，这里我将端口号修改成了8888，因此访问地址是<code>localhost:8888</code></p></blockquote><p><img src="https://source.icode504.com/images/image-a51527f3db133518442168ea9c89d9e5.png"></p><p>6. 默认用户名是<code>admin</code>，密码<code>admin123</code>，验证码需要按照图片计算，完成后点击<strong>登录</strong>：</p><p><img src="https://source.icode504.com/images/image-4ded7c16044b758eec3ee62ec0519c23.png"></p><p>7. 进入主界面，<code>admin</code>用户登录成功！</p><p><img src="https://source.icode504.com/images/image-88cbb6a61a3aa28beed16a497b632f6d.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>开源框架</category>
      
      <category>若依</category>
      
      <category>框架配置和启动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开源</tag>
      
      <tag>若依</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据类型之位图Bitmap</title>
    <link href="/posts/103.html"/>
    <url>/posts/103.html</url>
    
    <content type="html"><![CDATA[<p>想学习更多Redis相关知识，请点击右侧链接查看Redis学习笔记：<a href="./90.html">点我查看</a></p><h1 id="一、Redis位图（Bitmap）介绍"><a href="#一、Redis位图（Bitmap）介绍" class="headerlink" title="一、Redis位图（Bitmap）介绍"></a>一、Redis位图（Bitmap）介绍</h1><p>在正式讲解位图的概念之前，我们先来简单介绍一下位图中“位”是什么。</p><p>位（Bit，也称作比特）是计算机存储数据的最小单位，由二进制的0或1组成。</p><p>字节是一个由8个“位”的组合，一个字节可以表示256种不同的值（从00000000到11111111）。一个字节通常表示一个字符，例如：字母、数字、符号等。在ASCII编码中，每个字符通常使用1个字节表示。</p><p>“位”和字节之间的换算关系：</p><p>$$<br>1byte &#x3D; 8bit<br>$$</p><p>Redis位图（Bitmap）是一种基于字符串（String）数据类型的操作方式，实际上是用二进制位（bit）来存储和操作数据。虽然位图在底层存储上只是普通的字符串，但我们可以将其视为超大的二进制数组：</p><p><img src="https://source.icode504.com/images/image-dabcb2bf7093754cec3ea51080c79403.jpg"></p><p>为什么说位图本质上是字符串，我们可以使用Redis命令证明：</p><p><img src="https://source.icode504.com/images/image-e4611aa6ea531f79dba0cbd5902d9b40.png"></p><p>应用场景：</p><ul><li>签到打卡：假设一个月有31天，你可以为每个用户分配31个bit（位），1代表当天签到，0代表没有签到。</li></ul><p><img src="https://source.icode504.com/images/image-654615f1d1ef95c5dee6401f62465325.png" alt="统计签到记录"></p><ul><li>在线状态记录：使用位图可以用来记录每个用户的在线状态。假设一个网站有100万用户，可以使用位图来记录他们是否在线（在线就将对应的位设置为1，不在线将对应的位设置0），作为网站管理员，我们可以统计当前在线人数。</li></ul><p><img src="https://source.icode504.com/images/image-dc481ad91bf8c7384dfb4c568af0318a.png" alt="统计在线观看人数"></p><ul><li>活动参与统计：可以使用位图记录用户是否参与过活动（例如：投票、抽奖等）。通过位图，可以快速判断某个用户是否参与。</li></ul><p><img src="https://source.icode504.com/images/image-f76c9d0eb67c5785fe2c5ea9422e4b4f.png" alt="抽奖活动统计"></p><h1 id="二、Redis位图（Bitmap）相关命令"><a href="#二、Redis位图（Bitmap）相关命令" class="headerlink" title="二、Redis位图（Bitmap）相关命令"></a>二、Redis位图（Bitmap）相关命令</h1><p>1. 给指定的key第offset位赋值为value：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SETBIT key offset value<br></code></pre></td></tr></table></figure><p>其中value对应的值只能是二进制的0和1。</p><p>该命令默认的返回值也是0和1。</p><p><img src="https://source.icode504.com/images/image-1f163e603ad120d199d31d2dc82f1c4a.png"></p><p>这里解释一下为什么使用SETBIT命令时，返回0或1。这里我已上图中<code>SETBIT myBitmap 3 1</code>为例：</p><p>当我们在执行<code>SETBIT myBitmap 3 1</code>命令时，Redis会检查<code>myBitmap</code>的第3位（即offset &#x3D; 3的位置）对应的值。如果符合以下任意一种情况，Redis会将该位置的默认值设置为0：</p><ul><li>当前位之前从未设置过值；</li><li>对应的key不存在；</li></ul><p>显然，在初次执行上述命令时，Redis中还不存在名为<code>myBitmap</code>的key，此时该位置的值默认是0。在执行SETBIT以后，Redis会将该位置的值设置为1，并返回执行SETBIT之前该位置对应的值（即0）.</p><p>下面的动画演示这一过程：</p><p><img src="https://source.icode504.com/images/image-f48f6c43eb534829f1fc7a4148c88d76.gif"></p><p>2. 获取当前key第offset位的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GETBIT key offset<br></code></pre></td></tr></table></figure><p>如果当前offset位置已经设置过值，使用GETBIT命令就可以获取到值（0或1）。如果当前位置没有设置过值，使用GETBIT命令得到的值是0。</p><p><img src="https://source.icode504.com/images/image-fde3a531193ba741599e34af0e399607.png"></p><p>3. 获取当前key在某个offset区间中值为1的数量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BITCOUNT key [start end [BYTE | BIT]]<br></code></pre></td></tr></table></figure><p>以下是命令各个参数的相关说明：</p><ul><li><code>start</code>（可选）：统计的起始位置，可以是负数表示从末尾开始计算。</li><li><code>end</code>（可选）：统计的结束位置，同样可以是负数。</li><li><code>BYTE</code>（可选）：如果指定，<code>start</code>和<code>end</code>参数以字节为单位（默认）。</li><li><code>BIT</code>（可选）：如果指定，<code>start</code>和 <code>end</code>参数以位为单位。</li></ul><p><img src="https://source.icode504.com/images/image-5fe547630f342c88caa49f422b575949.png"></p><p>4. 对不同的二进制存储数据进行位运算（AND&#x2F;OR&#x2F;NOT&#x2F;XOR）并存储到destkey中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BITOP &lt;AND | OR | NOT | XOR&gt; destkey key [key ...]<br></code></pre></td></tr></table></figure><p>AND是与运算，OR是或运算、NOT是非运算，XOR是异或运算，具体的计算方法详见这篇文章：<a href="https://www.icode504.com/posts/7.html#%E5%9B%9B%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF%EF%BC%89">点我查看</a></p><p>其中NOT运算比较特殊，因为它只能和一个key进行“非运算”操作。</p><p>一直ASCII码表中存储如下几个字符相关信息：</p><table><thead><tr><th align="center">字符</th><th>二进制表示</th><th align="center">十进制表示</th></tr></thead><tbody><tr><td align="center">a</td><td>01100001</td><td align="center">97</td></tr><tr><td align="center">b</td><td>01100010</td><td align="center">98</td></tr></tbody></table><p><img src="https://source.icode504.com/images/image-ea7b3ac5ee1f3a59ed48eb6537c01fcb.png"></p><p>以下是二进制运算过程：</p><p><img src="https://source.icode504.com/images/image-34bdab71e94c6dafcd6e9c2ab3470bc7.png"></p><p>5. 获取位图在内存中的存储大小：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">STRLEN key<br></code></pre></td></tr></table></figure><p>前面我们提到过，位图本质上是一个字符串，1个字符存储大小是1个字节，1个字节&#x3D;8位：</p><p><img src="https://source.icode504.com/images/image-34bfe8d676b2f1d97a92308998b90087.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>非关系型数据库（NoSQL）</category>
      
      <category>Redis</category>
      
      <category>Redis数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>数据库</tag>
      
      <tag>非关系型数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse安装配置、卸载教程（Windows版）</title>
    <link href="/posts/30.html"/>
    <url>/posts/30.html</url>
    
    <content type="html"><![CDATA[<p>Eclipse是一个开放源代码的集成开发环境（IDE），最初由IBM公司开发，现在由Eclipse基金会负责维护。它是一个跨平台的工具，可以用于开发多种编程语言，如Java、C&#x2F;C++、Python、PHP、Rust等。</p><p>Eclipse提供了一个可扩展的架构，允许开发者通过安装插件来扩展其功能，因此它被广泛用于各种软件开发项目，包括企业级应用、移动应用、Web应用等。Eclipse的核心功能包括代码编辑器、调试器、版本控制系统集成（如Git）、构建工具集成（如Maven、Gradle）、项目管理工具等。</p><p>Eclipse包含如下特点：</p><ol><li><strong>插件架构：</strong> Eclipse的插件架构使得开发者可以根据需要灵活地扩展IDE的功能，这使得Eclipse适用于多种开发场景。</li><li><strong>跨平台性：</strong> Eclipse可以在多个操作系统上运行，包括Windows、MacOS和Linux，这使得开发者可以在不同的平台上使用相同的开发工具。</li><li><strong>开源：</strong> Eclipse是开源的，这意味着任何人都可以查看其源代码、修改和定制它，以满足自己的需求。</li><li><strong>社区支持：</strong> Eclipse拥有一个庞大的用户和开发者社区，这意味着可以轻松地找到支持、插件和解决方案。</li></ol><p>接下来为大家介绍一下Windows环境下Eclipse的安装：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑本机安装了JDK，没有安装的小伙伴，请点击下方任意一个链接查看安装教程（这里我安装的是JDK 8版本的）：</p><table><thead><tr><th align="center"><a href="./1.html">JDK 8安装教程</a></th><th align="center"><a href="./28.html">JDK 11安装教程</a></th><th align="center"><a href="./26.html">JDK 17 安装教程</a></th></tr></thead></table><p>JDK安装完成后，按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入控制台，输入<code>java -version</code>，如果出现如下内容，就说明JDK已经安装成功了。这里我安装的是JDK 8：</p><p><img src="https://source.icode504.com/images/image-20230314140629530.png"></p><p>本文后续内容使用NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p><h1 id="二、下载安装Eclipse"><a href="#二、下载安装Eclipse" class="headerlink" title="二、下载安装Eclipse"></a>二、下载安装Eclipse</h1><p>1. 根据电脑上安装的JDK版本，选择要安装的Eclipse版本。以下是Eclipse所需最低JDK版本：</p><table><thead><tr><th>Eclipse版本</th><th>所需JDK版本</th></tr></thead><tbody><tr><td>2020-06及之前的版本</td><td>JDK 8&#x2F;11&#x2F;17</td></tr><tr><td>2020-09至2022-06之前的版本</td><td>JDK 11&#x2F;17</td></tr><tr><td>2022-09及之后的版本</td><td>JDK 17</td></tr></tbody></table><p>2. <a href="https://www.eclipse.org/downloads/packages/release">点我进入Eclipse官网下载列表</a>。由于我电脑上安装的是JDK 8，我需要选择2020-06及之前的版本，这里我选择2020-06版本的Eclipse下载：</p><p><img src="https://source.icode504.com/images/image-20240111145726978.png"></p><p>3. 找到<strong>Eclipse IDE for Enterprise Java Developers</strong>，在右侧选择Windows版本下载：</p><p><img src="https://source.icode504.com/images/image-20240111145938732.png"></p><p>4. 下载完成后，将Eclipse解压到一个你熟悉的位置（建议文件路径是全英文的），这里我解压到了D盘：</p><p><img src="https://source.icode504.com/images/image-20240111152225378.png"></p><p>5. 按照下图所示操作将Eclipse设置成<strong>桌面快捷方式</strong>，以后只需要在桌面直接打开快捷方式就可以了，比较方便。</p><p><img src="https://source.icode504.com/images/image-20240111152158072.png"></p><h1 id="三、Eclipse创建Workspace和简单设置"><a href="#三、Eclipse创建Workspace和简单设置" class="headerlink" title="三、Eclipse创建Workspace和简单设置"></a>三、Eclipse创建Workspace和简单设置</h1><p>这一部分我们需要对Eclipse进行以下配置，方便后续我们使用Eclipse。</p><h2 id="3-1-Eclipse配置本地安装的JDK"><a href="#3-1-Eclipse配置本地安装的JDK" class="headerlink" title="3.1 Eclipse配置本地安装的JDK"></a>3.1 Eclipse配置本地安装的JDK</h2><p>1. 在桌面双击打开Eclipse，此时会弹出一个选择工作空间Workspace的界面。点击<strong>Browse</strong>，选择一个你熟悉的文件夹，然后点击<strong>Launch</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20240111152952838.png"></p><p><img src="https://source.icode504.com/images/image-20240111153151545.png"></p><p><img src="https://source.icode504.com/images/image-20240111153221251.png"></p><p>2. 进入Eclipse以后，我们需要将本地安装的JDK应用到Eclipse中。点击上方菜单栏的<strong>Window</strong>，然后点击最后一个<strong>Preferences</strong>，进入Eclipse设置：</p><p><img src="https://source.icode504.com/images/image-20240111153552268.png"></p><p>3. 在左侧选项中，找到<strong>Java</strong>并展开，选择<strong>Installed JREs</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111153818844.png"></p><p>4. 在Installed JREs中，选中系统自带的JRE，然后在右侧点击<strong>Edit</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111153952469.png"></p><p>5. 点击右上角的<strong>Directory</strong>，选择JDK安装位置，直到下方出现很多的JRE，然后点击<strong>Finish</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111154027524.png"></p><p><img src="https://source.icode504.com/images/image-20240111154220109.png"></p><p><img src="https://source.icode504.com/images/image-20240111154317711.png"></p><p>6. 点击右下角<strong>Apply and Close</strong>，完成设置并关闭：</p><p><img src="https://source.icode504.com/images/image-20240111154420980.png"></p><h2 id="3-2-配置新建文件菜单"><a href="#3-2-配置新建文件菜单" class="headerlink" title="3.2 配置新建文件菜单"></a>3.2 配置新建文件菜单</h2><p>安装完Eclipse后，你可能会发现在其新建文件菜单中默认并未包含所需的文件类型。为了确保后续的使用便捷，我们需要对Eclipse新建文件菜单进行一些配置。</p><p>1. 在上方菜单栏点击<strong>Window</strong>，选择<strong>Perspective</strong>，然后点击<strong>Customize Perspective</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111155210783.png"></p><p>2. 点击<strong>Menu Visibilitiy</strong>，依次展开<strong>File</strong>、<strong>New</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111155336273.png"></p><p>3. 这里我勾选了Java常用的项目、文件类型，小白可以按照下图的方式进行勾选即可，完成后点击下方的<strong>Apply And Close</strong>：</p><table><thead><tr><th align="center"><img src="https://source.icode504.com/images/image-20240111155756137.png"></th><th align="center"><img src="https://source.icode504.com/images/image-20240111155835053.png"></th></tr></thead><tbody><tr><td align="center"><img src="https://source.icode504.com/images/image-20240111155908214.png"></td><td align="center"><img src="https://source.icode504.com/images/image-20240111155955716.png"></td></tr></tbody></table><h2 id="3-3-调整代码字体样式"><a href="#3-3-调整代码字体样式" class="headerlink" title="3.3 调整代码字体样式"></a>3.3 调整代码字体样式</h2><p>Eclipse创建的代码文件在编辑器中字体比较小，事实上，你可以在设置菜单中调整Eclipse中代码的字体大小和样式，直到满足你的审美要求。</p><p>1. 点击上方菜单栏的<strong>Windows</strong>，然后点击最后一个<strong>Preferences</strong>，进入Eclipse设置：</p><p><img src="https://source.icode504.com/images/image-20240111153552268.png"></p><p>2. 进入设置以后，点击<strong>General</strong> –&gt; <strong>Appearance</strong> –&gt; <strong>Color And Fonts</strong>：</p><p><img src="https://source.icode504.com/images/image-20240127092622420.png"></p><p>3. 在颜色和字体界面中，双击展开<strong>Basic</strong>，找到并选中最后一个<strong>Text Font</strong>，点击<strong>Edit</strong>：</p><p><img src="https://source.icode504.com/images/image-20240127092905624.png"></p><p>4. 在字体窗口中可以自行调整字体样式和大小，完成后点击确定，后续设置界面点击右下角的Apply and Close。</p><blockquote><p>这里我选择的Consolas字体，字体大小16号。下方示例可以预览字体：</p></blockquote><p><img src="https://source.icode504.com/images/image-20240127093145798.png"></p><h1 id="四、创建Java项目并运行Java程序"><a href="#四、创建Java项目并运行Java程序" class="headerlink" title="四、创建Java项目并运行Java程序"></a>四、创建Java项目并运行Java程序</h1><p>完成上面的配置后，我们就可以愉快写一段Java代码了。</p><p>1. 在上方菜单栏点击<strong>File</strong>，选择第一个<strong>New</strong>（或者按<kbd>Shift</kbd><kbd>Alt</kbd><kbd>N</kbd>），选择<strong>Java Project</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111160303603.png"></p><p>2. 按照下图操作，创建一个Java项目：</p><p><img src="https://source.icode504.com/images/image-20240111160456392.png"></p><p>4. 如果出现下图弹窗，点击<strong>Open Perspective</strong>，此时Eclipse会以Java视图显示：</p><p><img src="https://source.icode504.com/images/image-20240111160619795.png"></p><p>5. 在左侧Package Explorer，<strong>双击展开</strong>我们的项目MyJavaProject，鼠标右键<strong>点击src</strong>，<strong>点击New</strong>，<strong>点击Class</strong>创建Java文件：</p><p><img src="https://source.icode504.com/images/image-20240111161127180.png"></p><p>6. 按照下图所示创建一个Java文件，注意文件名（类名要符合<a href="https://www.icode504.com/posts/3.html#%E6%A0%87%E8%AF%86%E7%AC%A6">标识符命名规范</a>）：</p><p><img src="https://source.icode504.com/images/image-20240111161318647.png"></p><p>7. 在MyDemo01类中写一个main方法，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240111161715860.png"></p><blockquote><p>注意：只要左上角页签MyProgram01.java前面会有一个星号标志，这说明我们未保存这个Java文件，需要按<kbd>Ctrl</kbd>和<kbd>S</kbd>保存。</p></blockquote><p>8. 鼠标右键点击代码，找到<strong>Run As</strong>，点击<strong>Java Application</strong>运行Java程序：</p><p><img src="https://source.icode504.com/images/image-20240111162009202.png"></p><p>9. 此时下方控制台就会输出我们在程序中写的内容，说明我们的代码编译运行成功！</p><p><img src="https://source.icode504.com/images/image-20240111162103861.png"></p><h1 id="五、Eclipse的卸载（可选）"><a href="#五、Eclipse的卸载（可选）" class="headerlink" title="五、Eclipse的卸载（可选）"></a>五、Eclipse的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 找到Eclipse安装目录，按<kbd>Shift</kbd><kbd>Delete</kbd>彻底删除（不经过回收站）：</p><p><img src="https://source.icode504.com/images/image-20240127111815301.png"></p><p>2. 如果想删除掉Eclipse在本机的相关配置，请按照下图所示的操作，找到存在<strong>桌面</strong>的文件夹：</p><p><img src="https://source.icode504.com/images/240127001.gif"></p><p>3. 找到<code>.p2</code>文件夹，选中，按<kbd>Shirt</kbd><kbd>Delete</kbd>彻底删除：</p><p><img src="https://source.icode504.com/images/image-20240127113514365.png"></p><p>至此，Eclipse卸载完成。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组篇-其之一-数组的概念与一维数组</title>
    <link href="/posts/29.html"/>
    <url>/posts/29.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的小伙伴请查看这两篇教程：<a href="./1.html">点我查看安装JDK8教程</a>、<a href="./10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>假设我想在某宝上买一点零食（没错，我承认我确实是个吃货），经过搜索后出现了如下结果，我们发现每一项都包含相同内容：图片、标题、价格、购买人数、所在店铺名称。要想将每一个数据项展现给用户，就需要一个特定的“容器”来存储每一个数据项。</p><img src="https://source.icode504.com/images/461690e5230776ed3499a22a5ca09b0.jpg" style="zoom:25%;" alt="仅供展示使用，无任何打广告成分"/><p>在日常生活中，”容器”通常是指一种用于装载、储存物质的器具。例如：水杯可以装水，衣柜可以装衣物。</p><p>仿照日常生活中的“容器”的定义，我们可以给程序中的容器做个说明：多个数据项聚合在一起，组成了一个装载数据的容器。这个容器对数据项进行访问、修改等操作。</p><p>接下来要讲的数组就属于容器的一种。</p><h1 id="一、数组的概念"><a href="#一、数组的概念" class="headerlink" title="一、数组的概念"></a>一、数组的概念</h1><p>数组的定义：数组是一种数据结构，它用于<strong>存储相同类型的元素</strong>（如整数、字符串等）的有序集合。</p><h2 id="1-1-数组相关的概念"><a href="#1-1-数组相关的概念" class="headerlink" title="1.1 数组相关的概念"></a>1.1 数组相关的概念</h2><p>1. 数组名：基本数据类型变量存在变量名，那么数组也有数组变量，<strong>数组的变量名就是这个数组的名称</strong>。例如：<code>numbers</code>代表这个数组存储的是数字。</p><p>2. 索引：<strong>数组中每一个元素都有唯一的索引</strong>（类似我们的身份证号），我们访问数组元素的值时会用到索引。数组的索引是有序的，这样做的好处是访问数组的元素非常快。</p><p>3. 元素：<strong>数组元素是数组的基本组成单位</strong>，元素的数据类型决定了数组的数据类型，相反，数组的数据类型也决定了每个元素的数据类型。</p><p>4. 数组的长度：<strong>数组中存储元素的数量</strong>。</p><p>5. 数组本身是<strong>引用数据类型</strong>。但是数组中的元素既可以是基本数据类型，也可以是引用数据类型。</p><p>6. <strong>数组的大小是固定的，一旦创建，其大小就不能改变</strong>。</p><h2 id="1-2-数组的划分"><a href="#1-2-数组的划分" class="headerlink" title="1.2 数组的划分"></a>1.2 数组的划分</h2><p>按照数据类型划分，数组可以分成基本类型数组、引用数据类型数组。以基本类型数组为例，每一个数组元素的数据类型都是基本数据类型。</p><p>按照维度划分，数组可以划分成一维数组、二维数组、三维数组……</p><ul><li>一维数组中存储一组数据：</li></ul><p><img src="https://source.icode504.com/images/240117dp7.drawio.svg"></p><ul><li>二维数组本质上就是一维数组的每个元素再存储一个数组，每个元素对应的数组存储元素个数可能也不尽相同（本质上就是一维数组再嵌套一维数组）：</li></ul><p><img src="https://source.icode504.com/images/240117dp8.drawio.svg"></p><p>就我个人日常开发而言，使用一维数组的次数多一些，用到二维数组的次数就几乎很少了（在做算法题的时候能用的到）</p><blockquote><p>备注：本文后续提到的数组默认都是一维数组。</p></blockquote><h1 id="二、定义并初始化数组"><a href="#二、定义并初始化数组" class="headerlink" title="二、定义并初始化数组"></a>二、定义并初始化数组</h1><h2 id="2-1-定义数组变量"><a href="#2-1-定义数组变量" class="headerlink" title="2.1 定义数组变量"></a>2.1 定义数组变量</h2><p>定义数组变量有两种方式：</p><p>方式一：方括号写到数据类型的后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java风格定义数组变量</span><br>数据类型[] 变量名;<br></code></pre></td></tr></table></figure><p>这里的数据类型既可以是基本数据类型，也可以是引用数据类型。例如，我想定义一个<code>int</code>类型数组<code>arr1</code>和<code>String</code>类型数组<code>arr2</code>，可以写成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// int类型数组</span><br><span class="hljs-type">int</span>[] arr1;<br><span class="hljs-comment">// 引用数据类型数组</span><br>String[] arr2;<br></code></pre></td></tr></table></figure><p>方式二：如果你之前学过C或者C++的数组，也可以把方括号写到变量名后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型 变量名[];<br></code></pre></td></tr></table></figure><p>定义数组变量完成后，就需要创建数组了。创建数组一共有两种方式：静态初始化和动态初始化。</p><h2 id="2-2-创建数组方式——静态初始化"><a href="#2-2-创建数组方式——静态初始化" class="headerlink" title="2.2 创建数组方式——静态初始化"></a>2.2 创建数组方式——静态初始化</h2><p>静态初始化：<strong>数组中存储的内容已经确定</strong>，可以使用以下两种方式静态初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = <span class="hljs-keyword">new</span> 数据类型[] &#123;变量值<span class="hljs-number">1</span>, 变量值<span class="hljs-number">2</span>, 变量值<span class="hljs-number">3</span>,..., 变量值n&#125;;<br></code></pre></td></tr></table></figure><p>上述方式有简化写法，赋值符号右侧的<code>new 数据类型[]</code>可以省略，只保留大括号中的内容，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = &#123;变量值<span class="hljs-number">1</span>, 变量值<span class="hljs-number">2</span>, 变量值<span class="hljs-number">3</span>,..., 变量值n&#125;;<br></code></pre></td></tr></table></figure><p>下面代码展示了上述两种方式创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组静态初始化两种方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// new 数据类型[] &#123;...&#125;方式初始化数组</span><br>        <span class="hljs-type">int</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">double</span>[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">4.2</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">7.6</span>, <span class="hljs-number">2.33</span>, <span class="hljs-number">8.88</span>&#125;;<br>        String[] tastyFoods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;砂锅麻辣烫&quot;</span>, <span class="hljs-string">&quot;过桥米线&quot;</span>, <span class="hljs-string">&quot;土豆粉&quot;</span>, <span class="hljs-string">&quot;砂锅居&quot;</span>, <span class="hljs-string">&quot;火锅&quot;</span>&#125;;<br><br>        <span class="hljs-comment">// &#123;...&#125;方式初始化数组</span><br>        <span class="hljs-type">float</span>[] array3 = &#123;<span class="hljs-number">2.3f</span>, <span class="hljs-number">89.66f</span>, <span class="hljs-number">34.2f</span>, -<span class="hljs-number">20.33f</span>&#125;;<br>        <span class="hljs-type">long</span>[] array4 = &#123;<span class="hljs-number">666</span>, <span class="hljs-number">888</span>, <span class="hljs-number">999</span>, <span class="hljs-number">648</span>&#125;;<br>        String[] changchunAttractions = &#123;<span class="hljs-string">&quot;净月潭公园&quot;</span>, <span class="hljs-string">&quot;南湖公园&quot;</span>, <span class="hljs-string">&quot;伪满皇宫&quot;</span>, <span class="hljs-string">&quot;长影世纪城&quot;</span>, <span class="hljs-string">&quot;雕塑公园&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：<strong>使用花括号<code>&#123;&#125;</code>创建数组必须先定义数组变量的同时就将创建好的数组赋值给数组变量</strong>。</p><p>先定义数组变量，再使用花括号的方式赋值是错误的，无法通过编译。以下是错误写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义数组变量</span><br><span class="hljs-type">int</span>[] arr;<br><span class="hljs-comment">// 以花括号的方式对应的数组值赋值给变量无法通过编译</span><br>arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>在IDEA中这样写代码时，也会给出错误提示：</p><p><img src="https://source.icode504.com/images/image-20231225135057814.png"></p></blockquote><h2 id="2-3-创建数组方式——动态初始化"><a href="#2-3-创建数组方式——动态初始化" class="headerlink" title="2.3 创建数组方式——动态初始化"></a>2.3 创建数组方式——动态初始化</h2><p>前面讲到的静态初始化的方式创建数组有一个前提就是你已经确定数组中要存储什么。但是在大多数情况下，我们也不确定数组要存储什么，而是在后续的时候修改数组中元素的值，这时候我们就可以使用动态初始化的方式创建数组。</p><p>动态初始化：数组的长度可以确定，但是数组里面具体写什么内容还不确定，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = <span class="hljs-keyword">new</span> 数据类型[n];<br></code></pre></td></tr></table></figure><p>其中n指的是数组的长度，即数组中存储元素的数量。具体内容可以看下一部分：数组的长度。</p><p>以下是动态初始化方式创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态初始化方式创建数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 动态初始化方式创建长度为4的char数组、String数组、int数组</span><br>        <span class="hljs-type">char</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<br>        String[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span>[] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、数组的长度"><a href="#三、数组的长度" class="headerlink" title="三、数组的长度"></a>三、数组的长度</h1><p>假设有一个数组<code>arr</code>，要想获取数组的长度，我们只需要使用<code>arr.length</code>获取数组的长度即可。</p><p>长度为0的数组称作空数组。</p><p>定义数组时，<strong>数组的长度必须是整数且大于等于0</strong>，否则系统会抛出<strong>数组长度为负数</strong>（<code>NegativeArraySizeException</code>）异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组的长度获取</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayLength</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;array.length = &quot;</span> + array.length);<br><br>        <span class="hljs-comment">// 空数组的长度</span><br>        <span class="hljs-type">int</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        System.out.println(<span class="hljs-string">&quot;array1.length = &quot;</span> + array1.length);<br>        <span class="hljs-type">int</span>[] array2 = &#123;&#125;;<br>        System.out.println(<span class="hljs-string">&quot;array2.length = &quot;</span> + array2.length);<br>        <span class="hljs-comment">// 数组长度必须要&gt;=0，如果定义的数组默认长度是负数的话会抛出NegativeArraySizeException异常</span><br>        <span class="hljs-type">int</span>[] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[-<span class="hljs-number">1</span>];<br>        System.out.println(<span class="hljs-string">&quot;array3.length = &quot;</span> + array3.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20240118133819372.png"></p><h1 id="四、访问数组元素"><a href="#四、访问数组元素" class="headerlink" title="四、访问数组元素"></a>四、访问数组元素</h1><p>通过<code>数组名[索引值]</code>可以访问到这个索引值下的值，其中索引值必须是整数并且处于<code>[0, 数组的长度值)</code>范围内，如果超出这个范围，系统就会抛出数组索引越界异常<code>ArrayIndexOutOfBoundsException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组元素的访问</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsAccess</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;数组的长度是: &quot;</span> + array.length);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br>        <span class="hljs-comment">// 超出[0, array.length)的范围会抛出异常</span><br>        System.out.println(<span class="hljs-string">&quot;array[7] = &quot;</span> + array[<span class="hljs-number">7</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221134139512.png"></p><p>从运行结果不难看出，数组索引的范围是<code>[0, 6]</code>，一旦索引值超出这个范围，Java会为我们抛出一个数组索引值越界异常（<code>ArrayIndexOutOfBoundsException</code>），这种情况在以后编写代码的过程中要尽量避免。</p><p>当我们能获取到数组元素的值时，我们就可以修改数组中的元素了。</p><p>我们还是以上面的数组为例，我想修改索引值为2的元素值为88，索引值为5的元素值为66：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组元素的修改</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsModification</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;修改前各个元素的值: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[1] = &quot;</span> + array[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[2] = &quot;</span> + array[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[4] = &quot;</span> + array[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[5] = &quot;</span> + array[<span class="hljs-number">5</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br><br>        <span class="hljs-comment">// 修改索引值为2的元素为88，索引值为3的元素为66</span><br>        array[<span class="hljs-number">2</span>] = <span class="hljs-number">88</span>;<br>        array[<span class="hljs-number">3</span>] = <span class="hljs-number">66</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;修改后各个元素的值: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[1] = &quot;</span> + array[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[2] = &quot;</span> + array[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[4] = &quot;</span> + array[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[5] = &quot;</span> + array[<span class="hljs-number">5</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合预期：</p><p><img src="https://source.icode504.com/images/image-20240117163935149.png"></p><h1 id="五、数组的特点"><a href="#五、数组的特点" class="headerlink" title="五、数组的特点"></a>五、数组的特点</h1><p>上边讲了这么多数组的用法，这一部分我们就来简单总结以下数组的特点。其实这一部分我本来想放到前面来讲，但是后来一想放到前面容易给初学者说的云里雾里，于是将数组的特点放到这一部分。数组一共有如下几个特点：</p><p>1. <strong>相同数据类型：</strong> 所有数组元素必须是相同的数据类型，可以是基本数据类型（如整数、浮点数等）或引用数据类型（如对象、字符串等）。</p><p>例如：假设有一个长度为5的<code>int</code>数组，不管是静态初始化还是动态初始化，里面存储的都是<code>int</code>类型的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组特点1：所有数组元素都是相同类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayCharacteristic1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个int类型的数组</span><br>        <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">// 错误写法，因为int[]数组所有元素必须是int类型。</span><br>        <span class="hljs-comment">// 而long和double本身就比int范围大，不能直接赋值给数组元素。</span><br>        <span class="hljs-comment">// 如需赋值，就需要进行强制类型转换（但是这个过程中也可能会出现一些问题）</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">// array[2] = number1;</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.34</span>;<br>        <span class="hljs-comment">// array[3] = number2;</span><br>        <span class="hljs-comment">// int[] array2 = &#123;1, 2, 3, 4, 8.88&#125;;</span><br><br>        <span class="hljs-comment">// 正确写法，因为character1赋值给array[4]时，会将值自动类型提升为int类型</span><br>        <span class="hljs-comment">// byte、short也同理</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">character1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<br>        array[<span class="hljs-number">4</span>] = character1;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        array[<span class="hljs-number">4</span>] = number3;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">number4</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        array[<span class="hljs-number">4</span>] = number4;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. <strong>固定大小：</strong>数组在创建时需要指定固定的大小，这个大小通常在数组声明时确定，且无法在运行时改变。这意味着数组的长度是固定的，无法动态调整。</p><p>我们可以使用反证法对上述内容进行证明，假设<em>数组定义了以后，可以动态调整</em>。通过这个假设，我们来编写一段代码证明一下上述假设是否可行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组特点2--创建数组后，无法动态调整数组长度</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayCharacteristic2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个长度为5的数组</span><br>        <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;数组初始长度: &quot;</span> + array.length);<br>        <span class="hljs-comment">// 如果数组长度可以动态调整，那么我在数组范围外再给数组元素赋值，此时数组长度会动态调整到这个范围外的索引值</span><br>        array[<span class="hljs-number">5</span>] = <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;给数组范围外元素赋值后的长度: &quot;</span> + array.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个程序中，我们尝试将一个元素添加到数组的第六个位置（索引为5），而此时抛出了<code>ArrayIndexOutOfBoundsException</code>（数组越界异常）。很显然，上述假设并不成立。</p><p>尝试访问超出数组长度的索引会导致程序异常。</p><p><img src="https://source.icode504.com/images/image-20240113142018156.png"></p><p>3. <strong>连续内存空间：</strong> 数组的元素在内存中是连续存储的，这也是通过索引直接访问数组元素的原因。</p><p>4. <strong>索引访问：</strong> 数组中的每个元素都有一个唯一的索引，通过该索引可以访问或修改对应位置的元素。数组的索引从0开始。</p><p>这一点我们在第四部分数组元素的访问已经提到，创建指定长度的数组时，会为每一个数组元素分配一个索引值（从0到<code>arr.length - 1</code>且都是整数）。要想访问到数组元素值，必须通过<code>数组名[索引值]</code>访问每一个数组元素。</p><h1 id="六、遍历数组"><a href="#六、遍历数组" class="headerlink" title="六、遍历数组"></a>六、遍历数组</h1><p>使用循环来遍历数组可以获取到数组的每一个元素。遍历数组有两种方式：普通循环遍历和<code>foreach</code>循环（也称作增强for循环）遍历。</p><h2 id="6-1-普通循环遍历"><a href="#6-1-普通循环遍历" class="headerlink" title="6.1 普通循环遍历"></a>6.1 普通循环遍历</h2><p>我们可以使用数组的索引值，通过循环来遍历数组，这里我使用普通的<code>for</code>循环来遍历一个<code>String</code>类型的数组（当然，使用<code>while</code>和<code>do-while</code>循环也OK）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通循环遍历数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] array = &#123;<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-string">&quot;赵云&quot;</span>&#125;;<br>        <span class="hljs-comment">// 遍历范围：[0, array.length)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-comment">// 用数组名和索引值访问到这个元素的值</span><br>            System.out.println(array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221111430206.png"></p><p>在IDEA中，我们可以使用<code>数组名.fori</code>快速生成一个<code>for</code>循环：</p><p><img src="https://source.icode504.com/images/231221002.gif"></p><p>同理，如果想逆序输出数组，可以使用<code>数组名.forr</code>：</p><p><img src="https://source.icode504.com/images/231221003.gif"></p><h2 id="6-2-foreach循环遍历"><a href="#6-2-foreach循环遍历" class="headerlink" title="6.2 foreach循环遍历"></a>6.2 foreach循环遍历</h2><p><code>foreach</code>循环是JDK 5的新特性，它也是一种循环结构，这个循环主要用于遍历<strong>数组</strong>和<strong>集合</strong>（集合后续会学习到），也称作增强<code>for</code>循环。</p><blockquote><p>说明：在JDK 8中，在迭代器<code>Iterator&lt;T&gt;</code>接口添加了默认方法<code>foreach()</code>专门用来遍历集合，后续会在集合部分讲到。</p></blockquote><p><code>foreach</code>循环的语法结构如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (数据类型 变量名 ： 数组/集合名) &#123;<br><span class="hljs-comment">// 执行代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个语法结构中，如果我们使用的是数组<code>arr</code>，那么结构中的变量名就相当于数组中每一个元素对应的变量名称，即<code>arr[i]</code>。</p><p>例如：假设要使用<code>foreach</code>循环遍历一个<code>String</code>类型的数组，使用方式和普通循环遍历语法要简单一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * foreach循环遍历数组</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForeachArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] array = &#123;<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-string">&quot;赵云&quot;</span>&#125;;<br>        <span class="hljs-comment">// foreach循环遍历数组</span><br>        <span class="hljs-keyword">for</span> (String s : array) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221091324135.png"></p><p>在IDEA中也为我们设置了快捷生成<code>foreach</code>循环的快捷键<code>数组名.for</code>，就能快速生成一个<code>foreach</code>循环：</p><p><img src="https://source.icode504.com/images/231221001.gif"></p><h1 id="七、数组元素的默认值"><a href="#七、数组元素的默认值" class="headerlink" title="七、数组元素的默认值"></a>七、数组元素的默认值</h1><p>整数类型（<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>）的数组初始化时，每一个数组元素的默认值是0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--整数类型数组元素的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 基本数据类型--byte类型数组元素的默认值</span><br>        <span class="hljs-type">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;byte[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : byteArray) &#123;<br>            System.out.print(b + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--short类型数组元素的默认值</span><br>        <span class="hljs-type">short</span>[] shortArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">short</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;short[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">short</span> s : shortArray) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--int类型数组元素的默认值</span><br>        <span class="hljs-type">int</span>[] intArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;int[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : intArray) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--long类型数组元素的默认值</span><br>        <span class="hljs-type">long</span>[] longArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;long[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> l : longArray) &#123;<br>            System.out.print(l + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221101124056.png"></p><p>浮点类型（<code>float</code>、<code>double</code>）的数组初始化，每一个数组元素的默认值是0.0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--浮点类型数组元素的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 基本数据类型--float类型数组元素的默认值</span><br>        <span class="hljs-type">float</span>[] floatArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;float[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> f : floatArray) &#123;<br>            System.out.print(f + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--double类型数组元素的默认值</span><br>        <span class="hljs-type">double</span>[] doubleArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;double[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> d : doubleArray) &#123;<br>            System.out.print(d + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20231221101532988.png"></p><p>字符类型（<code>char</code>）的数组初始化时，每一个数组元素的默认值是<code>\u0000</code>（即Unicode字符表的第一个字符）。</p><p>布尔类型（<code>boolean</code>）的数组初始化时，每一个数组元素的默认值是<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--字符类型和布尔类型数组的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">char</span>[] charArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;char[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : charArray) &#123;<br>            <span class="hljs-comment">// 间接验证每一个char数组元素默认值是否是Unicode字符表的第一个元素</span><br>            System.out.print((c == <span class="hljs-number">0</span>) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-comment">// 写成下面的形式验证也OK</span><br>            <span class="hljs-comment">// System.out.print((c == &#x27;\u0000&#x27;) + &quot;\t&quot;);</span><br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--boolean类型数组元素的默认值</span><br>        <span class="hljs-type">boolean</span>[] booleanArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;boolean[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : booleanArray) &#123;<br>            System.out.print(b + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221105838238.png"></p><p>引用数据类型的数组初始化时，每一个数组元素的默认值是<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用数据类型数组的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 引用数据类型数组元素的默认值</span><br>        String[] strArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;String[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : strArray) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        Random[] randomArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;Random[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (Random random : randomArray) &#123;<br>            System.out.print(random + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231221110252898.png"></p><h1 id="八、知识点总结"><a href="#八、知识点总结" class="headerlink" title="八、知识点总结"></a>八、知识点总结</h1><p>数组的概念与一维数组知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载：<a href="https://icode504.lanzn.com/idOiY1lgltnc">点我下载</a></p><p><img src="https://source.icode504.com/images/%E6%95%B0%E7%BB%84%E7%AF%87-%E5%85%B6%E4%B9%8B%E4%B8%80-%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="数组篇-其之一-数组的概念与一维数组-知识点总结"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Intellij IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 11安装配置教程（Windows版）</title>
    <link href="/posts/28.html"/>
    <url>/posts/28.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下JDK 11如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>以下两种方式二选一下载即可：</p><h2 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h2><p>请选择任意一个链接，选择任意一个安装包下载即可：</p><table><thead><tr><th><a href="https://pan.baidu.com/s/1FjQlCUulceJWOQP96qQvjQ?pwd=mclj">点击下载</a></th><th><a href="https://pan.baidu.com/s/1K4gR2k152JWimdxEADvp2g?pwd=1024">备用下载1</a></th><th><a href="https://pan.baidu.com/s/1-KFO-_GQOsF2M-PVzKt24w?pwd=1024">备用下载2</a></th></tr></thead></table><p><img src="https://source.icode504.com/images/image-20240111162958652.png"></p><h2 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h2><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html">点击进入</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是11.0.20版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://source.icode504.com/images/image-20240111164500464.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://source.icode504.com/images/image-20240111164519079.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://source.icode504.com/images/image-20240101133536759.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111164925746.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://source.icode504.com/images/image-20240111164941122.png"></p><p><img src="https://source.icode504.com/images/image-20240111165150762.png"></p><p><img src="https://source.icode504.com/images/image-20240111165212543.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240111165226556.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111165249045.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240111165445818.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240111165721488.png"></p><p>7. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定：</p><p><img src="https://source.icode504.com/images/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://source.icode504.com/images/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 11安装成功了：</p><p><img src="https://source.icode504.com/images/image-20240111165930479.png"></p><p><img src="https://source.icode504.com/images/image-20240111170010337.png"></p><p><img src="https://source.icode504.com/images/image-20240111170348792.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 21安装配置教程（Windows版）</title>
    <link href="/posts/27.html"/>
    <url>/posts/27.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文下载文件使用的是NDM（Neat Download Manager），如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p><p>接下来为大家讲解一下JDK 21如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>1. 打开Oracle JDK官网：<a href="https://www.oracle.com/java/technologies/javase/jdk21-archive-downloads.html">点我查看</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是21.0.1版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://source.icode504.com/images/image-20231231234124976.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101000342542.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://source.icode504.com/images/image-20240101000606080.png"></p><p><img src="https://source.icode504.com/images/image-20240101000829197.png"></p><p><img src="https://source.icode504.com/images/image-20240101000948438.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240101001012592.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101001101762.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101001823379.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240101002611204.png"></p><p>7. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://source.icode504.com/images/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 21安装成功了：</p><p><img src="https://source.icode504.com/images/image-20240101003211769.png"></p><p><img src="https://source.icode504.com/images/image-20240101003254767.png"></p><p><img src="https://source.icode504.com/images/image-20240101003343061.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和macOS）</title>
    <link href="/posts/24.html"/>
    <url>/posts/24.html</url>
    
    <content type="html"><![CDATA[<p>Neat Download Manager（以下简称 NDM）是一款免费小巧的网络资源下载器。说白了就是和迅雷、IDM（Internet Download Manager）类似。和 IDM 相比，NDM 占用空间非常小（安装空间就 2M 左右），并且支持 Windows 和 MacOS 操作系统。它可以对单个文件进行多线程下载（将单个文件切割成多份下载，大幅加快下载速度）。</p><p>多线程下载是 NDM 的一大优势，更多内容可以到官网页面了解：<a href="https://www.neatdownloadmanager.com/index.php/en/">点我进入官网</a></p><p>以下是 Windows 和 macOS 环境下安装 NDM 教程：</p><h1 id="一、下载-NDM"><a href="#一、下载-NDM" class="headerlink" title="一、下载 NDM"></a>一、下载 NDM</h1><p>1. 打开 NDM 官网：<a href="https://www.neatdownloadmanager.com/index.php/en/">点我查看</a></p><p>2. 根据自己的操作系统下载 NDM，这里我下载的是 Windows 版的，点击左边的下载（macOS 点击右侧链接下载）：</p><p><img src="https://source.icode504.com/images/image-427df2cf376b372a09c0f19dbca05e00.png"></p><h1 id="二、安装-NDM（Windows）"><a href="#二、安装-NDM（Windows）" class="headerlink" title="二、安装 NDM（Windows）"></a>二、安装 NDM（Windows）</h1><p>1. 双击打开安装包，选择安装路径，这里我安装了 D 盘：</p><p><img src="https://source.icode504.com/images/image-20231228111448526.png"></p><p><img src="https://source.icode504.com/images/image-20231228111637064.png"></p><p><img src="https://source.icode504.com/images/image-20231228111658143.png"></p><p>2. 根据自身情况是否创建桌面图标，完成后点击 <strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228111828907.png"></p><p>3. 点击<strong>Install</strong>开始安装：</p><p><img src="https://source.icode504.com/images/image-20231228111852068.png"></p><p>4. 安装中，请耐心等待。</p><p>5. 安装完成，点击<strong>Finish</strong>直接启动：</p><p><img src="https://source.icode504.com/images/image-20231228112031479.png"></p><p>6. NDM 界面如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231228112107266.png"></p><h1 id="三、安装-NDM（macOS）"><a href="#三、安装-NDM（macOS）" class="headerlink" title="三、安装 NDM（macOS）"></a>三、安装 NDM（macOS）</h1><p>1. 双击打开下载好的安装包，将 NDM 拖入到 Applications 中，完成安装：</p><p><img src="https://source.icode504.com/images/image-20240417140248009.png"></p><p>2. 在应用程序中双击打开 NDM：</p><p><img src="https://source.icode504.com/images/image-20240417140743668.png"></p><p>3. 此时会弹出一个提示，点击<strong>打开</strong>：</p><p><img src="https://source.icode504.com/images/image-20240417140835641.png"></p><p>4. NDM 界面如下图所示：</p><p><img src="https://source.icode504.com/images/image-20240417140941812.png"></p><h1 id="四、配置-NDM"><a href="#四、配置-NDM" class="headerlink" title="四、配置 NDM"></a>四、配置 NDM</h1><p>接下来，我们对 NDM 做一些简单配置，点击右上角的小齿轮（Settings），打开 NDM 设置：</p><p><img src="https://source.icode504.com/images/image-20231228112157668.png"></p><p>1. 最大连接数推荐设置为 32，让 NDM 在下载文件时拉满带宽，加快下载速度：</p><p><img src="https://source.icode504.com/images/image-20231228112309663.png"></p><p>2. 按照下图所示选择文件下载位置和临时文件下载位置：</p><blockquote><p>Windows 用户推荐将下载位置选择在除C盘以外的其他位置，例如：D盘。</p><p>macOS 用户推荐将下载位置选择在你熟悉的位置。</p></blockquote><p><img src="https://source.icode504.com/images/image-20231228112529398.png"></p><p>3. 完成后点击 OK 即可，对 NDM 的配置就完成了。</p><h1 id="五、给浏览器安装-NDM-插件"><a href="#五、给浏览器安装-NDM-插件" class="headerlink" title="五、给浏览器安装 NDM 插件"></a>五、给浏览器安装 NDM 插件</h1><p>接下来，我们给浏览器安装 NDM 插件，方便后续我们在浏览器下载内容是让 NDM 能嗅探到，直接调用 NDM 代替浏览器下载文件。</p><p>以下提供了三个浏览器安装插件的方式：Chrome 浏览器、火狐浏览器、Edge 浏览器。大家根据实际情况任选其一即可。</p><h2 id="5-1-Chorme-浏览器"><a href="#5-1-Chorme-浏览器" class="headerlink" title="5.1 Chorme 浏览器"></a>5.1 Chorme 浏览器</h2><p>1. 由于国内无法访问谷歌应用商店，因此正常方式无法获得 NDM 插件。这里我为大家分享了 NDM 插件，点击右侧链接下载插件：<a href="https://icode504.lanzouw.com/ikPCA1j6omkd">点我下载</a></p><p>2. 按照下图所示操作，打开扩展程序管理页面：</p><p><img src="https://source.icode504.com/images/image-20231228113739950.png"></p><p>3. 打开右上角的<strong>开发者模式</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228113846887.png"></p><p>4. 将刚才下载好的插件直接拖入到界面中，上方会有一个弹窗，点击<strong>添加扩展程序</strong>即可：</p><p><img src="https://source.icode504.com/images/231228001.gif"></p><p>5. 至此，NDM 插件就已经安装完成了。</p><p><img src="https://source.icode504.com/images/image-20231228114300605.png"></p><h2 id="5-2-火狐浏览器"><a href="#5-2-火狐浏览器" class="headerlink" title="5.2 火狐浏览器"></a>5.2 火狐浏览器</h2><p>1. 点击右上角，选择扩展与主题（或者直接按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>A</kbd>），搜索<strong>NeatDownloadManger</strong>并按回车键搜索：</p><p><img src="https://source.icode504.com/images/image-20231228115328017.png"></p><p>2. 搜索结果中，找到<strong>NeatDownloadManger Extension</strong>，点击进入：</p><p><img src="https://source.icode504.com/images/image-20231228115418650.png"></p><p>3. 添加到 FireFox：</p><p><img src="https://source.icode504.com/images/image-20231228115540347.png"></p><p>4. 右上角会有一个小弹窗，点击<strong>添加</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228115610110.png"></p><p>5. 添加成功，点击<strong>好的</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228115653250.png"></p><h2 id="5-3-Edge-浏览器"><a href="#5-3-Edge-浏览器" class="headerlink" title="5.3 Edge 浏览器"></a>5.3 Edge 浏览器</h2><p>1. 打开 Edge 浏览器，点击右上角的三个小点，点击扩展：</p><p><img src="https://source.icode504.com/images/image-20231228150457486.png"></p><p>2. 选择倒数第二个，<strong>管理扩展</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228150538422.png"></p><p>3. 在扩展页面左侧选择<strong>获取 Microsoft Edge 扩展</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228150628199.png"></p><p>4. 在扩展商店搜索 <strong>NeatDownloadManager</strong>，完成后按回车就能看到搜索结果，点击<strong>获取</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20231228150918779.png"></p><p>5. 选择<strong>添加扩展</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228151039221.png"></p><p>6. 右上角出现如下弹窗信息就说明 NDM 插件添加成功：</p><p><img src="https://source.icode504.com/images/image-20231228151125225.png"></p><h1 id="六、试一下-NDM-有多快"><a href="#六、试一下-NDM-有多快" class="headerlink" title="六、试一下 NDM 有多快"></a>六、试一下 NDM 有多快</h1><p>以下是演示内容。这里我找了一个大一点 MySQL 的安装包（约 1.3G）下载来演示：</p><p><img src="https://source.icode504.com/images/image-20231228134507751.png"></p><p>使用 NDM 下载：速度直接拉满，我这台电脑使用 NDM 下载上述文件用时 2 分 39 秒，感兴趣的小伙伴可以观看：<a href="https://pan.baidu.com/s/1yRZk0dI6i6AqQXiuvrpoeQ?pwd=w4jk">NDM 下载文件视频（未剪辑版）</a>。</p><p>如果使用浏览器本身下载：速度就差了一大截，下载速度维持在 500KB~1.3M 左右，下载用时 19 分 22 秒，感兴趣的小伙伴可以观看：<a href="https://pan.baidu.com/s/1tSky3oSyQ4Pq2nYJrctvJg?pwd=nxwn">浏览器下载文件视频（未剪辑版）</a>。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>常用工具</category>
      
      <category>macOS</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>macOS</tag>
      
      <tag>Neat Download Manager</tag>
      
      <tag>NDM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装与配置教程（Windows版）</title>
    <link href="/posts/22.html"/>
    <url>/posts/22.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><ol><li><p>检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：<a href="./1.html">点我查看</a></p></li><li><p>如果电脑上已经安装JDK，按<kbd>Win</kbd> 和<kbd>R</kbd>键，输入<code>cmd</code>，然后点击确定</p></li></ol><p><img src="https://source.icode504.com/images/b716b0c10465827fe9ca93eafc58ad17.png"></p><ol start="3"><li>输入<code>java -version</code>，点击<code>回车</code>，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功</li></ol><p><img src="https://source.icode504.com/images/a51459c85c968f63a5ce92e7d794da2e.png"></p><h1 id="二、下载Maven"><a href="#二、下载Maven" class="headerlink" title="二、下载Maven"></a>二、下载Maven</h1><p>以下两种方式二选一：</p><p>方式一：网盘下载（强烈推荐，下载速度较快！）</p><p>打开此链接：<a href="https://icode504.lanzouw.com/b012xidad">点击下载，密码:1024</a>，选择任意一个文件下载即可，这里我选择的是3.6.3版本的：</p><p><img src="https://source.icode504.com/images/4811146fea7f7e60ab942659e741d5a5.png"></p><p><img src="https://source.icode504.com/images/8e6d9da608d9b3b33fbebc31300bab6c.png"></p><p>方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）</p><ol><li>点击进入官网下载链接：<a href="https://archive.apache.org/dist/maven/maven-3/">点击进入</a>，会出现如下界面</li></ol><p><img src="https://source.icode504.com/images/d7d87a2d523517dfc327f42cae6ca939.png"></p><ol start="2"><li>选择一个，点击进入，这里我以3.6.3版本的为例，按下图所示操作即可</li></ol><p><img src="https://source.icode504.com/images/f3a00383bb7b443772a6111cf6a1665c.png"></p><blockquote><p>说明：source目录下的文件是Maven的源码文件，如果有查看的源码的小伙伴，也可以点击进入下载，这里就不过多赘述了。</p></blockquote><ol start="3"><li>如果你使用的是Windows，请下载后缀名为<code>.zip</code>的文件；其他操作系统的请下载<code>.tar.gz</code>的版本。</li></ol><p><img src="https://source.icode504.com/images/a14ac41429304d8c8aeec7e378a23841.png"></p><h1 id="三、配置Maven"><a href="#三、配置Maven" class="headerlink" title="三、配置Maven"></a>三、配置Maven</h1><ol><li>将下载下来的压缩包<strong>解压到一个你知道的文件夹下</strong>，为了避免后续可能出现问题，解压目录只包含英文字符 的目录，这里我解压到了<code>E:/Environment</code>中</li></ol><p><img src="https://source.icode504.com/images/image-20230508220254005.png"></p><ol start="2"><li>双击进入<code>apache-maven-3.6.3</code>文件夹中，点击上方路径，鼠标右键点击复制</li></ol><p><img src="https://source.icode504.com/images/image-20230508220546223.png"></p><ol start="3"><li>在文件夹左侧，找到此文件，鼠标右键，点击属性</li></ol><p><img src="https://source.icode504.com/images/image-20230508220742398.png"></p><ol start="4"><li>点击高级系统设置</li></ol><p><img src="https://source.icode504.com/images/image-20230508220833089.png"></p><ol start="5"><li>点击环境变量</li></ol><p><img src="https://source.icode504.com/images/image-20230508220912799.png"></p><ol start="6"><li>新建一个环境变量</li></ol><p><img src="https://source.icode504.com/images/image-20230508220944612.png"></p><ol start="7"><li>变量名填写<code>M2_HOME</code>，变量值将前面复制的内容粘贴进去即可，完成后点击确定。</li></ol><p><img src="https://source.icode504.com/images/image-20230508221142253.png"></p><ol start="8"><li>双击打开Path</li></ol><p><img src="https://source.icode504.com/images/image-20230508221248363.png"></p><ol start="9"><li>按照下图所示操作即可，完成后一路点击确定。</li></ol><p><img src="https://source.icode504.com/images/image-20230508221458356.png"></p><ol start="10"><li><p>验证Maven是否安装成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入cmd，点击进入。</p></li><li><p>在命令提示行中输入<code>mvn -version</code>，如果出现如下提示，说明Maven配置成功！</p></li></ol><p><img src="https://source.icode504.com/images/image-20230508221728184.png"></p><h1 id="四、下载源配置"><a href="#四、下载源配置" class="headerlink" title="四、下载源配置"></a>四、下载源配置</h1><p>前面我们已经配置好Maven，但是我们在以后导入依赖的时候默认使用的是Maven的中央仓库，而中央仓库是国外网站，下载速度比较慢。因此我们需要将Maven下载源设置成国内镜像仓库，提高导入依赖的速度。以下是下载源配置教程。</p><p>如果你是小白，请一定按照下面的步骤一步一步做:smile::smile::smile:</p><ol><li>打开前面我们安装Maven的位置，双击打开conf文件夹。</li></ol><p><img src="https://source.icode504.com/images/image-20230509200621227.png"></p><ol start="2"><li>按照下图所示的操作，使用记事本打开<code>settings.xml</code>文件</li></ol><p><img src="https://source.icode504.com/images/00002.gif" alt="00002"></p><ol start="3"><li>用记事本打开后，在上方点击<code>查看</code>，然后点击<code>状态栏</code>，此时记事本右下角会出现行数</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204353762.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204435611.png"></p><ol start="4"><li>请复制下面的代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>在记事本第246行末尾换行，将上一步的代码粘贴到第247行中，效果如下图</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204919658.png"></p><p>此时我们配好了Maven的全局JDK版本，使用的是JDK 8版本。</p><ol start="6"><li>请复制下面的代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>在记事本第158行末尾处换行，粘贴上一步代码，效果如下图：</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509205353978.png"></p><ol start="8"><li>打开Maven的安装目录，在这里新建一个repository文件夹，创建完成后，进入此文件夹，复制上述路径。</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509205928445.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509210144270.png"></p><ol start="9"><li>打开记事本，在第55行创建一个<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，并在二者中间粘贴上一步的路径，效果如下图所示：</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509210555912.png"></p><ol start="10"><li>上述操作完成，请一定一定一定按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存！！！至此Maven就全部配置完成了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>项目构建工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA安装Scala插件并运行Scala程序</title>
    <link href="/posts/21.html"/>
    <url>/posts/21.html</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-tags-Intellij-IDEA-Scalacategory-Intellij-IDEA-Scaladescription-banner-img-‘https-source-icode504-com-images-Intellij-IDEA配置并运行Scala-封面-png’index-img-‘https-source-icode504-com-images-Intellij-IDEA配置并运行Scala-封面-png’abbrlink-14date-2023-12-10-23-01-08"><a href="#title-tags-Intellij-IDEA-Scalacategory-Intellij-IDEA-Scaladescription-banner-img-‘https-source-icode504-com-images-Intellij-IDEA配置并运行Scala-封面-png’index-img-‘https-source-icode504-com-images-Intellij-IDEA配置并运行Scala-封面-png’abbrlink-14date-2023-12-10-23-01-08" class="headerlink" title="title:tags:  - Intellij IDEA  - Scalacategory:  - Intellij IDEA  - Scaladescription:banner_img: ‘https://source.icode504.com/images/Intellij IDEA配置并运行Scala-封面.png’index_img: ‘https://source.icode504.com/images/Intellij IDEA配置并运行Scala-封面.png’abbrlink: 14date: 2023-12-10 23:01:08"></a>title:<br>tags:<br>  - Intellij IDEA<br>  - Scala<br>category:<br>  - Intellij IDEA<br>  - Scala<br>description:<br>banner_img: ‘<a href="https://source.icode504.com/images/Intellij">https://source.icode504.com/images/Intellij</a> IDEA配置并运行Scala-封面.png’<br>index_img: ‘<a href="https://source.icode504.com/images/Intellij">https://source.icode504.com/images/Intellij</a> IDEA配置并运行Scala-封面.png’<br>abbrlink: 14<br>date: 2023-12-10 23:01:08</h2><blockquote><p>说明：安装前请确保本机已经安装了Intellij IDEA和Scala：<a href="http://www.icode504.com/posts/10.html">Intellij IDEA的安装配置教程（Windows版）</a>、<a href="http://www.icode504.com/posts/13.html">Scala 2安装与配置教程（Windows版）</a></p></blockquote><h1 id="一、安装Scala插件"><a href="#一、安装Scala插件" class="headerlink" title="一、安装Scala插件"></a>一、安装Scala插件</h1><p>1. 按<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>键，进入IDEA设置。</p><p>2. 找到左侧的Plugins，选择Markplace，搜索Scala，选择第一个进行安装：</p><p><img src="https://source.icode504.com/images/image-20231209221212784.png"></p><p>3. 安装完成后，点击Restart IDE，重启IDEA：</p><p><img src="https://source.icode504.com/images/image-20231209221335618.png"></p><p><img src="https://source.icode504.com/images/image-20231209221349578.png"></p><h1 id="二、创建Scala文件并运行"><a href="#二、创建Scala文件并运行" class="headerlink" title="二、创建Scala文件并运行"></a>二、创建Scala文件并运行</h1><p>1. 点击左上角的<code>File --&gt; New --&gt; New Project</code>创建项目：</p><p><img src="https://source.icode504.com/images/image-20231210205758723.png"></p><p>2. 请确保本机已安装JDK，在新建界面选择Scala，在左下角点击Create：</p><p><img src="https://source.icode504.com/images/image-20231210210112201.png"></p><p>3. 点击Browse，选择Scala开发工具包：</p><blockquote><p>没有安装Scala的小伙伴，点击右侧链接查看Scala安装教程：<a href="http://www.icode504.com/posts/13.html">点我查看</a></p></blockquote><p><img src="https://source.icode504.com/images/image-20231210210410201.png"></p><p>4. 找到Scala的安装路径并选中，然后点击OK：</p><p><img src="https://source.icode504.com/images/image-20231210210629651.png"></p><p>5. 下面的界面就说明IDEA成功识别Scala的软件开发工具包，此时点击Next：</p><p><img src="https://source.icode504.com/images/image-20231210210811446.png"></p><p>6. 自定义项目名称和模块路径，路径推荐全英文路径，模块名称和项目名称保持一致即可，完成后点击Finish：</p><p><img src="https://source.icode504.com/images/image-20231210211231071.png"></p><p>7. 鼠标右键点击<code>src</code>文件夹，创建Scala文件：</p><p><img src="https://source.icode504.com/images/image-20231210211934691.png"></p><p>8. 这里文件名称使用英文名称并且是大驼峰式命名法（即每个单词首字母大写），文件类型选择Object</p><p><img src="https://source.icode504.com/images/image-20231210211715021.png"></p><p>9. 输入<code>main</code>，IDEA就为我们生成一个<code>main</code>方法：</p><p><img src="https://source.icode504.com/images/23121001.gif"></p><p>10. 然后在<code>main</code>方法中输入<code>println()</code>，<code>println()</code>方法用于控制台输出内容，在小括号内添加一对英文双引号，然后在双引号内添加任何你想要输出的内容，完整代码如下所示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">MyFirstScalaProgram</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;这是iCode504第一个Scala程序&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与Java语言不同的是，Scala中的语句不需要以分号作为结尾，上述代码中<code>println()</code>方法最后就不需要加分号。</p><p>11. 鼠标右键，点击<code>Run xxx</code>即可运行（或者按快捷键运行，这里我设置的快捷键是<kbd>Ctrl</kbd><kbd>Shirt</kbd><kbd>F10</kbd>）</p><p><img src="https://source.icode504.com/images/image-20231210213158770.png"></p><p>12. 在控制台输出如下内容就说明Scala程序运行成功！</p><p><img src="https://source.icode504.com/images/image-20231210213259239.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件使用</category>
      
      <category>Intellij IDEA</category>
      
      <category>Scala</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/20.html"/>
    <url>/posts/20.html</url>
    
    <content type="html"><![CDATA[<p>MySQL是一个关系型数据库管理系统，目前为Oracle旗下产品，它具有开源、体积小、速度快的优点，许多网站使用的都是MySQL数据库。</p><p>简单而言，MySQL数据库核心功能就是用来存储数据的。</p><p>MySQL数据库分为社区版和商业版，这里介绍的是社区版的安装教程：</p><h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>1. 打开MySQL官网下载链接：<a href="https://downloads.mysql.com/archives/installer/">点我查看</a></p><p>2. 按照下图所示操作选择相应的MySQL版本下载，这里我选择的Windows MySQL 8.0.30版本。</p><p><img src="https://source.icode504.com/images/image-20240220110125037.png"></p><p>3. 下载中，请耐心等待。</p><h1 id="二、安装并配置MySQL"><a href="#二、安装并配置MySQL" class="headerlink" title="二、安装并配置MySQL"></a>二、安装并配置MySQL</h1><p>安装MySQL过程中，<strong>请保持网络畅通</strong>！！！</p><p>1. 双击打开安装包，安装器启动需要一些时间，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240220110324590.png"></p><p>2. 如果遇到这个窗口，点击<strong>Yes</strong>即可。如没遇到，请查看下一步。</p><p><img src="https://source.icode504.com/images/image-20230512214714122.png"></p><p>3. 安装类型选择<strong>Custom</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220111156356.png"></p><p>4. 按照下图所示操作，选择安装<code>MySQL Server 8.0.30 - X64</code>，完成后直接点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/00003.gif"></p><blockquote><p>（小白可以忽略下列内容，直接跳到第5步）</p><ul><li>如果你想修改MySQL的安装路径，如下图，可以点击下方<strong>Advanced Options</strong>：</li></ul><p><img src="https://source.icode504.com/images/image-20240220111320444.png"></p><ul><li>按照下图所示，选择安装路径，为避免后续过程中出现问题，<strong>安装路径建议只包含英文字符</strong>；下面的是MySQL数据存储路径，如果不懂这方面的内容，建议不要修改这个路径。配置完成后后点击<strong>OK</strong>：</li></ul><p><img src="https://source.icode504.com/images/image-20240220111711714.png"></p></blockquote><p>5. 点击<strong>Execute</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512220628921.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20230512220740114.png"></p><p>7. 出现下图提示<strong>Complete</strong>以后，MySQL安装完成。直接点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512220836314.png"></p><p>8. 接下来开始配置MySQL，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512220905466.png"></p><p>9. 初次安装MySQL的小白请注意，下图的<strong>Port请务必配置成3306</strong>，完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220111939271.png"></p><blockquote><p>注意：如果你的电脑安装了多个MySQL，需要修改端口号，要和3306端口避开使用。只安装一个MySQL的小伙伴请忽略此条。</p></blockquote><p>10. 认证方式选择第一个即可，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512221223745.png"></p><p>11. 设置root账户密码，这里强烈建议<strong>将密码设置成你最熟悉的密码</strong>，否则后续恢复密码比较麻烦。这里我设置成了<code>123456</code>。设置完成后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20240220110609804.png"></p><p>12. 在Windows中开启服务，直接点击<strong>Next</strong>即可：</p><p><img src="https://source.icode504.com/images/image-20230512221927024.png"></p><p>13. 服务器文件权限按照默认配置<strong>选择第一个</strong>即可，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512222002468.png"></p><p>14. 点击<strong>Execute</strong>，MySQL安装器就会为我们配置上述内容。配置过程中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20230512222105185.png"></p><p>15. 出现下图信息，说明MySQL配置成功，点击<strong>Finish</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512222243451.png"></p><p>16. 点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/image-20230512222328898.png"></p><p>17. 点击<strong>Finish</strong>，MySQL配置完成。</p><p><img src="https://source.icode504.com/images/image-20230512222401129.png"></p><h1 id="三、配置MySQL环境变量"><a href="#三、配置MySQL环境变量" class="headerlink" title="三、配置MySQL环境变量"></a>三、配置MySQL环境变量</h1><p>1. 初次安装MySQL的小白，按照下图操作复制路径：</p><p><img src="https://source.icode504.com/images/00005.gif"></p><blockquote><p>（此条内容小白请忽略）安装在其他位置的小伙伴找到MySQL的安装路径，进入bin文件夹后复制文件路径。</p></blockquote><p>2. 在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/9b32c83db0d6df2c2f698e9d67d0edfd.png"></p><p>5. 在下方系统变量找到Path，双击进入：</p><p><img src="https://source.icode504.com/images/image-20230512223639743.png"></p><p>6. 按照下图所示操作，粘贴前面复制的MySQL安装路径，然后一路点击确定即可。</p><p><img src="https://source.icode504.com/images/image-20240220112157561.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击进入，在命令提示行中输入<code>mysql -u root -p</code>，按回车后会提示让你输入密码。这个密码是前面我们安装MySQL的时候设置的密码，输入完成后按回车即可。完成后出现下图界面表示MySQL安装成功！</p><p><img src="https://source.icode504.com/images/image-20240220105038897.png"></p><h1 id="四、卸载MySQL（可选）"><a href="#四、卸载MySQL（可选）" class="headerlink" title="四、卸载MySQL（可选）"></a>四、卸载MySQL（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p><p>以下两种卸载方式任选其一即可。</p>          </div><h2 id="方式一：使用Geek-Uninstaller卸载（推荐）"><a href="#方式一：使用Geek-Uninstaller卸载（推荐）" class="headerlink" title="方式一：使用Geek Uninstaller卸载（推荐）"></a>方式一：使用Geek Uninstaller卸载（推荐）</h2><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到MySQL相关的内容，鼠标右键，依次点击卸载：</p><p><img src="https://source.icode504.com/images/image-20240220113015742.png"></p><p>2. 卸载时如果存在残留，直接清理即可。</p><h2 id="方式二：手动卸载（较麻烦，不推荐）"><a href="#方式二：手动卸载（较麻烦，不推荐）" class="headerlink" title="方式二：手动卸载（较麻烦，不推荐）"></a>方式二：手动卸载（较麻烦，不推荐）</h2><blockquote><p>MySQL卸载过程会有一些繁琐，卸载过程请一定耐心！如果你按照前面的步骤成功安装MySQL并可以正常使用了，就直接忽略下面的内容。</p></blockquote><p>1. 停止MySQL的服务：按下图所示操作，进入服务页面。找到MySQL80服务。</p><p><img src="https://source.icode504.com/images/00006.gif"></p><p>2. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>control</code>，点击进入控制面板，在下方找到卸载程序。</p><p><img src="https://source.icode504.com/images/image-20240220105209312.png"></p><p>3. 将带有MySQL的程序依次使用鼠标右键卸载：</p><p><img src="https://source.icode504.com/images/image-20230512231355775.png"></p><p>4. 卸载中，请耐心等待。</p><p>5. 卸载界面不存在MySQL相关程序，说明MySQL卸载成功。</p><p><img src="https://source.icode504.com/images/image-20230512231640785.png"></p><p>6. 清理残余文件：如果你是小白并且没有修改过MySQL路径，那么你可以去<code>C盘</code>的<code>Program Files</code>文件夹内看看是否存在MySQL的文件夹。如果存在，直接删除文件夹即可。</p><p>7. 清理注册表</p><ul><li>按<kbd>Win</kbd>和<kbd>S</kbd>键，输入<code>regedit</code>，打开注册表编辑器：</li></ul><p><img src="https://source.icode504.com/images/image-20240220105352865.png"></p><ul><li>依次删除下面和MySQL有关的目录。</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\ApplicationMySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务 目录删除<br></code></pre></td></tr></table></figure><p>8. 删除环境变量</p><ul><li>如何进入环境变量，请参考第三部分配置MySQL环境变量的前5步。</li><li>选中MySQL环境变量，点击删除，然后一路点击确定即可。</li></ul><p><img src="https://source.icode504.com/images/image-20230512233341214.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>数据库工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章 若依-JFlow设置用户并测试流程</title>
    <link href="/posts/19.html"/>
    <url>/posts/19.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="./16.html">《第一章 若依-JFlow的配置与启动》</a></p><p>如何创建业务场景、流程图和单节点表单设计请查看这篇文章：<a href="./17.html">《第二章 若依-JFlow流程模型与单节点表单设计》</a></p><p>如何设置多节点的表单并检查流程，请查看这篇文章：<a href="./18.html">《第三章 若依-JFlow其他节点的表单设计和流程检查》</a></p></blockquote><h1 id="一、创建用户及相关信息"><a href="#一、创建用户及相关信息" class="headerlink" title="一、创建用户及相关信息"></a>一、创建用户及相关信息</h1><p>在正式进行测试之前，我们需要保证有相应的用户来执行我们前面设计的流程。</p><p>假设我们的岗位是程序员，属于研发部，我们至少需要两个角色：普通员工和开发组长。</p><p>1. 点击左侧菜单：<code>系统管理--&gt;用户管理</code>，在左上角点击<strong>新增</strong>，创建用户：</p><p><img src="https://source.icode504.com/images/image-20231208135500591.png"></p><p>2. 这里我创建了四个用户，小张、小李、小陈、小刘，它们的基本信息如下图所示（密码默认是123456）：</p><blockquote><p>其中：小张是研发部门的一名普通员工，小李是研发部门的经理，小陈是人事部门的总经理，小刘是公司的总经理。</p></blockquote><p><img src="https://source.icode504.com/images/image-20231208135738944.png"></p><p><img src="https://source.icode504.com/images/image-20231208140240453.png"></p><p><img src="https://source.icode504.com/images/image-20231208140558667.png"></p><p><img src="https://source.icode504.com/images/image-20231208140735464.png"></p><h1 id="二、测试请假流程"><a href="#二、测试请假流程" class="headerlink" title="二、测试请假流程"></a>二、测试请假流程</h1><blockquote><p>情景一：顺序执行</p><p>假设研发部员工小张今天有事需要请假，它需要填写请假单，到部门经理小李那边审批，小李通过审批以后，人事部门经理小陈继续审批申请单，审批以后，再流经总经理小刘进行审批，审批通过以后，小张即可查看请假单信息。</p></blockquote><p>1. 进入我们设计的流程图，在上方点击<strong>测试运行</strong>：</p><p><img src="https://source.icode504.com/images/image-20231208141202035.png"></p><p>2. 点击小张，开始运行，此时表单中上方系统已经为我们自动加载了申请人的基本信息，不需要我们再填写了。填写后的内容如下所示：</p><p><img src="https://source.icode504.com/images/image-20231208141713794.png"></p><p>3. 点击左上角<strong>发送</strong>，在选择接收人界面中选择由部门经理小李。然后点击发送：</p><p><img src="https://source.icode504.com/images/image-20231208141953776.png"></p><p>4. 出现下面的信息，就说明已经成功向部门经理小李发送请假申请了：</p><p><img src="https://source.icode504.com/images/image-20231208142054478.png"></p><p>5. 切换用户到小李，让小李执行任务</p><p><img src="https://source.icode504.com/images/image-20231208142136668.png"></p><p>6. 假设小李默认选择同意，发送给人事经理小陈执行任务：</p><p><img src="https://source.icode504.com/images/image-20231208151209317.png"></p><p>7. 选择人事经理小陈并发送</p><p><img src="https://source.icode504.com/images/image-20231208151412103.png"></p><p>发送成功：</p><p><img src="https://source.icode504.com/images/image-20231208151427486.png"></p><p>8. 切换到人事经理小陈执行任务：</p><p><img src="https://source.icode504.com/images/image-20231208151525891.png"></p><p>9. 假设人事同意申请，就发送给总经理小刘：</p><p><img src="https://source.icode504.com/images/image-20231208151706251.png"></p><p>10. 假设总经理也同意我们的申请：</p><p><img src="https://source.icode504.com/images/image-20231208154107771.png"></p><p>11. 点击发送以后，填写请假单的小张就会看到所有人的审批结果：</p><p><img src="https://source.icode504.com/images/image-20231208154426432.png"></p><p>点击左上角的轨迹可以查看任意一个节点审批情况：</p><p><img src="https://source.icode504.com/images/image-20231208154609844.png"></p><blockquote><p>情景二：驳回场景</p><p>假设研发部员工小张今天有事需要请假，它需要填写请假单，到部门经理小李那边审批，小李通过审批以后，人事部门经理小陈继续审批申请单，但是给出了驳回理由，让xxx重新填写。</p></blockquote><p>1. 小张填写请假申请单，假设部门经理审批通过，到人事经理小陈进行审批，此时小陈点击驳回时需要填写驳回理由</p><p><img src="https://source.icode504.com/images/image-20231208155633882.png"></p><p>2. 在左上角点击退回，退回节点选择员工填写请假单，并填写退回理由</p><p><img src="https://source.icode504.com/images/image-20231208160042749.png"></p><p>3. 此时退回到小张那里，重新填写请假单</p><p><img src="https://source.icode504.com/images/image-20231208155922811.png"></p><p>4. 切换到小张，重新填写请假单，此时会弹出一个提示信息：</p><p><img src="https://source.icode504.com/images/image-20231208160144682.png"></p><p>5. 重新填写表单信息，重新发送给人事经理并审批：</p><p><img src="https://source.icode504.com/images/image-20231208160359210.png"></p><p>6. 假设人事经理、总经理全部同意，那么我们再查看请假申请单时的轨迹图如下：</p><p><img src="https://source.icode504.com/images/image-20231208160614626.png"></p><p>至此，请假的两种简单情况流程就执行完成了。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>我们在《第二章 若依-JFlow流程模型设计》中提到过，设计流程一共有五个步骤：</p><ol><li>绘制流程图：创建各个节点，并根据实际情况连结各个节点。</li><li>设置接收人规则：每一个节点到底是有谁来执行任务，是某一个人还是某一个特定部门的人在执行，JFlow框架都已经为我们设置好了。</li><li>设计表单：根据实际的业务设计表单，注意表单中的细节要和实际对应上。其他节点的表单可以引入上一个节点的，并再次基础上进行设计即可。</li><li>检查流程：流程图和各个节点的表单设计完成后，最好检查一下流程，有错误可以及时更改。</li><li>测试并运行该流程：测试过程中可以按角色所在部门一级一级审批，审批过程中可以对某个节点进行退回，每一个角色可以查看审批情况。</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JFlow</tag>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章 若依-JFlow其他节点的表单设计和流程检查</title>
    <link href="/posts/18.html"/>
    <url>/posts/18.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="./16.html">《第一章 若依-JFlow的配置与启动》</a></p><p>如何创建业务场景、流程图和单节点表单设计请查看这篇文章：<a href="./17.html">《第二章 若依-JFlow流程模型设计》</a></p></blockquote><p>上一节我们讲述了如何创建一个业务场景和流程模型，如何创建一个流程，如何设置单个节点的表单。</p><p><img src="https://source.icode504.com/images/image-20231208103559698.png"></p><p>这一节我们就设置所有节点人员的表单。并检查相关的流程。</p><h1 id="一、设置各节点人员审批表单"><a href="#一、设置各节点人员审批表单" class="headerlink" title="一、设置各节点人员审批表单"></a>一、设置各节点人员审批表单</h1><h2 id="1-1-部门领导审批节点表单设计"><a href="#1-1-部门领导审批节点表单设计" class="headerlink" title="1.1 部门领导审批节点表单设计"></a>1.1 部门领导审批节点表单设计</h2><p>部门领导审批当前员工的请假申请单时，没有修改员工填写的申请信息权限，因此在审批时，部门领导看到的员工信息表单是只读状态，他只有审批通过&#x2F;驳回的权限。</p><p>驳回需要填写驳回理由，也就是说当点击驳回时，触发填写驳回原因事件，这些在JFlow框架中全部都能实现。</p><p>鼠标右键点击部门领导节点，点击<strong>设计表单</strong>，出现如下页面：</p><p><img src="https://source.icode504.com/images/image-20231208104024130.png"></p><p>我们需要再重新绘制一遍员工请假申请单的内容吗？并不是，JFlow为我们提供了节点内容的选项。</p><p>1. 点击右上角的<strong>导入导出</strong></p><p><img src="https://source.icode504.com/images/image-20231208104153563.png"></p><p>2. 进入导入导出页面以后，选择导入方式为<strong>从流程节点表单导入</strong>：</p><p><img src="https://source.icode504.com/images/image-20231208104255122.png"></p><p>3. 选择第一个节点，我们之前设计的表单；开启<strong>是否只读</strong>，导入后的表单内容全部设置为只读状态，然后点击<strong>执行从节点表单导入</strong>即可。</p><p><img src="https://source.icode504.com/images/image-20231208104433275.png"></p><p>4. 此时弹出框会弹出一个提示，点击确定，覆盖原有节点内容即可：</p><p><img src="https://source.icode504.com/images/image-20231208104552660.png"></p><p>5. 出现如下内容就说明上一个节点的内容导入成功，点击确定，关闭导入窗口。</p><p><img src="https://source.icode504.com/images/image-20231208104631504.png"></p><p>6. 此时就出现了上一个节点（员工填写请假单）设计的表单内容，并且全部设置只读：</p><p><img src="https://source.icode504.com/images/image-20231208104815228.png"></p><p>7. 此时我们在左侧组件最下方，找打审核分组，拖到请假单的下方：</p><p><img src="https://source.icode504.com/images/231208001.gif" alt="231208001"></p><p>8. 此时表单下方的审核分组中就会出现审核意见、审核人、审核日期。但是我们需要对表单内容进行修改：</p><p><img src="https://source.icode504.com/images/image-20231208105403289.png"></p><ul><li>首先我们先将审核日期设置为只读：</li></ul><p><img src="https://source.icode504.com/images/image-20231208105544768.png"></p><ul><li>审核人默认显示方式改成登陆人员姓名，即<code>@WebUser.Name</code></li></ul><p><img src="https://source.icode504.com/images/image-20231208143308747.png"></p><ul><li>审核意见也不符合前面我们预期的要求，选中审核意见组件，点击右侧图标删除组件。</li><li>在左侧组件库中拉入一个枚举单选到部门经理审核组件框中，此时弹出一个添加枚举类型字段的窗口，在右上角点击新建：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110047034.png"></p><ul><li>枚举内容按照下图填写即可，然后点击右上角保存，关闭此窗口：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110154390.png"></p><ul><li>枚举值选择第一个：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110409316.png"></p><ul><li>弹出框内容点击确定即可：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110449181.png"></p><ul><li>点击保存，然后再点击关闭即可：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110543956.png"></p><ul><li>再选中部门经理审核意见组件，将内容设置为必填：</li></ul><p><img src="https://source.icode504.com/images/image-20231208110733501.png"></p><p>9. 此时我们再对部门经理审核意见组件绑定驳回填写驳回原因事件。</p><ul><li>向审批框中再拖入一个文本框，命名为驳回理由。</li></ul><p><img src="https://source.icode504.com/images/231208002.gif" alt="231208002"></p><ul><li>选中部门经理审核意见组件，点击蓝色齿轮进入设置，设置联动如下图所示：</li></ul><blockquote><p>说明：设置一次列表值以后，一定要在在右上角点击一次保存。如果你设置了三次以后，再点击保存，此时只对最后一次修改生效。</p></blockquote><p><img src="https://source.icode504.com/images/image-20231208143815630.png"></p><p><img src="https://source.icode504.com/images/image-20231208143848071.png"></p><p><img src="https://source.icode504.com/images/image-20231208143736417.png"></p><ul><li>驳回理由按照下图所示设置：</li></ul><p><img src="https://source.icode504.com/images/image-20231208144458457.png"></p><p>10. 至此，部门经理审核组件框内的所有组件全部设计完成。</p><p><img src="https://source.icode504.com/images/image-20231208144635810.png"></p><h2 id="1-2-人事签字备案节点、总经理审批节点表单设计"><a href="#1-2-人事签字备案节点、总经理审批节点表单设计" class="headerlink" title="1.2 人事签字备案节点、总经理审批节点表单设计"></a>1.2 人事签字备案节点、总经理审批节点表单设计</h2><p>这三个节点的表单设计和部门领导审批节点的表单设计步骤基本相同。</p><p>1. 导入节点的内容选择上一个节点内容即可：</p><p>2. 拖入审批组件，设计表单。</p><p>3. 添加人事经理审批意见组件（组件是枚举单选），内容设置如下：</p><p><img src="https://source.icode504.com/images/image-20231208112907328.png"></p><p>4. 添加一个文本框，文本框名称填写格式：职位名称+驳回理由，以人事经理审批为例，这个文本框的名称是人事经理驳回理由，其他角色亦同理。</p><p><img src="https://source.icode504.com/images/image-20231208145630246.png"></p><p><img src="https://source.icode504.com/images/image-20231208145656696.png"></p><p><img src="https://source.icode504.com/images/image-20231208145719723.png"></p><p>5. 设计完成后的请假单如下图所示：</p><ul><li>人事签字备案节点表单：</li></ul><p><img src="https://source.icode504.com/images/image-20231208145122221.png"></p><ul><li>总经理审批节点界面：</li></ul><p><img src="https://source.icode504.com/images/image-20231208153534633.png"></p><h2 id="1-3-查看请假单节点表单设计"><a href="#1-3-查看请假单节点表单设计" class="headerlink" title="1.3 查看请假单节点表单设计"></a>1.3 查看请假单节点表单设计</h2><p>查看请假单节点对应的表单就比较简单了，设计时只需要导入总经理审批节点的内容即可，不需要做任何修改：</p><p><img src="https://source.icode504.com/images/image-20231208114525358.png"></p><p>查看请假单节点的表单内容如下，内容全部是只读状态：</p><p><img src="https://source.icode504.com/images/image-20231208154932112.png"></p><h1 id="二、检查流程"><a href="#二、检查流程" class="headerlink" title="二、检查流程"></a>二、检查流程</h1><p>点击流程上方的检查按钮，系统会对流程和表单内容进行检查：</p><p><img src="https://source.icode504.com/images/image-20231208114932402.png"></p><p>检查完成后，会出现如下的检查结果，如果没有红色的错误信息，就说明我们的流程和表单设计没有问题：</p><p><img src="https://source.icode504.com/images/image-20231208115111283.png"></p><p>至此，我们已经完成了所有节点的表单设计与检查，下一部分我们来测试执行整个请假流程。</p><p><img src="https://source.icode504.com/images/image-20231205174128064.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JFlow</tag>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 若依-JFlow流程模型与单节点表单设计</title>
    <link href="/posts/17.html"/>
    <url>/posts/17.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="./16.html">《第一章 若依-JFlow的配置与启动》</a></p></blockquote><p>上一节我们讲解了如何拉取若依-JFlow框架代码并配置运行，这一部分我们就以公司员工请假的流程为例，设计一个流程，并为初始节点设计一个表单。</p><h1 id="一、新建业务场景和流程模型"><a href="#一、新建业务场景和流程模型" class="headerlink" title="一、新建业务场景和流程模型"></a>一、新建业务场景和流程模型</h1><p>1. 启动项目以后，登录管理员账号（用户名：admin，密码：admin123），进入系统首页：</p><p><img src="https://source.icode504.com/images/image-20231203223009921.png"></p><p>2. 创建流程：点击左侧第二个JFlow流程设计，再点击流程模板：</p><p><img src="https://source.icode504.com/images/image-20231203223138428.png"></p><p>3. 系统中，流程树已经定义了一些业务场景（即不同的文件夹）如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231203223302018.png"></p><p>和文件夹的创建方式一样，我们只需要鼠标右键，点击新建子级目录即可创建一个业务场景，如果需要删除，就点击删除目录即可：</p><p><img src="https://source.icode504.com/images/image-20231204093425596.png"></p><p><img src="https://source.icode504.com/images/image-20231204093533548.png"></p><p>这里我创建一个名为<code>业务场景231204</code>的业务场景：</p><p><img src="https://source.icode504.com/images/image-20231204093630169.png"></p><p>4. 创建流程模型：点击右上角<strong>新建流程</strong></p><p>5. 流程名称自定义，设计模式选择<strong>专业模式</strong>即可，完成后点击右上角<strong>创建流程</strong>：</p><p><img src="https://source.icode504.com/images/image-20231204094009656.png"></p><p>如果此时创建完成后，浏览器对弹出窗口拦截时，直接点击拦截窗口，选择<strong>始终允许弹出窗口并从<a href="http://localhost:8089重定向">http://localhost:8089重定向</a></strong>，然后点击完成即可：</p><p><img src="https://source.icode504.com/images/image-20231204100030936.png"></p><p><img src="https://source.icode504.com/images/image-20231204100106500.png"></p><p>6. 此时就会弹出一个流程设计的窗口：</p><p><img src="https://source.icode504.com/images/image-20231204100258286.png"></p><p>设计流程一共有五个步骤：</p><ol><li>绘制流程图</li><li>设置接收人规则</li><li>设计表单</li><li>检查流程</li><li>测试并运行该流程</li></ol><h1 id="二、绘制流程图"><a href="#二、绘制流程图" class="headerlink" title="二、绘制流程图"></a>二、绘制流程图</h1><p>1. 一个流程是由一个个流程节点组成的，如下图所示，Start Node和Node 2都是这个流程图的节点，绿色标志的是开始节点：</p><p><img src="https://source.icode504.com/images/image-20231204101134781.png"></p><p>2. 鼠标右键点击空白处，可以新建节点：</p><p><img src="https://source.icode504.com/images/image-20231204101318505.png"></p><p>3. 双击某个节点可以修改该节点的名称：</p><p><img src="https://source.icode504.com/images/image-20231204101530818.png"></p><p>4. 要想将两个节点连接起来，长按该节点的图标，然后将连接线拉向另一个节点：</p><p><img src="https://source.icode504.com/images/231204001.gif"></p><p>当然，如果你需要对连接线上添加文字说明，双击连接线即可：</p><p><img src="https://source.icode504.com/images/image-20231204102324735.png"></p><p>如需删除连接线，也需要双击连接线，点击删除即可：</p><p><img src="https://source.icode504.com/images/image-20231204102436768.png"></p><p>以下是一个简单的请假的流程模型：</p><p><img src="https://source.icode504.com/images/image-20231204102708338.png"></p><h1 id="三、设置接收人规则"><a href="#三、设置接收人规则" class="headerlink" title="三、设置接收人规则"></a>三、设置接收人规则</h1><p>接收人规则是指当前节点完成任务以后，这个任务转到下一节点时，由谁来处理。</p><p>JFlow默认的处理规则是：上一个节点选择那一个人（或者部门），就由这个人（部门）来处理。当然，我们也可以自行设计接收人规则。</p><p>鼠标右键点击节点，选择节点属性</p><p><img src="https://source.icode504.com/images/image-20231204103928929.png"></p><p><img src="https://source.icode504.com/images/image-20231204104144498.png"></p><p>接下来，我们就按照正常的请假流程设置每一个节点的接收人规则：</p><p>1. 员工填写请假单：我们假设公司所有的员工都可以填写请假单，因此规则设定为：所有的人员都可以发起：</p><p><img src="https://source.icode504.com/images/image-20231204105502375.png"></p><p>2. 部门领导审批：假设每一个员工都处于一个部门，那么员工要将请假单交给对应部门领导审批：</p><p><img src="https://source.icode504.com/images/image-20231204105852064.png"></p><p>假设部门领导角色是开发组长，这里选择<strong>程序员</strong>，点击保存，然后关闭此窗口：</p><p><img src="https://source.icode504.com/images/image-20231204105947521.png"></p><p>接收人规则页面也点击保存即可：</p><p><img src="https://source.icode504.com/images/image-20231204110044483.png"></p><p>3. 人事签字备案：设置规则和部门领导审批基本相同，分组模式中选择人力资源部经理审批即可：</p><p><img src="https://source.icode504.com/images/image-20231204110314753.png"></p><p><img src="https://source.icode504.com/images/image-20231204110406551.png"></p><p><img src="https://source.icode504.com/images/image-20231204110436302.png"></p><p>4. 总经理审批亦同理，分组模式中选择总经理审批即可：</p><p><img src="https://source.icode504.com/images/image-20231204110745634.png"></p><p><img src="https://source.icode504.com/images/image-20231204110807995.png"></p><p><img src="https://source.icode504.com/images/image-20231204110835391.png"></p><p>5. 查看请假单信息：由于是公司员工发起的请假申请，因此查看请假单信息应该由开始节点员工对应</p><p><img src="https://source.icode504.com/images/image-20231204111121990.png"></p><p>至此，整个请假流程的所有接收人规则设置完成。</p><h1 id="四、设计单个节点表单"><a href="#四、设计单个节点表单" class="headerlink" title="四、设计单个节点表单"></a>四、设计单个节点表单</h1><h2 id="4-1-表单方案的说明"><a href="#4-1-表单方案的说明" class="headerlink" title="4.1 表单方案的说明"></a>4.1 表单方案的说明</h2><p>鼠标右键点击节点，点击<strong>表单方案</strong>。</p><p><img src="https://source.icode504.com/images/image-20231204152808020.png"></p><p>系统默认给我们提供的是傻瓜表单。</p><p><img src="https://source.icode504.com/images/image-20231204152751665.png"></p><p>傻瓜表单指的是在一个表单中，对应一个标签和一个控件，例如：如果标签为姓名，那么控件对应的就是文本框；如果填写的是性别，那么需要填写的控件是单选框。</p><p>对于小白而言，<strong>选择傻瓜表单即可应对多种场景</strong>。当然，JFlow还为我们提供了更多的表单方案：</p><p><img src="https://source.icode504.com/images/image-20231204153816250.png"></p><h2 id="4-2-请假单页面分析与设计"><a href="#4-2-请假单页面分析与设计" class="headerlink" title="4.2 请假单页面分析与设计"></a>4.2 请假单页面分析与设计</h2><p>接下来，我们就是用表单方案，设计各级角色的请假申请单。</p><p>1. 员工填写请假单：鼠标右键点击节点，选择<strong>设计表单</strong>。进入表单设计页面：</p><p><img src="https://source.icode504.com/images/image-20231204154203357.png"></p><p>2. 对于申请人而言，需要填写申请人姓名、所在部门名称、申请日期、请假类别（例如：事假、病假、婚假、丧假等）、请假事由、请假开始时间、请假结束时间、请假时长计算。</p><ul><li>对于申请人姓名、所在部门名称、申请日期我们只需要保证能获取到当前登录用户的信息和填写申请所在日期即可，直接让系统自动生成，不需要人为填写。</li><li>请假类别对应的控件需要设置成单选框（假设请假只有一种情况）。</li><li>请假开始时间、结束时间需要使用时间输入框。并且开始时间必须保证是今天及之后，结束时间必须是开始时间及之后。</li><li>请假时长需要根据请假时间开始时间和请假结束时间计算即可。</li></ul><h2 id="4-3-绘制请假单基本框架"><a href="#4-3-绘制请假单基本框架" class="headerlink" title="4.3 绘制请假单基本框架"></a>4.3 绘制请假单基本框架</h2><p>按照前面对请假单页面的分析，绘制请假单。</p><p>1. 申请人姓名：在左侧组件的基本字段中选中文字框拖入到中间区域，此时弹出一个提示框，这里我们组件名称为申请人姓名，组件id按照系统默认生成的即可，完成后点击继续添加：</p><p><img src="https://source.icode504.com/images/image-20231204155818857.png"></p><p>2. 接下来组件名称填写为<strong>申请人所在部门</strong>，然后点击<strong>创建并继续添加</strong>：</p><p><img src="https://source.icode504.com/images/image-20231204160050348.png"></p><p>3. 申请日期的输入框类型是<strong>日期类型</strong>，然后填写组件名称，然后点击创建即可：</p><p><img src="https://source.icode504.com/images/image-20231204160300519.png"></p><p>4. 此时表单如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231204160403680.png"></p><p>5. 请假事由是一个文本框，将左面文字组件拖入到表单即可：</p><p><img src="https://source.icode504.com/images/image-20231204163815833.png"></p><p>6. 添加请假开始时间和请假结束时间，选择日期组件，输入格式设定为日期即可：</p><p><img src="https://source.icode504.com/images/image-20231204165216030.png"></p><p><img src="https://source.icode504.com/images/image-20231204165239922.png"></p><p>7. 请假时长控件的输入框类型选择数值即可：</p><p><img src="https://source.icode504.com/images/image-20231205084731593.png"></p><p>8. 至此，我们的请假单基本框架就绘制完成了，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231205092504817.png"></p><h2 id="4-4-对请假单进一步完善"><a href="#4-4-对请假单进一步完善" class="headerlink" title="4.4 对请假单进一步完善"></a>4.4 对请假单进一步完善</h2><p>1. 按照上面我们指定的要求：申请人姓名、所在部门、申请日期<strong>由系统自动生成</strong>，并且<strong>设置为只读</strong>。那么我们需要对这三个控件分别操作。</p><ul><li>首先，点击申请人姓名，点击小齿轮，进入组件设置：</li></ul><p><img src="https://source.icode504.com/images/image-20231204160611753.png"></p><ul><li>我们能看到当前组件的基本信息，将系统默认值设置为<strong>登陆人员名称</strong>，然后点击保存，然后关闭这个窗口即可。</li></ul><p><img src="https://source.icode504.com/images/image-20231204160755988.png"></p><ul><li>此时申请人姓名组件中文本框出现一个<code>@WebUser.Name</code>的标识，这是我们上一步设置的结果，不用修改。</li></ul><p><img src="https://source.icode504.com/images/image-20231204161014587.png"></p><ul><li>申请人所在部门的设置和申请人姓名设置基本相同，只不过将系统默认值改为<strong>登陆人员部门名称</strong>：</li></ul><p><img src="https://source.icode504.com/images/image-20231204161339799.png"></p><ul><li>申请日期的系统默认值设置为<code>@RDT</code>表示当前日期：</li></ul><p><img src="https://source.icode504.com/images/image-20231204161555868.png"></p><ul><li>设置完成后的表单如下图所示，我们需要将这三个组件设置为只读禁止修改：</li></ul><p><img src="https://source.icode504.com/images/image-20231204161729204.png"></p><ul><li>以申请人姓名组件为例，我们选中这个组件，然后在右侧开启<strong>是否只读</strong>：</li></ul><p><img src="https://source.icode504.com/images/image-20231204162023924.png"></p><ul><li>申请人所在部门、申请日期的设置只读方式和前面的相同，设置完成后的效果图如下：</li></ul><p><img src="https://source.icode504.com/images/image-20231204162119535.png"></p><p>2. 接下来，我们再添加两个组件：请假类别、请假事由。</p><ul><li>请假类别我们使用枚举单选控件，将其拉入表单中，此时会弹出一个添加枚举值字段的窗口，点击新建：</li></ul><p><img src="https://source.icode504.com/images/image-20231204163111633.png"></p><ul><li>标签填写<strong>请假类别</strong>，对应的类别名称我们填写到下面的枚举框中，完成后点击保存：</li></ul><p><img src="https://source.icode504.com/images/image-20231204163404217.png"></p><ul><li>选择请假类别的枚举值：</li></ul><p><img src="https://source.icode504.com/images/image-20231204163445971.png"></p><ul><li>弹出框的内容，点击确定：</li></ul><p><img src="https://source.icode504.com/images/image-20231204163542696.png"></p><ul><li>点击保存：</li></ul><p><img src="https://source.icode504.com/images/image-20231204163622231.png"></p><ul><li>选择请假事由组件，在右侧组件设置中的文本类型设置为<strong>大块文本</strong>，开启<strong>超长文本</strong>，控件栅格选择整行：</li></ul><p><img src="https://source.icode504.com/images/image-20231204164856107.png"></p><p>3. 接下来，我们为开始时间、结束时间、请假时长这三个组件设置规则：</p><ul><li>选中开始时间，点击齿轮，修改组件基本信息：选择日期输入限制，输入日期大于或等于当前日期，设置规则如下图所示：</li></ul><p><img src="https://source.icode504.com/images/image-20231204165807170.png"></p><ul><li>选中结束时间，点击齿轮，修改组件基本信息：选择日期输入限制，输入日期大于等于请假开始时间，设置规则如下图所示：</li></ul><p><img src="https://source.icode504.com/images/image-20231205083750437.png"></p><ul><li>选中请假时长，点击齿轮，修改组件基本信息：</li></ul><p><img src="https://source.icode504.com/images/image-20231205085558874.png"></p><ul><li>为了更好向用户展示请假时长，我们需要对请假时长设置时间单位，由于我们在前面选择的是日期格式，因此请假时长单位是以天为单位：选中组件，在右侧组件设置的后置提示设置为“天”</li></ul><p><img src="https://source.icode504.com/images/image-20231205090844220.png"></p><ul><li>请假是由用户填写上述的上述的开始日期和结束日期，经过系统计算而得出的，因此这一部分不需要我们填写，我们把这个控件设置为只读即可：选中请假时长控件，在右侧开启<strong>是否只读</strong>：</li></ul><p><img src="https://source.icode504.com/images/image-20231205090938030.png"></p><p>4. 点击最外面的组件，在右侧我们修改一下组件名字为：请假申请单</p><p><img src="https://source.icode504.com/images/image-20231205090419676.png"></p><p>5. 至此，“员工填写请假申请”节点的表单绘制完成，效果图如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231205091132577.png"></p><p>当然，我们只绘制了一个节点表单，那么其他节点的表单也在上述表单的基础上进行绘制。如何在这个表单的基础上绘制其他节点的表单，以及后续所有表单绘制完成后的操作如何，我们放到下一篇文章讲解。</p><p><img src="https://source.icode504.com/images/image-20231205174128064.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JFlow</tag>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scala 2安装教程（Windows版）</title>
    <link href="/posts/15.html"/>
    <url>/posts/15.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://scala-lang.org/">Scala官网</a>介绍：Scala是一门现代多范式编程语言，旨在以简洁、优雅和类型安全的方式表达常见的编程模式。它无缝衔接了面向对象语言和函数式语言的特性。</p><p>Scala是一门纯粹的面向对象语言，因为每个值都是一个对象。对象的类型和行为是通过类和特征来描述的。类可以通过子类化进行扩展，并使用灵活的基于mixin的组合机制作为多重继承的干净替代。</p><p>Scala 也是一门函数式语言，因为每个函数都是一个值。Scala 提供了定义匿名函数的轻量级语法，支持高阶函数，允许嵌套函数，并支持柯里化。Scala 的大小写类及其对模式匹配的内置支持提供了代数类型的功能，这在许多函数式语言中都有应用。单例对象为分组非类成员的函数提供了一种便捷的方式。</p><p>接下来就讲解一下Scala的下载与安装。</p><h1 id="安装前检查"><a href="#安装前检查" class="headerlink" title="安装前检查"></a>安装前检查</h1><p>请确保电脑本机安装了JDK，如果没有安装，请点击右侧链接查看JDK安装教程：<a href="./1.html">点我查看</a></p><p>安装完成后，按<kbd>Win</kbd>+<kbd>R</kbd>键，输入<code>cmd</code>，进入控制台，输入<code>java -version</code>，如果出现如下内容，就说明JDK已经安装成功了：</p><p><img src="https://source.icode504.com/images/image-20230314140629530.png"></p><blockquote><p>如果后续在官网下载Scala安装包比较慢，我个人推荐使用NDM（Neat Download Manager）下载器来下载，可以加快下载速度。</p><p>如果不需要或者已安装的朋友请忽略。没有安装的小伙伴可以点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/24.html">《NDM下载器安装配置教程》</a></p></blockquote><p>注意：下文一共提供了两种方式安装Scala，第三种方式是在线体验Scala。<strong>方式一、方式二任选其一安装</strong>即可。</p><h1 id="方式一：MSI方式安装Scala"><a href="#方式一：MSI方式安装Scala" class="headerlink" title="方式一：MSI方式安装Scala"></a>方式一：MSI方式安装Scala</h1><h2 id="一、Scala安装包下载"><a href="#一、Scala安装包下载" class="headerlink" title="一、Scala安装包下载"></a>一、Scala安装包下载</h2><p>1. 点击右侧链接，进入下载页面：<a href="https://www.scala-lang.org/download/all.html">点我查看</a></p><p>2. 这里我选择的是<code>2.12.18</code>版本的，在下方找到版本号后点击进入：</p><p><img src="https://source.icode504.com/images/image-20231209211237501.png"></p><p>3. 进入下载页面后，向下找到各个版本的下载链接，我使用的是Windows操作系统，这里我就点击Windows系统版本的Scala进行下载：</p><p><img src="https://source.icode504.com/images/image-20231209211413991.png"></p><h2 id="二、安装Scala"><a href="#二、安装Scala" class="headerlink" title="二、安装Scala"></a>二、安装Scala</h2><p>1. 双击打开Scala安装包，会出现欢迎界面，然后点击<code>Next</code>：</p><p><img src="https://source.icode504.com/images/image-20231012103003352.png"></p><p>2. 勾选下面的协议，然后点击<code>Next</code>：</p><p><img src="https://source.icode504.com/images/image-20231012103048983.png"></p><p>3. 选择安装路径，推荐安装在除C盘外的其他路径，并且路径中只包含英文，这里我安装在了D盘：</p><p><img src="https://source.icode504.com/images/image-20231012103459245.png"></p><p>4. 点击<code>Install</code>:</p><p><img src="https://source.icode504.com/images/image-20231012103526813.png"></p><p>5. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231012103553892.png"></p><p>6. 点击Finish，Scala安装完成</p><p><img src="https://source.icode504.com/images/image-20231012103625099.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面，输入<code>scala -version</code>，如果出现下图所示信息，说明Scala安装配置成功：</p><p><img src="https://source.icode504.com/images/image-20231012105320529.png"></p><h2 id="三、卸载Scala（可选）"><a href="#三、卸载Scala（可选）" class="headerlink" title="三、卸载Scala（可选）"></a>三、卸载Scala（可选）</h2><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>appwiz.cpl</code>，然后点击确定：</p><p><img src="https://source.icode504.com/images/image-20231228090817000.png"></p><p>2. 调出程序与功能的界面以后，找到<code>Scala Programming Language Distribution</code>，鼠标右键，点击卸载：</p><p><img src="https://source.icode504.com/images/image-20231228091109617.png"></p><p>3. 选择“是”：</p><p><img src="https://source.icode504.com/images/image-20231228091144885.png"></p><p>4. Scala卸载中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231228091227059.png"></p><p><img src="https://source.icode504.com/images/image-20231228091232179.png"></p><p>5. Scala卸载完成！此时在控制台上输入<code>scala -version</code>无反应：</p><p><img src="https://source.icode504.com/images/image-20231228091352622.png"></p><h1 id="方式二：压缩包方式安装Scala"><a href="#方式二：压缩包方式安装Scala" class="headerlink" title="方式二：压缩包方式安装Scala"></a>方式二：压缩包方式安装Scala</h1><h2 id="一、Scala安装包下载-1"><a href="#一、Scala安装包下载-1" class="headerlink" title="一、Scala安装包下载"></a>一、Scala安装包下载</h2><p>1. 点击右侧链接，进入下载页面：<a href="https://www.scala-lang.org/download/all.html">点我查看</a></p><p>2. 这里我选择的是<code>2.12.18</code>版本的，在下方找到版本号后点击进入：</p><p><img src="https://source.icode504.com/images/image-20231209211237501.png"></p><p>3. 进入下载页面后，向下找到各个版本的下载链接，我使用的是Windows操作系统，这里我就点击Windows系统版本的Scala进行下载：</p><p><img src="https://source.icode504.com/images/image-20231228092026444.png"></p><h2 id="二、安装配置Scala"><a href="#二、安装配置Scala" class="headerlink" title="二、安装配置Scala"></a>二、安装配置Scala</h2><p>1. 将下载好的压缩包解压到一个你熟悉的位置（为了避免后续出现各种奇奇怪怪问题，建议文件路径选择英文路径），这里我安装在了D盘：</p><p><img src="https://source.icode504.com/images/image-20231228092238561.png"></p><p><img src="https://source.icode504.com/images/image-20231228092350172.png"></p><p><img src="https://source.icode504.com/images/image-20231228092413901.png"></p><p>2. 找到Scala安装路径，并复制：</p><p><img src="https://source.icode504.com/images/image-20231228093714744.png"></p><p>3. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314133908963.png"></p><p>4. 点击高级系统设置</p><p><img src="https://source.icode504.com/images/image-20230314134201936.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://source.icode504.com/images/Snipaste_2023-03-14_13-44-54.png"></p></blockquote><p>5. 点击环境变量</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>6. 点击新建</p><p><img src="https://source.icode504.com/images/image-20230314134919881.png"></p><p>7. 配置系统变量，按照图示操作即可</p><p><img src="https://source.icode504.com/images/image-20231228094023984.png"></p><p>8. 双击Path进入</p><p><img src="https://source.icode504.com/images/image-20231228094502229.png"></p><p>9. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20231228094240240.png"></p><p>10. 验证Scala环境变量是否配置成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，打开命令行窗口，输入<code>scala -version</code>，出现Scala版本信息就说明Scala环境变量配置成功了！</p><p><img src="https://source.icode504.com/images/image-20231228094810283.png"></p><h2 id="三、移除Scala（可选）"><a href="#三、移除Scala（可选）" class="headerlink" title="三、移除Scala（可选）"></a>三、移除Scala（可选）</h2><p>1. 找到Scala的安装目录，鼠标右键删除即可（如果不走回收站彻底删除，就直接按<kbd>Shift</kbd>和<kbd>Delete</kbd>键）</p><p><img src="https://source.icode504.com/images/image-20231228095440509.png"></p><p>2. 删除环境变量：按照前面配置步骤，打开环境变量。找到前面我们配置的<code>SCALA_HOME</code>，点击右下角<strong>删除</strong>：</p><p><img src="https://source.icode504.com/images/image-20231228095642032.png"></p><p>3. 双击进入Path：</p><p><img src="https://source.icode504.com/images/image-20231228100153183.png"></p><p>4. 找到并选中<code>%SCALA_HOME%\bin</code>，然后一路点击确定即可。</p><p><img src="https://source.icode504.com/images/image-20231228100351079.png"></p><p>至此，Scala就从本机成功移除了。</p><h1 id="方式三：免安装，直接在线体验Scala"><a href="#方式三：免安装，直接在线体验Scala" class="headerlink" title="方式三：免安装，直接在线体验Scala"></a>方式三：免安装，直接在线体验Scala</h1><p>我们可以使用Scala官网为我们提供了在线编程页面，这种方式最大的优点是你不需要安装Scala，直接编程运行体验。但是缺点也很明显，后续使用Scala及大数据相关框架我们使用的最多的还是本地安装Scala，在Intellij IDEA中编写代码。</p><p>这种方式非常适合新手，省去安装配置Scala的各种繁琐步骤。</p><p>1. 浏览器打开Scala官网在线编程界面：<a href="https://scastie.scala-lang.org/">点我查看</a></p><p>2. 以下是我在编辑器中写的一段Scala代码（演示用，感兴趣的可以敲一敲）：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> greeting: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教！&quot;</span><br>println(greeting)<br><br><span class="hljs-keyword">var</span> a: <span class="hljs-type">Int</span> = <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> b: <span class="hljs-type">Int</span> = <span class="hljs-number">40</span><br>println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b))<br></code></pre></td></tr></table></figure><p>3. 点击左上角的<code>Run</code>即可运行：</p><p><img src="https://source.icode504.com/images/image-20231228105809379.png"></p><p>4. 在下方的控制台即可看到内容的输出：</p><p><img src="https://source.icode504.com/images/image-20231228105819934.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Scala</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 若依-JFlow配置与启动</title>
    <link href="/posts/16.html"/>
    <url>/posts/16.html</url>
    
    <content type="html"><![CDATA[<p>若依（Ruoyi）一款开源的后台管理admin框架，JFlow 是一款经典的纯国产全开源的工作流引擎，该版本是两者的完美结合。</p><p>RuoYi是一个后台管理系统，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf）主要目的让开发者注重专注业务，降低技术难度，从而节省人力成本，缩短项目周期，提高软件安全质量。</p><p>JFlow是由济南驰骋团队负责研发，开发语言主要是Java，是一款开源软件，工作流引擎操作简单，概念通俗易懂，操作手册完善（计:14万字操作手册说明书），代码注释完整，案例丰富翔实，单元测试完整，符合国内多种场景的需要。</p><p>以下是二者的官网：<a href="https://ruoyi.vip/">若依官网</a>，<a href="http://ccflow.org/">驰骋官网</a></p><h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>需要安装如下软件：</p><table><thead><tr><th>软件名称</th><th>安装教程</th></tr></thead><tbody><tr><td>Java</td><td><a href="./1.html">点我查看</a></td></tr><tr><td>MySQL</td><td><a href="./20.html">点我查看</a></td></tr><tr><td>Intellij IDEA</td><td><a href="./14.html">点我查看</a></td></tr><tr><td>Navicat</td><td><a href="https://www.jianshu.com/p/4bb2e2bfb449">点我查看</a></td></tr><tr><td>Maven</td><td><a href="https://blog.csdn.net/m0_72248235/article/details/130589912?spm=1001.2014.3001.5501">点我查看</a></td></tr><tr><td>Git</td><td><a href="https://blog.csdn.net/u012124199/article/details/114004087">点我查看</a></td></tr></tbody></table><h1 id="二、若依-JFlow代码下载"><a href="#二、若依-JFlow代码下载" class="headerlink" title="二、若依-JFlow代码下载"></a>二、若依-JFlow代码下载</h1><p>1. 找到一个合适文件夹，鼠标右键，点击<code>Git Bash Here</code>，此时会进入Git命令行窗口：</p><p><img src="https://source.icode504.com/images/image-20231201104451452.png"></p><p>2. 复制下面的内容到Git命令行并回车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/opencc/RuoYi-JFlow.git<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果你在gitee中添加了SSH KEY，也可以直接复制下面的内容到Git命令行中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@gitee.com:opencc/RuoYi-JFlow.git<br></code></pre></td></tr></table></figure></blockquote><p>3. Git中如果出现如下提示及说明代码克隆完成：</p><p><img src="https://source.icode504.com/images/image-20231201105147112.png"></p><h1 id="三、导入项目"><a href="#三、导入项目" class="headerlink" title="三、导入项目"></a>三、导入项目</h1><p>1. 使用Intellij IDEA打开这个文件夹：</p><p><img src="https://source.icode504.com/images/image-20231201105456043.png"></p><p>2. 打开<code>Settings</code>，按照下图所示配置Maven</p><p><img src="https://source.icode504.com/images/image-20231201105802938.png"></p><p>3. 下载依赖需要一段时间，请耐心等待。</p><p>4. 在左侧项目目录，选中<code>sql</code>文件，按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>，复制文件路径</p><p><img src="https://source.icode504.com/images/image-20231201110144811.png"></p><p>5. 打开Navicat，如果你没有和本地MySQL连接的话，就点击左上角的连接，选择MySQL</p><p><img src="https://source.icode504.com/images/image-20231201110329123.png"></p><p>6. 连接名自定义或者不填，用户名填写root，密码即root用户的密码，填写完成后点击确定</p><p><img src="https://source.icode504.com/images/image-20231201110541430.png"></p><p>7. 鼠标右键点击新建数据库</p><p><img src="https://source.icode504.com/images/image-20231201110738537.png"></p><p>8. 数据库名称自定义，这里我命名为<code>ruoyi_jflow</code>，字符集选择<code>utf8mb4</code>即可，排序规则选择<code>utf8mb4_0900_ai_ci</code>即可，然后点击<strong>确定</strong>。</p><p><img src="https://source.icode504.com/images/image-20231201111256799.png"></p><p>9. 鼠标右键点击数据库，点击<strong>运行SQL文件</strong>：</p><p><img src="https://source.icode504.com/images/image-20231201111742572.png"></p><p>10. 按照下图所示导入SQL：</p><p><img src="https://source.icode504.com/images/image-20231201111908315.png"></p><p><img src="https://source.icode504.com/images/image-20231201111954377.png"></p><p><img src="https://source.icode504.com/images/image-20231201112052134.png"></p><p><img src="https://source.icode504.com/images/image-20231201112138717.png"></p><p>11. 导入SQL中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231201112248515.png"></p><p>12. 导入完成，点击关闭：</p><p><img src="https://source.icode504.com/images/image-20231201112320508.png"></p><p>13. 刷新一下数据库，一共由242张表</p><p><img src="https://source.icode504.com/images/image-20231201162802611.png"></p><p>12. 双击打开IDEA项目中的<code>application-druid2.yml</code>文件</p><p><img src="https://source.icode504.com/images/image-20231201113749133.png"></p><p>13. 修改数据库配置</p><p><img src="https://source.icode504.com/images/image-20231201115235424.png"></p><p>14. 将<code>application-druid2.yml</code>文件改为<code>application-druid.yml</code></p><p><img src="https://source.icode504.com/images/image-20231201115432241.png"></p><p><img src="https://source.icode504.com/images/image-20231201115332224.png"></p><p>14. 点击文件左上角<code>File -&gt; Project Stucture</code>，确保版本是JDK 8：</p><p><img src="https://source.icode504.com/images/image-20231201114408428.png"></p><p>15. Redis配置：需要确保你在本地安装Redis，如果没有安装包，点击右侧链接下载：<a href="https://icode504.lanzouw.com/irWZP1ghutla">点我下载</a></p><ul><li><p>找一个你熟悉的位置，创建一个文件夹，命名为Redis</p></li><li><p>将下载的压缩包解压到这个文件夹中</p></li></ul><p><img src="https://source.icode504.com/images/image-20231201150102280.png"></p><ul><li>在上方文件路径中输入<code>cmd</code>并回车，进入命令行</li><li>在命令行中输入如下指令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server --service-install redis.windows-service.conf<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20231201150335394.png"></p><ul><li>此时按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Esc</kbd>，打开任务管理器，点击服务，在下方找到Redis说明软件配置成功：</li></ul><p><img src="https://source.icode504.com/images/image-20231201151105294.png"></p><p>16. 打开项目中<code>application.yml</code>，这里关于Redis的配置信息不用修改，因为上面我们已经成功启动了本地Redis服务了：</p><p><img src="https://source.icode504.com/images/image-20231201151340895.png"></p><h1 id="四、启动项目"><a href="#四、启动项目" class="headerlink" title="四、启动项目"></a>四、启动项目</h1><p>1. 项目启动：点击右上角Debug调试启动，如果出现下面内容，就说明后端项目启动成功</p><p><img src="https://source.icode504.com/images/image-20231201150836073.png"></p><blockquote><p>说明：如果后端项目起不来，报错信息是8089端口被占用（如下图）</p><p><img src="https://source.icode504.com/images/image-20231201141026025.png"></p><p>解决办法：打开项目中的<code>application.yml</code>，找到<code>server.port</code>，将端口号修改成你知道的即可，这里我改成8090：</p><p><img src="https://source.icode504.com/images/image-20231201141214554.png"></p><p>重启一下项目即可。</p></blockquote><p>2. 打开浏览器，在上方输入地址：<a href="http://localhost:8089/ry-jflow/login">点我进入</a>，进入登录页面：</p><p>账号名：admin，密码：admin123</p><p><img src="https://source.icode504.com/images/image-20231201150919953.png"></p><p>3. 登录成功：</p><p><img src="https://source.icode504.com/images/image-20231201150939145.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>框架</category>
      
      <category>Java</category>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Git</tag>
      
      <tag>JFlow</tag>
      
      <tag>Maven</tag>
      
      <tag>MySQL</tag>
      
      <tag>开源</tag>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle安装与配置教程（Windows版）</title>
    <link href="/posts/23.html"/>
    <url>/posts/23.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 检查电脑上是否安装JDK，如果没有安装，请点击下方<strong>任意一个</strong>链接查看安装教程（这里我使用的是JDK 8）。</p><table><thead><tr><th align="center"><a href="./1.html">JDK 8安装教程</a></th><th align="center"><a href="./28.html">JDK 11安装教程</a></th><th align="center"><a href="./26.html">JDK 17安装教程</a></th><th align="center"><a href="./27.html">JDK 21安装教程</a></th></tr></thead></table><p>2. 如果电脑上已经安装JDK，按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，然后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/0aedba0e40c0f9f2ef5041ce0c93c7d8.png"></p><p>3. 输入<code>java -version</code>，按一下回车键，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功：</p><p><img src="https://source.icode504.com/images/52280b5c9f2c1705e03fb27ea671af0f.png"></p><h1 id="二、Gradle下载"><a href="#二、Gradle下载" class="headerlink" title="二、Gradle下载"></a>二、Gradle下载</h1><blockquote><p>  如果你使用的SpringBoot项目，建议使用6.8及以上版本的Gradle。</p></blockquote><p>以下两种下载方式任选其一：</p><h2 id="方式一：百度网盘下载"><a href="#方式一：百度网盘下载" class="headerlink" title="方式一：百度网盘下载"></a>方式一：百度网盘下载</h2><p>请点击下方任意一个链接，进入下载页面：</p><table><thead><tr><th align="center"><a href="https://pan.baidu.com/s/1Nc0-DKvcxBylkSLV99LtPA?pwd=1024">点击下载</a></th><th align="center"><a href="https://pan.baidu.com/s/1P8IYEwPfooZea2VdsDq5fg?pwd=1024">备用下载1</a></th><th align="center"><a href="https://pan.baidu.com/s/1FjpGp7ijBCwMeyPqJdmYuA?pwd=1024">备用下载2</a></th></tr></thead></table><p><img src="https://source.icode504.com/images/image-20240311121145684.png"></p><p><img src="https://source.icode504.com/images/image-20240311121311976.png"></p><h2 id="方式二：官网下载"><a href="#方式二：官网下载" class="headerlink" title="方式二：官网下载"></a>方式二：官网下载</h2><p>1. 打开官网下载界面：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p><img src="https://source.icode504.com/images/ad47bfc158abac0b8a5826545e6c79f9.png"></p><p>2. 这里我选择8.0.2版本下载。点击<code>complete</code>下载</p><p><img src="https://source.icode504.com/images/ddd68e56bc5944099d9147df3512a793.png"></p><h1 id="三、Gradle配置环境变量"><a href="#三、Gradle配置环境变量" class="headerlink" title="三、Gradle配置环境变量"></a>三、Gradle配置环境变量</h1><p>1. 将下载的压缩包进行解压，<strong>建议解压目录只包含英文路径</strong>，这里我解压到了E盘：</p><p><img src="https://source.icode504.com/images/0a4af939173256af69ad0680e2aa03a4.png"></p><p>2. 双击打开<code>gradle-8.0.2</code>目录，鼠标右键复制路径：</p><p><img src="https://source.icode504.com/images/9cd654aae344c32426bb373aea375b8e.png"></p><p>3. 在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/f697704142b2f047a745a2d86a239994.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/1765e57d00639a95fc8efce9a0d89e93.png"></p><p>6. 在下方系统变量点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/ac0e3261b85c6ce2fe2572362d01d813.png"></p><p>7. 如下图，变量名输入<code>GRADLE_HOME</code>，变量值是前面第2步复制的路径粘贴即可，完成后点击<strong>确定</strong>：</p><p><img src="https://source.icode504.com/images/51d54e16a281094de98e90c2f68839f5.png"></p><p>8. 在系统变量中<strong>双击打开Path</strong>：</p><p><img src="https://source.icode504.com/images/6d6d2c63710adbbc6169a12d3d2bc9c5.png"></p><p>9. 在右上角点击<strong>新建</strong>，输入<code>%GRADLE_HOME%\bin</code>，完成后<strong>一路点击确定</strong>：</p><p><img src="https://source.icode504.com/images/01402c291cf35c4ae0e507a3f648ce2b.png"></p><p>10. 验证Gradle是否安装成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>打开命令提示行。输入<code>gradle -v</code>，如果有下面的版本说明Gradle环境变量配置成功：</p><p><img src="https://source.icode504.com/images/3ef98b93a4e6c75335da8a9ab0ca05a6.png"></p><h1 id="四、配置下载源"><a href="#四、配置下载源" class="headerlink" title="四、配置下载源"></a>四、配置下载源</h1><p>由于Gradle自带Maven下载源是国外的，在后续下载依赖的过程中会比较慢。这里我们需要将下载源换成国内镜像。</p><p>1. 需要保证能看到文件的后缀名：在文件夹上方点击<strong>查看</strong>，在右侧勾选<strong>文件扩展名</strong>：</p><p><img src="https://source.icode504.com/images/85e411cb52a2cb2aa9536eebc93992ac.png"></p><p>2. 打开Gradle目录，进入init.d文件夹，会发现里面有一个<code>readme.txt</code>文件，打开后会有如下信息</p><p><img src="https://source.icode504.com/images/b7c4f64045b4e81a2394fab571e01f94.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You can <span class="hljs-built_in">add</span> .gradle (e.g. test.gradle) init scripts <span class="hljs-built_in">to</span> this <span class="hljs-built_in">directory</span>. Each <span class="hljs-literal">one</span> is executed <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">start</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> build.<br></code></pre></td></tr></table></figure><p>简单翻译一下就是需要在init.d目录下配置一个初始文件，这里我们需要新建一个<code>init.gradle</code>文件。</p><p>3. 鼠标右键新建并打开init.txt文件，将下面的内容粘贴到文件中，然后点击<code>保存</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>    repositories &#123; <br>        mavenLocal() <br>        maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125; <br>        maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&quot;https://nexus.bsdn.org/content/groups/public/&quot;</span> &#125; <br>        mavenCentral()<br>    &#125;<br>    buildscript &#123;<br>        repositories &#123; <br>            maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&#x27;https://nexus.bsdn.org/content/groups/public/&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;M2&quot;</span> ; url <span class="hljs-string">&#x27;https://plugins.gradle.org/m2/&#x27;</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4. 将文件命名为<code>init.gradle</code>，对下面弹窗提示点击确定。至此，Gradle下载源配置成功：</p><p><img src="https://source.icode504.com/images/3362e93e0d0a401da1d2b302b32debca.png"></p><p><img src="https://source.icode504.com/images/6282e25c86f3f137c5bfad2c06f4dea7.png"></p><h1 id="五、Intellij-IDEA创建Gradle项目"><a href="#五、Intellij-IDEA创建Gradle项目" class="headerlink" title="五、Intellij IDEA创建Gradle项目"></a>五、Intellij IDEA创建Gradle项目</h1><blockquote><p>需要安装Intellij IDEA的小伙伴点击右侧链接查看安装教程：<a href="./14.html">点我查看</a></p></blockquote><p>1. 新建Gradle项目或模块：</p><p><img src="https://source.icode504.com/images/76203ff9222dc0959eb8f4f4b6710651.png"></p><p>2. 创建完成后，按<code>Ctrl + Alt + S</code>打开设置，找到Gradle并按下图设置</p><p><img src="https://source.icode504.com/images/3a6931121aca6a1337384bb29e984842.png"></p><p>3. 使用JUnit4进行测试：在IDEA左侧目录打开<code>build.gradle</code>文件，在<code>dependencies</code>中添加一条依赖：</p><p><img src="https://source.icode504.com/images/0c7c204a4797f32c5d821cd015b03b98.png"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    testImplementation <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4. 在src目录下，创建<code>test\java</code>目录：</p><p><img src="https://source.icode504.com/images/2c073ecb104c4d60e7595dcbfde0ba49.png"></p><p><img src="https://source.icode504.com/images/8d1f80eed162d14c06fb54c48ebd4993.png"></p><p>5. 创建一个测试类MyTest01</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> MyTest01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span> 2023/5/2 23:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest01</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6. 点击运行，即可看到控制台输出内容：</p><p><img src="https://source.icode504.com/images/c2a4f011461c0b9ae39146278dc01824.png"></p><h1 id="六、Eclipse创建Gradle项目"><a href="#六、Eclipse创建Gradle项目" class="headerlink" title="六、Eclipse创建Gradle项目"></a>六、Eclipse创建Gradle项目</h1><blockquote><p>  需要安装Eclipse的小伙伴点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/30.html">点我查看</a></p></blockquote><p>1. 在Eclipse上方打开<code>Windows --&gt; Preferences</code>，按照下图所示配置。</p><p><img src="https://source.icode504.com/images/d1ed50fd2d6d53e7228c399917af64a6.png"></p><p>2. 重启Eclipse，新建一个Gradle项目：</p><p><img src="https://source.icode504.com/images/6b7b7e21dd32bf0cea197005cee1c235.png"></p><p><img src="https://source.icode504.com/images/70e6342f92228aa46eacabaac8430058.png"></p><p>3. 进入到欢迎页后，取消勾选，点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/847ff89caac5801d11fac987ce409165.png"></p><p>4. 自定义项目名称，然后点击<strong>Next</strong>：</p><p><img src="https://source.icode504.com/images/b5859c84ee9dfe9247e180f8a55bbccb.png"></p><p>5. 点击<strong>Finish</strong>，Gradle项目创建完成：</p><p><img src="https://source.icode504.com/images/c67916d21c69090fdccda4347bf7ab4c.png"></p><p>6. 在左侧目录打开<code>lib --&gt; build.gradle</code>文件，导入如下依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>testImplementation <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>7. 在<code>src\test\java</code>目录下创建一个Java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest02</span> &#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello, world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8. 双击方法名，鼠标右键点击运行，即可看到控制台输出：</p><p><img src="https://source.icode504.com/images/f7cb09e65cbda0e8bce348157bdd2596.png"></p><p><img src="https://source.icode504.com/images/960ed61f612e91c852a19b6f68c62ff4.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>项目构建工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问Github卡顿甚至进不去的解决办法（适用于Windows）</title>
    <link href="/posts/25.html"/>
    <url>/posts/25.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Github 是全球知名的开源宝库，但是对国内用户并不友好。当我们在浏览器中输入<code>www.github.com</code>时，如果你赶的时间点比较好可能会进去，但是大多数情况下浏览器不会对你的请求做出任何响应，就像下图这样：</p><p><img src="https://source.icode504.com/images/image-20231229085526297.png"></p><p>那么，有什么办法解决这个问题呢？</p><h1 id="二、访问-Github——Watt-Tookit（原-Steam-）"><a href="#二、访问-Github——Watt-Tookit（原-Steam-）" class="headerlink" title="二、访问 Github——Watt Tookit（原 Steam++）"></a>二、访问 Github——Watt Tookit（原 Steam++）</h1><p>官网介绍：Watt Tookit 是一个开源的跨平台的多功能 Stream 工具箱，它可以管理你 Steam 游戏库存，监控 Steam 游戏下载进度实现自动定时关机等功能。本文要介绍的是它的网络加速功能，它内部添加了 Github 网络加速功能。</p><p>原作者在 B 站有账号，感兴趣的小伙伴可以关注支持一下：<a href="https://space.bilibili.com/3546572635768935">点我传送到 B 站</a></p><p>接下来我们就来安装一下 Watt Tookit：</p><p>1. 点击右侧链接进入官网：<a href="https://steampp.net/">点我进入官网</a></p><p>2. 根据自己的操作系统下载，这里我使用的是 Windows 版本，点击下载按钮：</p><p><img src="https://source.icode504.com/images/image-20231229091457093.png"></p><p>3. 此时会弹出一个 GNU 通用公共许可证协议，点击右下角<strong>接受并下载</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229091615168.png"></p><p>4. 官方给了我们多个下载渠道，大家任选一种方式下载即可，这里我给大家标注了下载的优先级：</p><p><img src="https://source.icode504.com/images/image-20231229092847673.png"></p><p>5. 我选择的是蓝奏云下载，访问密码：1234，进入后直接下载 exe 安装包：</p><p><img src="https://source.icode504.com/images/image-20231229093049336.png"></p><p>6. 双击打开安装包，点击自定义安装，选择安装位置，这里我安装在了 D 盘：</p><p><img src="https://source.icode504.com/images/image-20231229093303865.png"></p><p><img src="https://source.icode504.com/images/image-20231229093315287.png"></p><p><img src="https://source.icode504.com/images/image-20231229093436756.png"></p><p><img src="https://source.icode504.com/images/image-20231229093446834.png"></p><p>7. 点击<strong>立即安装</strong>，软件开始安装：</p><p><img src="https://source.icode504.com/images/image-20231229093527419.png"></p><p><img src="https://source.icode504.com/images/image-20231229093535180.png"></p><p>8. 安装完成，点击<strong>立即体验</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229093625530.png"></p><p>9. 打开后，点击左侧第二个图标<strong>网站加速</strong>，向下翻找到 Github 并勾选，</p><p><img src="https://source.icode504.com/images/image-20231229093925945.png"></p><p>10. 此时在浏览器再次访问<a href="https://www.github.com/">Github</a>，就可以正常显示页面了。虽然访问速度还是慢，但是总比响应超时啥也不显示的强：</p><p><img src="https://source.icode504.com/images/image-20231229101555911.png"></p><p>此时我们使用<code>git clone</code>命令拉取仓库代码，或者是使用<code>git push</code>命令将代码推送到我们的 Github 仓库就不会因为网络问题而无法进行操作的问题了。</p><h1 id="三、下载-Github-中的内容"><a href="#三、下载-Github-中的内容" class="headerlink" title="三、下载 Github 中的内容"></a>三、下载 Github 中的内容</h1><p>Github 有很多优秀的开源作品可以下载，如果是大文件使用浏览器，等到猴年马月都下载不完（下载速度真的是太慢了），以下是使用 NDM 和 Github 加速网站下载 Github 的内容的实现步骤。</p><p>这里我想下载 Google 家的 Noto Serif 全语言字体包（<a href="https://github.com/notofonts/noto-cjk/releases">点我查看源网站</a>），文件大小 600M 左右，如果正常使用浏览器下载非常慢，接下来我们就使用 NDM+Github 加速网站解决上述问题。</p><blockquote><p>本文后续内容使用 NDM（Neat Download Manager）下载文件，如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器 NDM（Neat Download Manager）安装配置教程（适用于 Windows 和 MacOS）</a></p></blockquote><p><img src="https://source.icode504.com/images/image-20231229102536561.png"></p><p>3. 首先，我们对要下载的文件，鼠标右键<strong>复制链接</strong>：</p><p><img src="https://source.icode504.com/images/image-20231229102717918.png"></p><p>4. 以下是我整理的 Github 镜像网站，大家任选一个链接进入即可，这里我选择第一个网站进入：</p><table><thead><tr><th>网站名称</th><th>链接</th></tr></thead><tbody><tr><td>Github 镜像站 1</td><td><a href="https://ghproxy.net/">https://ghproxy.net/</a></td></tr><tr><td>Github 镜像站 2</td><td><a href="https://moeyy.cn/gh-proxy">https://moeyy.cn/gh-proxy</a></td></tr><tr><td>Github 镜像站 3</td><td><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn/</a></td></tr></tbody></table><p>5. 将上面复制的链接粘贴到输入框中，点击下载即可</p><p><img src="https://source.icode504.com/images/image-20231229103230888.png"></p><p>6. 使用 NDM，下载速度直接原地起飞：</p><p><img src="https://source.icode504.com/images/image-20231229103620649.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>常用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Neat Download Manager</tag>
      
      <tag>NDM</tag>
      
      <tag>Github</tag>
      
      <tag>Watt Tookit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 17安装配置教程（Windows版）</title>
    <link href="/posts/26.html"/>
    <url>/posts/26.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文下载文件使用的是NDM（Neat Download Manager），如需使用此款软件的小伙伴，可以查看这篇教程：<a href="./24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p><p>接下来为大家讲解一下JDK 17如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>1. 打开Oracle JDK官网：<a href="https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">点我查看</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是17.0.6版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://source.icode504.com/images/image-20240102140251099.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20240102140356853.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://source.icode504.com/images/image-20240102140438115.png"></p><p><img src="https://source.icode504.com/images/image-20240102140629136.png"></p><p><img src="https://source.icode504.com/images/image-20240102140706171.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20240102140729167.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://source.icode504.com/images/image-20240102140754229.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240102141010328.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240102141211785.png"></p><p>7. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://source.icode504.com/images/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 17安装成功了：</p><p><img src="https://source.icode504.com/images/image-20240102141350623.png"></p><p><img src="https://source.icode504.com/images/image-20240102141433688.png"></p><p><img src="https://source.icode504.com/images/image-20240102141538207.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之七-Java运算符（下）</title>
    <link href="/posts/9.html"/>
    <url>/posts/9.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、三元运算符的使用"><a href="#一、三元运算符的使用" class="headerlink" title="一、三元运算符的使用"></a>一、三元运算符的使用</h1><p>三元运算符（也称作三目运算符），使用<code>:</code>和<code>?</code>表示，其格式为：<strong>布尔表达式 ? 表达式1 : 表达式2</strong></p><ul><li>如果布尔表达式的计算结果是<code>true</code>，那么执行表达式1；否则，如果布尔表达式的计算结果是<code>false</code>，则执行表达式2。</li><li><strong>表达式1和表达式2计算结果的数据类型必须要和左侧变量定义的数据类型保持一致</strong>。例如：表达式1和表达式2的计算结果都是<code>double</code>类型，那么左侧定义的变量类型也是<code>double</code>。</li></ul><p>以下是三元运算符作用原理图：</p><p><img src="https://source.icode504.com/images/%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg"></p><p>以下是三元运算符在代码中的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三元运算符的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-25 11:57:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ternary</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> byteValue1 &gt; byteValue2 ? byteValue1 : byteValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">40.13</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30.28</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> doubleValue1 == doubleValue2 ? doubleValue1 : doubleValue2;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> strValue1.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;strValue1的长度是0&quot;</span> : <span class="hljs-string">&quot;strValue1的长度不是0&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231027105629436.png"></p><p>三元运算符可以嵌套使用，但不推荐，原因是可读性变差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> strValue.length();<br><span class="hljs-comment">// 不推荐嵌套的写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> length &gt; <span class="hljs-number">0</span> ? length &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;strValue的长度在0~10之间&quot;</span> : <span class="hljs-string">&quot;strValue的长度超过10&quot;</span> : <span class="hljs-string">&quot;strValue的长度为0&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br></code></pre></td></tr></table></figure><p>嵌套式写法做进一步简化处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> strValue.length();<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> length &gt; <span class="hljs-number">0</span> &amp;&amp; length &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;strValue的长度在0~10之间&quot;</span> : <span class="hljs-string">&quot;strValue的长度不在0~10之间&quot;</span>;<br>System.out.println(result);<br></code></pre></td></tr></table></figure><h1 id="二、三元运算符和if语句的区别"><a href="#二、三元运算符和if语句的区别" class="headerlink" title="二、三元运算符和if语句的区别"></a>二、三元运算符和if语句的区别</h1><p>共同点：三元运算符和<code>if</code>语句的作用都是用作条件判断。但二者也存在一些差别：</p><p>1. 语法层面：在大多数情况下，三元运算符语法是一行语句，<code>if</code>语句可能是多行。例如：判断一个字符串的长度是否为0，以下分别是三元运算符和<code>if</code>语句的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 三元运算符写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> strValue.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;strValue的长度为0&quot;</span> : <span class="hljs-string">&quot;strValue的长度不为0&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br>String result;<br><span class="hljs-keyword">if</span> (strValue.length() == <span class="hljs-number">0</span>) &#123;<br>    result = <span class="hljs-string">&quot;strValue的长度为0&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    result = <span class="hljs-string">&quot;strValue的长度不为0&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. 代码可读性：对于简单的条件判断，使用三元运算符确实可以简化代码，但是如果是复杂条件或者嵌套，那么三元运算符会让代码变得更加复杂难以理解。</p><p>3. 灵活性：<code>if</code>语句中可以在代码块中放入更多的表达式，但是三目运算符的表达式只能存在一个。</p><p>总体来说，三目运算符和<code>if</code>语句都有各自的优点和使用场景。在简单的情况下，使用三目运算符比较方便；在复杂情况下，使用<code>if</code>语句更合适。</p><h1 id="三、运算符的优先级"><a href="#三、运算符的优先级" class="headerlink" title="三、运算符的优先级"></a>三、运算符的优先级</h1><p>前面学过很多的运算符：例如算术运算符、比较运算符、逻辑运算符等等，如果这些运算符进行混合运算时，存在着一个优先级，即谁先计算，谁后计算的问题。数学中存在这样一条规定：先乘除，后加减。也就是说，乘和除是同一级别，二者的计算级别要比加和减的级别高。这条规定在Java中也完全适用。</p><p>以下是运算符的优先级顺序表（由高到低，这张表了解即可，不需要额外记忆）：</p><table><thead><tr><th>运算符</th><th>关联性</th></tr></thead><tbody><tr><td>()   []</td><td>从左向右</td></tr><tr><td>!   ~   ++   –   正负号</td><td>从右向左</td></tr><tr><td>*   &#x2F;   %</td><td>从左向右</td></tr><tr><td>+   -</td><td>从左向右</td></tr><tr><td>&lt;&lt;   &gt;&gt;   &gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>&lt;   &lt;&#x3D;   &gt;   &gt;&#x3D;   instanceof</td><td>从左向右</td></tr><tr><td>&#x3D;&#x3D;   !&#x3D;</td><td>从左向右</td></tr><tr><td>&amp;</td><td>从左向右</td></tr><tr><td>^</td><td>从左向右</td></tr><tr><td>|</td><td>从左向右</td></tr><tr><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>||</td><td>从左向右</td></tr><tr><td>?:</td><td>从右向左</td></tr><tr><td>&#x3D;   +&#x3D;   -&#x3D;   *&#x3D;   &#x2F;&#x3D;   %&#x3D;   &amp;&#x3D;   |&#x3D;   ^&#x3D;   &lt;&lt;&#x3D;   &gt;&gt;&#x3D;   &gt;&gt;&gt;&#x3D;</td><td>从右向左</td></tr></tbody></table><p><strong>使用括号()可以提升运算符的优先级</strong>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-number">28</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> value1 * value2 + value3;<span class="hljs-comment">// 先乘除，后加减</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> value1 * (value2 + value3);<span class="hljs-comment">// 有括号的优先计算</span><br></code></pre></td></tr></table></figure><p>原本加号的运算等级要比乘号的等级要低，但是给加法表达式加上括号以后，加法表达式优先计算，然后再计算乘除法。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之六-Java运算符（中）</title>
    <link href="/posts/7.html"/>
    <url>/posts/7.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、自增-自减运算符"><a href="#一、自增-自减运算符" class="headerlink" title="一、自增&#x2F;自减运算符"></a>一、自增&#x2F;自减运算符</h1><p>假设有一个变量<code>intValue</code>的值为10，如果想让这个值加1，有哪些方式？</p><p>首先，我们可以使用最原始的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>intValue = intValue + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>或者使用赋值运算符<code>+=</code>操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>intValue += <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>正如这一节的标题名称自增&#x2F;自减运算符，我们可以使用自增运算符来解决上述的问题。</p><h2 id="1-1-自增-自减运算符的基本使用"><a href="#1-1-自增-自减运算符的基本使用" class="headerlink" title="1.1 自增&#x2F;自减运算符的基本使用"></a>1.1 自增&#x2F;自减运算符的基本使用</h2><p>自增运算符使用<strong>变量名++<strong>（也叫后缀自增，因为<code>++</code>在变量名后面）或者</strong>++变量名</strong>（也叫前缀自增，因为<code>++</code>在变量名前面）的方式表示，二者最终都会将变量的值加1。</p><p>同理，自减运算符使用<strong>变量名–<strong>（也叫后缀自减，因为<code>--</code>在变量名前面）或者</strong>–变量名</strong>（也叫前缀自减，因为<code>--</code>在变量名前面）的方式表示，二者最终都会将变量的值减1。</p><p>以下是使用自增运算符解决上述问题的代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自增自减运算符</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-11 7:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 后缀自增i++和前缀自增++i简单使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        intValue1++;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        ++intValue2;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-comment">// 后缀自减i--和前缀自减--i简单使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        intValue3--;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        --intValue4;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231011104400202.png" alt="image-20231011104400202"></p><p><code>i++</code>或者<code>++i</code>二者执行完表达式计算以后，<code>i</code>的值自增1（同理，<code>i--</code>或<code>--i</code>得到的结果是<code>i</code>自减1）。</p><h2 id="1-2-前缀自增（减）和后缀自增（减）的区别"><a href="#1-2-前缀自增（减）和后缀自增（减）的区别" class="headerlink" title="1.2 前缀自增（减）和后缀自增（减）的区别"></a>1.2 前缀自增（减）和后缀自增（减）的区别</h2><p>后缀自增<code>i++</code>，先返回变量<code>i</code>的当前值，运算完成后再将<code>i</code>增加1。例如：<code>j = i++ * 2</code>，此时右侧表达式计算时得到的是当前<code>i</code>的值，在右侧表达式运算完成后，<code>i</code>再自增1。</p><p>前缀自增<code>++i</code>，先将<code>i</code>的值增加1，然后返回变量<code>i</code>的当前值。例如：<code>j = ++i * 2</code>，此时右侧表达式计算时得到的是<code>i</code>加1之后的值，在右侧表达式运算完成后，<code>i</code>的值也就是前面自增1的结果。</p><p>接下来我们使用代码来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++和++i的区别</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> ++intValue2;<br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 执行完赋值操作后，两个变量值最后都会自增1，此时得到的结果都是11</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue3++ * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 计算时先赋值为intValue3的值，计算完成后intValue3的值自增1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> ++intValue4 * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 计算时先将intValue4的值自增1，计算完成后将自增的值赋值给intValue4</span><br><br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231016224628678.png" alt="image-20231016224628678"></p><p>关于<code>i++</code>和<code>++i</code>在字节码层面的区别，请查看这篇文章：<a href="https://zhuanlan.zhihu.com/p/662964932">点我查看</a></p><h1 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h1><p>和数学学过的一样，Java的比较运算符有如下：**大于<code>&gt;</code>，小于<code>&lt;</code>，等于<code>==</code>，大于等于<code>&gt;=</code>，小于等于<code>&lt;=</code>，不等于<code>!=</code>**。</p><p>比较运算符得到的结果是<strong>布尔类型的值</strong>，即<code>true</code>或<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比较运算符的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-11 23:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparisonOperator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &gt; intValue2: &quot;</span> + (intValue1 &gt; intValue2));    <span class="hljs-comment">// &gt; 大于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &lt; intValue2: &quot;</span> + (intValue1 &lt; intValue2));    <span class="hljs-comment">// &lt; 小于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 == intValue2: &quot;</span> + (intValue1 == intValue2));  <span class="hljs-comment">// == 等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 != intValue2 = &quot;</span> + (intValue1 != intValue2)); <span class="hljs-comment">// != 不等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &gt;= intValue2: &quot;</span> + (intValue1 &gt;= intValue2));  <span class="hljs-comment">// &gt;= 大于等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &lt;= intValue2: &quot;</span> + (intValue1 &lt;= intValue2));  <span class="hljs-comment">// &lt;= 小于等于</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231011231023902.png" alt="image-20231011231023902"></p><h1 id="三、逻辑运算符"><a href="#三、逻辑运算符" class="headerlink" title="三、逻辑运算符"></a>三、逻辑运算符</h1><p><strong>逻辑运算符只能用在布尔值或者计算结果是布尔值的表达式</strong>（例如：比较运算符得到的结果就是布尔值）。</p><h2 id="3-1-逻辑与、逻辑或运算符"><a href="#3-1-逻辑与、逻辑或运算符" class="headerlink" title="3.1 逻辑与、逻辑或运算符"></a>3.1 逻辑与、逻辑或运算符</h2><p>短路与使用<code>&amp;&amp;</code>表示，格式是：<strong>布尔表达式1 &amp;&amp; 布尔表达式2</strong>。如果<code>&amp;&amp;</code>两侧得到的结果都是<code>true</code>，那么得到的结果也是<code>true</code>，否则其他情况均为<code>false</code>。</p><p>短路或使用<code>||</code>表示，格式是：<strong>布尔表达式1 || 布尔表达式2</strong>。如果<code>||</code>只要有一侧为<code>true</code>，那么得到的结果是<code>true</code>，如果两侧结果都是<code>false</code>，那么得到的结果也是<code>false</code>。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短路与&amp;&amp; 短路或|| 的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span>  <span class="hljs-operator">=</span> <span class="hljs-number">40</span> != <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span> &gt; <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span> &gt; <span class="hljs-number">40</span>;<br>        System.out.println(<span class="hljs-string">&quot;计算结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br><br>        System.out.println(<span class="hljs-string">&quot;使用短路与&amp;&amp; 短路或|| 的运算结果: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 &amp;&amp; result2 = &quot;</span> + (result1 &amp;&amp; result2));<br>        System.out.println(<span class="hljs-string">&quot;result1 &amp;&amp; result3 = &quot;</span> + (result1 &amp;&amp; result3));<br>        System.out.println(<span class="hljs-string">&quot;result2 &amp;&amp; result3 = &quot;</span> + (result2 &amp;&amp; result3));<br>        System.out.println(<span class="hljs-string">&quot;result1 || result2 = &quot;</span> + (result1 || result2));<br>        System.out.println(<span class="hljs-string">&quot;result1 || result3 = &quot;</span> + (result1 || result3));<br>        System.out.println(<span class="hljs-string">&quot;result2 || result3 = &quot;</span> + (result2 || result3));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231016223005999.png" alt="image-20231016223005999"></p><p>运行结果符合我们的预期和上述的说明。</p><h2 id="3-2-逻辑非运算符"><a href="#3-2-逻辑非运算符" class="headerlink" title="3.2 逻辑非运算符"></a>3.2 逻辑非运算符</h2><p>非运算符使用<code>!</code>表示，格式为：**<code>!布尔值</code><strong>或者</strong><code>!布尔表达式</code>**。</p><p>非运算符的作用是将得到的布尔值取反，例如：<code>!true</code>的结果是<code>false</code>，同理，<code>!false</code>的结果是<code>true</code>，以下是非运算符在代码中的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 逻辑非运算符! 的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span> &gt;= <span class="hljs-number">30</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span>  <span class="hljs-operator">=</span> <span class="hljs-number">40</span> != <span class="hljs-number">20</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;正常结果: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        System.out.println(<span class="hljs-string">&quot;取非运算符!得到的结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;!result1 = &quot;</span> + !result1);<br>        System.out.println(<span class="hljs-string">&quot;!result2 = &quot;</span> + !result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231016223450470.png" alt="image-20231016223450470"></p><p>从结果中我们可以看出，运算结果如果为<code>true</code>，加上非运算符，得到的结果正好相反，为<code>false</code>。同理，如果运算结果为<code>false</code>，取非得到的结果是<code>true</code>。</p><h1 id="四、位运算符（了解即可）"><a href="#四、位运算符（了解即可）" class="headerlink" title="四、位运算符（了解即可）"></a>四、位运算符（了解即可）</h1><p>位运算符主要是针对<strong>整型数字的二进制</strong>进行运算。在二进制的位运算中，1表示真，0表示假。</p><h2 id="4-1-位与、位或、异或运算符"><a href="#4-1-位与、位或、异或运算符" class="headerlink" title="4.1 位与、位或、异或运算符"></a>4.1 位与、位或、异或运算符</h2><p>位运算符主要包含如下的运算符：</p><table><thead><tr><th>符号</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>位与运算符</td><td>如果相同位两个二进制数都为1，则结果为1；反之，结果为0。</td></tr><tr><td><code>|</code></td><td>位或运算符</td><td>如果相同位两个二进制数都为0，则结果为0；反之，结果为1。</td></tr><tr><td><code>^</code></td><td>异或运算符</td><td>如果相同位两个二进制数相同，则结果为0；反之，结果为1。</td></tr><tr><td><code>~</code></td><td>非运算符</td><td>一元运算符，将每一位的二进制数由1变0，由0变1。</td></tr></tbody></table><p>看完上述说明可能还是一头雾水，接下来以具体案例来说明它们是如何使用的。</p><p>假设有两个<code>int</code>类型的整数，第一个值为8，另一个值是6，将其转换成32位（因为<code>int</code>本身就是32位）的二进制整数为：</p><p><img src="https://source.icode504.com/images/image-20231013063833758.png" alt="image-20231013063833758"></p><p>由于前24位（未标黄部分）都是0，为了直观展示上述运算符的运算过程，在后续计算中默认省略前24位：</p><p><img src="https://source.icode504.com/images/image-20231013064330711.png" alt="image-20231013064330711"></p><p>按照位与<code>&amp;</code>的运算规则，在相同位上两个二进制数的值都为1，则结果为1，否则其他情况都为0，那么此时的运算过程为：</p><img src="https://source.icode504.com/images/image-20231013064746114.png" alt="image-20231013064746114" style="zoom:80%;" /><p>得到的结果为：<br>$$<br>00000000<br>$$<br>转换成十进制的结果就是0，<code>8 &amp; 6</code>的结果为0。</p><p>同理，按照位或<code>|</code>的规则，如果相同位两个二进制数都为0，则结果为0；反之，结果为1。此时的运算过程为：</p><img src="https://source.icode504.com/images/image-20231013065621077.png" alt="image-20231013065621077" style="zoom:80%;" /><p>得到的结果：<br>$$<br>00001110<br>$$<br>转换成十进制就是14，因此<code>8 | 6</code>的运算结果是14。</p><p>根据异或运算符的规则：如果相同位两个二进制数相同，则结果为0；反之，结果为1。此时的运算过程为：</p><img src="https://source.icode504.com/images/image-20231013072331540.png" alt="image-20231013072331540" style="zoom:80%;" /><p>得到的结果：<br>$$<br>00001110<br>$$<br>转换成十进制是14，因此<code>8 ^ 6</code>得到的结果是14。</p><h2 id="4-2-非运算符"><a href="#4-2-非运算符" class="headerlink" title="4.2 非运算符"></a>4.2 非运算符</h2><p>此时我们再观察完整的8和6的二进制数（32位）</p><p><img src="https://source.icode504.com/images/image-20231013063833758.png" alt="image-20231013063833758"></p><p>按照非运算符<code>~</code>的规定，将每一位的二进制数由1变0，由0变1。此时<code>~8</code>会转换成如下的形式：</p><p><img src="https://source.icode504.com/images/image-20231013073248219.png" alt="image-20231013073248219"></p><p>二进制的第一位表示正负号，0表示正号，1表示负号，并且不参与运算。此时从<code>~8</code>得到的二进制数来看，未来转换成十进制数字也是负数。</p><p>负数的二进制表示：除符号位以外，其他位取反操作（0变成1，1变成0），然后再加1以补码的方式表示。</p><p>此时<code>~8</code>的结果就是补码，我们需要对上述操作进行逆向操作。</p><p>首先，将二进制数减1，得到如下结果（反码）：</p><p><img src="https://source.icode504.com/images/image-20231013073901883.png" alt="image-20231013073901883"></p><p>再将反码还原（1变成0，0变成1），得到如下结果：</p><p><img src="https://source.icode504.com/images/image-20231013074028227.png" alt="image-20231013074028227"></p><p>此时除第一位是负数以外，再将得到的结果转换成十进制数为<code>-9</code>，因此<code>~8</code>的结果是<code>-9</code>。</p><p>同理，<code>~6</code>的结果是<code>-7</code></p><p>我们使用代码来检测一下上述运算结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 位运算符 &amp; | ~的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-13 6:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 &amp; intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 &amp; intValue2 = &quot;</span> + result1);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue1 | intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 | intValue2 = &quot;</span> + result2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> ~intValue1;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> ~intValue2;<br>        System.out.println(<span class="hljs-string">&quot;~intValue1 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;~intValue2 = &quot;</span> + result4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231024082411610.png" alt="image-20231024082411610"></p><h2 id="4-3-移位运算符"><a href="#4-3-移位运算符" class="headerlink" title="4.3 移位运算符"></a>4.3 移位运算符</h2><p>移位运算符的主要是针对二进制数向左或者向右移动n位。其中<code>&lt;&lt;</code>称作有符号左移运算符，<code>&gt;&gt;</code>称作有符号右移运算符。</p><p>以有符号左移运算符为例，它的使用格式是：<strong>操作数 &lt;&lt; 左移位数</strong>，例如：<code>3 &lt;&lt; 4</code>的含义是将3的二进制数向左移动4位（第1位符号位除外）。以下是它的运算过程：</p><p>将3转换成32位二进制数，如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231016060323872.png" alt="image-20231016060323872"></p><p>移动原则是：向左移，最左边多出的位数舍去，右侧空缺使用0来补缺（负数使用1来补缺）。同理，向右移，最右边多出的位数舍去，左侧空缺使用0来补缺（负数使用1来补缺）。</p><p>3向左移动4位以后的情况如下图：</p><p><img src="https://source.icode504.com/images/image-20231016063210904.png" alt="image-20231016063210904"></p><p>按照上述规则，将左侧多出的4位舍去，右侧空缺位置使用0补上，此时得到的结果是：</p><p><img src="https://source.icode504.com/images/image-20231016063405885.png" alt="image-20231016063405885"></p><p>将得到的结果转换成十进制数是：<br>$$<br>1\times2^{5}+1\times2^{4}&#x3D;48<br>$$<br>因此：<code>3 &lt;&lt; 4</code>得到的结果是48。</p><p>同理，右移运算符的使用格式是：<strong>操作数 &gt;&gt; 右移位数</strong>，例如：<code>-20 &gt;&gt; 3</code>的含义是将-20的二进制数向右移动3位（第1位符号位除外）。以下是运算过程：</p><p>首先将-20转换成二进制形式表示（负数使用补码表示并参与计算）：</p><p><img src="https://source.icode504.com/images/image-20231016065831435.png" alt="image-20231016065831435"></p><p>-20向右移动3位以后的情况如下图所示：</p><p><img src="https://source.icode504.com/images/image-20231016070051278.png" alt="image-20231016070051278"></p><p>此时空缺位使用1来补位（因为-20是负数），多余位舍去，得到如下的结果：</p><p><img src="https://source.icode504.com/images/image-20231016070248758.png" alt="image-20231016070248758"></p><p>此时将负数的补码转换成原码的形式表示（原码和补码的知识可以查看这篇文章的原码、反码、补码：<a href="https://zhuanlan.zhihu.com/p/654700181">点我查看</a>）：</p><p><img src="https://source.icode504.com/images/image-20231016070352309.png" alt="image-20231016070352309"></p><p>此时我们将原码转换成十进制表示：<br>$$<br>-(1\times2^{1}+1\times2^{0})&#x3D;-3<br>$$<br>因此<code>-20 &gt;&gt; 3</code>得到的结果是-3。</p><p>前面我们提到的都是有符号移位。在Java中，还有一个无符号右移运算符，使用<code>&gt;&gt;&gt;</code>表示，格式是：<strong>操作数 &gt;&gt;&gt; 向右移动数</strong>。</p><p>无符号右移运算符在向右移动时符号位和其他数字都参与移动。此时空缺位使用0来补齐即可。</p><p>这次我们让-20无符号右移3位，移动后的情况如下：</p><p><img src="https://source.icode504.com/images/image-20231016072436485.png" alt="image-20231016072436485"></p><p>空缺位使用0补齐，多余位舍掉后的结果如下图：</p><p><img src="https://source.icode504.com/images/image-20231016072603589.png" alt="image-20231016072603589"></p><p>使用计算器转换为十进制数字得到的结果如下图：</p><p><img src="https://source.icode504.com/images/image-20231016073023006.png" alt="image-20231016073023006"></p><p>我们使用代码来验证一下上述推算过程得到的结果是否符合我们的预期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 位运算符 &gt;&gt; &lt;&lt; 和 &gt;&gt;&gt;的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 7:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">4</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">20</span> &gt;&gt; <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> -<span class="hljs-number">20</span> &gt;&gt;&gt; <span class="hljs-number">3</span>;<br>        System.out.println(<span class="hljs-string">&quot;3 &lt;&lt; 4 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;-20 &gt;&gt; 3 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;-20 &gt;&gt;&gt; 3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231016073411637.png" alt="image-20231016073411637"></p><p>使用位运算符主要是针对整型数据的二进制值进行操作，由于位运算符直接操作二进制数值，执行效率非常高，远超普通的四则运算。但是为什么在日常开发中我们很少使用位运算符呢？</p><p>1. 首先，位运算符虽然执行效率非常高，但是可读性较差，容易让人困惑。例如：前面的<code>-20 &gt;&gt; 3</code>的例子虽然在表面上是让-20向右移动3位，但是里面涉及到的过程是十分复杂的（负数由补码到反码，反码到补码就能让人焦头烂额）。</p><p>2. 大多数情况下我们都不需要直接操作二进制值。日常开发中，我们是直接针对数据做进一步处理即可，无需额外转换成二进制数据。</p><p>3. 位运算符只有在计算机底层开发或者在性能等关键领域开发会用到。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之五-Java运算符（上）</title>
    <link href="/posts/6.html"/>
    <url>/posts/6.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是JDK 8，需要安装的小伙伴请点击右侧连接查看教程：<a href="./1.html">点我查看安装JDK8教程</a>。</p></blockquote><h1 id="一、一元运算符之正负号"><a href="#一、一元运算符之正负号" class="headerlink" title="一、一元运算符之正负号"></a>一、一元运算符之正负号</h1><p>Java支持多种一元运算符，一元运算符中的“一元”是指一个操作数。我们初中学过的正负号就属于一元运算符，因为正负号后面只有一个数字。</p><p><strong>正数使用<code>+</code>表示，其中<code>+</code>可以省略；负数使用<code>-</code>表示</strong>。如果变量的值是数值类型，也可以在变量前面加上正负号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正负号的表示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 19:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PlusAndMinusSign</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;    <span class="hljs-comment">// 正数，加号可忽略</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">40</span>;    <span class="hljs-comment">// 负数</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-comment">// 变量的前面也可以加上正负号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -intValue3;<br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br><br>        <span class="hljs-comment">// 加上符号的变量也可以参与运算，以下两个变量相乘得到的结果是相同的</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue5</span> <span class="hljs-operator">=</span> intValue3 * intValue4;  <span class="hljs-comment">// 推荐写法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue6</span> <span class="hljs-operator">=</span> intValue3 * -intValue3;     <span class="hljs-comment">// 不推荐，可读性变差</span><br>        System.out.println(<span class="hljs-string">&quot;intValue5 = &quot;</span> + intValue5);<br>        System.out.println(<span class="hljs-string">&quot;intValue6 = &quot;</span> + intValue6);<br><br>        <span class="hljs-comment">// 负数前面加上负号为正数（负负得正）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue7</span> <span class="hljs-operator">=</span> -(-<span class="hljs-number">20</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue8</span> <span class="hljs-operator">=</span> -intValue4;     <span class="hljs-comment">// intValue4本身的值就是负数</span><br>        System.out.println(<span class="hljs-string">&quot;intValue7 = &quot;</span> + intValue7);<br>        System.out.println(<span class="hljs-string">&quot;intValue8 = &quot;</span> + intValue8);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231006200450682.png"></p><p>根据<code>intValue7</code>和<code>intValue8</code>的输出结果我们可以得知，负号可以改变数值的正负，正数加了负号变负数，负数加负号可以变正数（负负得正）。</p><p>编写代码不推荐<code>int intValue6 = intValue3 * -intValue3;</code>这种写法，虽然能得到预期结果，但是右侧计算的表达式可读性变差，可能会造成误解。</p><h1 id="二、算数运算符"><a href="#二、算数运算符" class="headerlink" title="二、算数运算符"></a>二、算数运算符</h1><h2 id="2-1-算术运算符的基本使用"><a href="#2-1-算术运算符的基本使用" class="headerlink" title="2.1 算术运算符的基本使用"></a>2.1 算术运算符的基本使用</h2><p>在大多数编程语言中，算术运算符基本上由**加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、取余<code>%</code>**（也称“取模”，也就是两个数相除的余数）组成，以上五个运算符在Java中也完全适用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 算术运算符--加减乘除、取余</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-08 7:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>        <span class="hljs-comment">// 加减乘除运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 + intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 + intValue2 = &quot;</span> + result1);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue1 - intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 - intValue2 = &quot;</span> + result2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue1 * intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 * intValue2 = &quot;</span> + result3);<br>        <span class="hljs-comment">// 两个整除相除，只保留整数部分，不会进行四舍五入操作</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> intValue1 / intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 / intValue2 = &quot;</span> + result4);<br>        <span class="hljs-comment">// 两个整数取余：22对5取余得到的结果是2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> intValue1 % intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 % intValue2 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231008071109661.png"></p><p>两个整数运算得到的结果是整数，两个浮点数运算得到的结果是浮点数，<strong>整数和浮点数进行运算时得到的结果是浮点数</strong>（因为整数类型会自动提升为浮点类型）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 整数和浮点数的运算、byte/short/char类型的运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-28 15:47:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义两个变量intValue1，intValue2并赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-comment">// 直接输出intValue1和intValue2相加的和</span><br>        <span class="hljs-comment">// 注意：下方输出时，需要对要计算的表达式加上括号，防止intValue1和intValue2转换成字符串类型</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 + intValue2 = &quot;</span> + (intValue1 + intValue2));<br><br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br>        <span class="hljs-comment">// byte、short、char进行运算时，会自动提升为int类型计算。</span><br>        <span class="hljs-comment">// 如果转换成想要的小范围数据类型，需要进行强制类型转换</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-comment">// 错误写法:</span><br>        <span class="hljs-comment">// byte byteValue1 = byteValue + shortValue;</span><br>        <span class="hljs-comment">// 正确写法: 将计算的结果转换成小范围数据类型。注意：强制类型转换时需要考虑到数据溢出的问题。</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (byteValue + shortValue);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) (shortValue + charValue);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (byteValue + charValue);       <span class="hljs-comment">// 得到的结果是Unicode字符表中对应的字符</span><br>        System.out.println(<span class="hljs-string">&quot;byteValue1 = &quot;</span> + byteValue1);<br>        System.out.println(<span class="hljs-string">&quot;shortValue1 = &quot;</span> + shortValue1);<br>        System.out.println(<span class="hljs-string">&quot;charValue1 = &quot;</span> + charValue1);<br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br>        <span class="hljs-comment">// 浮点数参与计算：整数会自动提升为浮点类型</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + intValue3 = &quot;</span> + (doubleValue1 + intValue3));<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + doubleValue2 = &quot;</span> + (doubleValue1 + doubleValue2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231008072150038.png"></p><h2 id="2-2-浮点数计算为什么不准确？"><a href="#2-2-浮点数计算为什么不准确？" class="headerlink" title="2.2 浮点数计算为什么不准确？"></a>2.2 浮点数计算为什么不准确？</h2><p>从上述结果我们发现一个问题，<code>double</code>类型的值<code>0.1</code>和<code>0.2</code>相加得到的结果并不是<code>0.3</code>，而是<code>0.30000000000000004</code>，为什么？</p><p>假设有两个浮点数<code>0.1</code>和<code>0.2</code>，如果两个值赋值给<code>float</code>类型和<code>double</code>类型，相加计算是不是0.3？</p><p>我们使用Java代码来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浮点数0.1和0.2分别使用float类型和double类型计算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 17:00:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// float类型相加计算</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2f</span>;<br>        System.out.println(<span class="hljs-string">&quot;floatValue1 + floatValue2 = &quot;</span> + (floatValue1 + floatValue2));<br>        <span class="hljs-comment">// double类型相加计算</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + doubleValue2 = &quot;</span> + (doubleValue1 + doubleValue2));<br>        <br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue3 + doubleValue4 = &quot;</span> + (doubleValue3 + doubleValue4));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231006193753117.png"></p><p>此时发现一个问题：<code>doubleValue1 + doubleValue2 = 0.30000000000000004</code>并没有得到我们预期的结果，为什么？</p><p>事实上，<code>0.1 + 0.2</code>的结果在大多数编程语言中进行运算时也会得到上述结果，<a href="https://0.30000000000000004.com/">点我查看</a></p><p>众所周知，计算机在底层计算使用的是二进制。无论是整数还是浮点数都会转换成二进制数进行运算。以下是小数转为二进制数运算的基本流程</p><pre><code class=" mermaid">flowchart LR十进制数 --&gt; 二进制数 --&gt; 科学计数法形式表示二进制数 --&gt; 指数补齐 --&gt; 二进制数相加 --&gt; 还原成十进制数</code></pre><h3 id="2-2-1-十进制小数转为二进制小数"><a href="#2-2-1-十进制小数转为二进制小数" class="headerlink" title="2.2.1 十进制小数转为二进制小数"></a>2.2.1 十进制小数转为二进制小数</h3><p>小数转为二进制数的规则是：将小数乘以2，然后取整数部分作为二进制数的一部分，然后再将小数部分继续乘以2，再取整数部分，以此类推，直到小数部分为0所达到的精度。</p><p>将0.2转换成二进制：<br>$$<br>0.2 \times 2 &#x3D; 0.4 \to 取整数部分0<br>$$</p><p>$$<br>0.4 \times 2 &#x3D; 0.8 \to 取整数部分0<br>$$</p><p>$$<br>0.8 \times 2 &#x3D; 1.6 \to 取整数部分1<br>$$</p><p>$$<br>0.6 \times 2 &#x3D; 1.2\to取整数部分1<br>$$</p><p>$$<br>0.2 \times 2 &#x3D; 0.4\to整数部分为0<br>$$</p><p>此时我们发现，我们对得到的小数怎么乘以2，小数位永远都不是0。因此，使用计算器计算0.2得到的二进制数字为<br>$$<br>0.00110011…(无限循环0011)<br>$$<br>同理，0.1转换成二进制数是：<br>$$<br>0.000110011…(无限循环0011)<br>$$</p><h3 id="2-2-2-二进制小数转为科学计数法表示"><a href="#2-2-2-二进制小数转为科学计数法表示" class="headerlink" title="2.2.2 二进制小数转为科学计数法表示"></a>2.2.2 二进制小数转为科学计数法表示</h3><p>当然，计算机不能存储无限循环小数。Java的<code>double</code>是双精度浮点类型，64位，因此在存储时使用64位存储<code>double</code>浮点数。要想表示尽可能大的数据，就需要使用到科学计数法来表示数据。</p><p>十进制和二进制数都可以转换成相应的科学计数法来表示。</p><p>十进制的科学计数法的表示方式是整数只留个位数，且个位数主要是1到9，通过乘以10的指数来表示。例如：89999用科学计数法表示为$8.9999\times10^4$，0.08586用十进制科学计数法表示为$8.586\times10^{-2}$。</p><p>二进制的科学计数法的表示方式和十进制的类似。<strong>它的个位数使用1来表示，通过乘以2的指数来表示</strong>。</p><p>例如，0.1的二进制数转换成科学计数法表示，小数点需要向右移动4位得到整数部分1；同理，0.2需要向右移动3位。因此0.1和0.2的二进制用科学计数法表示如下：<br>$$<br>1.10011…\times2^{-4}(0011无限循环)<br>$$</p><p>$$<br>1.10011…\times2^{-3}(0011无限循环)<br>$$</p><h3 id="2-2-3-科学计数法的数据转成二进制表示"><a href="#2-2-3-科学计数法的数据转成二进制表示" class="headerlink" title="2.2.3 科学计数法的数据转成二进制表示"></a>2.2.3 科学计数法的数据转成二进制表示</h3><p>Java的double类型是双精度浮点数，<a href="https://baike.baidu.com/item/IEEE%20754">IEEE 754标准</a>对64位浮点数做出了如下的规定：</p><ul><li>最高1位是符号位，0表示正号，1表示负号。</li><li>其后面的11位用来存储科学计数法中指数的二进制。以上述二进制科学计数法为例，这11位数字存储的就是-4的二进制。</li><li>剩下的52位存储二进制科学计数法中小数点的后52位。以上述二进制科学计数法为例，存储的就是<code>10011...</code>之后的52位数字。</li></ul><img src="https://source.icode504.com/images/image-20231009084527660.png" alt="image-20231009084527660" style="zoom: 80%;" /><p>既然内存已经给出了11位用于表示指数。那么转换成十进制数默认范围就是$[0, 2^{11}]$，即$[0,2048]$。但此时还有一个问题，以上述的二进制科学计数法为例，它的指数是-4，是负数，如何表示负数？需要在11位的头部在单独拿出一位来表示吗？</p><p>并不是，IEEE 754标准将指数为0的基数定为1023（1是1024，相当于存储$[-1023,1024]$范围的数），指数-4会转换成<code>1023 - 4 = 1019</code>，再将1019转换成二进制：1111111011，前面我们说过，指数为11位，需要在前面补零，得到的结果为：<strong>01111111011</strong>。</p><p>剩下的52位也需要处理，但是二进制科学计数法的小数部分也是一个无限循环小数。此时就需要进行舍入计算，0舍1入（类似四舍五入），<strong>舍入计算会让数据丢失精度</strong>。</p><p>此时得到的0.1的二进制：<br>$$<br>0\ 01111111011\ 1001100110011001100110011001100110011001100110011010<br>$$<br>0.2的二进制如下：<br>$$<br>0\ 01111111100\ 1001100110011001100110011001100110011001100110011010<br>$$<br>此时需要对二进制科学计数法提取公因数，为了减少精度损失，遵循小指数转换成大指数的原则。这里较大的指数是-3，因此需要将0.1的二进制科学计数法再乘以2，得到结果如下：<br>$$<br>0\ 01111111011\ (0.)100110011001100110011001100110011001100110011001101<br>$$<br>0.1原有的最后一位需要舍去，让给小数点前的0。此时0.1和0.2的二进制的指数均为-3、</p><p>此时0.1+0.2的小数部分得到的结果是：<br>$$<br>10.0110011001100110011001100110011001100110011001100111<br>$$</p><h3 id="2-2-4-指数补齐"><a href="#2-2-4-指数补齐" class="headerlink" title="2.2.4 指数补齐"></a>2.2.4 指数补齐</h3><p>根据上述结果，我们会发现两个问题：</p><ul><li>整数部分不符合科学计数法的规则。</li><li>二进制数整体得到的结果超过52位。</li></ul><p>首先需要将将结果转换成二进制科学计数法，小数点向左移动一位（相当于乘以2）：<br>$$<br>1.00110011001100110011001100110011001100110011001100111<br>$$<br>指数部分也需要加1，因为指数由-3（1020）变为-2（1021）<br>$$<br>01111111101<br>$$<br>根据0舍1入的原则，将超出52位的小数部分做舍入计算，得到的结果为：<br>$$<br>0\ 01111111101\ (1.)0011001100110011001100110011001100110011001100110100<br>$$</p><h3 id="2-2-5-还原成十进制数"><a href="#2-2-5-还原成十进制数" class="headerlink" title="2.2.5 还原成十进制数"></a>2.2.5 还原成十进制数</h3><p>将二进制科学计数法转换成正常的二进制数，原有的指数是-2，还原时小数点需向左移动两位：<br>$$<br>0.010011001100110011001100110011001100110011001100110100<br>$$</p><p>再转换为十进制为：<br>$$<br>0.30000000000000004<br>$$</p><p>经过上述的复杂推导，我们可以总结出一个结论：使用基本数据类型的浮点数进行运算并不准确（尤其是在金融货币领域对小数点精度要求比较高的不能使用）。那么，有什么办法可以解决浮点数计算不准确的问题？</p><p><strong>方法一（现阶段推荐）：转换成整数计算，得到结果再除以10的n次方</strong>。</p><p>还是以0.1 + 0.2为例，我们可以转换成整数计算，整数计算的结果再除以10，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浮点数计算: 计算0.1 + 0.2的精确结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-09 18:13:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        <span class="hljs-comment">// 将doubleValue1和doubleValue2转换成整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (doubleValue1 * <span class="hljs-number">10</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempValue2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (doubleValue2 * <span class="hljs-number">10</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempResult</span> <span class="hljs-operator">=</span> tempValue1 + tempValue2;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>) tempResult / <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231009222458278.png"></p><p>此时能得到精确的结果。</p><p><strong>方法二：使用<code>BigDecimal</code>类（这个类后续会讲到，小白可以直接跳过）精确运算</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用BigDecimal类精确计算浮点数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-09 22:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br><br>        <span class="hljs-comment">// 将double类型的值转换成字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">doubleValueString1</span> <span class="hljs-operator">=</span> String.valueOf(doubleValue1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">doubleValueString2</span> <span class="hljs-operator">=</span> String.valueOf(doubleValue2);<br><br>        <span class="hljs-comment">// 使用BigDecimal类进行运算</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">decimal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(doubleValueString1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">decimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(doubleValueString2);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">resultDecimal</span> <span class="hljs-operator">=</span> decimal1.add(decimal2);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> resultDecimal.doubleValue();<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231009223129893.png"></p><h2 id="2-6-负数的除法和取余规则"><a href="#2-6-负数的除法和取余规则" class="headerlink" title="2.6 负数的除法和取余规则"></a>2.6 负数的除法和取余规则</h2><p>负数的除法规则：<strong>两个负数相除得到的结果是正数，正数除以负数或者负数除以整数结果是负数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负数的除法运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 19:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DivideOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5</span>;<br><br>        <span class="hljs-comment">// 情况一：被除数为正数，除数为负数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 / intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 情况二：被除数为负数，除数为正数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue2 / intValue3;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 情况三：被除数和除数都是负数，得到的结果是正数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span>  <span class="hljs-operator">=</span> intValue2 / intValue4;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231007221818423.png"></p><p>负数的取余规则：<strong>被除数如果是正数，求余的结果就是正数；反之，结果为负数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负数的取余运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 22:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">13</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;<br><br>        <span class="hljs-comment">// 情况一：被除数为正数，除数为负数，得到的结果是正数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 % intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 情况二：被除数为负数，除数为正数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue2 % intValue3;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 情况三：被除数和除数都是负数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue2 % intValue4;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231007222009322.png"></p><h1 id="三、赋值运算符"><a href="#三、赋值运算符" class="headerlink" title="三、赋值运算符"></a>三、赋值运算符</h1><h2 id="3-1-赋值运算符"><a href="#3-1-赋值运算符" class="headerlink" title="3.1 赋值运算符="></a>3.1 赋值运算符<code>=</code></h2><p>我们知道，创建Java变量的一般语法是：<strong>数据类型 变量名 &#x3D; 变量值</strong>。其中<code>=</code>是赋值运算符，它的作用是<strong>将右侧的值赋值给左边的变量</strong>。</p><ul><li>变量值一般是：常量、已经赋值的变量名或者是可以计算出新数值的表达式。</li><li>赋值运算符<code>=</code>左侧的变量名唯一。</li></ul><p>基本数据类型的变量可以直接赋值，因为基本数据类型保存的是实际值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 赋值运算符 = 的基本使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 6:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 将20赋值给number1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;number1 = &quot;</span> + number1);<br>        <span class="hljs-comment">// 将已经赋值的变量名number1赋值给number2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> number1;<br>        System.out.println(<span class="hljs-string">&quot;number2 = &quot;</span> + number2);<br>        <span class="hljs-comment">// 可以计算出新数值的表达式赋值给新变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span> + <span class="hljs-number">40</span>;<br>        System.out.println(<span class="hljs-string">&quot;number3 = &quot;</span> + number3);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number4</span> <span class="hljs-operator">=</span> number1 + number2;<br>        System.out.println(<span class="hljs-string">&quot;number4 = &quot;</span> + number4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运算结果：</p><p><img src="https://source.icode504.com/images/image-20231006064803996.png"></p><p>由<code>number1</code>和<code>number2</code>的输出结果可知：变量<code>number1</code>存储的值20赋值给了<code>number2</code>，此时<code>number2</code>的值也是20。</p><p>变量<code>number3</code>和<code>number4</code>右侧是可以计算的表达式，即<code>30 + 40</code>能够直接计算出结果，前面已经赋值的<code>number1 + number2</code>也能计算出结果。</p><p><strong>引用数据类型存储的是一个地址值引用</strong>。例如：<code>Object</code>和<code>String</code>是类，属于引用数据类型。此时我们创建这两个类型的对象并赋值给变量，然后直接输出变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 赋值运算符--引用数据类型变量赋值并输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 23:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 第一组：创建两个Object对象分别赋值给object1和object2</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-comment">// 输出两个地址值</span><br>        System.out.println(<span class="hljs-string">&quot;object1 = &quot;</span> + object1);<br>        System.out.println(<span class="hljs-string">&quot;object2 = &quot;</span> + object2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 第二组：让object1指向object2</span><br>        object2 = object1;<br>        System.out.println(<span class="hljs-string">&quot;object1 = &quot;</span> + object1);<br>        System.out.println(<span class="hljs-string">&quot;object2 = &quot;</span> + object2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 第三组：创建两个String对象分别赋值给string1和string2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">string1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        System.out.println(<span class="hljs-string">&quot;string1 = &quot;</span> + string1);<br>        System.out.println(<span class="hljs-string">&quot;string2 = &quot;</span> + string2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231007065141822.png"></p><p>前两组输出结果的格式我们发现，它们是以<code>java.lang.Object</code>、<code>@</code>和变量在物理内存中的地址（十六进制数）。</p><ul><li>其中<code>java.lang.Object</code>叫做<strong>全限定类名</strong>。全限定类名是指当前类所属的<strong>包名</strong>（包名会在后续文章中讲到）和<strong>类名</strong>组成。<code>Object</code>是类名，<code>java.lang</code>是<code>Object</code>类所在的包名。</li><li><code>@</code>后面的就是变量在内存中的存储地址。如果你使用上述命令将代码输出，那么得到的地址值和上述的内容不同，因为变量的地址值是内存随机分配的。</li></ul><p>第一组的<code>object1</code>和<code>object2</code>分别创建了Object对象，相当于在栈内存和堆内存中分别开辟了两块不同的空间，栈内存中存储的变量地址和堆内存中开辟的内存地址一一对应，因此<code>object1</code>和<code>object2</code>的地址值不同。第一组的<code>object1</code>和<code>object2</code>在内存的表现形式如下：</p><img src="https://source.icode504.com/images/image-20231007071809712.png" alt="image-20231007071809712" style="zoom:80%;" /><p>第二组，我们发现<code>object1</code>赋值给了<code>object2</code>，在栈内存中的表现形式是当前变量<code>object2</code>的地址值赋值给<code>object1</code>。原来<code>object2</code>在堆内存中创建的对象不再被引用，虚拟机后续会对此对象进行回收。</p><img src="https://source.icode504.com/images/image-20231007215157582.png" alt="image-20231007215157582" style="zoom:80%;" /><p>我们发现第三组两个<code>String</code>对象的输出结果什么都看不到，它们也是引用数据类型，难道不输出地址值吗？事实上，在源码层面，<code>String</code>做了进一步处理。</p><p>我们使用<code>new String()</code>创建对象时，会调用<code>String</code>的构造器（构造器，也叫做构造方法，后续会讲到），打开源码观察这个构造器：</p><img src="https://source.icode504.com/images/image-20231007220335076.png" alt="image-20231007220335076" style="zoom:80%;" /><p>在调用空参构造器时就已经初始化一个空字符串值了，因此我们在输出<code>String</code>对象时输出的是空字符串，此时我们看不到任何内容就显得比较合理了。</p><h2 id="3-2-其他赋值运算符"><a href="#3-2-其他赋值运算符" class="headerlink" title="3.2 其他赋值运算符"></a>3.2 其他赋值运算符</h2><p>假设有一个<code>int</code>类型变量<code>intValue</code>的值是20，此时我在此基础上再加上20再赋值给<code>intValue</code>，得到的表达式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>intValue = intValue + <span class="hljs-number">20</span>;<span class="hljs-comment">// 此时intValue的结果为40</span><br></code></pre></td></tr></table></figure><p>Java给我们提供了<code>+=</code>运算符可以简化当前的代码<code>intValue = intValue + 20;</code>，使用<code>+=</code>可以简化成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>intValue += <span class="hljs-number">20</span>;<span class="hljs-comment">// 得到的结果也是40，相当于intValue = intValue + 20;</span><br></code></pre></td></tr></table></figure><p>除了<code>+=</code>以外，<code>-=</code>、<code>*=</code>、<code>/=</code>和<code>%=</code>的作用机制和<code>+=</code>完全相同。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td><code>+=</code></td><td>加并赋值运算符：先相加，得到的结果再赋值</td><td><code>i = i + 20</code>可以简写成<code>i += 20</code></td></tr><tr><td><code>-=</code></td><td>减并赋值运算符：先相减，得到的结果再赋值</td><td><code>i = i - 20</code>可以简写成<code>i -= 20</code></td></tr><tr><td><code>*=</code></td><td>乘并赋值运算符：先相乘，得到的结果再赋值</td><td><code>i = i * 20</code>可以简写成<code>i *= 20</code></td></tr><tr><td><code>/=</code></td><td>除并赋值运算符：先相除，得到的结果再赋值</td><td><code>i = i / 20</code>可以简写成<code>i /= 20</code></td></tr><tr><td><code>%=</code></td><td>取余并赋值运算符：先取余，得到的结果再赋值</td><td><code>i = i % 20</code>可以简写成<code>i %= 20</code></td></tr></tbody></table><p>以下是5个运算符在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 其他赋值运算符+=、-=、*=、/=和%=的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 20:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue5</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><br>        intValue1 += <span class="hljs-number">30</span>;<br>        intValue2 -= <span class="hljs-number">40</span>;<br>        intValue3 *= <span class="hljs-number">50</span>;<br>        intValue4 /= <span class="hljs-number">10</span>;<br>        intValue5 %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br>        System.out.println(<span class="hljs-string">&quot;intValue5 = &quot;</span> + intValue5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231007203213625.png"></p><p><code>byte</code>、<code>short</code>、<code>char</code>三者使用上述赋值运算符时，不需要进行强制类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * byte、short、char使用赋值运算符</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 20:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        byteValue1 += byteValue2;<br>        System.out.println(<span class="hljs-string">&quot;byteValue1 = &quot;</span> + byteValue1);<br>        byteValue1 += <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;byteValue2 = &quot;</span> + byteValue2);<br><br>        charValue += byteValue1;<br>        shortValue += charValue;<br>        byteValue2 += shortValue;<br>        System.out.println(<span class="hljs-string">&quot;charValue = &quot;</span> + charValue);<br>        System.out.println(<span class="hljs-string">&quot;shortValue = &quot;</span> + shortValue);<br>        System.out.println(<span class="hljs-string">&quot;byteValue2 = &quot;</span> + byteValue2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231007211517616.png"></p><p>使用赋值运算符的优势包括：</p><p>1. 简洁性：使用<code>+=</code>可以在一行内同时完成加法计算和赋值操作，让代码更加简洁。例如：<code>i += 20</code>就是<code>i = i + 20</code>的简化写法（其他赋值运算符亦同理）。</p><p>2. 性能优势：在某些情况下，赋值运算符要比单独的加法和赋值操作更快。</p><p>总的来说，使用赋值运算符可以增加代码的简洁性，提高性能，并使代码更易于阅读和理解。</p><hr/><p>参考资料：</p><p><a href="https://juejin.cn/post/6947874934702112804">0.1 + 0.2为什么不等于0.3？</a></p><p><a href="https://juejin.cn/post/7005830819851796487">0.1+0.2为什么不等于0.3，以及怎么等于0.3</a></p><p><a href="https://juejin.cn/post/6844903946004201486">0.1 + 0.2 为什么不等于 0.3？？？</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之四-字符串String的简单使用</title>
    <link href="/posts/5.html"/>
    <url>/posts/5.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是JDK 8，需要安装的小伙伴请点击右侧连接查看教程：<a href="./1.html">点我查看安装JDK8教程</a>。</p></blockquote><h1 id="一、什么是字符串？"><a href="#一、什么是字符串？" class="headerlink" title="一、什么是字符串？"></a>一、什么是字符串？</h1><p>在Java编程语言中，字符串用于表示文本数据。</p><p>字符串（<code>String</code>）属于引用数据类型，根据<code>String</code>的源码，其头部使用<code>class</code>进行修饰，属于类，即引用数据类型。</p><p><img src="https://source.icode504.com/images/image-20230909092329429.png"></p><h1 id="二、字符串的表示"><a href="#二、字符串的表示" class="headerlink" title="二、字符串的表示"></a>二、字符串的表示</h1><p><strong>字符串使用双引号<code>&quot;&quot;</code>表示</strong>，在双引号中你可以写任意字符。</p><p>和前面定义并初始化基本数据类型的变量一样，定义最简单的字符串可以用如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String 变量名 = <span class="hljs-string">&quot;任意字符&quot;</span>;<br></code></pre></td></tr></table></figure><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串最简单的定义</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 09:30:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义并初始化String类型的变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;浔阳江头夜送客，枫叶荻花秋瑟瑟。&quot;</span>;<br>        System.out.println(myString);<br>        myString = <span class="hljs-string">&quot;主人下马客在船，举酒欲饮无管弦。&quot;</span>;<br>        System.out.println(myString);<br>        <span class="hljs-comment">// 当然，你也可以不在双引号中写任意内容，即“空字符串”</span><br>        myString = <span class="hljs-string">&quot;&quot;</span>;<br>        System.out.println(myString);<br>        <span class="hljs-comment">// 直接输出字符串</span><br>        System.out.println(<span class="hljs-string">&quot;醉不成欢惨将别，别时茫茫江浸月。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://source.icode504.com/images/image-20230909093742973.png"></p><h1 id="三、转义字符"><a href="#三、转义字符" class="headerlink" title="三、转义字符"></a>三、转义字符</h1><p>使用<code>\</code>和某个特定字符可以更改其原有的字符含义。</p><p>例如：</p><ul><li><p><strong><code>\n</code>能够换行</strong>（相当于按了一下<kbd>Enter</kbd>键）；</p></li><li><p><strong><code>\t</code>具有制表符效果</strong>（相当于按了一下<kbd>Tab</kbd>键）；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转义字符--换行符\n和制表符\t的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 11:49:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscapeCharacters</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 换行符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;窈窕淑女\n寤寐求之&quot;</span>;<br>        <span class="hljs-comment">// 制表符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;求之不得\t寤寐思服&quot;</span>;<br>        System.out.println(myString1);<br>        System.out.println(myString2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230909115309017.png"></p><p>前面我们说过，字符串是使用英文的双引号表示，如果我想在双引号内直接输出双引号会报错，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 错误写法，因为最左侧的双引号只能识别到最近的双引号，其他双引号会导致无法识别而无法通过编译</span><br><span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>悠哉游哉，辗转反侧<span class="hljs-string">&quot;是《诗经》中经典名句&quot;</span>;<br></code></pre></td></tr></table></figure><p>那么，如果我们需要在双引号内部表示出字符串怎么办？使用<code>\&quot;</code>表示双引号，如果想要表示反斜杠（Windows的文件路径会使用到），要写成<code>\\</code>。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转义字符--双引号和反斜杠的输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 16:23:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscapeCharacters1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用\&quot;表示双引号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\&quot;悠哉游哉，辗转反侧\&quot;是《诗经》中经典名句&quot;</span>;<br>        System.out.println(myString1);<br>        <span class="hljs-comment">// \\表示反斜杠</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;参差荇菜\\左右采之&quot;</span>;<br>        System.out.println(myString2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230909163649777.png"></p><h1 id="四、字符串的简单应用"><a href="#四、字符串的简单应用" class="headerlink" title="四、字符串的简单应用"></a>四、字符串的简单应用</h1><h2 id="4-1-获取字符串的长度"><a href="#4-1-获取字符串的长度" class="headerlink" title="4.1 获取字符串的长度"></a>4.1 获取字符串的长度</h2><p>字符串的长度取决于字符串中写了多少个字符（转义字符算一个字符），如果是空字符串，那么字符串的长度为0。</p><p>可以使用**<code>length()</code>方法获取当前字符串的长度**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串长度获取</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 09:44:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringLength</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;关关雎鸠，在河之洲。&quot;</span>;<br>        <span class="hljs-comment">// 获取字符串的长度（双引号内所有字符的数量）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> myString.length();<br>        System.out.println(length);<br>        myString = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 获取空字符串的长度</span><br>        length = myString.length();<br>        System.out.println(length);<br>        <span class="hljs-comment">// 转义字符算一个字符</span><br>        myString = <span class="hljs-string">&quot;E:\\Code&quot;</span>;<br>        length = myString.length();<br>        System.out.println(length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20230925095455512.png"></p><h2 id="4-2-字符串的简单拼接"><a href="#4-2-字符串的简单拼接" class="headerlink" title="4.2 字符串的简单拼接"></a>4.2 字符串的简单拼接</h2><p>假设当前有两个字符串<code>str1</code>和<code>str2</code>，二者的值分别是<code>&quot;窈窕淑女&quot;</code>和<code>&quot;君子好逑&quot;</code>，如果我想将二者拼接成一个字符串该怎么办？</p><p>可以使用<code>+</code>拼接两个字符串。注意：<strong>这里的<code>+</code>并不是算术意义上的加号，它在字符串中只负责拼接的作用</strong>。<strong>只要<code>+</code>一侧有字符串，那么这个<code>+</code>就会将另一侧的数据类型变为字符串类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用+拼接字符串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 11:14:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringSplicing1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;窈窕淑女&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;君子好逑&quot;</span>;<br>        <span class="hljs-comment">// 两个字符串拼接，结果仍为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> myString1 + myString2;<br>        System.out.println(result);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 字符串拼接基本数据类型的数据</span><br>        System.out.println(myString1 + <span class="hljs-number">20</span>);<br>        System.out.println(myString1 + <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">20</span>);<br>        System.out.println(myString1 + <span class="hljs-number">20.34</span>);<br>        System.out.println(myString1 + <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230909112428736.png"></p><p>后四个输出结果中我们可以得知：<code>+</code>右侧的基本数据类型自动转换成字符串，然后<code>+</code>对左右两侧的字符串进行拼接形成新的字符串进行输出。</p><p>但与此同时，我们也发现另外一种情况：<code>System.out.println(myString1 + &#39;A&#39; + 20);</code>，它得到的结果是<code>窈窕淑女A20</code>，如果我想对后两者先计算后拼接，可以直接使用小括号对后两者优先计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(myString1 + (<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>此时加上括号以后，会先计算<code>&#39;A&#39;</code>和<code>20</code>相加的结果，此时<code>&#39;A&#39;</code>会自动提升为<code>int</code>类型的值为<code>65</code>，<code>65</code>和<code>20</code>相加的结果就是<code>85</code>，输出结果就是<code>85</code></p><p>前期学习过程中，使用<code>+</code>拼接字符串比较方便。当然，在后续深入学习字符串的过程中，我们会使用比<code>+</code>更加高效的方法。</p><h1 id="五、类和对象简介"><a href="#五、类和对象简介" class="headerlink" title="五、类和对象简介"></a>五、类和对象简介</h1><p><a href="https://www.icode504.com/posts/4.html">前面</a>我们提过，引用数据类型一共分为5种：类、接口、数组、枚举、注解。</p><p>类（Class）和对象（Object）是面向对象编程的两个核心概念。</p><p>类是对现实世界事物的抽象，它是一种定义了<strong>属性</strong>（Fields）和<strong>方法</strong>（Methods）的蓝图和模板，用于创建对象。</p><ul><li><p>属性（Fields）是<strong>类中的变量</strong>，它们用于存储对象的状态和特征。</p></li><li><p>方法（Methods）是一种可重用的代码块，它用于<strong>执行特定的任务操作</strong>。方法是类和对象的一部分，它规定了如何执行特定的操作和计算。一个方法包含如下部分：</p><ul><li><strong>方法名</strong>：用于描述方法的功能。</li><li><strong>返回类型</strong>：指定方法的返回值的数据类型。如果方法没有任何返回值，返回类型为<code>void</code>。</li><li><strong>参数列表</strong>：包含方法需要的输入值，如果有多个参数，它们使用逗号进行分隔。</li><li><strong>方法体</strong>：包括方法执行代码，通常包含一系列的语句。</li></ul></li></ul><p>我们可以定义一个<code>Keyboard</code>（键盘）类，这个类具有如下属性：键盘的宽度<code>width</code>、高度<code>height</code>、重量<code>weight</code>、颜色<code>color</code>、轴体数量<code>count</code>（87键、108键等）。方法有：开启键盘背景灯<code>turnOnBackLight</code>、敲击某个键<code>click</code></p><p>创建一个键盘类<code>Keyboard</code>，类是由<code>class</code>修饰的，类名要符合标识符命名规范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在这个类中，我们可以定义上述属性，轴体数量<code>count</code>为<code>int</code>类型、键盘宽度、高度、重量为<code>double</code>类型，其他的都为<code>String</code>类型。在类中定义如下属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <span class="hljs-comment">// 键盘宽度</span><br>    <span class="hljs-type">double</span> width;<br>    <span class="hljs-comment">// 键盘高度</span><br>    <span class="hljs-type">double</span> height;<br>    <span class="hljs-comment">// 键盘重量</span><br>    <span class="hljs-type">double</span> weight;<br>    <span class="hljs-comment">// 键盘颜色</span><br>    String color;<br>    <span class="hljs-comment">// 按键数量</span><br>    <span class="hljs-type">int</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘有如下功能：敲击<code>click</code>、开背景灯<code>turnOnBackLight</code>，这两项功能可以写进类，在类中作为方法存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 键盘类--包含属性和方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:44:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyBoard</span> &#123;<br>    <span class="hljs-comment">// 键盘宽度</span><br>    <span class="hljs-type">double</span> width;<br>    <span class="hljs-comment">// 键盘高度</span><br>    <span class="hljs-type">double</span> height;<br>    <span class="hljs-comment">// 键盘重量</span><br>    <span class="hljs-type">double</span> weight;<br>    <span class="hljs-comment">// 键盘颜色</span><br>    String color;<br>    <span class="hljs-comment">// 键盘数量</span><br>    <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启键盘背景灯的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnBackLight</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启键盘灯&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敲击键盘某个键的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 传入敲击的单个字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">click</span><span class="hljs-params">(<span class="hljs-type">char</span> key)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;敲击了&quot;</span> + key + <span class="hljs-string">&quot;键&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，“键盘”这张图纸（模板）就创建好了。</p><p>在这个类中，我们发现两个方法的返回值类型都为<code>void</code>，方法体的功能都是输出一句话。其中<code>click</code>方法传入了一个<code>char</code>类型的值。在方法上建议编写注释，便于了解这个方法的功能。</p><p>对象（Object）是类的实例。创建对象的过程称为<strong>实例化</strong>。每个对象都有其自身的属性和方法，这些属性和方法定义在类中。在Java中，每个对象都有一个引用变量，该变量存储对象的内存地址。通过引用变量，可以访问和修改对象的属性和方法。</p><p>我们可以利用上述图纸来打造一款键盘（创建对象）了，使用**<code>new</code>**关键字来创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建键盘类对象，并为属性赋值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:48:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyKeyBoardTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">KeyBoard</span> <span class="hljs-variable">keyBoard</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBoard</span>();<br>        System.out.println(keyBoard.width);<br>        System.out.println(keyBoard.height);<br>        System.out.println(keyBoard.weight);<br>        System.out.println(keyBoard.color);<br>        System.out.println(keyBoard.count);<br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br><br>        keyBoard.width = <span class="hljs-number">35.55</span>;<br>        keyBoard.height = <span class="hljs-number">12.22</span>;<br>        <span class="hljs-comment">// 重量按公斤算</span><br>        keyBoard.weight = <span class="hljs-number">2.02</span>;<br>        keyBoard.color = <span class="hljs-string">&quot;天蓝色&quot;</span>;<br>        keyBoard.count = <span class="hljs-number">87</span>;<br>        System.out.println(<span class="hljs-string">&quot;键盘的宽度是: &quot;</span> + keyBoard.width + <span class="hljs-string">&quot;cm&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的高度是: &quot;</span> + keyBoard.height + <span class="hljs-string">&quot;cm&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的重量是: &quot;</span> + keyBoard.weight + <span class="hljs-string">&quot;kg&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的颜色是: &quot;</span> + keyBoard.color);<br>        System.out.println(<span class="hljs-string">&quot;键盘一共有&quot;</span> + keyBoard.count + <span class="hljs-string">&quot;个键&quot;</span>);<br>        keyBoard.turnOnBackLight();     <span class="hljs-comment">// 调用开启键盘背景灯的方法</span><br>        keyBoard.click(<span class="hljs-string">&#x27;D&#x27;</span>);        <span class="hljs-comment">// 调用按下某个键的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230925092021916.png"></p><p>创建对象以后，依照目前编写的代码来看，我们可以直接使用**<code>对象名.属性名</code>**获取到属性值。</p><p>在分割线之前的输出中，我们并没有给每一个属性进行赋值，因此在分割线之前输出的是各种类型的默认值：<strong>整数类型默认值是0，浮点类型默认值为0.0，字符类型默认值是Unicode字符表的第一个字符，布尔类型默认值是<code>false</code>，引用数据类型的默认值为<code>null</code>（<code>null</code>在后面会讲到）</strong>。</p><p>因此：前三个属性在类中是<code>double</code>类型，所以输出的值都是0.0，<code>String</code>为引用数据类型，输出结果为<code>null</code>，最后一个为<code>int</code>类型，输出默认值为0。</p><p>分割线后五行我们为属性进行赋值，此时分割线后五行的内容就是我们赋值后的结果。</p><p>对象在调用方法时使用**<code>对象名.方法名</code><strong>，</strong>如果方法在定义时有相应类型的参数，则传入参数值的顺序、数量、类型必须和类中定义的方法保持一致**。在上述测试代码中，调用了无参的<code>turnOnBackLight</code>方法和一个参数的<code>click</code>方法，在类中定义的<code>click</code>方法有一个<code>char</code>类型的参数，因此传入的值必须是<code>char</code>类型，因此将字符<code>&#39;D&#39;</code>传入<code>click</code>方法是正确的。</p><p>当然，这一部分只是类和对象的冰山一角，更具体的内容需要到后续的文章中继续学习。</p><h1 id="六、引用数据类型默认值：null"><a href="#六、引用数据类型默认值：null" class="headerlink" title="六、引用数据类型默认值：null"></a>六、引用数据类型默认值：null</h1><h2 id="6-1-null的定义与使用"><a href="#6-1-null的定义与使用" class="headerlink" title="6.1 null的定义与使用"></a>6.1 null的定义与使用</h2><p><code>null</code>是Java的关键字，只能小写，不可随意更改。对于Java程序员来说，<code>null</code>是一个令人反感（咬牙切齿）的存在。</p><p><code>null</code>主要是用在引用对象无法确定的情况。比如说，我在<code>main</code>方法中定义一个字符串，但是这个字符串具体值是什么无法确定，但是在方法中只定义变量而不赋值是不能通过编译的，此时我们可以使用<code>null</code>赋值给字符串对象。</p><p><strong><code>null</code>是引用数据类型的默认值</strong>。以<code>String</code>类为例，<code>String</code>就是一个引用数据类型，因此将<code>null</code>赋值给<code>String</code>类型的变量是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-comment">// 将null赋值给String</span><br>str = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><code>null</code>并不是一个有效的对象实例，如果给一个对象赋值为<code>null</code>，那么当前对象引用当前不引用对象。</p><p><code>&quot;iCode504&quot;</code>是在内存中实际存在的字符串，它在内存表现形式如下：</p><p><img src="https://source.icode504.com/images/image-20230925101945789.png"></p><p>如果将<code>str</code>赋值为<code>null</code>，那么它不会指向堆内存中的对象。也就是说，在堆内存中原有的字符串对象会等待JVM（Java虚拟机）垃圾回收机制进行回收。</p><p><img src="https://source.icode504.com/images/image-20230925102249365.png"></p><p><code>null</code>不可以赋值给基本数据类型的变量。以下的写法都是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以下写法都是错误的，因为null只能赋值给引用数据类型</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">longValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">doubleValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">booleanValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>如果引用数据类型的变量值为<code>null</code>，直接调用引用数据类型的方法会产生空指针（NullPointerException，<del>臭名昭著</del>）异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用数据类型的默认值--null</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 09:37:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullValue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 引用数据类型的默认值，赋值给String是合法的</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        System.out.println(str);<br>        <span class="hljs-comment">// 间接调用null会出现NullPointerException空指针异常，开发过程中要尽量避免这种情况的发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str.length();<br>        System.out.println(length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230910094330303.png"></p><h2 id="6-2-空字符串与null的区别"><a href="#6-2-空字符串与null的区别" class="headerlink" title="6.2 空字符串与null的区别"></a>6.2 空字符串与null的区别</h2><p>在Java中，空字符串<code>&quot;&quot;</code>和<code>null</code>是两种不同概念，它们在内存中表示和处理方式有很大区别。</p><p>空字符串<code>&quot;&quot;</code>：在Java中，空字符串是一个包含0个字符的字符串示例。当我们创建一个空字符串变量时，它会在内存中占用空间，并且这个对象是分配给<code>String</code>对象的。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>str</code>是指向<code>String</code>对象的引用，而这个<code>String</code>对象在内存中会占用一定的空间，只是它包含的字符数为0。以下是<code>String str = &quot;&quot;;</code>在JDK 8版本中，内存简要存储情况图：</p><p><img src="https://source.icode504.com/images/image-20230922235045584.png"></p><p><code>null</code>：在Java中，<code>null</code>和<code>0~9</code>一样都是字面值，表示对象引用不指向任何对象，<code>null</code>是一个特殊值，表示一个引用类型变量没有实际值，声明一个引用类型变量但是不给变量赋值，它的默认值就是<code>null</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>String name;<span class="hljs-comment">// 不给name属性赋值，创建Cat对象并调用这个属性，默认输出为null</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CatTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        System.out.println(cat.name);<span class="hljs-comment">// 输出结果为null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230923073448725.png"></p><p>总结：空字符串<code>&quot;&quot;</code>是一个包含0个字符的字符串实例，它在内存中占用空间。而<code>null</code>是一个字面值，表示对象引用不指向任何对象。</p><h2 id="6-3-null的其他作用"><a href="#6-3-null的其他作用" class="headerlink" title="6.3 null的其他作用"></a>6.3 null的其他作用</h2><p>1. 可以使用比较运算符<code>==</code>来判断一个引用数据类型是否为<code>null</code>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>System.out.println(<span class="hljs-literal">null</span> == str);<span class="hljs-comment">// 判断引用数据类型String是否为null</span><br></code></pre></td></tr></table></figure><p>2. <code>null</code>本身不是对象，也不是任何类型的实例。我们可以使用<code>instanceof</code>运算符判断引用数据类型变量或值是否属于当前类型，此时我们使用<code>null</code>来判断它是否属于<code>Object</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * null是否属于Object类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:39:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullTypeCheck</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> Object) &#123;<br>            System.out.println(<span class="hljs-string">&quot;null属于Object类型&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;null不属于Object类型&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230925104106704.png"></p><p>Object类是所有类的父类，而输出结果中我们也可以判断出<code>null</code>不属于<code>Object</code>类型，它不属于任何类型的实例。</p><p>关于null的更多知识，详见如下文章：<a href="https://blog.51cto.com/lavasoft/79243">深入关键字null</a>、<a href="https://blog.csdn.net/qq_25077777/article/details/80174763">java中的null类型—有关null的9件事</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之三-基本数据类型及其转换</title>
    <link href="/posts/4.html"/>
    <url>/posts/4.html</url>
    
    <content type="html"><![CDATA[<p>Java的数据类型分为基本数据类型和引用数据类型，具体分类如下图：</p><p><img src="https://source.icode504.com/images/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="Java数据类型"></p><p>对于初学者而言，认为字符串类型<code>String</code>也属于基本数据类型，事实上<code>String</code>属于类，即引用数据类型。从<code>String</code>的源码中，我们就可以看出其使用的<code>class</code>关键字进行修饰：</p><p><img src="https://source.icode504.com/images/image-20230906093750819.png"></p><p>观察上述结构图我们可以发现Java的八种基本类型又可以细分成四类：整数类型、浮点类型、字符类型和布尔类型。本文将会对这四大类型一一进行讲解。</p><h1 id="一、整数类型"><a href="#一、整数类型" class="headerlink" title="一、整数类型"></a>一、整数类型</h1><p>整数类型，简称整型。Java中存储整型由四个类型组成：**<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>**。其中<code>int</code>类型最常用。这四个数据类型的对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储大小</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><code>byte</code></td><td align="center">8位，1字节</td><td align="center">[-128, 127]</td><td align="center">0</td></tr><tr><td align="center"><code>short</code></td><td align="center">16位，2字节</td><td align="center">[-2<sup>16-1</sup>,2<sup>16-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>int</code>（默认）</td><td align="center">32位，4字节</td><td align="center">[-2<sup>32-1</sup>,2<sup>32-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>long</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>64-1</sup>,2<sup>64-1</sup>-1]</td><td align="center">0L</td></tr></tbody></table><p>在定义这四个类型的变量时，需要注意定义的整数不要超过其存储范围（尤其是<code>byte</code>类型，因为它的存储范围最小）。</p><p>例如：我想定义一个<code>byte</code>、<code>short</code>、<code>int</code>类型的变量并赋值，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:44:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        System.out.println(b);<br>        System.out.println(s);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906094554236.png"></p><p>在使用<code>long</code>类型的时候需要注意：**<code>long</code>类型的数据后面需要加上<code>L</code>或<code>l</code>**（不推荐小写<code>l</code>，因为小写<code>l</code>很有可能和数字1或者大写字母I混淆）。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型long的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:53:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeLong</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6666666666666666666L</span>;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906095442555.png"></p><p>细心的小伙伴会发现，为什么变量<code>num1</code>的值<code>88</code>后面没有加上后缀<code>L</code>呢？</p><p>由于整型的默认使用的<code>int</code>类型，而<code>long</code>类型的范围比<code>int</code>大，因此数字<code>88</code>会由<code>int</code>类型自动提升为<code>long</code>类型，这种现象称作<strong>自动类型提升</strong>（本文后面会讲到自动类型提升）。因此<code>long num1 = 88;</code>并不会报语法错误。</p><p>而变量<code>num2</code>的值<code>6666666666666666666</code>已经超出了<code>int</code>类型的最大范围，但是这个数字在<code>long</code>范围内，此时就必须要加上后缀<code>L</code>。</p><p>以下是对定义<code>long</code>类型变量的总结说明：</p><table><thead><tr><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>在<code>int</code>范围内的数字，可以用<code>L</code>或<code>l</code>表示<code>long</code>类型，也可以不使用后缀。</td><td><code>long num1 = 32;</code><br /><code>long num2 = 43L;</code></td></tr><tr><td>如果表示的数字在<code>int</code>范围之外，但是在<code>long</code>的范围之内，则必须使用<code>L</code>或<code>l</code>作为后缀。</td><td><code>long num = 66666666666666L;</code></td></tr></tbody></table><p>如果你并不能确定所定义的整数是否在<code>int</code>范围，我个人的建议就是**只要定义<code>long</code>类型的整数，就在数字后面加个后缀<code>L</code>**。</p><h1 id="二、浮点类型"><a href="#二、浮点类型" class="headerlink" title="二、浮点类型"></a>二、浮点类型</h1><p>浮点类型，其实就是我们说的小数类型。浮点类型主要由<code>float</code>和<code>double</code>类型组成。其中，**<code>float</code>类型的数值后必须要加<code>f</code>或<code>F</code>为后缀**，二者对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储位数</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">数字后缀</th><th align="center">默认值</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center"><code>float</code></td><td align="center">32位，4字节</td><td align="center">[-2<sup>128</sup>,2<sup>128</sup>]</td><td align="center"><strong><code>f</code>或<code>F</code>（必须写后缀）</strong></td><td align="center">0.0f或0.0F</td><td align="center">7位小数</td></tr><tr><td align="center"><code>double</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>1024</sup>,2<sup>1024</sup>]</td><td align="center"><code>d</code>或<code>D</code>（非强制要求，一般不写后缀）</td><td align="center">0.0</td><td align="center">15位小数</td></tr></tbody></table><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基础数据类型float和double</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:25:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeFloatAndDouble</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.88f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.44F</span>;   <span class="hljs-comment">// 使用F或f最为后缀都可以</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0f</span> / <span class="hljs-number">3f</span>;<br>        System.out.println(f1);<br>        System.out.println(f2);<br>        System.out.println(f3);<br>        System.out.println(f4);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.66D</span>;  <span class="hljs-comment">// double的后缀可有可无</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>;<br><br>        System.out.println(d1);<br>        System.out.println(d2);<br>        System.out.println(d3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://source.icode504.com/images/image-20230906152845268.png"></p><p>为什么<code>d2</code>的输出结果是8.0？由于8默认为<code>int</code>类型，给变量<code>d2</code>赋值时，<code>int</code>类型的数值会向范围更大的<code>double</code>转换（自动类型提升，在后面文章会讲到），而<code>double</code>是浮点类型，后面需要跟随小数点，默认会在后面加上<code>.0</code>（一位小数），即输出结果为8.0。同理，<code>f3</code>的输出结果为6.0。</p><p>从输出结果中我们还能看出，<code>10 / 3</code>得到的是无限循环小数，但是<code>float</code>类型变量<code>f4</code>输出结果保留了7位小数，而<code>double</code>类型变量<code>d3</code>输出结果保留了15位小数。由这两个输出结果可以印证两个浮点类型的精度大小。</p><p>在日常使用过程中，使用<code>double</code>的次数要比<code>float</code>多，个人总结有如下三点：</p><ol><li><code>float</code>类型数值需要在必须其后面加上<code>f</code>和<code>F</code>，而<code>double</code>不需要在值后面加后缀符。</li><li><code>double</code>存储范围比<code>float</code>的大，并且浮点类型数值默认类型就是<code>double</code>。</li><li><code>double</code>的精度要比 <code>float</code>的高，表示的数值更加准确。</li></ol><h1 id="三、字符类型"><a href="#三、字符类型" class="headerlink" title="三、字符类型"></a>三、字符类型</h1><p>字符类型，即<code>char</code>类型，用来<strong>存储单个字符，使用单引号和单个字符表示</strong>，因此在单引号中写多个字符是错误写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<span class="hljs-comment">// 正确写法</span><br><span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ijk&#x27;</span>;<span class="hljs-comment">// 错误写法，单引号中只能写一个字符！</span><br></code></pre></td></tr></table></figure><p><code>char</code>是一个单一的16位的Unicode字符，它的存储范围是<code>[0,65535]</code>，即<code>&#39;\u0000&#39;</code>到<code>&#39;\uffff&#39;</code>。</p><p>这里会有小伙伴问：<code>char</code>不是只能表示单个字符吗？这就要说到Unicode字符表了，这个表存储了所有的字符（各种符号、中文英文等各种字符），Unicode字符表中的每个字符默认使用的是以<code>\u</code>和十六进制数组合表示，也就是说<code>\u0000</code>就是一个Unicode值，这个Unicode值对应着字符表中的一个字符。</p><p>Unicode字符表中存储了所有的可用的字符，<code>\u0000</code>其实表示的时候Unicode字符表中第一个字符，编写测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之char</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:18:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeChar1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用Unicode字符表中的字符来初始化char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>        <span class="hljs-comment">// 会输出，但是无法在控制台显示出来</span><br>        System.out.println(ch1);<br>        <span class="hljs-comment">// 利用if方法判断ch1是否是Unicode字符表中的第一个字符</span><br>        <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;\u0000&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1是Unicode字符表中的第一个字符&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1不是第一个字符&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/image-20230906162315218.png"></p><p>代码中我写了三个输出语句，其中第一个直接输出这个字符，但是从运行结果中我们发现这个语句确实输出了，但是控制台无法显示这个字符。</p><p>为了进一步验证输出的字符是否是Unicode字符表第一个字符，这里我使用了一个<code>if</code>判断。如果我们定义变量和<code>\u0000</code>相等时，输出<code>ch1是Unicode字符表中的第一个字符</code>，此时也就说明了第一个字符确实在计算机中存在，只是无法正常显示；相反，<code>\u0000</code>并不是Unicode字符表中的第一个字符。运行结果正如我们所料，输出的内容是<em>ch1是Unicode字符表中的第一个字符</em>。</p><h1 id="四、布尔类型"><a href="#四、布尔类型" class="headerlink" title="四、布尔类型"></a>四、布尔类型</h1><p><code>boolean</code>类型，即布尔类型，它只有两个值：<code>true</code>（真）和<code>false</code>（假）。通常用于条件表达式的判断（条件表达式后续文章会讲到），例如：我们都知道20 &gt; 30是假，即判断结果为<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之布尔类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:33:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeBoolean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        System.out.println(bool1);<br>        System.out.println(bool2);<br>        System.out.println(<span class="hljs-number">20</span> &gt; <span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906153456679.png"></p><h1 id="五、数字的进制表示（了解）"><a href="#五、数字的进制表示（了解）" class="headerlink" title="五、数字的进制表示（了解）"></a>五、数字的进制表示（了解）</h1><p>在中学期间我们学过数字有二进制、八进制、十进制和十六进制。</p><ul><li>二进制数字是由0、1组成，满二进一。</li><li>八进制数字是由0~7组成，满八进一。</li><li>十六进制是由0~9、A、B、C、D、E、F组成，满十六进一</li></ul><p>日常我们表示数字都是采用十进制，Java程序表示数字亦是如此。那么，如何表示二进制、八进制、十六进制的数字？</p><p>以十进制的数字<code>22</code>为例，转换为各个进制的数字如下：</p><table><thead><tr><th align="center">二进制</th><th align="center">八进制</th><th align="center">十六进制</th></tr></thead><tbody><tr><td align="center">10110</td><td align="center">26</td><td align="center">16</td></tr></tbody></table><p>在Java中，表示二进制数字，需要在数字前面加上<code>0B</code>或<code>0b</code>；如果表示八进制数字，需要在数字前面加上<code>0</code>即可；如果是十六进制的数字，需要在数字前面加上<code>0X</code>或者<code>0x</code>，以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:32:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 二进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">binary</span> <span class="hljs-operator">=</span> <span class="hljs-number">0B10110</span>;<br>        <span class="hljs-comment">// 八进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">octal</span> <span class="hljs-operator">=</span> <span class="hljs-number">026</span>;<br>        <span class="hljs-comment">// 十六进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hexadecimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x16</span>;<br>        <br>        System.out.println(decimal);<br>        System.out.println(binary);<br>        System.out.println(octal);<br>        System.out.println(hexadecimal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906104002433.png"></p><p>从运行结果我们可以看出：输出的数字无论是哪一种进制，默认都会转换为十进制的数字<code>22</code>。</p><p>如果我想直接将十进制数字<code>22</code>转换为各个进制并进行输出。</p><p>例如：我想定义的变量是<code>int</code>类型，可以使用<code>int</code>的包装类<code>Integer</code>，在<code>Integer</code>类中有和进制转换相关的方法：</p><ul><li><code>toBinaryString(num)</code>：将十进制数字转换为二进制数字并表示。</li><li><code>toOctalString(num)</code>：将十进制数字转换为八进制数字并表示。</li><li><code>toHexString(num)</code>：将十进制数字转换为十六进制数字并表示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 十进制数字转换为各个进制并输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:43:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentationParse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 转换为二进制数字并输出</span><br>        System.out.println(Integer.toBinaryString(number));<br>        <span class="hljs-comment">// 转换为八进制数字并输出</span><br>        System.out.println(Integer.toOctalString(number));<br>        <span class="hljs-comment">// 转换为十六进制数字并输出</span><br>        System.out.println(Integer.toHexString(number));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906104624146.png"></p><h1 id="六、原码、反码、补码（了解）"><a href="#六、原码、反码、补码（了解）" class="headerlink" title="六、原码、反码、补码（了解）"></a>六、原码、反码、补码（了解）</h1><p>原码、反码、补码是计算机中表示数值的一种方式，主要应用于计算机的加减运算。</p><p>原码是最基本的表示方法， 直接将数值以二进制的形式表示，原码就是符号位加上真值的绝对值，即第一位表示正负号（0为整数，1为负数），其他位表示值。</p><p>例如：<code>127</code>的原码是<code>01111111</code>，<code>-127</code>的原码是<code>11111111</code>。</p><p>原码的优点就是直观，容易理解。</p><p>反码：正数的反码就是其原码本身，负数的反码在其原码的基础上保持符号位不变，其他位取反。</p><p>例如：<code>-127</code>的反码是<code>10000000</code>，<code>127</code>的反码是<code>01111111</code>。</p><p>补码：正数的补码就是其原码本身，负数的补码需要在反码的基础上加1。</p><p>例如：<code>-127</code>的补码就是<code>10000001</code>。</p><p>想深入了解此方面的内容的小伙伴，详见这篇文章：<a href="https://blog.csdn.net/yujinlong2002/article/details/131613494">《原码、反码、补码的基本概念》</a>，我个人觉得写的很棒！</p><h1 id="七、自动类型提升"><a href="#七、自动类型提升" class="headerlink" title="七、自动类型提升"></a>七、自动类型提升</h1><p>前面我们已经讲过了8种基本数据类型，按照数据存储范围来比较：<code>double &gt; float &gt; long &gt; int &gt; short 、char &gt; byte</code></p><p>自动类型提升是指<strong>小范围的数据类型向大范围的数据类型进行转换</strong>。</p><p><strong><code>boolean</code>类型不能进行自动类型提升或强制类型转换。</strong></p><p>例如：<code>short</code>的存储范围比<code>int</code>小，因此，<code>short</code>类型的值赋值给<code>int</code>类型的变量时，<code>short</code>类型的值自动转换为<code>int</code>类型，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:42:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-comment">// short类型自动类型提升为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> s1;<br>        System.out.println(i1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906154452844.png"></p><p>上述案例可以看出，<code>s1</code>赋值给<code>i1</code>的时候并没有报错，原因就在于<code>s1</code>自动转换为<code>int</code>类型的值赋给<code>i1</code>。</p><p>自动类型提升可能存在的特殊情况：</p><p>情况一：<strong>当<code>byte</code>、<code>short</code>、<code>char</code>三者互相参与运算时，默认转为<code>int</code>类型。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：参与运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:45:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下三种运算均为错误写法，因为运算过程中byte、short、char类型的变量num1、num2和ch1会自动提升为int类型进行运算</span><br>        <span class="hljs-comment">// 得到的结果和左侧变量的数据类型不匹配而导致报错</span><br>        <span class="hljs-comment">// byte num3 = num1 + num2;</span><br>        <span class="hljs-comment">// short num4 = num1 + ch1;</span><br>        <span class="hljs-comment">// char ch3 = num1 + num2;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们解除一个错误写法的注释（例如<code>byte num3 = num1 + num2;</code>）。我们可以执行<code>javac</code>命令查询错误信息：</p><p><img src="https://source.icode504.com/images/image-20230906155323864.png"></p><p>情况二：<strong>整数类型向浮点类型转换时，默认后面会带<code>.0</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：整型向浮点类型进行转换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:56:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">// num1由int类型自动提升为float类型</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906155902924.png"></p><p>情况三：**<code>char</code>类型向更高数据范围（例如：<code>int</code>、<code>long</code>等）转换时，以数字的形式输出。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：字符类型char转换成其他类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:00:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// char类型转换成int类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> ch1;<br>        System.out.println(num1);<br><br>        <span class="hljs-comment">// char类型转换成long类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> ch2;<br>        System.out.println(num2);<br><br>        <span class="hljs-comment">// char类型转换成double类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;O&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> ch3;<br>        System.out.println(num3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20230906160250575.png"></p><h1 id="八、强制类型转换"><a href="#八、强制类型转换" class="headerlink" title="八、强制类型转换"></a>八、强制类型转换</h1><p>和自动类型提升相比，强制类型转换正好相反，由大范围的数据类型向小范围的数据类型进行转换，转换格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小数据类型 变量名 = (小数据类型) 大类型数据<br></code></pre></td></tr></table></figure><p>如果我想将<code>long</code>类型的数据转换为<code>byte</code>、<code>short</code>、<code>int</code>类型的数据，由于<code>long</code>是大范围的数据类型，向这三个小范围数据类型转换时需要进行强制类型转换。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换：long类型转换为byte、short、int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:16:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个long类型变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">longValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">108L</span>;<br>        <span class="hljs-comment">// 强制把long类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) longValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 强制把long类型转换为short类型</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) longValue;<br>        <span class="hljs-comment">// 输出short变量</span><br>        System.out.println(shortValue);<br>        <span class="hljs-comment">// 强制把long类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) longValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906111843181.png"></p><p>当然，强制类型转换也会存在如下的情况：</p><p>情况一：<strong>浮点类型转换成整数类型时，会出现精度损失</strong>，即小数点会被截断（不会四舍五入），只保留整数部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：浮点类型转换为整数类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:21:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个double类型变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.06</span>;<br>        <span class="hljs-comment">// 强制把double类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) doubleValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 定义一个float类型变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">5.06f</span>;<br>        <span class="hljs-comment">// 强制把float类型转换为int类型</span><br>        intValue = (<span class="hljs-type">int</span>) floatValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906112439981.png"></p><p>情况二：<strong>要转换的数字超出目标类型的范围，Java会自动对整数进行溢出处理</strong>，不会得到预期的值。</p><p>例如：定义一个<code>int</code>类型的变量<code>130</code>，将其转换成<code>byte</code>类型，而<code>byte</code>类型的存储范围是<code>[-128,127]</code>，<code>130</code>很明显超出了这个范围，强制转换的结果不会符合我们的预期，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况二：要转换的数字超出目标类型的范围，得到的结果不符合预期</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:28:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个int类型变量，值是超出byte类型的范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">130</span>;<br>        <span class="hljs-comment">// 强制把int类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) intValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20230906150905591.png"></p><p>很明显，输出结果并不符合我们的预期，而是得到了值<code>-126</code>，接下来我们从底层角度进行分析：</p><p>由于<code>int</code>为4字节32位，每一位是由二进制的0和1表示，因此130转换成二进制数（32位）为：</p><p><img src="https://source.icode504.com/images/image-20230906134926115.png"></p><p><code>int</code>类型强制转换成<code>byte</code>类型以后，只保留后八位，结果如下：</p><p><img src="https://source.icode504.com/images/image-20230906135029377.png"></p><p>得到的<code>10000010</code>是源码，8位的<code>byte</code>第一位是符号位，0表示正号，1表示负号。很明显这个数是负数，表示负数需要先将原码转换成反码，反码变成补码，补码再转换成十进制数字以后就是<code>byte</code>类型的结果。首先我们先将其转换成反码（符号位除外）：</p><p><img src="https://source.icode504.com/images/image-20230906135415985.png"></p><p>将反码加1之后，就得到补码：</p><p><img src="https://source.icode504.com/images/image-20230906135507695.png"></p><p>将<code>11111110</code>转换成十进制数为（第1位是符号位，是负数）：<br>$$<br>-(1\times2^{6}+1\times2^{5}+1\times2^{4}+1\times2^{3}+1\times2^{2}+1\times2^{1}+0\times2^{0})&#x3D;-126<br>$$<br>因此强制类型转换得到的结果是<code>-126</code>。</p><p>情况三：**<code>byte</code>、<code>short</code>、<code>char</code>进行运算时，会被提升为<code>int</code>类型，然后再进行计算**。要想转换成小范围数据类型，需要进行强制类型转换。</p><p>以下写法无法通过编译而报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> byteValue + shortValue;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> shortValue - charValue;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> charValue + <span class="hljs-number">10</span>;<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无法通过编译，因为进行加减法运算时，变量会自动提升为<code>int</code>类型，得到的结果也是<code>int</code>类型，和左侧原有的数据类型不匹配而报错：</p><p><img src="https://source.icode504.com/images/image-20230906142228688.png"></p><p>正确的写法是：将得到的结果进行强制类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-comment">// byte byteResult = byteValue + shortValue;</span><br>        <span class="hljs-comment">// short shortResult = shortValue - charValue;</span><br>        <span class="hljs-comment">// char charResult = charValue + 10;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (byteValue + shortValue);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) (shortValue - charValue);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (charValue + <span class="hljs-number">10</span>);<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合预期：</p><p><img src="https://source.icode504.com/images/image-20230906142626685.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之二-Java基础知识</title>
    <link href="/posts/3.html"/>
    <url>/posts/3.html</url>
    
    <content type="html"><![CDATA[<h1 id="对第一个Java程序的思考"><a href="#对第一个Java程序的思考" class="headerlink" title="对第一个Java程序的思考"></a>对第一个Java程序的思考</h1><p><a href="https://zhuanlan.zhihu.com/p/645437868">前面</a>我们已经写过一个使用Java语言输出四行诗句的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="外层结构——类"><a href="#外层结构——类" class="headerlink" title="外层结构——类"></a>外层结构——类</h2><p>观察这段代码的结构，它的外层是由<code>public</code>、<code>class</code>、文件名称（即<code>Huanghelou</code>）和一对大括号组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>public</code>和<code>class</code>是Java内置的关键字（本文后面会讲到关键字），也就是说，这两个关键字是Java语言本身就规定的，小白在写代码的时候不能随意更改（例如：将<code>public</code>写成<code>Public</code>，<code>class</code>一不小心写成了<code>cLass</code>等都是错误写法）。</p><p><code>class</code>本意是“类”，<code>class</code>后面的标识符<code>Huanghelou</code>是当前这个类的名称，也就是说，这个类的类名是<code>Huanghelou</code>；</p><p><code>public</code>是权限修饰符（后续文章会讲到这个关键字的具体使用，这里小白有一个印象就可以了）。</p><p><strong>一个Java文件至多只能有一个由<code>public</code>修饰的类，并且这个类的类名必须和<code>Java</code>文件名保持一致。</strong></p><p>由上述规定我们可以推断出：不由<code>public</code>修饰的类不必和当前java文件名保持一致。这里我创建一个名为<code>MyThirdProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行了<code>javac</code>命令时，我们发现它并没有生成<code>MyThirdProgram.class</code>文件，而是生成了<code>Dog.class</code>文件。这是因为前面我们的<code>MyThirdProgram.java</code>文件中只有一个<code>Dog</code>类，并不包含由<code>public</code>修饰的<code>MyThirdProgram</code>类。</p><p><img src="https://source.icode504.com/images/009.gif"></p><p>当然，我们的代码中既可以由<code>public</code>修饰的类和不由<code>public</code>修饰的类共存。这里我创建一个名为<code>MyFourthProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFourthProgram</span> &#123;<br>   <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>java</code>命令进行编译，此时就会出现<code>MyFourthProgram</code>、<code>Cat</code>、<code>Sheep</code>和<code>Duck</code>四个<code>.class</code>文件：</p><p><img src="https://source.icode504.com/images/010.gif"></p><p>由此可以说明，一个Java文件中，如果有多个类，那么对这个Java文件执行编译命令时，就会生成多个相对应的字节码文件。</p><h2 id="内层结构——main方法"><a href="#内层结构——main方法" class="headerlink" title="内层结构——main方法"></a>内层结构——main方法</h2><p>在<code>MySecondProgram</code>类的内部，包含一个这样的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>前三个<code>public</code>、<code>static</code>、<code>void</code>是Java的关键字（固定写法）。这个结构在Java中称作方法，这个方法称作<code>main</code>方法（因为方法名叫做<code>main</code>方法），**<code>main</code>方法是Java程序的入口**，也就是说，程序在运行时，会先执行<code>main</code>方法。</p><p><code>main</code>方法必须定义成<code>public static void main(String[] args) &#123;...&#125;</code>的结构，这是Java的规范。</p><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><p>这段代码中，按行输出的语句是<code>System.out.println();</code>。也就是说，Java在执行这条语句的时候，会向控制台输出内容并换行。</p><p>当然，我们也可以选择不换行输出，<code>System.out.print();</code>语句就能保证输出的内容不换行。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWithoutLine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是使用<code>javac encoding PrintWithoutLine.java</code>和<code>java PrintWithoutLine</code>命令的执行结果：</p><p><img src="https://source.icode504.com/images/image-20230829070237080.png"></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是用来向代码中添加解释和说明，编写注释可以让我们更好地阅读和理解代码。在代码上写注释是一个好习惯，今天我写了50行的代码，但是过了三个月以后，如果我再看这段代码，会有种不知所措的感觉：这代码是我写的吗？它要实现的功能是什么？如果在编写代码以后写了注释，以后在阅读代码的时候这种窘境会大大减少，提高我们对代码的理解:smile:。</p><p>注释不会影响程序的运行，Java编译器会将注释忽略。</p><p>在Java编程语言中，有三种类型的注释：<strong>单行注释</strong>、<strong>多行注释</strong>和<strong>文档注释</strong>。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>单行注释，顾名思义，就是只能在某一行上写注释，使用两个斜杠<code>//</code>表示，格式为：<code>// 单行注释内容</code>。</p><p>以前面写过的代码为例，如果我想在输出语句上方中添加一句注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出一行内容</span><br>System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p>当然，你也可以在这个输出语句后面所在行写注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<span class="hljs-comment">// 输出一行内容</span><br></code></pre></td></tr></table></figure><blockquote><p>扩展：《阿里巴巴Java开发手册》对单行注释内容的说明</p><p>1. <font color='#EE0000'>【强制】</font>方法内部的单行注释，在被注释的语句上方另起一行，使用<code>//</code>注释。</p><p>也就是说，在我们日常开发的时候，编写注释时，推荐使用上述第一种注释风格。</p><p>2. <font color='#EE0000'>【强制】</font>注释的双斜线与注释内容之间有且仅有一个空格。</p><p><font color='#39C5BB'>正例</font>：</p><p><img src="https://source.icode504.com/images/image-20230829225430559.png" alt="image-20230829225430559"></p><p>3. <strong>【推荐】</strong>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p><p><font color='orange'>反例</font>：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></blockquote><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释使用<code>/* */</code>进行表示，在<code>/*</code>和<code>*/</code>之间你可以写多行注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是一段多行注释</span><br><span class="hljs-comment">println()方法用于换行输出</span><br><span class="hljs-comment">print()方法用与不换行输出</span><br><span class="hljs-comment">*/</span><br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>多行注释之间不要使用嵌套。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*/*这是一段多行注释，这样嵌套多行注释的方式是错误的*/</span>*/<br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样嵌套是错误的。以上述代码为例，Java编译器认为多行注释最开头的是<code>/*</code>，能和它配对的是最近的<code>*/</code>，也就是说，这段多行注释的内容是：<code>/*这是一段多行注释，这样嵌套多行注释的方式是错误的</code>。最外层的<code>*/</code>无法识别为多行注释符号而导致编译错误。</p><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>文档注释是Java特有的一种注释，它用于对类、方法、变量等进行说明。</p><p>文档注释使用<code>/**</code>作为开头，<code>*/</code>作为结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类中由一个main方法组成</span><br><span class="hljs-comment"> * 这个类的主要作用是通过控制台输出两句话</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * main方法用于输出两行诗句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文档注释常用标签"><a href="#文档注释常用标签" class="headerlink" title="文档注释常用标签"></a>文档注释常用标签</h3><p>在这段代码中，我们发现类上有一些特殊标签，它们以<code>@</code>作为开头，后面跟随一个指定的名字，例如：<code>@author</code>、<code>@version</code>等。</p><p><code>@author</code>用于指明当前代码的作者或所属组织，如果有多个作者可以加多个此标签，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zhangsan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Lisi</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@version</code>用于指明当前代码的版本号，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.1.0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@return</code>标签作用于方法的文档注释上，表明当前方法的返回值类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 不返回任何内容，因为返回值类型为void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@param</code>标签用于描述方法的参数信息。以<code>main</code>方法为例，它的参数是字符串数组类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@throws</code>和<code>@exception</code>标签用于描述方法可能会抛出的异常，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException 可能会抛出文件IO异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用javadoc命令生成网页风格的文档"><a href="#使用javadoc命令生成网页风格的文档" class="headerlink" title="使用javadoc命令生成网页风格的文档"></a>使用javadoc命令生成网页风格的文档</h3><p>我们可以使用<code>javadoc</code>命令对代码中的文档注释进行解析，生成一套网页形式的文档。命令格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javadoc -d 文件路径 -encoding UTF-<span class="hljs-number">8</span> --label1 -label2 文件名.java<br></code></pre></td></tr></table></figure><p>这里的<code>label1</code>和<code>label2</code>是指文档注释中由<code>@</code>开头的标签，如果执行命令中写了那个标签，就会在网页中显示。当然，你的<code>java</code>文件中写了多少个不同类型的标签，你就可以在命令中写多少个<code>--标签</code>。</p><p>以上述内容为例，如果我想输出所有文档注释和标签到网页，可以执行如下命令：</p><p><img src="https://source.icode504.com/images/image-20230829231347951.png"></p><p>此时我们进入<code>G:\Code\MyWorkspace\day02\MyFirstDoc</code>路径中，我们可以看到如下内容，直接使用浏览器打开<code>index.html</code>：</p><p><img src="https://source.icode504.com/images/image-20230829231503903.png"></p><p>此时我们就能在网页中更加直观地看到我们写的文档注释内容了：</p><p><img src="https://source.icode504.com/images/image-20230829231623291.png"></p><h3 id="阿里巴巴Java开发手册关于文档注释的规范"><a href="#阿里巴巴Java开发手册关于文档注释的规范" class="headerlink" title="阿里巴巴Java开发手册关于文档注释的规范"></a>阿里巴巴Java开发手册关于文档注释的规范</h3><blockquote><p>1. <font color='#EE0000'>【强制】</font>类、类属性、类方法的注释必须使用 Javadoc 规范，使用<code>/**内容*/</code>格式，不得使用<code>// xxx</code>方式。</p><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><p>2. <font color='#EE0000'>【强制】</font>所有的类都必须添加创建者和创建日期。</p><p>说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有区别，而日期的设置统一为 yyyy&#x2F;MM&#x2F;dd 的格式。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/08/31</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>3. <strong>【推荐】</strong>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p><p><font color='orange'>说明</font>：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></blockquote><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Java关键字是由Java语言预先定义的保留的标识符，关键字不能用作变量名、方法名、类名等。这些关键字在Java语言中具有特殊的含义和用途，以下是Java常见的关键字（不需要记忆，因为这些关键字的用法会在后续文章中陆续讲到）：</p><ul><li>数据类型相关的关键字：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code>、<code>void</code>。</li><li>流程控制相关的关键字：<code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>、<code>default</code>、<code>for</code>、<code>while</code>、<code>do</code>、<code>break</code>、<code>continue</code>、<code>return</code></li><li>权限控制关键字：<code>public</code>、<code>protected</code>、<code>private</code></li><li>类和对象相关关键字：<code>class</code>、<code>new</code>、<code>extends</code>、<code>interface</code>、<code>implements</code>、<code>this</code>、<code>super</code>、<code>instanceof</code>、<code>static</code>、<code>abstract</code>、<code>final</code>、<code>enum</code></li><li>异常处理关键字：<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>、<code>assert</code></li><li>包相关的关键字：<code>import</code>、<code>package</code></li><li>多线程及同步相关的关键字：<code>synchronized</code>、<code>volatile</code></li><li>序列化相关的关键字：<code>transient</code></li><li>保留字：<code>goto</code>、<code>const</code></li><li>其他关键字：<code>native</code>、<code>var</code>（JDK 10新增关键字）、<code>null</code>（不推荐做变量名）、<code>strictfp</code></li></ul><p><strong>所有关键字的名称全部是小写，不是小写的一定不是关键字</strong>。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>Java中类名、方法名、变量名（关于变量名会在后面讲到）都称作标识符。以前面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的类名叫做<code>MyJavaDoc</code>，方法名称作<code>main</code>。</p><p>关于Java标识符，需要遵守如下规范（必须遵守，否则无法通过编译）：</p><p>1. <strong>标识符由大小写英文字母、数字、美元符号<code>$</code>、下划线组成</strong>。例如：<code>ABC</code>、<code>_MyProgram</code>、<code>$Sheep</code>都是正确写法；<code>-Sheep</code>、<code>ABC+</code>等都是非法的。</p><p>2. <strong>关键字不能作为标识符</strong>。例如：<code>static</code>关键字不可以做类名和方法名。</p><p>3. <strong>Java对标识符大小写是敏感的</strong>。例如：<code>sheepCount</code>和<code>SheepCount</code>就是两个不同的标识符。</p><p>4. <strong>数字不能作为标识符的开头</strong>，例如：标识符<code>4Sheep</code>就是错误写法。</p><blockquote><p>扩展：《阿里巴巴Java开发手册》对标识符相关内容做出如下规范：</p><p>1. <font color='#EE0000'>【强制】</font>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p><font color='orange'>反例</font>：<code>_name / __name / $name / name_ / name$ / name__</code></p><p>2. <font color='#EE0000'>【强制】</font>所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。</p><p><font color='#39C5BB'>正例</font>：<code>ali / alibaba / taobao / cainiao / aliyun/ youku / hangzhou</code>等国际通用的名称，可视同英文。</p><p><font color='orange'>反例</font>：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p>3. <font color='#EE0000'>【强制】</font><strong>类名使用 UpperCamelCase 风格（大驼峰命名方式，每个单词首字母大写）</strong>，但以下情形例外：DO &#x2F; BO &#x2F; DTO &#x2F; VO &#x2F; AO &#x2F; PO &#x2F; UID 等。</p><p><font color='#39C5BB'>正例</font>：<code>ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</code></p><p><font color='orange'>反例</font>：<code>forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</code></p><p>4. <font color='#EE0000'>【强制】</font><strong>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase（除了第一个单词首字母小写以外，其他单词首字母大写）风格。</strong></p><p><font color='#39C5BB'>正例</font>：<code>localValue / getHttpMessage() / inputUserId</code></p><p>5. <font color='#EE0000'>【强制】</font>杜绝完全不规范的缩写，避免望文不知义。</p><p><font color='orange'>反例</font>：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在Java编程语言中，变量是一种存储数据的“容器”，它们能存储各种类型的数据，例如：整数、浮点数、字符、布尔类型等。</p><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><p>变量是内存中的一个存储区域，正如其名：变量，变量存储的数据是可以变化的。</p><p>变量三要素：<strong>数据类型</strong>、<strong>变量名</strong>和<strong>变量值</strong>。在内存中的关系图如下：</p><p><img src="https://source.icode504.com/images/image-20230901225644712.png"></p><p>变量主要用于在内存中存储数据。</p><h2 id="定义并初始化变量"><a href="#定义并初始化变量" class="headerlink" title="定义并初始化变量"></a>定义并初始化变量</h2><p>创建Java变量的一般语法是：<strong>数据类型 变量名 &#x3D; 变量值</strong></p><ul><li>变量名可以自定义，但是需要遵守标识符命名规范。</li><li>数据类型分为基础数据类型和引用数据类型，这里举例使用整数类型<code>int</code>，更多关于数据类型的内容详见下一篇文章。</li></ul><p>这里以存储整数类型的<code>int</code>来举例：变量<code>number</code>的值为<code>22</code>，那么可以定义成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>当然我们也可以先定义变量<code>number</code>，在对变量进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> number;<br>number = <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>以下是变量在代码中的使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVariable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 变量的定义和赋值都在同一行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(age);<br>        <br>        <span class="hljs-comment">// 先定义变量，再为变量进行赋值</span><br>        <span class="hljs-type">int</span> number;<br>        number = <span class="hljs-number">22</span>;<br>        System.out.println(number);<br>        <br>        <span class="hljs-comment">// 变量是可以变化的：给number再次赋值为24，这个值会将原有的22进行覆盖</span><br>        number = <span class="hljs-number">24</span>;<br>        System.out.println(number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230904071419878.png"></p><h2 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h2><p>1. <strong>变量必须先声明，后使用。</strong>凭空出现的变量是无法通过编译的。以下是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    number = <span class="hljs-number">1</span>;<span class="hljs-comment">// 编译不通过，因为number并没有被声明</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2. <strong>使用变量名来访问这块区域的内存数据</strong>。以上述<code>MyVariable</code>类为例，当我们输出结果的时候，并没有直接使用变量值<code>20</code>和<code>22</code>进行输出，而是使用变量名<code>age</code>和<code>number</code>进行输出，因为通过变量名可以访问到这块区域的内存，存储的值是多少。</p><p>3. <strong>变量的作用域：作用域在最近的外层大括号内，变量只有定义在作用域内才有效</strong>。以上述<code>MyVariable</code>类为例，变量<code>age</code>和<code>number</code>的作用域只能在<code>main</code>方法中，因为两个变量最近的外层大括号就是在<code>main</code>方法的范围，出了<code>main</code>方法会导致Java将无法识别这个变量而出现编译错误。</p><p><img src="https://source.icode504.com/images/image-20230901224447651.png"></p><p>4. <strong>同一个作用域内，不能定义重名的变量</strong>。下面代码是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">29</span>;<span class="hljs-comment">// 错误写法，因为作用域内只能定义一个名为number的变量</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之六-附录一-以字节码的角度分析分析i++和++i</title>
    <link href="/posts/8.html"/>
    <url>/posts/8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：众所周知，<code>i++</code>和<code>++i</code>的区别是：<code>i++</code>先将<code>i</code>的值赋值给变量，再将<code>i</code>的值自增1；而<code>++i</code>则是先将<code>i</code>的值自增1，再将结果赋值给变量。因此，二者最终都给<code>i</code>自增了1，只是方式不同而已。</p><p>当然，如果在面试过程中面试官问你这个问题，只回答出上述内容，只能说明你对这方面的知识了解的还是太浅显。那么<code>i++</code>和<code>++i</code>到底有什么不同之处呢？</p></blockquote><h1 id="一、局部变量表与操作数栈简介"><a href="#一、局部变量表与操作数栈简介" class="headerlink" title="一、局部变量表与操作数栈简介"></a>一、局部变量表与操作数栈简介</h1><p>《深入理解Java虚拟机》第八章对栈帧结构有如下描述Java虚拟机以方法作为最基本的执行单元，“栈帧”（Stack Frame）则是用于支持虚拟机进行方法调用和方法执行背后的数据结构，它也是虚拟机运行时数据区中的虚拟机栈的栈元素。</p><p>在一个活动线程中，可能会执行多个方法，因此会存在多个栈帧，和“栈”（先进后出）一样，处于栈顶的栈帧才是真正运行的，处于栈顶的栈帧称作“当前栈帧”（Current Stack Frame），这个栈帧所属的方法称作“当前方法”（Current Method）。</p><p>在执行<code>main</code>方法时，<code>main</code>方法所属的线程主线程，假设在主线程中调用了一个<code>method1()</code>方法，在<code>method1()</code>内部调用了<code>method2()</code>方法，在<code>method2()</code>方法执行两个整数运算，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-23 22:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackFrameDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main开始执行&quot;</span>);<br>        method1();<br>        System.out.println(<span class="hljs-string">&quot;main执行完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;method1开始执行&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method2();<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;method1执行结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">return</span> var1 + var2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231023221121858.png"></p><p>由代码我们可以看出，<code>main</code>方法最先执行一个输出，然后进入<code>method1</code>执行第一个输出，再完整执行<code>method2</code>。<code>method2</code>执行完成以后，再执行<code>method1</code>，最后执行<code>main</code>方法，由于这段代码中只涉及一个主线程，并且最先完整执行方法的是<code>method2</code>，因此<code>method2</code>对应的栈帧就是当前栈帧，<code>main</code>方法最后执行完毕，因此<code>main</code>方法对应的栈帧在<code>method2</code>和<code>method1</code>之下。以下是这段代码对应的栈帧概念图：</p><p><img src="https://source.icode504.com/images/image-20231023222236855.png"></p><p>在每一个栈帧中存储了方法的局部变量表、操作数栈、动态链接和方法返回地址等信息</p><h2 id="1-1-局部变量表"><a href="#1-1-局部变量表" class="headerlink" title="1.1 局部变量表"></a>1.1 局部变量表</h2><p>局部变量表（Local variable Table）是一组<strong>变量值</strong>的存储空间，用于存放方法参数和方法内部定义的局部变量。</p><p>局部变量表的容量是以变量槽（Variable Slot）为最小单位，每个变量槽能存储基本数据类型和引用数据类型的数据。为了尽可能节省栈帧消耗的内存空间，局部变量表中的变量槽是可以重用的。</p><p>JVM使用索引定位的方式使用索引变量表，索引值的范围是从0开始到局部变量表最大变量槽的数量（类似数组结构）。</p><p>当一个方法被调用的时候，JVM会使用局部变量表来完成参数值到参数变量列表的传递，即实参到形参的传递。</p><h2 id="1-2-操作数栈"><a href="#1-2-操作数栈" class="headerlink" title="1.2 操作数栈"></a>1.2 操作数栈</h2><p>操作数栈（Operand Stack）也称作操作数栈，它是一个栈结构（后进先出，例如手枪的弹夹，先打出去的子弹是最顶上的子弹）。</p><p>在方法开始执行的时候，这个方法对应的操作数栈是空的，在方法执行过程中，会有各种字节码指令向操作数栈中写入或读取内容，即出栈和入栈操作，例如：两数相加运算时，就需要将两个数压入栈顶后调用运算指令。</p><p><strong>操作数栈中的元素的数据类型必须和字节码指令序列严格匹配</strong>，在编译程序代码的时候编译器必须要严格保证这一点，在类的校验阶段的数据流分析时候还需要再次校验。例如：执行加法<code>iadd</code>（<code>i</code>是<code>int</code>类型，<code>add</code>是两个数相加）命令时，就需要保证两个操作数必须是<code>int</code>类型，不能出现其他类型相加的情况。</p><h1 id="二、字节码分析（图解）"><a href="#二、字节码分析（图解）" class="headerlink" title="二、字节码分析（图解）"></a>二、字节码分析（图解）</h1><p>我们可以从字节码的角度进一步对<code>i++</code>和<code>++i</code>的执行过程做进一步的分析。以下面代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++和++i的深入分析</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-17 5:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> ++intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要查看编译后的字节码文件，字节码文件不能直接使用记事本打开，但是我们可以使用<code>javap -verbose 文件名.class</code>命令，以<code>IncrementAndDecrementOperators2.class</code>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap -verbose IncrementAndDecrementOperators2.class<br></code></pre></td></tr></table></figure><p>此时就会打开所有的字节码文件，我们只需要关注<code>main</code>方法内的执行过程即可：</p><p><img src="https://source.icode504.com/images/image-20231017063620627.png"></p><p>首先来解释一下这四行代码的含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: iconst_2<br><span class="hljs-number">1</span>: istore_1<br><span class="hljs-number">2</span>: iconst_2<br><span class="hljs-number">3</span>: istore_2<br></code></pre></td></tr></table></figure><ul><li><code>iconst_2</code>一共有两部分组成，<code>i</code>指的是<code>int</code>类型（源代码中我们定义的确实是<code>int</code>类型），<code>const</code>代表常量（数字<code>2</code>是整型常量），<code>iconst_2</code>的含义是将2入操作数栈。</li><li><code>istore_1</code>中的<code>store</code>代表的是存储，<code>istore_1</code>的含义是将操作数栈中的数值2出栈，存入到局部变量表1的位置。同理，<code>i_store2</code>表示将操作数栈中的数值2出栈，存储到局部变量表2的位置。</li></ul><p>以下是前面四行代码存储过程图（存储过程全部流程图点击此链接下载：<a href="https://icode504.lanzouw.com/ijDp41cn4p0b">点我下载</a>）：</p><p><img src="https://source.icode504.com/images/image-20231023180543810.png"></p><p><img src="https://source.icode504.com/images/image-20231023180636090.png"></p><p><img src="https://source.icode504.com/images/image-20231023180949754.png"></p><p><img src="https://source.icode504.com/images/image-20231023181650491.png"></p><p>此时我们继续观察4-8行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4</span>: iload_1<br><span class="hljs-number">5</span>: iinc<span class="hljs-number">1</span>, <span class="hljs-number">1</span><br><span class="hljs-number">8</span>: istore_3<br></code></pre></td></tr></table></figure><ul><li><code>iload_1</code>的作用是将局部变量表1号位置存储的值移动到操作数栈。</li><li>第5行的<code>iinc</code>有两个参数，第一个参数<code>1</code>是局部变量表的位置，另一个参数<code>1</code>的含义是在该位置存储一个<code>1</code>，如果这个位置存在值，那么这个值的结果是<strong>已存在值 + 参数值</strong>。</li><li><code>istore_3</code>将操作数栈中的数移动到局部变量表的3号位置。</li></ul><p>以下是这三行代码的示意图：</p><p><img src="https://source.icode504.com/images/image-20231023182309249.png"></p><p><img src="https://source.icode504.com/images/image-20231023182828787.png"></p><p><img src="https://source.icode504.com/images/image-20231023183808061.png"></p><p>9-12行的字节码的作用原理和4-8行的作用原理基本相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span>: iinc<span class="hljs-number">2</span>, <span class="hljs-number">1</span><br><span class="hljs-number">12</span>: iload_2<br><span class="hljs-number">13</span>: istore<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><code>istore 4</code>的作用是将操作数栈中的值存储到局部变量表4号位置。</p><p>以下是这三行代码的示意图：</p><p><img src="https://source.icode504.com/images/image-20231023183842487.png"></p><p><img src="https://source.icode504.com/images/image-20231023184139208.png"></p><p><img src="https://source.icode504.com/images/image-20231023184445793.png"></p><p>接下来15-30行是和系统输出有关的。其中第30行<code>iload_3</code>在局部变量表中（这个值为2）值移动到操作数栈顶供系统输出，事实上<code>iload_3</code>的值正好对应源代码中变量<code>result1</code>的值。也就是说，<code>result1</code>输出结果就是<code>iload_3</code>的数值2。</p><p><img src="https://source.icode504.com/images/image-20231021153508365.png"></p><p>同理，<code>iload 4</code>就是第二个要输出的值，在局部变量表中第4个位置存储的值正好是3，而输出的变量名是<code>result2</code>，因此<code>result2</code>的输出结果是3。</p><p><img src="https://source.icode504.com/images/image-20231021154150053.png"></p><h1 id="三、i-和-i性能分析"><a href="#三、i-和-i性能分析" class="headerlink" title="三、i++和++i性能分析"></a>三、<code>i++</code>和<code>++i</code>性能分析</h1><p><code>i++</code>和<code>++i</code>主要用在普通<code>for</code>循环上，那么我们就将二者用在<code>for</code>循环上，循环相同的次数，从字节码的角度进行分析。</p><p>以下是使用<code>i++</code>和<code>++i</code>的两个<code>for</code>循环文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++在for循环的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-21 16:14:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoopTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ++i在for循环的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-21 16:15:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoopTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行编译命令以后，我们来查看两个文件的字节码：</p><p><img src="https://source.icode504.com/images/image-20231021162911742.png"></p><p><img src="https://source.icode504.com/images/image-20231021162952984.png"></p><p>仔细观察这两个字节码文件内容，我们发现在两个文件<code>main</code>方法的字节码内容完全相同。由此可见，两种方式执行<code>for</code>循环的效率是相同的。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之八-常用类的简单使用</title>
    <link href="/posts/10.html"/>
    <url>/posts/10.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="./1.html">点我查看安装JDK 8教程</a>、<a href="./14.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><h1 id="一、控制台输入类Scanner"><a href="#一、控制台输入类Scanner" class="headerlink" title="一、控制台输入类Scanner"></a>一、控制台输入类Scanner</h1><p>假设今天我想在瓜摊买一个西瓜（西瓜的重量是10斤），西瓜两块钱一斤，此时使用Java程序代码如下：</p><p><img src="https://source.icode504.com/images/watermelon-5857431_640.jpg" alt="图片来源于网络，侵删"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算西瓜的价格</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;      <span class="hljs-comment">// 西瓜的单价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;    <span class="hljs-comment">// 西瓜的重量（公斤）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;    <span class="hljs-comment">// 购买价格</span><br>        System.out.println(<span class="hljs-string">&quot;西瓜的价格是: &quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231031141401505.png"></p><p>然而现实生活中西瓜的单价和重量是变化的，我们需要手动输入单价和重量，再将输入的内容进行计算。如果在Java代码中实现这一功能，就需要使用到控制台输入类<code>Scanner</code>。</p><p>要想执行输入操作，需要创建一个<code>Scanner</code>类型的对象，<code>Scanner</code>类位于<code>java.util</code>包中（包的概念后续会讲到），需要我们在类的上方手动导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br></code></pre></td></tr></table></figure><p>导入完成后，我们就可以在<code>main</code>方法中创建<code>Scanner</code>类型的对象了，在<code>Scanner</code>的构造器中还需要传入一个参数<code>System.in</code>表示从控制台输入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br></code></pre></td></tr></table></figure><p>此时我们就完成了<code>scanner</code>对象的创建，此时我们就可以调用<code>Scanner</code>类中的方法了，由于我们定义的是<code>int</code>类型的变量，此时我们就可以使用<code>Scanner</code>类中的<code>nextInt()</code>方法实现输入功能，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextInt();<br></code></pre></td></tr></table></figure><p>在控制台输入的内容就会赋值给当前变量并且可以参与后续的运算。</p><p>以下是解决上述方案的完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;       <span class="hljs-comment">// 要想使用Scanner类，就必须要在类的上方导入</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Scanner类实现手动输入，然后计算结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入西瓜的单价: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入西瓜的重量(按斤计算): &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;<br>        System.out.println(<span class="hljs-string">&quot;西瓜的单价是&quot;</span> + price + <span class="hljs-string">&quot;元, 重量是&quot;</span> + weight + <span class="hljs-string">&quot;斤, 价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/23103001.gif"></p><p>除了<code>boolean</code>和<code>char</code>类型以外，其他七种数据类型都可以调用<code>nextXxx()</code>方法，使用方式和上述过程完全相同：</p><table><thead><tr><th>基本数据类型</th><th>调用方法</th></tr></thead><tbody><tr><td><code>byte</code></td><td><code>nextByte()</code></td></tr><tr><td><code>short</code></td><td><code>nextShort()</code></td></tr><tr><td><code>int</code></td><td><code>nextInt()</code></td></tr><tr><td><code>long</code></td><td><code>nextLong()</code></td></tr><tr><td><code>float</code></td><td><code>nextFloat()</code></td></tr><tr><td><code>double</code></td><td><code>nextDouble()</code></td></tr></tbody></table><p>除了能输入数字以外，<code>Scanner</code>类还提供了字符串输入的方法：<code>next()</code>和<code>nextLine()</code>。这两个方法都能在控制台输入字符串，二者的区别是：</p><ul><li><code>next()</code>方法读取字符串，直到遇到空格、制表符<kbd>Tab</kbd>和回车<kbd>Enter</kbd>为止，如果这三个符号后面还存在其他字符，<code>next()</code>方法都会省略。</li><li><code>nextLine()</code>方法读取字符串，直到遇到回车<kbd>Enter</kbd>为止。即使当前行存在空格，也能正常输出。</li></ul><p>以下是两种方法的使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * next()方法和nextLine()方法的区别</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请使用nextLine()方法输入内容，按回车键结束: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue1</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;使用nextLine()输出结果是: &quot;</span> + strValue1);<br><br>        System.out.println(<span class="hljs-string">&quot;请使用next()方法输入内容，按回车键结束: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue2</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;使用next()输出结果是: &quot;</span> + strValue2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231031152342510.png"></p><h1 id="二、数学类Math"><a href="#二、数学类Math" class="headerlink" title="二、数学类Math"></a>二、数学类Math</h1><p>在初高中我们学习的一些数学函数在Java中同样使用。这些数学函数都在<code>Math</code>类中。</p><h2 id="2-1-绝对值、两数的最小值和最大值"><a href="#2-1-绝对值、两数的最小值和最大值" class="headerlink" title="2.1 绝对值、两数的最小值和最大值"></a>2.1 绝对值、两数的最小值和最大值</h2><p>绝对值的概念：正数的绝对值是其本身，0的绝对值是0，负数的绝对值是其相反数。在<code>Math</code>类中，我们可以调用静态方法<code>Math.abs(number)</code>来获取<code>number</code>的绝对值，其中<code>number</code>的类型只能是<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>中的一种。</p><p>两数的最小值可以调用<code>Math.min(number1, number2)</code>，如果<code>number1 &gt; number2</code>，那么得到的结果是<code>number2</code>，反之，得到的结果是<code>number1</code>。</p><p>两数的最大值可以调用<code>Math.max(number1, number2)</code>，如果<code>number1 &gt; number2</code>，那么得到的结果是<code>number1</code>，反之，得到的结果是<code>number2</code>。</p><p>其中<code>number1</code>和<code>number2</code>需要保证是<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>中的一种。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绝对值abs()、两数最小值min()、两数最大值max()的应用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 取绝对值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.abs(intValue1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2.45</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.abs(doubleValue1);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.abs(floatValue1);<br><br>        System.out.println(<span class="hljs-string">&quot;----------取绝对值----------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br><br>        <span class="hljs-comment">// 两数取最小值、最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.min(intValue2, intValue3);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.max(intValue2, intValue3);<br>        System.out.println(<span class="hljs-string">&quot;----------取最小值、最大值----------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231031182425433.png"></p><p>那么<code>Math.abs()</code>、<code>Math.min()</code>、<code>Math.max()</code>为什么只支持<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>四种类型。我们使用<kbd>Ctrl</kbd>和鼠标左键点击<code>abs()</code>方法进入源码：</p><p><img src="https://source.icode504.com/images/23103002.gif"></p><p>此时按<kbd>Alt</kbd>和<kbd>7</kbd>键，会列举出当前类所有的方法，此时我们在列表中直接输入<code>abs</code>搜索，发现只有四个结果：</p><p><img src="https://source.icode504.com/images/image-20231031183335294.png"></p><p>此时我们依次点击进入查看源码，发现它们支持的数据类型只有<code>int</code>、<code>long</code>、<code>float</code>和<code>double</code>。以<code>int</code>类型的<code>abs(int)</code>方法为例，我们发现方法内部就是一个三元运算符组成的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a &lt; <span class="hljs-number">0</span>) ? -a : a;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>a &lt; 0</code>，那么得到的结果就是其相反数<code>-a</code>，反之，0和正数得到的绝对值就是其本身。<code>long</code>、<code>float</code>和<code>double</code>的<code>abs()</code>方法亦同理。</p><p>此时我们可以按照上述的方式找到<code>min</code>和<code>max</code>方法，发现二者也是仅支持<code>int</code>、<code>long</code>、<code>float</code>和<code>double</code>，方法列表如下：</p><p><img src="https://source.icode504.com/images/image-20231031184018449.png"></p><p><img src="https://source.icode504.com/images/image-20231031184031326.png"></p><p>以<code>min(int, int)</code>方法为例，此时我们点击查看源码，发现这个方法体中也用到了三元表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a &lt;= b) ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>a</code>小于等于<code>b</code>，那么最小值就是<code>a</code>，反之为<code>b</code>。</p><p>而浮点类型的<code>min(double, double)</code>方法源码则在此基础上做了进一步判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (a != a)<br>        <span class="hljs-keyword">return</span> a;   <span class="hljs-comment">// a is NaN</span><br>    <span class="hljs-keyword">if</span> ((a == <span class="hljs-number">0.0d</span>) &amp;&amp;<br>        (b == <span class="hljs-number">0.0d</span>) &amp;&amp;<br>        (Double.doubleToRawLongBits(b) == negativeZeroDoubleBits)) &#123;<br>        <span class="hljs-comment">// Raw conversion ok since NaN can&#x27;t map to -0.0.</span><br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (a &lt;= b) ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果参数<code>a</code>的值是NaN（NaN是一个特殊的浮点类型的数值，表示无效或者无意义的数值结果，例如：0.0 &#x2F; 0.0得到的结果没有意义，其结果就是NaN），由于NaN是无意义的结果，因此两个NaN的值比较结果就是<code>false</code>。源码中的第一个<code>if</code>判断就是针对NaN结果的判断，如果<code>a</code>的确是NaN，那么比较的结果没有意义，返回的结果也就是变量<code>a</code>本身的值NaN。</p><p>第二个比较主要是针对<code>a</code>的值是0.0，<code>b</code>的值是-0.0的情况，0.0在默认情况下无论前面加上正负号都是0.0，第三个条件中<code>Double.doubleToRawLongBits()</code>方法是将当前按浮点数转换成64位的<code>long</code>类型数，<code>negativeZeroDoubleBits</code>就是上述方法默认的-0.0转换成<code>long</code>类型的数字，如果此时<code>Double.doubleToRawLongBits(b)</code>得到的结果和<code>negativeZeroDoubleBits</code>的值完全相同，那么得到的结果是<code>b</code>的值-0.0。</p><p>如果上述两个条件都不符合，那么就使用三元运算符进行比较，如果<code>a</code>小于等于<code>b</code>，返回值是<code>a</code>，反之为<code>b</code>。</p><h2 id="2-2-数学常量-pi-和-e"><a href="#2-2-数学常量-pi-和-e" class="headerlink" title="2.2 数学常量$\pi$和$e$"></a>2.2 数学常量$\pi$和$e$</h2><p>数学常量是指在数学领域中经常使用的，具有特定数值的量。在中学阶段，我们接触到的两个常量是圆周率$\pi$（3.1415926…）和自然对数$e$（2.7182818…）。这两个常量在Java的<code>Math</code>类有存储，我们只需要调用<code>Math.PI</code>即可获取$\pi$值，调用<code>Math.E</code>即可获取$e$值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数学常量：圆周率和自然对数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;圆周率的值是: &quot;</span> + Math.PI);<br>        System.out.println(<span class="hljs-string">&quot;自然对数的值是: &quot;</span> + Math.E);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231102070010918.png"></p><p>从运行结果中我们可以发现，<code>Math.PI</code>和<code>Math.E</code>只输出了小数点后的一部分，这是因为在<code>Math</code>类中关于<code>PI</code>和<code>E</code>使用的是<code>double</code>类型，由于<code>double</code>的精度只有15位，因此输出结果保留了小数点后15位。</p><p><img src="https://source.icode504.com/images/image-20231102071223060.png" alt="E和PI的源码"></p><h2 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2.3 三角函数"></a>2.3 三角函数</h2><p>在<code>Math</code>类中定义了很多和三角函数相关方法，所有的三角函数得到的结果都是<code>double</code>类型，这里选择了3个具有代表性的三角函数：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>sin(a)</code></td><td>正弦函数</td></tr><tr><td><code>cos(a)</code></td><td>余弦函数</td></tr><tr><td><code>tan(a)</code></td><td>正切函数</td></tr></tbody></table><p>和数学上的使用基本上一样，我们只需要确定<code>a</code>的值即可。例如：$sin(\frac{\pi}{6})&#x3D;0.5,cos(\frac{\pi}{3}&#x3D;0.5),tan(\frac{\pi}{4})&#x3D;1$，此时我们可以使用程序来检验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三角函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 弧度使用Math.PI来表示</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sinResult</span> <span class="hljs-operator">=</span> Math.sin(Math.PI / <span class="hljs-number">6</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">cosResult</span> <span class="hljs-operator">=</span> Math.cos(Math.PI / <span class="hljs-number">3</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tanResult</span> <span class="hljs-operator">=</span> Math.tan(Math.PI / <span class="hljs-number">4</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;sinResult = &quot;</span> + sinResult);<br>        System.out.println(<span class="hljs-string">&quot;cosResult = &quot;</span> + cosResult);<br>        System.out.println(<span class="hljs-string">&quot;tanResult = &quot;</span> + tanResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231102073800307.png"></p><p>但是从运行结果中我们可以发现得到的结果和预期的值相差“一点点”，出现上述情况的原因主要有两点：首先，计算机本身处理浮点类型的数值就不准确。另外，<code>Math.PI</code>的值是小数点的后15位，做不到十分精确。因此得到的结果和期望值存在误差。</p><h2 id="2-4-指数函数和对数函数"><a href="#2-4-指数函数和对数函数" class="headerlink" title="2.4 指数函数和对数函数"></a>2.4 指数函数和对数函数</h2><p><code>Math</code>类中定义了如下常用的指数函数和对数函数：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>sprt(a)</code></td><td>求a的平方根</td></tr><tr><td><code>pow(a, b)</code></td><td>求a的b次方，即$a^b$</td></tr><tr><td><code>exp(a)</code></td><td>求自然对数$e$的a次方，即$e^a$</td></tr><tr><td><code>log(a)</code></td><td>求以自然对数$e$为底，a的对数，即$ln(a)$</td></tr><tr><td><code>log10(a)</code></td><td>求以10为底，a的对数，即$log_{10}a$</td></tr></tbody></table><p>以下是这些数学函数在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 指数函数、对数函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">49</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.sqrt(number1);    <span class="hljs-comment">// 求number1的平方根</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.pow(number2, number3);    <span class="hljs-comment">// 求number2的number3次方</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.exp(<span class="hljs-number">3</span>);       <span class="hljs-comment">// 求e的3次方</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.log(<span class="hljs-number">2</span> * Math.E);      <span class="hljs-comment">// 求以e为底，2e的对数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.log10(<span class="hljs-number">100</span>);       <span class="hljs-comment">// 求以10为底，100的对数</span><br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231104105718121.png"></p><h2 id="2-5-数字的舍入操作"><a href="#2-5-数字的舍入操作" class="headerlink" title="2.5 数字的舍入操作"></a>2.5 数字的舍入操作</h2><p>在进行数学运算时，我们可能需要对小数进行舍入操作（例如：四舍五入），<code>Math</code>类为我们提供了以下四种关于小数舍入的方法：</p><table><thead><tr><th>方法名</th><th>返回类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ceil(x)</code></td><td><code>double</code></td><td>获取大于或等于当前数值的最小整数</td></tr><tr><td><code>floor(x)</code></td><td><code>double</code></td><td>获取小于或等于当前数值最大整数</td></tr><tr><td><code>rint(x)</code></td><td><code>double</code></td><td>获取当前数值最接近的整数，如果有两个相同接近的整数，取偶数</td></tr><tr><td><code>round(x)</code></td><td><code>double</code></td><td>四舍五入，舍入数字以第一位小数为基准</td></tr></tbody></table><p>以下是这些数学函数在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 舍入函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.46</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2.34</span>;<br><br>        <span class="hljs-comment">// 获取大于或等于当前数值的最小整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.ceil(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.ceil(number2);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 获取小于或等于当前数值最大整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.floor(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.floor(number2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 获取当前数值最接近的整数，如果有两个相同接近的整数，取偶数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.rint(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result6</span> <span class="hljs-operator">=</span> Math.rint(number2);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result7</span> <span class="hljs-operator">=</span> Math.rint(<span class="hljs-number">5.5</span>);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>        System.out.println(<span class="hljs-string">&quot;result6 = &quot;</span> + result6);<br>        System.out.println(<span class="hljs-string">&quot;result7 = &quot;</span> + result7);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 四舍五入，舍入数字以第一位小数为基准</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result8</span> <span class="hljs-operator">=</span> Math.floor(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result9</span> <span class="hljs-operator">=</span> Math.floor(number2);<br>        System.out.println(<span class="hljs-string">&quot;result7 = &quot;</span> + result8);<br>        System.out.println(<span class="hljs-string">&quot;result8 = &quot;</span> + result9);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231104105840264.png"></p><h2 id="2-6-随机数"><a href="#2-6-随机数" class="headerlink" title="2.6 随机数"></a>2.6 随机数</h2><p><code>Math</code>类中为我们提供了一个获取随机数的方法<code>random()</code>，它默认在$[0,1)$范围内生成小数。我们可以利用这个范围，生成任意范围的数字。</p><p>例如：利用<code>Math.random()</code>所给的范围，生成$[15, 60]$之间的随机数。</p><blockquote><p>首先，整数范围$[15, 60]$可以等价写成$[15, 61)$。</p><p>再获取范围差：$61 - 15 &#x3D; 46$，</p><p>利用不等式的性质，将原有的$[0, 1)$乘以46得到$[0, 46)$，再将现有的范围再加上15，即可获得目标范围：$[15, 61)$</p><p>总结：从$[0,1)$转换到$[15,61)$先乘以46，再加15即可。</p></blockquote><p>以下上述案例在Java代码中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Math.random()生成随机数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 每次生成的随机数值都不相同</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.random();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.random();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.random();<br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 由于生成的是[15,60]之间的整数，需要将计算结果强制转换int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;randomNumber1 = &quot;</span> + randomNumber1);<br>        System.out.println(<span class="hljs-string">&quot;randomNumber2 = &quot;</span> + randomNumber2);<br>        System.out.println(<span class="hljs-string">&quot;randomNumber3 = &quot;</span> + randomNumber3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次得到的结果都不相同：</p><p><img src="https://source.icode504.com/images/231104005.gif"></p><h1 id="三、随机数类Random"><a href="#三、随机数类Random" class="headerlink" title="三、随机数类Random"></a>三、随机数类Random</h1><p>前面我们学过<code>Math.random()</code>方法来生成随机数，但是这个方法存在一个局限是它默认生成的范围是$[0,1)$之间的浮点数值，如果需要更大范围的随机数需要进行一定的计算并且需要进行强制类型转换，可能会导致代码可读性变低。</p><p>而接下来要提到的<code>Random</code>类可以避免强制类型转换的问题，并且包含<code>Math.random()</code>方法所不包含的一些特性。</p><h2 id="3-1-随机数相关的概念"><a href="#3-1-随机数相关的概念" class="headerlink" title="3.1 随机数相关的概念"></a>3.1 随机数相关的概念</h2><p>伪随机数：伪随机数是计算机利用特定的算法计算出来的$[0,1)$均匀分布的随机序列。虽然伪随机数并不是真正的随机数，但是它们具有类似随机数的统计特征：均匀性和独立性。在计算伪随机数时，如果使用的初始值（也称作随机数种子）不变，那么生成伪随机数的序列也不会改变。伪随机数可以使用程序大量生成。</p><p>随机数种子：随机数种子是在<strong>伪随机数生成器中用于生成伪随机数的初始数值</strong>，随机数种子一般是数字。在伪随机数生成器中，给定相同的种子值，将会生成相同的伪随机数的序列。</p><h2 id="3-2-随机数类Random的使用"><a href="#3-2-随机数类Random的使用" class="headerlink" title="3.2 随机数类Random的使用"></a>3.2 随机数类Random的使用</h2><p>和前面讲过的<code>Scanner</code>类一样，<code>Random</code>类也在<code>java.util</code>包中。创建随机数的方法如下：</p><p>1. 在类的上方导入<code>Random</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br></code></pre></td></tr></table></figure><p>2. 创建一个<code>Random</code>对象：有两种方式：一种是给定随机数，另外一种就是不给随机数：</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>Random(long)</code></td><td>传入一个<code>long</code>类型的随机数种子，后续生成一个固定的随机数序列</td></tr><tr><td><code>Random()</code></td><td>如果构造方法中没有随机数，计算机会给定一个随机数种子。当然，后续生成的随机数列就不是固定的</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">20</span>);<span class="hljs-comment">// 给定一个随机数种子20，后续会生成一个固定的随机数数列</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">random2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">// 不直接给定随机数种子，让计算机自己分配一个种子，生成一个不固定的随机数数列</span><br></code></pre></td></tr></table></figure><p>3. 根据要生成的随机数类型，调用随机数方法，支持整数类型（<code>int</code>和<code>long</code>）、浮点型（<code>float</code>和<code>double</code>）和布尔类型（<code>boolean</code>）。方法列表如下：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><code>nextInt()</code></td><td>生成<code>int</code>范围内的随机数</td></tr><tr><td><code>nextInt(int)</code></td><td>生成1到<code>int</code>最大值范围内（不包含<code>int</code>最大值）的随机数</td></tr><tr><td><code>nextLong()</code></td><td>生成<code>long</code>范围内的随机数</td></tr><tr><td><code>nextFloat()</code></td><td>生成<code>float</code>范围内的随机数</td></tr><tr><td><code>nextDouble()</code></td><td>生成<code>double</code>范围内的随机数</td></tr><tr><td><code>nextBoolean()</code></td><td>随机生成<code>true</code>或<code>false</code></td></tr></tbody></table><p>以下是上述方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 随机数的应用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 不使用随机数种子</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> random1.nextInt();            <span class="hljs-comment">// 生成int范围内的随机整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> random1.nextInt(<span class="hljs-number">60</span>);      <span class="hljs-comment">// 生成1到60范围内的随机整数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> random1.nextLong();          <span class="hljs-comment">// 生成long范围内的随机整数</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> random1.nextFloat();        <span class="hljs-comment">// 生成float范围内的随机整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> random1.nextDouble();      <span class="hljs-comment">// 生成double范围内的随机整数</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result6</span> <span class="hljs-operator">=</span> random1.nextBoolean();    <span class="hljs-comment">// 生成true或false</span><br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>        System.out.println(<span class="hljs-string">&quot;result6 = &quot;</span> + result6);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 使用随机数种子生成固定序列</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">randomValue</span> <span class="hljs-operator">=</span> random2.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;randomValue&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; = &quot;</span> + randomValue);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/231104002.gif"></p><p>我们也可以使用<code>Random</code>解决上述生成随机数问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Random类生成[15, 60]范围内的整数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();   <span class="hljs-comment">// 不设置随机种子</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">46</span>) + <span class="hljs-number">15</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多运行几次程序，我们发现生成的随机数确实在$[15,60]$范围内：</p><p><img src="https://source.icode504.com/images/231104003.gif"></p><p>以上是使用<code>Random</code>类生成随机数，相对于<code>Math.random()</code>而言，生成随机数可以省去强制类型转换，相对方便了一些。</p><p><code>Random</code>类是一个方便实用的工具类，它提供了各种方法来获取不同类型和范围的随机数，适用于各种模拟、游戏、密码学等方面应用。通过使用<code>Random</code>类，开发人员可以轻松地生成具有良好随机性和不可预测性的伪随机数，从而提高应用程序的灵活性和效率。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之九-流程控制之条件判断</title>
    <link href="/posts/11.html"/>
    <url>/posts/11.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="./1.html">点我查看安装JDK8&#x2F;11&#x2F;17教程</a>、<a href="./14.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>前面我们写过的代码，都是在<code>main</code>方法中自上到下按顺序执行的，举一个代码栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算西瓜的价格</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;      <span class="hljs-comment">// 西瓜的单价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;    <span class="hljs-comment">// 西瓜的重量（公斤）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;    <span class="hljs-comment">// 购买价格</span><br>        System.out.println(<span class="hljs-string">&quot;西瓜的价格是: &quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码就是先定义西瓜的单价、再定义西瓜的重量，然后计算西瓜的价格，最后对价格进行输出。像这样代码从上到下执行的结构就是<strong>顺序结构</strong>。</p><p>程序一共有三种控制结构：顺序结构、选择结构和循环结构。其中选择结构是根据条件判定的结果，选择执行不同的代码，例如：红灯停，绿灯行。判断条件就是交通信号灯的状态。</p><p>Java也有选择结构，并且有多种类型的条件判断语句：单分支的<code>if</code>语句、双分支的<code>if-else</code>语句、多分支的<code>if-else if-else</code>语句、<code>if</code>嵌套语句和<code>switch</code>语句。</p><h1 id="一、单分支if语句"><a href="#一、单分支if语句" class="headerlink" title="一、单分支if语句"></a>一、单分支if语句</h1><p>单分支<code>if</code>语句的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<strong>条件表达式的计算结果必须是<code>boolean</code>类型</strong>。如果条件表达式的计算结果是<code>true</code>，那么就会执行<code>if</code>内部的代码；如果表达式为<code>false</code>，此时就会跳过<code>if</code>代码块（也就是<code>if</code>内部代码不执行），概念图如下：</p><p><img src="https://source.icode504.com/images/231122vp2%20(2).png"></p><p>我们可以在<code>if</code>代码块中可以编写多个执行语句。</p><p>以下是<code>if</code>的使用案例：</p><blockquote><p>案例：之前长春下了大暴雪，气温骤降，我想在某宝上买几双棉袜子，假设每双袜子4元，请确保输入的数字大于0再计算购买价格。</p></blockquote><img src="https://source.icode504.com/images/image-20231107172811206.png" alt="2023年11月6日晚，长春暴雪" style="zoom:50%;" /><p>分析：解题的关键在于要保证输入的数字要大于0，因此要判断输入的数字是否大于0，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if条件判断</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入袜子的数量&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;    <span class="hljs-comment">// 默认总价格初始值为0.0</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;       <span class="hljs-comment">// 袜子的价格4元</span><br>        <span class="hljs-comment">// 条件判断: 输入的数量是否大于0</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            totalPrice = count * price;<br>            System.out.println(<span class="hljs-string">&quot;购买了&quot;</span> + count + <span class="hljs-string">&quot;双袜子, 价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231107173637173.png"></p><blockquote><p>案例：输入一个数字，如果能被10整除，则输出内容为：xx能被10整除。如果能被15整除，则输出内容为：xx能被15整除。</p></blockquote><p>解决本题的关键点在于被10整除和被15整除的条件怎么计算。其实前面我们学过取余运算符，如果数值<code>number</code>能被10整除，那么可以写成<code>number % 10 == 0</code>；如果数值<code>number</code>能被15整除，那么可以写成<code>number % 15 == 0</code>。这两个布尔表达式可以写入到两个<code>if</code>语句中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用if语句判断数字能否被10和15整除</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入数字: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">// 整除10的条件：数字对10取余等于0</span><br>        <span class="hljs-keyword">if</span> (number % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(number + <span class="hljs-string">&quot;能被10整除&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 整除15的条件：数字对15取余等于0</span><br>        <span class="hljs-keyword">if</span> (number % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(number + <span class="hljs-string">&quot;能被15整除&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入不同的数字以后，会得到如下的运行结果：</p><p><img src="https://source.icode504.com/images/23110701.gif"></p><blockquote><p>案例：输入两个整数，如果输入的第一个数字比第二个数字大，那么执行两数交换，并将交换结果输出。否则不交换，正常输出两个数</p></blockquote><p>本题的条件表达式是输入的两个数字的比较，无论数字大小比较结果如何，都需要将结果进行输出，我们可以将输出语句放到<code>if</code>语句后面执行。</p><p>两数交换有多种方式，较为稳妥的方式是再定义一个临时变量，用这个临时变量来接收第一个变量值，然后第二个变量值赋值给第一个变量，最后将临时变量的值赋值给第二个变量。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单分支if语句实现两数交换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入两个整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;       <span class="hljs-comment">// 定义临时变量</span><br>        <span class="hljs-keyword">if</span> (number1 &gt; number2) &#123;    <span class="hljs-comment">// 实现两数交换功能</span><br>            temp = number1;<br>            number1 = number2;<br>            number2 = temp;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第一个数是: &quot;</span> + number1 + <span class="hljs-string">&quot;, 第二个数是: &quot;</span> + number2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/23111102.gif"></p><p>当然，除了上述方式能实现两数交换，还有其他的方式。</p><p>方式一：使用加减法进行交换（推荐使用整数，浮点数不推荐，因为浮点数计算时会出现误差）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>number1 = number1 + number2;<span class="hljs-comment">// number1 = 3 + 2 = 5</span><br>number2 = number1 - number2;<span class="hljs-comment">// number2 = 5 - 2 = 3</span><br>number1 = number1 - number2;<span class="hljs-comment">// number1 = 5 - 3 = 2</span><br></code></pre></td></tr></table></figure><p>方式二：使用位运算符进行交换（推荐使用整数，此处涉及到二进制异或运算，异或运算可以查看这篇文章：<a href="https://blog.csdn.net/m0_72248235/article/details/134003356?spm=1001.2014.3001.5501">入门篇-其之六-Java运算符（中）第四部分-位运算符</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>number1 = number1 ^ number2;        <span class="hljs-comment">// 3 ^ 2 = 1</span><br>number2 = number1 ^ number2;        <span class="hljs-comment">// 3 ^ 1 = 2</span><br>number1 = number1 ^ number2;        <span class="hljs-comment">// 1 ^ 2 = 3</span><br></code></pre></td></tr></table></figure><p>当然，上述三种方式我个人最推荐的还是第一种定义临时变量的方式，这种方式对处理浮点类型的数进行交换很友好，如果使用了下面两种方式的话，可能会在计算过程中出现精度损失的问题。后两种方式的好处是不需要定义第三个变量，只需要进行一系列运算即可完成整数值的交换。</p><h1 id="二、if-else双分支语句"><a href="#二、if-else双分支语句" class="headerlink" title="二、if-else双分支语句"></a>二、if-else双分支语句</h1><p>前面讲过的单分支<code>if</code>语句只有在布尔表达式为<code>true</code>的时候执行其内部的内容，但是如果在布尔表达式为<code>false</code>的时候不会做任何事情。为了解决上述问题，Java为我们提供了<code>if-else</code>双分支语句。以下是双分支<code>if-else</code>语句代码结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码<span class="hljs-number">1.</span>..<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">2.</span>..<br>&#125;<br></code></pre></td></tr></table></figure><p>如果条件表达式的值是<code>true</code>，那么就执行<code>if</code>内部的语句，如果条件表达式为<code>false</code>，此时就进入<code>else</code>代码块。执行流程图如下：</p><p><img src="https://source.icode504.com/images/image-20231111212252875.png"></p><blockquote><p>案例：我们还是以上述买袜子为例，最近双十一打折，如果买了10双及以上袜子，此时每双袜子打八折优惠，否则打九折优惠（袜子的价格假设是4元&#x2F;双）。</p></blockquote><p>题目中的条件表达式在于要买的袜子数量是否大于等于10，如果是，价格打8折，否则打9折，使用刚刚讲到的<code>if-else</code>语句即可搞定。</p><p>当然，这道题中还有一个隐藏的细节需要我们处理：输入袜子的数量需要大于0，否则判定为无效，这个可以使用单分支<code>if</code>语句就可以搞定。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if-else双分支语句</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要购买的袜子数量&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;       <span class="hljs-comment">// 每双袜子的价格</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;    <span class="hljs-comment">// 默认总价格为0.0</span><br>        <span class="hljs-comment">// 需要保证输入的袜子数量要大于0</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 如果袜子的数量大于10，此时每双袜子的价格为8折，即每双袜子的价格乘以0.8，九折的计算方式和上述内容同理</span><br>            <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">10</span>) &#123;<br>                totalPrice = price * <span class="hljs-number">0.8</span> * count;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                totalPrice = price * <span class="hljs-number">0.9</span> * count;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;购买&quot;</span> + count + <span class="hljs-string">&quot;双袜子，双十一期间购买价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果（可能会出现浮点数计算不准确的情况，属于正常现象）：</p><p><img src="https://source.icode504.com/images/23111101.gif"></p><h1 id="三、if-else-if-else多分支语句"><a href="#三、if-else-if-else多分支语句" class="headerlink" title="三、if-else if-else多分支语句"></a>三、if-else if-else多分支语句</h1><p>双分支的<code>if-else</code>语句对于条件表达式为<code>true</code>和<code>false</code>的时候比较适用，但是如果对于一个问题而言，此时经过分析可能存在多个条件表达式时，<code>if-else</code>语句并不能很好地完成任务，此时Java为我们提供了另一种分支语句：<code>if-else if-else</code>语句，其语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>执行代码<span class="hljs-number">1.</span>..<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>执行代码<span class="hljs-number">2.</span>..<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>) &#123;<br>执行代码<span class="hljs-number">3.</span>..<br>&#125; ...<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式n) &#123;<br>执行代码n...      <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  不符合上述所有条件表达式时执行<span class="hljs-keyword">else</span>代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>以上述语法格式为例，其执行顺序为：</p><ul><li>如果条件表达式1的结果为<code>true</code>，那么执行代码1，如果结果是<code>false</code>，此时就会跳转到第一个<code>else if</code>。</li><li>如果条件表达式2的结果是<code>true</code>，那么执行代码2，如果结果是<code>false</code>，那么就会跳转到第二个<code>else if</code>。</li><li>如果条件表达式3的结果是<code>true</code>，那么执行代码3，如果结果是<code>false</code>，那么就会跳转到下一个<code>else if</code>，依次类推。</li><li>当上述所有的条件表达式都不满足（即结果全部是<code>false</code>）时，就会执行<code>else</code>中的语句。</li></ul><p>多分支的<code>if-else if-else</code>语句中，你可以写任意个<code>else if</code>，每个<code>else if</code>需要写上条件表达式。</p><p>当然，最后的<code>else</code>也是可选的，<code>if</code>和<code>else-if</code>搭配使用也是可以的。以下是执行流程图：</p><p><img src="https://source.icode504.com/images/%E7%BB%98%E5%9B%BE1.png"></p><blockquote><p>案例：已知长春的地铁&#x2F;轻轨票价标准如下</p><ul><li>0-7公里（含7公里），票价2元；</li><li>7-13公里（含13公里），票价3元；</li><li>13-19公里（含19公里），票价4元；</li><li>19-27公里（含27公里），票价5元；</li><li>27-35公里（含35公里），票价6元；</li><li>35公里以上每增加10公里，增加1元</li></ul><p>假设从1号线红嘴子地铁站到8号线广通路轻轨站的距离是31.4公里，从2号线汽车公园地铁站到2号线东方广场地铁站的距离是20.5公里，从4号线长春站北轻轨站到4号线天工路轻轨站的距离是16.3公里。</p><p>输入上述里程，利用程序计算出乘坐轨道交通所需要的票价。</p><img src="https://source.icode504.com/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231114215902.jpg" alt="apple apy开通吉林通充值即可使用NFC功能(无优惠)" style="zoom:25%;" /></blockquote><p>上述题目中出现了多个条件判断，每个条件判断执行内容都不相同，使用多分支语句<code>if-else if-else</code>语句比较合适。题目中有一个隐藏条件，输入里程数不能为负数，当然这个条件也直接写入条件判断即可。</p><p>如果乘坐轨道交通的里程超过35公里以后，每增加10公里，增加1元。例如：乘坐45公里就要在35公里对应的票价6元的基础上再增加1元，当然，55公里、65公里依次类推。假设称作里程为44.9公里，此时收费标准仍为35公里的票价。</p><p>针对上述问题，我们可以在代码中进一步呈现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if-else if-else多分支语句的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElseIfDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入里程数: &quot;</span>);<br>        <span class="hljs-comment">// 里程数使用double类型比较合适，因为题目中涉及到距离的使用到了小数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (distance &lt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;无效里程&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">0</span> &amp;&amp; distance &lt;= <span class="hljs-number">7</span>) &#123;<br>            price = <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">7</span> &amp;&amp; distance &lt;= <span class="hljs-number">13</span>) &#123;<br>            price = <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">13</span> &amp;&amp; distance &lt;= <span class="hljs-number">19</span>) &#123;<br>            price = <span class="hljs-number">4</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">19</span> &amp;&amp; distance &lt;= <span class="hljs-number">27</span>) &#123;<br>            price = <span class="hljs-number">5</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">27</span> &amp;&amp; distance &lt;= <span class="hljs-number">35</span>) &#123;<br>            price = <span class="hljs-number">6</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 超过35公里的需要额外进行处理</span><br>            price = <span class="hljs-number">6</span>;      <span class="hljs-comment">// 35公里对应的票价</span><br>            <span class="hljs-comment">// 计算多余的里程</span><br>            <span class="hljs-comment">// 这里需要进行强制类型转换的目的有两个：</span><br>            <span class="hljs-comment">// 1. 最后计算票价的price是int类型</span><br>            <span class="hljs-comment">// 2. 针对类似在35~45公里之间的里程后续的票价计算处理</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">additionalDistance</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (distance - <span class="hljs-number">35</span>);<br>            <span class="hljs-comment">// 计算票价</span><br>            price = price + additionalDistance / <span class="hljs-number">10</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;乘坐长春轨道交通里程&quot;</span> + distance + <span class="hljs-string">&quot;公里，票价&quot;</span> + price + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/23111402.gif"></p><h1 id="四、if的嵌套使用"><a href="#四、if的嵌套使用" class="headerlink" title="四、if的嵌套使用"></a>四、if的嵌套使用</h1><p>正如标题所讲，<code>if</code>语句可以嵌套使用。举个栗子：在<code>main</code>方法中，假设已经存在了一个<code>if-else</code>语句，那么在这个<code>if</code>代码块或者<code>else</code>代码块还可以存在条件判断语句，下面就是其中一种<code>if</code>的嵌套使用方式（事实上它可以<code>if</code>代码块可以进行多种组合嵌套使用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>        执行代码<span class="hljs-number">1.</span>..<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">2.</span>..<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>) &#123;<br>    执行代码<span class="hljs-number">3.</span>..<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">4.</span>..<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的执行流程如下：</p><ul><li>如果条件表达式1的执行结果是<code>true</code>，进入条件表达式2，如果条件表达式2执行结果是<code>true</code>，此时执行代码1。</li><li>如果条件表达式1的执行结果是<code>true</code>，进入条件表达式2，如果条件表达式2执行结果是<code>false</code>，此时执行代码2。</li><li>如果条件表达式1的执行结果是<code>false</code>，进入条件表达式3，如果条件表达式3执行结果是<code>true</code>，此时执行代码3。</li><li>如果条件表达式1的执行结果是<code>false</code>，进入条件表达式3，如果条件表达式3执行结果是<code>false</code>，此时执行代码4。</li></ul><p>执行流程图如下所示：</p><p><img src="https://source.icode504.com/images/231123dp3.png"></p><p>日常写代码的过程中，尽量保证代码嵌套的层数不超过两层。</p><blockquote><p>案例：输入三个数，要求输出是按照从大到小进行排列。例如，输入三个数为20、30、10，输出结果为30、20、10</p></blockquote><ul><li>第一层条件：比较第一个数和第二个数。</li><li>第二层条件：比较第二个数和第三个数。</li><li>第三层条件：比较第一个数和第三个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if的嵌套--三个数字排列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入三个整数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">if</span> (number1 &gt; number2) &#123;<br>            <span class="hljs-keyword">if</span> (number2 &gt; number3) &#123;<br>                System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number3);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (number1 &gt; number3) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number2);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number2);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (number2 &lt; number3) &#123;<br>                System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number1);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (number1 &gt; number3) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number1);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number3);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231123150912015.png"></p><p>虽然运行结果符合我们的预期，但是我只能说：这样的代码写的非常糟糕！！！这段代码中<code>if</code>的嵌套层数达到了三层，事实上<code>if</code>嵌套两层以上可读性就大打折扣了。</p><p>我们可以使用Java数组、循环和数组方法对此问题做进一步处理（小白可以跳过这一部分）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三数比较--按照从大到小的顺序排列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入三个数字: &quot;</span>);<br>        Integer[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            array[i] = scanner.nextInt();<br>        &#125;<br>        <span class="hljs-comment">// 调用Arrays.sort方法对数组排序，排序规则从大到小(lambda表达式)</span><br>        Arrays.sort(array, (o1, o2) -&gt; o2 - o1);<br>        System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + array[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + array[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; &quot;</span> + array[<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231123144248925.png"></p><h1 id="五、switch语句"><a href="#五、switch语句" class="headerlink" title="五、switch语句"></a>五、switch语句</h1><p><code>if-else if-else</code>多分支语句可以用于多个条件表达式的判断，我们可以写非常多的<code>else if</code>，然而过多的<code>else if</code>可能会导致代码的可读性变差。</p><p>Java为我们提供了<code>swtich</code>语句在一定程度上可以简化多条件分支。以下是<code>switch</code>的语法结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>        执行代码<span class="hljs-number">1.</span>..<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        执行代码<span class="hljs-number">2.</span>..<br>        <span class="hljs-comment">// break</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>:<br>        执行代码<span class="hljs-number">3.</span>..<br>        <span class="hljs-keyword">break</span>;<br>    ...<br>    <span class="hljs-keyword">case</span> 值n:<br>        执行代码n...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>: <br>        上述条件都不适用执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>1. <code>switch</code>语句中表达式的计算结果、值1、值2、…、值n的数据类型必须要保持一致。支持的数据类型包括：**<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、字符串类型<code>String</code><strong>（JDK 7新特性）、</strong>枚举类型**（后续会讲到，JDK 7新特性）。</p><p>2. 如果表达式的计算结果和<code>case</code>中某个值相等时，就会执行这个<code>case</code>内的代码。</p><p>3. <code>switch</code>语句中的<code>default</code>是可选的，它的作用是当表达式的计算结果和所有<code>case</code>的值都不相等时才会执行<code>default</code>语句，如果<code>default</code>语句不存在时，所有的<code>case</code>对应的值和判定值都不相等时，跳出<code>switch</code>语句。</p><p>4. <strong><code>break</code>的作用是跳出<code>switch</code>语句</strong>（<code>break</code>关键字还会在循环中遇到），在每一个<code>case</code>对应的代码块后面写上<code>break</code>是个好习惯。</p><p>如果<code>case</code>中不加<code>break</code>，此时<code>switch</code>语句会出现穿透性，即当某一个<code>case</code>执行完成后，它会继续执行下面其他的<code>case</code>。以下是一个是否使用<code>break</code>的案例：</p><blockquote><p>案例：输入数字1~7，使用<code>switch</code>语句输出当前日期（假设7代表星期日）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch语句--不加break--穿透性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入星期数(1~7), 7表示星期日&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">switch</span> (number) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">monday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期一&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + monday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tuesday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期二&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + tuesday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">wednesday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期三&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + wednesday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">thursday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期四&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + thursday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">friday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期五&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + friday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">saturday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期六&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + saturday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sunday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期日&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + sunday);<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;无效日期&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231115085927038.png"></p><p>很明显，输入数字3的时候，由于没有<code>break</code>，当执行<code>case 3</code>内部代码以后，它会向下执行其他<code>case</code>中的代码，直至<code>default</code>内的代码执行完毕为止。并且这段代码还有可以进一步修改的空间，以下是加入<code>break</code>并进行简化的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch语句--添加break--穿透性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入星期数(1~7), 7表示星期日&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        String weekday;<br>        <span class="hljs-keyword">switch</span> (number) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                weekday = <span class="hljs-string">&quot;星期一&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                weekday = <span class="hljs-string">&quot;星期二&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                weekday = <span class="hljs-string">&quot;星期三&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                weekday = <span class="hljs-string">&quot;星期四&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                weekday = <span class="hljs-string">&quot;星期五&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                weekday = <span class="hljs-string">&quot;星期六&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                weekday = <span class="hljs-string">&quot;星期日&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                weekday = <span class="hljs-string">&quot;无效星期&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + weekday);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231115090958522.png"></p><p>从上述结果可以看出，使用<code>break</code>以后，就可以阻断<code>switch</code>穿透性。</p><p><code>switch</code>语句执行流程如下图所示（每个<code>case</code>都带上<code>break</code>语句）：</p><p><img src="https://source.icode504.com/images/231123dp2.svg"></p><p>在了解了<code>switch</code>语句的基础上，我们再来讲解一个<code>switch</code>语句和<code>if-else</code>语句结合使用的案例：</p><blockquote><p>案例：输入年份和月份，输出格式如下：xxxx年xx月有xx天。</p></blockquote><p>常识：1、3、5、7、8、10、12恒定是31天；4、6、9、11恒定为30天。这几个月份我们可以利用<code>switch</code>的穿透性替换掉多条件的<code>else if</code>判断。</p><p>需要额外考虑的是：2月份的天数需要考虑年份是闰年还是平年，闰年能被400整除，例如：2000年，1600年是闰年，1900年就不是闰年。此外，如果不能被100整除，而能被4整除的也是闰年，例如：2020，2016，2004，2008年都是闰年。</p><p>结合上述分析，我们可以使用代码进一步复现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch和if结合使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入年份: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        System.out.print(<span class="hljs-string">&quot;请输入月份: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-comment">// 利用switch的穿透性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                day = <span class="hljs-number">31</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                day = <span class="hljs-number">30</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-comment">// 2月份需要额外针对年份进行判断</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    day = <span class="hljs-number">29</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) &#123;<br>                    day = <span class="hljs-number">28</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-comment">// 不在1-12月份内做出说明</span><br>                System.out.println(<span class="hljs-string">&quot;无效的月份&quot;</span>);<br>        &#125;<br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月有&quot;</span> + day + <span class="hljs-string">&quot;天&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231115095549060.png"></p><p>以我个人的开发经验来看，使用<code>switch</code>语句的频率要比使用<code>if</code>语句要少很多，二者的执行效率基本上差不太多。</p><p><code>if</code>可以编写更加灵活的条件表达式。比如：判断某个整数在<code>[10, 20]</code>区间内，此时使用<code>if</code>条件表达式可以写成<code>if (number &gt;= 10 &amp;&amp; number &lt;= 20)</code>，如果使用<code>switch</code>解决此问题会让代码变得更加复杂（因为你要写很多个<code>case</code>进行比较）。</p><p><code>switch</code>更擅长特定类型的值进行比较。以上面根据某年某月求当前月份由多少天为例，事实上完全使用<code>if</code>语句实现，只不过我们需要写成：</p><img src="https://source.icode504.com/images/image-20231123112004821.png" alt="image-20231123112004821" style="zoom:80%;" /><p>使用前面案例对应的<code>switch</code>代码，和<code>if</code>语句对比，个人觉得可读性变高：</p><img src="https://source.icode504.com/images/image-20231123112416625.png" alt="image-20231123112416625" style="zoom:80%;" /><p>因此，使用<code>if</code>语句还是<code>switch</code>语句还是得根据具体的代码场景而决定。</p><h1 id="六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范"><a href="#六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范" class="headerlink" title="六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范"></a>六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范</h1><p>1. <font color='#EE0000'>【强制】</font>在一个<code>switch</code>块内，每个<code>case</code>要么通过<code>continue/break/return</code>等来终止，要么注释说明程序将继续执行到哪一个<code>case</code>为止；在一个<code>switch</code>块内，都必须包含一个<code>default</code>语句并且放在最后，即使它什么代码也没有。</p><p>说明：注意<code>break</code>是退出<code>switch</code>语句块，而<code>return</code>是退出方法体。</p><p>2. <font color='#EE0000'>【强制】</font>当<code>switch</code>括号内的变量类型为<code>String</code>并且此变量为外部参数时，必须先进行<code>null</code>判断。</p><p>反例：如下的代码输出内容是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>method(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(String param)</span> &#123;<br><span class="hljs-keyword">switch</span> (param) &#123;<br><span class="hljs-comment">// 肯定不是进入这里</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sth&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;it&#x27;s sth&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 也不是进入这里</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;null&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;it&#x27;s null&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 也不是进入这里</span><br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;default&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3. <font color='#EE0000'>【强制】</font>在<code>if/else/for/while/do</code>语句中必须使用大括号。</p><p>说明：即使只有一行代码，禁止不采用大括号的编码方式：<code>if (条件表达式) statements; </code>，上述代码需改成如下格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>statements;<br>&#125;<br></code></pre></td></tr></table></figure><p>4. <font color='#39C5BB'>【推荐】</font>表达异常的分支时，少用<code>if-else</code>方式，这种方式可以改写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (condition) &#123; <br>...<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-comment">// 接着写 else 的业务逻辑代码;</span><br></code></pre></td></tr></table></figure><p>说明：如果非使用<code>if()...else if()...else...</code>方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p><p>正例：超过 3 层的<code>if-else</code>的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下（不了解卫语句是什么的小伙伴可以参考这篇文章：<a href="https://www.cnblogs.com/lanshan-blog/articles/17082023.html">点我查看</a>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findBoyfriend</span> <span class="hljs-params">(Man man)</span>&#123;<br>    <span class="hljs-keyword">if</span> (man.isUgly()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本姑娘是外貌协会的资深会员&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (man.isPoor()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;贫贱夫妻百事哀&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (man.isBadTemper()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;银河有多远，你就给我滚多远&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;可以先交往一段时间看看&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>5. <font color='#39C5BB'>【推荐】</font>避免采用取反逻辑运算符。</p><p>说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</p><p><font color='#39C5BB'>正例</font>：使用<code>if (x &lt; 628)</code>来表达 x 小于 628。</p><p><font color='orange'>反例</font>：使用<code>if (!(x &gt;= 628))</code>来表达 x 小于 628。</p><h1 id="七、知识点总结"><a href="#七、知识点总结" class="headerlink" title="七、知识点总结"></a>七、知识点总结</h1><p>流程控制之条件判断知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载文件：<a href="https://icode504.lanzouw.com/iRihj1fourve">点我下载</a></p><p><img src="https://source.icode504.com/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之十-流程控制之循环结构</title>
    <link href="/posts/12.html"/>
    <url>/posts/12.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="./1.html">点我查看安装JDK 8教程</a>、<a href="./14.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>假设输出1~100之间的所有整数，正常情况下我们需要写100行代码才能对所有数字输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 其他数字输出省略...</span><br>System.out.println(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>虽然这种办法能达到预期的效果，但是代码量属实有点大(ᇂ_ᇂ|||)</p><p>为了解决上述问题，Java为我们提供了一个强大的控制结构——循环结构。</p><p>循环结构是一种常用的程序控制结构，它允许程序在执行的过程中反复执行一段代码，直到满足特定条件为止。循环结构可以大大简化重复性任务的编写，提高代码编写效率和可读性。</p><p>在Java中，循环结构主要由<code>while</code>循环、<code>do-while</code>循环、<code>for</code>循环组成。</p><h1 id="一、while循环"><a href="#一、while循环" class="headerlink" title="一、while循环"></a>一、while循环</h1><p><code>while</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：如果条件表达式结果为<code>true</code>，此时进入<code>while</code>循环内部执行代码，直到<code>while</code>循环的条件表达式的结果为<code>false</code>为止。</p><p><code>while</code>结构如下图所示：</p><p><img src="https://source.icode504.com/images/231128dp1.png"></p><blockquote><p>案例1：使用<code>while</code>循环解决1~100的输出和1~100的和</p></blockquote><p>我们先解决1~100的输出，使用<code>while</code>需要循环100次，我们可以在<code>while</code>循环外定义一个变量<code>number</code>并赋值为1，由于是1~100是递增输出，条件表达式需要设定为<code>number &lt;= 100</code>。</p><p>在循环体中，我们先将<code>number</code>的值进行输出。但是此时<code>number</code>的值并没有增加，因此每次在输出后需要对<code>number</code>进行自增1的操作，即<code>number++</code>，部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (number &lt;= <span class="hljs-number">100</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;number = &quot;</span> + number);<br>    number++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就完成了1~100的输出，但是我们还需要输出它们相加的和，我们可以对上述的代码进行进一步改造：</p><p>在<code>while</code>循环外部再定义一个变量<code>sum</code>，默认值为0，用于存储数字相加的和。</p><p>在循环体中，输出语句后面实现两数相加的操作：<code>sum = sum + number;</code>（简写为<code>sum += number;</code>）</p><ul><li>第一次循环：sum &#x3D; 0 + 1 &#x3D; 1</li><li>第二次循环：sum &#x3D; 1 + 2 &#x3D; 3</li><li>第三次循环：sum &#x3D; 3 + 3 &#x3D; 6</li><li>以此类推……</li></ul><p>在<code>while</code>循环内部即可完成1~100的计算，最终<code>sum</code>的结果直接到<code>while</code>循环外部进行输出即可，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * while循环--输出1~100并求和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileLoop1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 定义一个变量number用于输出数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 2. 定义一个变量sum用于存储1~100相加的和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 3. 定义while循环，条件表达式为number &lt;= 100，需要保证number在while循环内相加</span><br>        <span class="hljs-keyword">while</span> (number &lt;= <span class="hljs-number">100</span>) &#123;<br>            sum += number;<br>            System.out.println(<span class="hljs-string">&quot;number = &quot;</span> + number);<br>            number++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合我们的预期：</p><p><img src="https://source.icode504.com/images/image-20231130172402913.png"></p><blockquote><p>案例2：斐波那契数列</p><p>已知每对兔子（一雌一雄）每个月能生殖一对小兔子，每对兔子前两个月没有生育能力，从第三个月每个月能生一对小兔子，假设兔子不存在死亡现象，那么从第一对刚出生兔子开始，第n个月以后会有多少只兔子？</p><p>数学解法可以看这位老师的文章：<a href="https://zhuanlan.zhihu.com/p/588439015">点我查看</a>，我只能说一句：太强了，膜拜大佬！</p></blockquote><p>根据上述题意可以得出：</p><ul><li>第1个月兔子无生育能力，因此兔子只有1对；</li><li>第2个月兔子无生育能力，此时兔子仍为1对；</li><li>第3个月兔子生育了一对兔子，此时兔子为2对；</li><li>第4个月最开始的兔子又生育了一对兔子，此时兔子为3对；</li><li>第5个月，最开始的兔子又生育了一对兔子，第三个月的兔子也生育了一对兔子，此时兔子为5对；</li></ul><p>由此我们可以得出一个数列：<br>$$<br>1,1,2,3,5……<br>$$<br>可以看出，从第三个数起，每个数都是前1个数和前两个数相加得到的和。由此，我们可以得到一个通用公式：</p><p>$$<br>f(n)&#x3D;f(n-1)+f(n-2), n\geqslant3<br>$$</p><p>我们可以定义三个变量：<code>number1</code>、<code>number2</code>和<code>totalNumber</code>。其中<code>number1</code>和<code>number2</code>存储前两个月兔子的数量，<code>totalNumber</code>存储前两月兔子数量的和（也就是上述公式的实现），具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * while循环解决斐波那契数列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciSequence</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入月数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthNumber</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">// number1和number2代表前两个月兔子的数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, number2 = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// i的含义是从第三个月开始繁殖。totalNumber用于计算前两个月兔子的数量</span><br>        <span class="hljs-comment">// totalNumber初始化值为1的目的：如果用户输入的月数为1或2，此时兔子对数为1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>, totalNumber = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 限制条件：从第三个月开始计算到第monthNumber个月</span><br>        <span class="hljs-keyword">while</span> (monthNumber &gt; <span class="hljs-number">2</span> &amp;&amp; i &lt;= monthNumber) &#123;<br>            <span class="hljs-comment">// 计算前两个月兔子总数</span><br>            totalNumber = number1 + number2;<br>            <span class="hljs-comment">// number1存储i-2个月兔子数量，用于下一轮循环的运算</span><br>            number1 = number2;<br>            <span class="hljs-comment">// number2存储i-1个月兔子数量，用于下一轮循环的运算</span><br>            number2 = totalNumber;<br>            i++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + monthNumber + <span class="hljs-string">&quot;个月兔子的数量是&quot;</span> + totalNumber + <span class="hljs-string">&quot;对&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231215153259190.png"></p><p>当然，循环只是解决斐波那契数列的一种方式，它还可以使用递归的方式解决。后续讲到方法的时候还会讲到这个问题的递归解法。</p><h1 id="二、do-while循环"><a href="#二、do-while循环" class="headerlink" title="二、do-while循环"></a>二、do-while循环</h1><p><code>do-while</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    执行代码...<br>&#125; <span class="hljs-keyword">while</span> (条件表达式);<br></code></pre></td></tr></table></figure><p>执行流程：先执行<code>do</code>内部的代码，内部代码执行完毕以后，再对<code>while</code>中的条件表达式进行判断，如果条件表达式为<code>true</code>，再次进入<code>do</code>内部执行代码；如果条件表达式为<code>false</code>，此时就跳出<code>do-while</code>循环。</p><p>和<code>while</code>循环相比，<code>do-while</code>循环即使其条件表达式为<code>false</code>，也会执行一次<code>do</code>内部的代码，因为它会先执行<code>do</code>内部的代码再进行条件判断。</p><p><code>do-while</code>循环的执行流程如下图所示：</p><p><img src="https://source.icode504.com/images/231128dp2.png"></p><blockquote><p>案例：计算一个数的所有因子之和（不包括1和自身）。输入一个正整数，输出其所有因子之和。</p><p>例如：</p><ul><li>正整数6的所有因子是：2，3。因此所有的因子的和是$2 + 3 &#x3D; 5$</li><li>正整数20的所有因子是：2，4，5，10。所有因子的和是$2+4+5+10&#x3D;21$</li></ul></blockquote><p>如果使用<code>do-while</code>循环来解决这个问题，我们首先需要确定循环的范围是什么？</p><p>其实题目中已经告诉我们了一个关键点：<strong>不包括1和自身</strong>。那么由此可以确定循环的范围是：$[2, number)$。</p><p>如何确定上述区间的数字是正整数<code>number</code>的因子呢？其实很简单，只需要判断这个数字能否被<code>number</code>整除即可。</p><p>由于我们输入的是正整数，需要在执行循环做一手判断，如果不是正整数，需要给出一个提示。</p><p>综合上述内容，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * do-while解决一个数所有因子的和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileDemo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入一个正整数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-comment">// 正整数判断</span><br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 定义一个变量sum，用于存储所有因子的和</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 由于正整数中因子不包含1和数字本身，因此循环需要从2开始，计算到number - 1</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-comment">// 判断条件：i能被number整除的，那么i就是number的因子</span><br>                <span class="hljs-keyword">if</span> (number % i == <span class="hljs-number">0</span>) &#123;<br>                    sum += i;<br>                &#125;<br>                i++;<br>            &#125; <span class="hljs-keyword">while</span> (i &lt; number);<br>            System.out.println(<span class="hljs-string">&quot;正整数&quot;</span> + number + <span class="hljs-string">&quot;所有因子的和是: &quot;</span> + sum);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的不是正整数！！！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231215111336107.png"></p><p>在开发中，使用<code>do-while</code>循环的频率要比<code>while</code>循环少很多。这主要是因为<code>do-while</code>循环本身是先执行循环体，然后再进行条件判断。即使条件判断结果是<code>false</code>，<code>do-while</code>也执行了一次循环体，这可能会导致不必要的计算和操作。</p><h1 id="三、普通for循环"><a href="#三、普通for循环" class="headerlink" title="三、普通for循环"></a>三、普通for循环</h1><p>普通<code>for</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始化表达式; 条件表达式; 迭代表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for</code>循环的执行流程如下图所示：</p><p><img src="https://source.icode504.com/images/231128dp3.png"></p><p>这里解释一下<code>for</code>内部的三个表达式：</p><p>1. 初始化表达式，指的是初始化Java变量表达式，即<strong>数据类型 变量名 &#x3D; 变量值</strong></p><p>例如：<code>int i = 0;</code>，或者把<code>int i</code>写到<code>for</code>循环之前，然后在<code>for</code>循环第一个位置将<code>i = 0</code>补齐即可。</p><p>当然，初始化表达式也可以同时定义多个变量，例如：<code>int i = 0, j = 0;</code></p><p>2. 条件表达式，如果计算结果为<code>true</code>，就进入<code>for</code>循环内部执行代码，如果条件表达式为<code>false</code>，就会跳出<code>for</code>循环。</p><p>一般而言，<strong>条件表达式和初始化表达式中定义的变量有关</strong>。例如：<code>i &lt; 100</code>、<code>i &gt; -30</code>等等。</p><p>3. 迭代表达式，绝大多数情况下针对初始化表达式定义的变量进行增加或减少的操作。</p><p>以前面定义的初始化表达式<code>int i = 0;</code>为例，假设让变量的值增加，我们可以使用如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">i++;<span class="hljs-comment">// 自增1</span><br>++i;<span class="hljs-comment">// 自增1</span><br>i += number;<span class="hljs-comment">// 让i每次增加number</span><br></code></pre></td></tr></table></figure><p>4. 一般在写<code>for</code>循环代码时，推荐将初始化表达式、条件表达式、迭代表达式都写上。</p><p>事实上，不写上述三个表达式也会执行<code>for</code>循环代码，但是如果在<code>for</code>循环内部不写合理的条件判断的话，很容易造成死循环的情况的发生。</p><p>那么<code>for</code>循环的执行流程是怎么样的呢？</p><ul><li>在首次执行<code>for</code>循环的时候，先执行初始化表达式，然后根据条件表达式结果进行判断，如果条件表达式为<code>true</code>，则进入<code>for</code>循环内部执行代码，如果条件表达式为<code>false</code>就跳出<code>for</code>循环。在执行完<code>for</code>循环内部代码以后，会针对前面初始化表达式的变量进行迭代操作（常见的是变量相加&#x2F;相减操作）。</li><li>后续执行<code>for</code>循环的时候，就会根据<code>for</code>循环迭代表达式的计算结果到条件表达式中进行比较，如果比较结果为<code>true</code>执行<code>for</code>内部代码，反之就会跳出<code>for</code>循环。</li></ul><p>这里举两个案例来说明一下<code>for</code>循环的使用：</p><blockquote><p>案例1：求1~100（包含100）所有的偶数和</p></blockquote><p>解决本题的关键点是偶数的获取，判断一个数是否是偶数，即数字对2求余等于0，再定义一个变量<code>sum</code>对所有符合条件的偶数累加即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * for计算1~100所有偶数和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 偶数判断条件：对2求余是否等于0</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 偶数累加</span><br>                sum += i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有的和: &quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20231215145400975.png"></p><blockquote><p>案例2：水仙花数是指一个3位数，它的每个数位上的数字的3次幂之和等于这个数的本身。例如：<br>$$<br>1^3 + 5^3+3^3 &#x3D; 153<br>$$<br>请使用<code>for</code>循环列举所有的水仙花数。</p></blockquote><p>1. 确定范围：水仙花是一个三位数，三位数的数字范围在$[100, 999]$区间内</p><p>2. 个位、十位、百位数的获取：<br>$$<br>百位数 &#x3D; 数字 &#x2F; 100<br>$$</p><p>$$<br>十位数 &#x3D; 数字&#x2F;10%10<br>$$</p><p>$$<br>个位数&#x3D;数字%10<br>$$</p><p>3. 符合水仙花数的条件：<br>$$<br>数字 &#x3D; 百位数^3+十位数^3+个位数^3<br>$$<br>综合以上的分析，使用<code>for</code>循环的代码如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * for循环列举水仙花数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NarcissisticNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义三个变量a, b, c分别存储百位数、十位数、个位数</span><br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-comment">// 循环范围设定在[100, 999] --&gt; [100, 1000)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-comment">// 百位数、十位数、个位数的获取</span><br>            a = i / <span class="hljs-number">100</span>;<br>            b = i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>            c = i % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 水仙花数的判断条件</span><br>            <span class="hljs-keyword">if</span> (i == a * a * a + b * b * b + c * c * c) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果即$[100, 999]$以内的所有水仙花数：</p><p><img src="https://source.icode504.com/images/image-20231215135905087.png"></p><p>正如这节标题：“普通<code>for</code>循环”，其实JDK 5还为我们设计了<code>foreach</code>循环（也称作增强<code>for</code>循环），这类循环主要用于遍历数组和列表等结构，使用<code>foreach</code>循环会简化代码结构，在后续学习数组是我们会用到它，敬请期待°꒰๑’ꀾ’๑꒱°</p><h1 id="四、死循环"><a href="#四、死循环" class="headerlink" title="四、死循环"></a>四、死循环</h1><p>死循环，即条件表达式计算结果恒定为<code>true</code>而不断执行循环内部的代码。是一种无法自行终止的循环。在死循环中，程序会反复执行同一段代码，而且永远无法跳出这个循环，除非手动中断程序或者遇到未处理的异常。</p><p>下面使用上述三种循环演示以下死循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// while形式的死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// do-while形式的死循环</span><br><span class="hljs-keyword">do</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for形式的死循环：不写初始化表达式和迭代表达式，条件表达式为true</span><br><span class="hljs-keyword">for</span> (; <span class="hljs-literal">true</span>; ) &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码的过程中，如果不进行人为停止程序，它们就会不停输出“我是死循环”：</p><p><img src="https://source.icode504.com/images/231128001.gif"></p><p>死循环会导致程序无法正常执行其他任务，并且可能会占用大量资源。在编写循环结构时，务必要保证正确设置循环条件和提供适当的跳出机制，以避免死循环的发生。</p><h1 id="五、Intellij-IDEA关于循环的快捷键"><a href="#五、Intellij-IDEA关于循环的快捷键" class="headerlink" title="五、Intellij IDEA关于循环的快捷键"></a>五、Intellij IDEA关于循环的快捷键</h1><p>1. 在Intellij IDEA中，如果快捷生成一个循环结构，可以输入<code>fori</code>，然后会出现一个提示，按回车即可生成一个<code>for</code>循环结构。这个<code>for</code>循环是从0开始的：</p><p><img src="https://source.icode504.com/images/231215010.gif"></p><p>2. 如果想生成一个从0~n的<code>for</code>循环，可以使用<code>n.for</code>快捷生成。例如：如果我想生成0~100之间的循环，可以直接按<code>100.for</code>，出现提示后直接按回车即可生成这个区间的<code>for</code>循环：</p><p><img src="https://source.icode504.com/images/231215011.gif"></p><p>3. 输入<code>n.forr</code>可以生成一个从n到0依次递减的<code>for</code>循环，还是以<code>100.forr</code>为例，生成的效果如下图所示：</p><p><img src="https://source.icode504.com/images/231215012.gif"></p><p>4. 在编写代码的过程中，如果条件表达式可以确定的话，可以直接使用<code>条件表达式.while</code>快捷生成一个<code>while</code>循环，例如：</p><p><img src="https://source.icode504.com/images/231215013.gif"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之十一-流程控制之break和continue关键字</title>
    <link href="/posts/13.html"/>
    <url>/posts/13.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="./1.html">点我查看安装JDK 8教程</a>、<a href="./14.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><h1 id="一、循环的嵌套"><a href="#一、循环的嵌套" class="headerlink" title="一、循环的嵌套"></a>一、循环的嵌套</h1><p>和前面学习<code>if</code>一样，循环也可以相互搭配嵌套，即一个循环内部还包含一个循环。在编写嵌套循环时，三种循环（<code>for</code>、<code>while</code>、<code>do-while</code>）可以相互嵌套，常见的主要是<code>for</code>嵌套和<code>while</code>嵌套，它们的格式如下所示：</p><p>1. <code>for</code>循环嵌套：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-comment">// 执行代码...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. <code>while</code>循环嵌套：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; m) &#123;<br>    <span class="hljs-keyword">while</span> (j &lt; n) &#123;<br>        <span class="hljs-comment">// 执行代码...</span><br>        j++;<br>    &#125;<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>嵌套循环的执行类似于时钟，时钟是秒针走一圈，分针走一格。<strong>在嵌套循环中，内部循环执行n次，外部循环迭代一次。也就是说，嵌套循环执行的次数是<code>m * n</code>次</strong>。</p><p><img src="https://source.icode504.com/images/Hippopx.jpg" alt="图片来源于Hippopx"></p><h1 id="二、循环的break关键字"><a href="#二、循环的break关键字" class="headerlink" title="二、循环的break关键字"></a>二、循环的break关键字</h1><p>前面我们学习<code>switch</code>语句时使用<code>break</code>关键字，当时这个关键字的作用有两个：</p><p>1. 阻止<code>switch</code>语句本身的穿透性。</p><p>2. 跳出<code>switch</code>语句。</p><p>在循环中，我们也可以使用<code>break</code>关键字，它的作用就是终止当前循环，需要搭配条件语句使用。</p><p>例如：正常输出1~100的过程中，如果我想让循环之输出到第50个数就终止循环，就可以使用<code>break</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * break关键字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(i);<br>            <span class="hljs-comment">// break一般会搭配条件判断语句结合使用</span><br>            <span class="hljs-comment">// 输出到第50个数终止当前循环</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后程序输出到第50个数后就不再输出后续的数字，说明<code>while</code>循环已经终止。</p><p><img src="https://source.icode504.com/images/image-20231216142434197.png"></p><h1 id="三、continue关键字"><a href="#三、continue关键字" class="headerlink" title="三、continue关键字"></a>三、continue关键字</h1><p><code>continue</code>关键字用于循环语句中，作用是<strong>跳过当前循环，进入下一次循环</strong>。</p><p>在循环中使用<code>continue</code>关键字时，如果满足某个条件，<code>continue</code>会结束这一轮循环，进入下一次循环。这也就意味着，如果<code>continue</code>语句在循环体中被执行，那么循环体之后的代码将不会被执行。</p><p><code>continue</code>关键字通常用于优化程序性能防止不必要的迭代，以下是一个<code>continue</code>实例，输出<code>1~100</code>以内所有的计数：</p><p>如果使用原始的方式，我们只需要判断一下数字对2求余是否不等于0，符合这个条件判断就输出数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原生方式输出1~100所有的数字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，我们也可以使用<code>continue</code>关键字，既然输出的全是奇数，那么偶数是不符合条件的，如果是这样，就可以在条件判断中添加一个<code>continue</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * continue关键字的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinueDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 如果是偶数，就停止这轮循环，进入到下一次循环中</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二者实现运行效果完全一致：</p><p><img src="https://source.icode504.com/images/image-20231216143816070.png"></p><p>需要注意的是，<code>continue</code>关键字只能用于循环语句中，并且只能跳过当前循环。如果需要在循环外跳过某些代码块语句，则可以使用其他控制语句，例如：<code>if-else</code>语句或者<code>switch-case</code>等。</p><h1 id="四、使用案例"><a href="#四、使用案例" class="headerlink" title="四、使用案例"></a>四、使用案例</h1><h2 id="4-1-案例一：猜数游戏"><a href="#4-1-案例一：猜数游戏" class="headerlink" title="4.1 案例一：猜数游戏"></a>4.1 案例一：猜数游戏</h2><blockquote><p>由计算机生成一个两位数数字，让用户来猜。假设用户用100个游戏币，每猜一次扣10个游戏币（给出提示），猜中以后获得大奖10000个游戏币，猜大或者猜小了给出相应提示。</p></blockquote><p>1. 首先，计算机随机生成的数字，我们可以使用<code>java.util.Random</code>类可以解决，生成两位数数字我们可以利用<code>Random</code>默认的范围将其扩充为我们想要的范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">// 生成[10, 99]区间的数字</span><br><span class="hljs-type">int</span> <span class="hljs-variable">standardNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">90</span>) + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>2. 搞定了随机数的生成以后，我们需要保证用户能多次输入，需要定义一个循环，在循环外边定义一个<code>Scanner</code>，具体的输入操作放入到循环中，这样就能保证用户多次输入了。</p><p>3. 用户只有100元，每猜一次扣10元，需要保证他的游戏币数量 &gt; 0，每执行一次循环，扣除10游戏币，迭代表达式需要写成<code>游戏币 -= 10</code>。</p><p>4. 如果用户成功猜中数字，完成后就让用户跳出循环即可。</p><p>5. 猜不中（猜大或者猜小）给用户一个提示。</p><p>综合上述分析，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 猜数游戏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">// 计算机生成的标准数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">standardNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">90</span>) + <span class="hljs-number">10</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// 初始用户有100个游戏币</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">while</span> (money &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入数字: &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>            <span class="hljs-comment">// 每猜一次扣10元</span><br>            money -= <span class="hljs-number">10</span>;<br>            System.out.println(<span class="hljs-string">&quot;当前还剩&quot;</span> + money + <span class="hljs-string">&quot;游戏币&quot;</span>);<br>            <span class="hljs-keyword">if</span> (number == standardNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;恭喜，中大奖了&quot;</span>);<br>                money += <span class="hljs-number">10000</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &gt; standardNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的数字过大&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的数字过小&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;您目前的中奖金额是&quot;</span> + money + <span class="hljs-string">&quot;游戏币&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果（我猜了5次中了，如果你们猜的次数更少也可以试试）：</p><p><img src="https://source.icode504.com/images/image-20231216171107741.png"></p><h2 id="4-2-案例二：九九乘法表"><a href="#4-2-案例二：九九乘法表" class="headerlink" title="4.2 案例二：九九乘法表"></a>4.2 案例二：九九乘法表</h2><blockquote><p>输出九九乘法表，如下图所示：</p><p><img src="https://pic.baike.soso.com/ugc/baikepic2/0/ori-20230423171344-1244803611_jpeg_1045_720_209233.jpg/800" alt="九九乘法表，图片来源于网络，侵删"></p></blockquote><p>说起这个九九乘法表，我想起了大一的时候我参加实验室的时候考的一道算法题，当时我用了最蠢笨的方法——一行一行将整个乘法表用C语言的<code>printf</code>输出的，直到后来我接触了循环方面的知识，我才知道那时候一行一行写有多愚蠢。</p><p>(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )</p><p>言归正传，我们分析：</p><p>1. 首先，乘法表一共有9行，需要循环9次。可以确定的循环范围是$[1,9]$</p><p>2. 我们截取一个乘法表的片段，发现同一行中，第一个乘数是变化的，第二个乘数是不变的。</p><p><img src="https://source.icode504.com/images/image-20231216153832641.png"></p><p>3. 如果使用嵌套循环，外层控制行数。也就是说，同一行内部的第二个乘数可以作为外层循环的迭代变量。内层循环控制第一个乘数，在同一行内，第一个乘数是变化的。</p><p>4. 再次观察这个乘法表，我们会发现：$第一个乘数 &lt;&#x3D; 第二个乘数$，这个可以作为循环的内部条件，防止生成另一半循环。</p><p>至此，我们就可以编写一个九九乘法表了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt;= i) &#123;<br>                    System.out.println(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i);<br>                &#125;<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/image-20231216160006119.png"></p><p>虽然得到的结果是正确的，但是样式并不符合九九乘法表的样子，我们只需要使用制表符<code>\t</code>和不换行输出的<code>System.out.print();</code>做一下处理即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-comment">// 要求第一个乘数 &lt;= 第二个乘数</span><br>                <span class="hljs-keyword">if</span> (j &lt;= i) &#123;<br>                    <span class="hljs-comment">// 使用不换行输出和制表符对输出结果进行美化</span><br>                    System.out.print(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i + <span class="hljs-string">&quot;\t&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 每一行输出完成后，需要换行</span><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下，符合我们的预期：</p><p><img src="https://source.icode504.com/images/image-20231216160237255.png"></p><p>乘法表中$第一个乘数 &lt;&#x3D; 第二个乘数$，我们可以将这个条件写到内层的<code>for</code>作为条件表达式，优化后代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-comment">// 要求第一个乘数 &lt;= 第二个乘数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-comment">// 使用不换行输出和制表符对输出结果进行美化</span><br>                System.out.print(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 每一行输出完成后，需要换行</span><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果和前面的一摸一样：</p><p><img src="https://source.icode504.com/images/image-20231216160237255.png"></p><p>在这个优化版本中，我修改了内层循环的条件，使其只循环到<code>i</code>的值（第二个乘数），而不是9，这样可以减少循环的次数。</p><h2 id="4-3-案例三：素数问题"><a href="#4-3-案例三：素数问题" class="headerlink" title="4.3 案例三：素数问题"></a>4.3 案例三：素数问题</h2><blockquote><p>素数，也被称为质数，是指在自然数系中除了1和它自身以外，无法被其他自然数整除的数。最小的素数是2，它也是素数中唯一的偶数（双数）。其他素数都是奇数（单数）。素数有无限多个，所以不存在最大的素数。</p><p>输出100以内的所有素数。</p></blockquote><p>1. 确认范围：</p><ul><li>要输出的素数的范围在100以内，最小的素数是2，可以确定被除数<code>i</code>要循环的范围是$[2, 100]$。</li><li>由于素数只能被由于素数只能被1和其自身整除，那么在不包含上述条件的情况下，我们初步可以将除数<code>j</code>的范围确定为$[2,i-1]$</li></ul><p>2. 如果除数<code>j</code>所在范围内，存在某一个数可以被当前数整除，那么这个数就不是素数。</p><p>代码初步实现如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 由于2是最小的素数，因此被除数i的循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true，即当前数字确实是素数</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证j在[2, i-1]的范围内</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// 在上述区间内如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果也符合我们的预期：</p><p><img src="https://source.icode504.com/images/image-20231219084130368.png"></p><p>但是，对于每一个素数而言，我们有必要将除数的范围设置到<code>j - 1</code>吗？并不是，这里我举个例子：</p><p>48不是素数，除了1和它自身以外，能被48整除的最大数字是$48\div2&#x3D;24$。而超过24以后，就不存在能被48整除的整数。</p><p>我们可以按照上述分析，对内层循环代码做进一步简化，内层循环的范围修改为$[2, j&#x2F;2]$，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数--优化</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 由于2是最小的素数，因此循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证[2, i/2]区间内是否存在可以被整除的数字j</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= i / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-comment">// 在这个区间如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出效果和上面完全相同，但是内层循环的次数减少了一半，循环的执行效率进一步提高：</p><p><img src="https://source.icode504.com/images/image-20231219085614559.png"></p><p>针对内层循环而言，这个程序还有进一步优化的空间。除数的范围只需要计算到被除数的平方根即可，为什么？</p><p>判断一个数是否是素数的重要前提就是：除数不能被1和它自身整除。如果一个数不是素数，那么它必定可以分解成两个数（1和它本身除外）的乘积，并且这个数的因子一定会在它的平方根之前出现。</p><p>同理，如果一个数如果是素数，即使到这个数的平方根之前也不可能存在能整除这个素数的数。因此，内层循环我们可以将<code>j</code>的范围改为<code>(int) Math.sqrt(i)</code>（数字的平方根求整）即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数（简化版）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 由于2是最小的素数，因此循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证[2, Math.sqrt(i)]区间内是否存在可以被整除的数字j</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= (<span class="hljs-type">int</span>) Math.sqrt(i); j++) &#123;<br>                <span class="hljs-comment">// 在这个区间如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果和前面的一模一样，循环的次数进一步减少，提高了代码的运行效率。</p><p><img src="https://source.icode504.com/images/image-20231219085614559.png"></p><h1 id="五、知识点总结"><a href="#五、知识点总结" class="headerlink" title="五、知识点总结"></a>五、知识点总结</h1><p>流程控制之循环结构知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载：<a href="https://icode504.lanzouw.com/iNjWB1ie8l3g">点我下载</a></p><p><img src="https://source.icode504.com/images/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.svg" alt="流程控制之循环结构-总结"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA 2021.1.3安装配置教程（Windows版）</title>
    <link href="/posts/14.html"/>
    <url>/posts/14.html</url>
    
    <content type="html"><![CDATA[<p>Intellij IDEA（以下简称 IDEA）是Java语言的集成开发环境，在业界公认为是一款优秀的 Java 开发工具。分为 Community 社区版（免费）和 Untimate 终极版（付费）。</p><p>IDEA是一款智能编译器。它可以进行智能代码补全、提供问题工具窗口、代码上下文检查操作、实时模板、项目级别代码重构、重复代码检测等功能。</p><p>IDEA终极版为现代应用程序和Java相关微服务开发框架提供了一流的支持。IDEA 对 SpringBoot、Jakata EE、JPA 等框架提供一流的支持。</p><p>其内部支持很多的内置工具，例如：调试器、数据库工具、终端、反编译器、WEB开发、版本控制（Git）、导航和搜索功能等。</p><p>接下来就为大家介绍一下 Windows 版的 Intellij IDEA 如何安装和使用。</p><h1 id="一、安装-Intellij-IDEA"><a href="#一、安装-Intellij-IDEA" class="headerlink" title="一、安装 Intellij IDEA"></a>一、安装 Intellij IDEA</h1><p>1. 进入IDEA的官方下载页面，<a href="https://www.jetbrains.com.cn/idea/download/other.html">点我查看</a>。向下找，找到2021.1.3版本（事实上，要下载的版本和最新版本使用Java编写代码的差异并不大）</p><p><img src="https://source.icode504.com/images/image-20231026105758909.png"></p><p>2. 如下图：Windows选择2021.1.3版本的安装包进行下载</p><p><img src="https://source.icode504.com/images/image-20231026105832218.png"></p><p>3. 双击打开安装包</p><p><img src="https://source.icode504.com/images/image-20231026110358738.png"></p><p>4. 出现IDEA安装界面后，点击Next：</p><p><img src="https://source.icode504.com/images/image-20231026110530587.png"></p><p>5. 选择安装路径，建议安装在除C盘外的其他位置，这里我安装在了D盘，完成后点击Next：</p><p><img src="https://source.icode504.com/images/image-20231026110644963.png"></p><p><img src="https://source.icode504.com/images/image-20231026110747122.png"></p><p><img src="https://source.icode504.com/images/image-20231026110933779.png"></p><p>6. 如果前面选择安装路径的页面仍没有变换，请耐心等待一小会（或者多点几次Next）。出现下面页面以后，按照如图所示勾选即可：</p><p><img src="https://source.icode504.com/images/image-20231026111926666.png"></p><p>7. 点击<code>Install</code>：</p><p><img src="https://source.icode504.com/images/image-20231026112118222.png"></p><p>8. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20231026112159702.png"></p><p>9. 点击<code>Finish</code>。至此，IDEA安装完成。</p><p><img src="https://source.icode504.com/images/image-20231026112731774.png"></p><p>10.  双击桌面上的IDEA图标，打开IDEA，会弹出一个协议，按照下图所示勾选，然后点击<code>Continue</code>：</p><p><img src="https://source.icode504.com/images/image-20231026114146154.png"></p><p>11. 出现数据分享窗口后，选择<code>Don&#39;t Send</code>：</p><p><img src="https://source.icode504.com/images/image-20231026114256575.png"></p><p>12. 进入激活页面，我们下载的是IDEA Ultimate版，正常是需要按月或者按年支付费用的。此处我们先按照下图进行30天的免费试用：</p><p><img src="https://source.icode504.com/images/image-20231026114443579.png"></p><blockquote><p>如需正版，请点击右侧链接到官网购买（需要注册账号）：<a href="https://www.jetbrains.com.cn/idea/buy/?section=personal&billing=yearly">点我进入</a></p></blockquote><p>13. 出现下方这个页面以后，就说明我们30天使用申请成功，此时点击<code>Continue</code>：</p><p><img src="https://source.icode504.com/images/image-20231026114823255.png"></p><p>14. 进入IDEA欢迎界面以后，点击Plugins进入插件下载页面：</p><p><img src="https://source.icode504.com/images/image-20231026115032492.png"></p><p>15. 点击右上角小齿轮，点击<code>Manage Plugin Repositories</code>：</p><p><img src="https://source.icode504.com/images/image-20231026140417316.png"></p><p>16. 点击左上角的加号，复制下方链接并粘贴到输入框中，然后点击OK：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//plugins.zhile.io</span><br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20231026140651185.png"></p><p>17. 此时在插件下载页面中搜索<code>IDE Eval Reset</code>，然后点击<code>Install</code>：</p><blockquote><p><code>IDE Eval Reset</code>插件的作用是无限延长IDEA的试用期。正常IDEA给我们的试用是30天，使用这款插件以后，只要快到了需要激活IDEA的时间，他就会自动延长一个月的试用期。从理论上来讲，安装这款插件以后，理论上就可以实现永久使用。</p><p>这款插件仅限于在IDEA 2021.2.2以下的版本使用，往后的版本中不适用。</p></blockquote><p><img src="https://source.icode504.com/images/image-20231026140910036.png"></p><p>18. 出现此弹框时，点击<code>Accept</code>，此时IDEA会安装此插件：</p><p><img src="https://source.icode504.com/images/image-20231026141507224.png"></p><p>19. 至此，IDEA安装和简单的配置已经完成了。此插件具体使用详见下一部分内容。</p><p><img src="https://source.icode504.com/images/image-20231026141624170.png"></p><h1 id="二、使用Intellij-IDEA编写并运行Java程序"><a href="#二、使用Intellij-IDEA编写并运行Java程序" class="headerlink" title="二、使用Intellij IDEA编写并运行Java程序"></a>二、使用Intellij IDEA编写并运行Java程序</h1><p>1. 请确保本地已经安装了JDK，如果没有安装的，查看此文章一步一步安装即可：<a href="http://www.icode504.com/posts/1.html">点我查看</a>。</p><p>2. 输入<code>java -version</code>命令表示电脑上已经成功安装并配置了JDK：</p><p><img src="https://source.icode504.com/images/v2-64aba410fcb514b6ab24c746db122258_r.jpg" alt="img"></p><p>3. 创建项目：点击左侧<code>Projects</code>，然后点击<code>New Project</code>：</p><p><img src="https://source.icode504.com/images/image-20231026143448569.png"></p><p>4. IDEA会自动为我们检测本机是否安装JDK，下图表示已经成功安装了JDK，确认无误后点击<code>Next</code>：</p><p><img src="https://source.icode504.com/images/image-20231026144016011.png"></p><p>5. 直接点击<code>Next</code>：</p><p><img src="https://source.icode504.com/images/image-20231026144525573.png"></p><p>6. 填写项目名称，建议是英文名称，项目存储路径建议是英文路径并且自己后续可以找到的位置，完成后点击<code>Finish</code>。</p><p><img src="https://source.icode504.com/images/image-20231026145517713.png"></p><p>7. 进入IDEA主界面以后，会弹出一个每日小提示窗口，按照下图所示操作将其永久关闭：</p><p><img src="https://source.icode504.com/images/image-20231026145749784.png"></p><p>8. 在左侧文件夹中，鼠标右键点击<code>src</code>蓝色文件夹，选择第一个<code>New</code>，再选择<code>Java Class</code>，创建一个Java文件：</p><p><img src="https://source.icode504.com/images/image-20231026150115883.png"></p><p>9. 文件的命名必须符合Java类的命名规范：<a href="https://zhuanlan.zhihu.com/p/654107809">点我进入，查找标识符部分，查看标识符命名规范</a></p><p><img src="https://source.icode504.com/images/image-20231026153407784.png"></p><p>10. 输入<code>psvm</code>或者<code>main</code>，然后直接回车就可以生成<code>main</code>方法：</p><p><img src="https://source.icode504.com/images/23102601.gif" alt="23102601"></p><p><img src="https://source.icode504.com/images/23102602.gif" alt="23102602"></p><p>11. 在<code>main</code>方法里输入<code>sout</code>然后点击回车，就会生成一个换行输出的语句：</p><p><img src="https://source.icode504.com/images/23102603.gif" alt="23102603"></p><p>12. 此时我们可以在程序中写点内容进行输出，效果图如下：</p><p><img src="https://source.icode504.com/images/image-20231026155551840.png"></p><p>13. 运行Java程序：这里的运行就直接包括了编译和运行</p><p>方式一：鼠标右键，点击<code>Run MyFirstProgram</code>：</p><p><img src="https://source.icode504.com/images/image-20231026155744103.png"></p><p>方式二：使用快捷键，这里我使用的快捷键是<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F10</kbd>，具体的快捷键详见自己鼠标右键后<code>Run xxx</code>后面对应的快捷键执行即可</p><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/image-20231026160055833.png"></p><p>14. IDE Eval Reset插件的无限期使用：点击上方<code>Help</code>，然后点击最下面的<code>Eval Reset</code>：</p><p><img src="https://source.icode504.com/images/image-20231026160524459.png"></p><p>15. 按照下图所示进行勾选，然后点击Reset，此时IDEA会自动重启。</p><p><img src="https://source.icode504.com/images/image-20231026160856389.png"></p><p>16. 点击Yes，就会重启，此时IDEA的试用期就会延长。</p><p><img src="https://source.icode504.com/images/image-20231026160939651.png"></p><h1 id="三、Intellij-IDEA的卸载（可选）"><a href="#三、Intellij-IDEA的卸载（可选）" class="headerlink" title="三、Intellij IDEA的卸载（可选）"></a>三、Intellij IDEA的卸载（可选）</h1><p>1. 找到IDEA的安装目录，双击<code>Uninstall.exe</code>开始卸载：</p><p><img src="https://source.icode504.com/images/image-20231019145304952.png"></p><p>2. 将下面两个框进行勾选。然后点击<code>Uninstall</code>：</p><p><img src="https://source.icode504.com/images/image-20231019145326571.png"></p><p>3. 卸载中，请耐心等待</p><p><img src="https://source.icode504.com/images/image-20231019145557554.png"></p><p>4. 卸载完成，点击<code>Close</code></p><p><img src="https://source.icode504.com/images/image-20231019145621728.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>集成开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Intellij IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 8安装配置教程（Windows版）</title>
    <link href="/posts/1.html"/>
    <url>/posts/1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下JDK 8如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>以下两种方式二选一下载即可：</p><h2 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h2><p>请选择任意一个链接，选择任意一个安装包下载即可：</p><table><thead><tr><th><a href="https://pan.baidu.com/s/1FjQlCUulceJWOQP96qQvjQ?pwd=mclj">点击下载</a></th><th><a href="https://pan.baidu.com/s/1K4gR2k152JWimdxEADvp2g?pwd=1024">备用下载1</a></th><th><a href="https://pan.baidu.com/s/1-KFO-_GQOsF2M-PVzKt24w?pwd=1024">备用下载2</a></th></tr></thead></table><p><img src="https://source.icode504.com/images/image-20240101131122731.png"></p><h2 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h2><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/downloads/archive/">点击进入</a></p><p><img src="https://source.icode504.com/images/image-20240101131317529.png"></p><p>2. 找到以Java SE Development Kit开头的下载列表，找到64位的版本版本下载：</p><p><img src="https://source.icode504.com/images/image-20240101132604565.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://source.icode504.com/images/image-20240101133458956.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://source.icode504.com/images/image-20240714131003147.png"></p><h1 id="二、安装JDK（这里我使用的版本是JDK-8）"><a href="#二、安装JDK（这里我使用的版本是JDK-8）" class="headerlink" title="二、安装JDK（这里我使用的版本是JDK 8）"></a>二、安装JDK（这里我使用的版本是JDK 8）</h1><p>1. 双击文件，开始安装：</p><p><img src="https://source.icode504.com/images/image-20240101134018241.png"></p><p>2. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314125453675.png"></p><p>3. 修改安装路径（如果你是新手小白，可以不执行这一步操作，直接跳转到第5步），点击<strong>更改</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314130028313.png"></p><p>4. 在新建一个路径。为了避免后续出现问题，创建路径时，请不要JDK安装位置放在有中文字符的路径中。选择当前路径，点击确定：</p><p><img src="https://source.icode504.com/images/image-20240101134722779.png"></p><p>5. 点击下一步：</p><p><img src="https://source.icode504.com/images/image-20240101134758455.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20230314131058441.png"></p><p>7. 安装过程中，出现了一个JRE安装（前面我们安装的JDK已经包含了JRE，可以选择不安装，如果不需要安装，出现下图窗口后直接点击右上角关闭即可，直接跳到第11步）。点击<strong>更改路径</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314131446348.png"></p><p>8. 新建一个路径，建议不要出现中文字符，然后选中此文件夹，点击确定：</p><p><img src="https://source.icode504.com/images/240101001.gif"></p><p>9. 点击下一步：</p><p><img src="https://source.icode504.com/images/image-20240101140732789.png"></p><p>10. 安装中，安装完成以后此窗口会自动消失：</p><p><img src="https://source.icode504.com/images/image-20230314132647334.png"></p><p>11. 点击关闭，JDK安装完成。</p><p><img src="https://source.icode504.com/images/image-20230314132930503.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手或者已经安装了其他版本的JDK，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101141148295.png"></p><p>2. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击高级系统设置：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>5. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134919881.png"></p><p>6. 配置安装路径，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240101141636264.png"></p><p>7. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240101141809160.png"></p><h1 id="四、检查JDK是否安装成功"><a href="#四、检查JDK是否安装成功" class="headerlink" title="四、检查JDK是否安装成功"></a>四、检查JDK是否安装成功</h1><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定：</p><p><img src="https://source.icode504.com/images/image-20230314140351859.png"></p><p>2. 输入<code>javac</code>和<code>java</code>，会出现下图内容：</p><p><img src="https://source.icode504.com/images/image-20230314140519091.png"></p><p><img src="https://source.icode504.com/images/image-20230314141144190.png"></p><p>3. 输入<code>java -version</code>，出现下图信息表示JDK安装成功：</p><p><img src="https://source.icode504.com/images/image-20230314140629530.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之一-第一个程序</title>
    <link href="/posts/2.html"/>
    <url>/posts/2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：</p><ol><li>本文中包含实际操作，需要安装JDK。如果需要安装JDK，请按照这篇文章的步骤进行安装：<a href="./1.html">点我查看JDK安装教程</a></li><li>小白可以多看几遍这篇文章，多敲几次代码。</li></ol></blockquote><h1 id="一、第一个程序"><a href="#一、第一个程序" class="headerlink" title="一、第一个程序"></a>一、第一个程序</h1><p>前面我们已经安装了JDK，接下来就是写一个属于自己的Java程序了。</p><p>用什么写自己的Java程序呢？有人说用IDEA、Eclipse等集成开发工具。其实，作为小白，我们在最初阶段其实没有必要安装这些繁重的工具，使用记事本写代码就可以。</p><h2 id="1-1-准备操作"><a href="#1-1-准备操作" class="headerlink" title="1.1 准备操作"></a>1.1 准备操作</h2><p>创建一个文件夹，保证自己以后学习过程中的代码都存放到这个文件夹中，养成好习惯。为了避免后续出现问题，文件路径中尽量不要包含中文字符。这里我新建的文件夹名是<code>MyWorkspace</code>，如下图：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213200514.png"></p><p>打开<code>MyWorkspace</code>文件夹，今天是我们第一次敲代码，就在这个文件夹中创建一个<code>day01</code>文件夹，如下图所示：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213716922.png"></p><p>打开<code>day01</code>文件夹，点击上方的<code>查看</code>，勾选<code>文件扩展名</code>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213901017.png"></p><h2 id="1-2-编写我的第一个Java程序"><a href="#1-2-编写我的第一个Java程序" class="headerlink" title="1.2 编写我的第一个Java程序"></a>1.2 编写我的第一个Java程序</h2><p>做完以上的准备工作以后，我们就可以写自己的Java程序了！</p><p>在文件夹空白处，鼠标右键点击新建，<strong>新建文本文档</strong>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214256942.png"></p><p>此时新建完成以后，我们选中这个文件，鼠标右键点击重命名，将文件名修改成<code>MyFirstProgram.java</code>。我们此时需要留意下这个文件名<code>MyFirstProgram</code>，后续它有大用处！</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214530788.png"></p><p>出现这个弹窗时，点击“是”即可。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214608048.png"></p><p>鼠标右键点击这个文件，打开方式选择记事本：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214844597.png"></p><p>请按照下面代码内容，一个一个字母符号敲进记事本中（不要图方便直接复制代码，实际操作才能看出自己的问题）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstProgram</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;This is my first Java program!&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215450746.png"></p><p>点击左上角文件，然后点击保存（或者按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存）。到这一步，我们的代码就已经写好了。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215630094.png"></p><p>点击上面的路径，输入<code>cmd</code>，进入命令行：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/003.gif"></p><p>编译这个java源程序：</p><ul><li>编译命令格式：<code>javac 文件名.java</code>。</li><li>如果我想编译这个<code>MyFirstProgram.java</code>文件，就需要执行的命令是：<code>javac MyFirstProgram.java</code></li></ul><p>操作步骤如下图所示，上述命令执行完成后，此时文件夹中有一个<code>MyFirstProgram.class</code>文件，这个是Java编译器执行编译命令以后生成的二进制字节码文件（直接使用记事本打开是乱码文件）：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/004.gif"></p><p>编译命令完成后，就需要运行这个这个Java程序了。运行命令的格式是：<code>java 文件名</code>。注意，这里不能加<code>.java</code></p><p>以<code>MyFirstProgram.java</code>文件为例，运行命令是：<code>java MyFirstProgram</code>。此时命令行就会输出在源文件中编写的内容：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/005.gif"></p><h1 id="二、编写第二个Java程序"><a href="#二、编写第二个Java程序" class="headerlink" title="二、编写第二个Java程序"></a>二、编写第二个Java程序</h1><p>看到这里，有小伙伴会问：我想输出中文可以吗？输出多行内容可不可以？</p><p>我的答案是：<strong>当然可以</strong>！结合上述问题，给大家再举个例子：比如我想通过Java程序输出唐代诗人崔颢的《黄鹤楼》</p><center><font face="楷体">昔人已乘黄鹤去，此地空余黄鹤楼。<br/>黄鹤一去不复返，白云千载空悠悠。<br/>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br/>日暮乡关何处是？烟波江上使人愁。</font></center><p>我们完全可以按照上述的步骤来操作。</p><p>首先，新建一个Java源文件，这里我将其重命名为<code>Huanghelou.java</code>，操作如下图所示：</p><p><img src="https://source.icode504.com/images/778e99d52ead3ffc1494aa5fa2c84815.gif"></p><p>通过记事本打开这个Java源文件，先编写出这个代码的大体框架：</p><p><img src="https://source.icode504.com/images/56e5b8362fb48d1b44cd8360f1e97bd4.png"></p><p>因为我们要输出4行诗句。因此要在Java的<code>main()</code>方法中编写4行输出语句，效果如下图：</p><p><img src="https://source.icode504.com/images/03903e6f6ea03f111fa5656a6d5f8c6a.png"></p><p>编写完Java代码以后，点击在左上角<code>文件</code>，然后点击<code>另存为</code>，下方选择<code>所有文件</code>，编码格式选择<code>UTF-8</code>：</p><p><img src="https://source.icode504.com/images/217121fea13549089730a5d1b0c1813d.png"></p><p>此时会弹出一个窗口，点击是即可。完成后关闭记事本窗口。</p><p><img src="https://source.icode504.com/images/70c8a6fd14dabd9b31c5cba522b44576.png"></p><p>此时按照上述步骤，我们需要对<code>Huanghelou.java</code>这个文件进行编译。</p><p>点击上方文件路径，输入<code>cmd</code>，打开命令行窗口，操作如下图所示：</p><p><img src="https://source.icode504.com/images/f99a239f91a8142935e4dfb0a61d87ba.gif"></p><p>执行编译命令：<code>javac Huanghelou.java</code>，执行此命令以后，命令行会提示以下错误信息：</p><p><img src="https://source.icode504.com/images/9577d2565ee1e910fe91e7e8f810343f.png"></p><p>这里解释一下出现编码GBK的不可映射字符的问题：由于我们之前编写的Java源文件在保存时的编码格式是<code>UTF-8</code>（如下图所示）</p><p><img src="https://source.icode504.com/images/b5c4dffc411309bbe750302144d0dc51.png"></p><p>而命令行所支持的编码格式是<code>GBK</code>，这就造成了Java源文件的编码格式和命令行的不匹配，从而产生上述问题了：</p><p><img src="https://source.icode504.com/images/2b5ee9519680233b40ed4fe186c16759.png"></p><p>解决办法：只需要在编译时，告诉Java编译器我们需要将这个Java源文件编译成<code>UTF-8</code>的即可，命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac -encoding UTF-8 文件名.java<br></code></pre></td></tr></table></figure><p>以这个文件为例，我们就使用<code>UTF-8</code>的编码格式进行编译：<code>javac -encoding UTF-8 Huanghelou.java</code>，执行此命令以后，就不会提示上述错误信息了。</p><p><img src="https://source.icode504.com/images/b9682af7a3aa2b7d0d6d30a0a9628d49.gif"></p><p>这时我们再运行这个Java程序：<code>java Huanghelou</code>，就能看到前面我们在前面的输出了：</p><p><img src="https://source.icode504.com/images/baa82be9da0988e31e49e8bee62d0a40.gif"></p><h1 id="三、注意点-常见问题"><a href="#三、注意点-常见问题" class="headerlink" title="三、注意点&amp;常见问题"></a>三、注意点&amp;常见问题</h1><p>在编写第一个程序的时候，我们需要注意的问题：</p><p>1. <code>class</code>后面的名称要和文件名保持一致，这里我已经提及3遍了，就是希望能引起小白的重视：</p><p><img src="https://source.icode504.com/images/8780e6a2bb87b9992c5495d90e52c543.png"></p><p>2. 除了<code>System.out.println(&quot;&quot;);</code>语句的双引号中的内容自定，代码中其他地方都要使用英文符号。</p><p><img src="https://source.icode504.com/images/b85d43444c690d261a46bfa707a67ea2.png"></p><p>3. 输出语句后面的分号不要忘记（这也是许多小白在写代码最容易忽略的地方）</p><p><img src="https://source.icode504.com/images/cd65434a9f37cc29e29c8a387e331cef.png"></p><p>4. 大括号、中括号、小括号一定要配对出现。写代码的时候不要忘记！</p><p><img src="https://source.icode504.com/images/1aecf19e933a23c4a3a7a36834f4793d.png"></p><h1 id="四、小练习"><a href="#四、小练习" class="headerlink" title="四、小练习"></a>四、小练习</h1><p>使用Java程序输出三句话，文件名为<code>Baiyexing.java</code>，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">《白夜行》的作者是日本作家东野圭吾<br>这是一部很棒的悬疑小说<br>你知道白夜吗？明明是夜晚却有太阳，照得夜晚像白昼一样明亮，就是说一直这么犹豫不前的话，人生就毁了。<br></code></pre></td></tr></table></figure><p>输出效果如下：</p><p><img src="https://source.icode504.com/images/8141a3e5fa2b0379996c49b254eb613e.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
