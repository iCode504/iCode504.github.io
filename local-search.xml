<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>入门篇-其之三-基本数据类型及其转换</title>
    <link href="/posts/4.html"/>
    <url>/posts/4.html</url>
    
    <content type="html"><![CDATA[<p>Java的数据类型分为基本数据类型和引用数据类型，具体分类如下图：</p><p><img src="https://source.icode504.com/images/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="Java数据类型"></p><p>对于初学者而言，认为字符串类型<code>String</code>也属于基本数据类型，事实上<code>String</code>属于类，即引用数据类型。从<code>String</code>的源码中，我们就可以看出其使用的<code>class</code>关键字进行修饰：</p><p><img src="https://source.icode504.com/images/image-20230906093750819.png"></p><p>观察上述结构图我们可以发现Java的八种基本类型又可以细分成四类：整数类型、浮点类型、字符类型和布尔类型。本文将会对这四大类型一一进行讲解。</p><h1 id="一、整数类型"><a href="#一、整数类型" class="headerlink" title="一、整数类型"></a>一、整数类型</h1><p>整数类型，简称整型。Java中存储整型由四个类型组成：**<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>**。其中<code>int</code>类型最常用。这四个数据类型的对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储大小</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><code>byte</code></td><td align="center">8位，1字节</td><td align="center">[-128, 127]</td><td align="center">0</td></tr><tr><td align="center"><code>short</code></td><td align="center">16位，2字节</td><td align="center">[-2<sup>16-1</sup>,2<sup>16-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>int</code>（默认）</td><td align="center">32位，4字节</td><td align="center">[-2<sup>32-1</sup>,2<sup>32-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>long</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>64-1</sup>,2<sup>64-1</sup>-1]</td><td align="center">0L</td></tr></tbody></table><p>在定义这四个类型的变量时，需要注意定义的整数不要超过其存储范围（尤其是<code>byte</code>类型，因为它的存储范围最小）。</p><p>例如：我想定义一个<code>byte</code>、<code>short</code>、<code>int</code>类型的变量并赋值，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:44:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        System.out.println(b);<br>        System.out.println(s);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906094554236.png"></p><p>在使用<code>long</code>类型的时候需要注意：**<code>long</code>类型的数据后面需要加上<code>L</code>或<code>l</code>**（不推荐小写<code>l</code>，因为小写<code>l</code>很有可能和数字1或者大写字母I混淆）。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型long的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:53:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeLong</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6666666666666666666L</span>;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906095442555.png"></p><p>细心的小伙伴会发现，为什么变量<code>num1</code>的值<code>88</code>后面没有加上后缀<code>L</code>呢？</p><p>由于整型的默认使用的<code>int</code>类型，而<code>long</code>类型的范围比<code>int</code>大，因此数字<code>88</code>会由<code>int</code>类型自动提升为<code>long</code>类型，这种现象称作<strong>自动类型提升</strong>（本文后面会讲到自动类型提升）。因此<code>long num1 = 88;</code>并不会报语法错误。</p><p>而变量<code>num2</code>的值<code>6666666666666666666</code>已经超出了<code>int</code>类型的最大范围，但是这个数字在<code>long</code>范围内，此时就必须要加上后缀<code>L</code>。</p><p>以下是对定义<code>long</code>类型变量的总结说明：</p><table><thead><tr><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>在<code>int</code>范围内的数字，可以用<code>L</code>或<code>l</code>表示<code>long</code>类型，也可以不使用后缀。</td><td><code>long num1 = 32;</code><br /><code>long num2 = 43L;</code></td></tr><tr><td>如果表示的数字在<code>int</code>范围之外，但是在<code>long</code>的范围之内，则必须使用<code>L</code>或<code>l</code>作为后缀。</td><td><code>long num = 66666666666666L;</code></td></tr></tbody></table><p>如果你并不能确定所定义的整数是否在<code>int</code>范围，我个人的建议就是**只要定义<code>long</code>类型的整数，就在数字后面加个后缀<code>L</code>**。</p><h1 id="二、浮点类型"><a href="#二、浮点类型" class="headerlink" title="二、浮点类型"></a>二、浮点类型</h1><p>浮点类型，其实就是我们说的小数类型。浮点类型主要由<code>float</code>和<code>double</code>类型组成。其中，**<code>float</code>类型的数值后必须要加<code>f</code>或<code>F</code>为后缀**，二者对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储位数</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">数字后缀</th><th align="center">默认值</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center"><code>float</code></td><td align="center">32位，4字节</td><td align="center">[-2<sup>128</sup>,2<sup>128</sup>]</td><td align="center"><strong><code>f</code>或<code>F</code>（必须写后缀）</strong></td><td align="center">0.0f或0.0F</td><td align="center">7位小数</td></tr><tr><td align="center"><code>double</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>1024</sup>,2<sup>1024</sup>]</td><td align="center"><code>d</code>或<code>D</code>（非强制要求，一般不写后缀）</td><td align="center">0.0</td><td align="center">15位小数</td></tr></tbody></table><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基础数据类型float和double</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:25:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeFloatAndDouble</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.88f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.44F</span>;   <span class="hljs-comment">// 使用F或f最为后缀都可以</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0f</span> / <span class="hljs-number">3f</span>;<br>        System.out.println(f1);<br>        System.out.println(f2);<br>        System.out.println(f3);<br>        System.out.println(f4);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.66D</span>;  <span class="hljs-comment">// double的后缀可有可无</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>;<br><br>        System.out.println(d1);<br>        System.out.println(d2);<br>        System.out.println(d3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://source.icode504.com/images/image-20230906152845268.png"></p><p>为什么<code>d2</code>的输出结果是8.0？由于8默认为<code>int</code>类型，给变量<code>d2</code>赋值时，<code>int</code>类型的数值会向范围更大的<code>double</code>转换（自动类型提升，在后面文章会讲到），而<code>double</code>是浮点类型，后面需要跟随小数点，默认会在后面加上<code>.0</code>（一位小数），即输出结果为8.0。同理，<code>f3</code>的输出结果为6.0。</p><p>从输出结果中我们还能看出，<code>10 / 3</code>得到的是无限循环小数，但是<code>float</code>类型变量<code>f4</code>输出结果保留了7位小数，而<code>double</code>类型变量<code>d3</code>输出结果保留了15位小数。由这两个输出结果可以印证两个浮点类型的精度大小。</p><p>在日常使用过程中，使用<code>double</code>的次数要比<code>float</code>多，个人总结有如下三点：</p><ol><li><code>float</code>类型数值需要在必须其后面加上<code>f</code>和<code>F</code>，而<code>double</code>不需要在值后面加后缀符。</li><li><code>double</code>存储范围比<code>float</code>的大，并且浮点类型数值默认类型就是<code>double</code>。</li><li><code>double</code>的精度要比 <code>float</code>的高，表示的数值更加准确。</li></ol><h1 id="三、字符类型"><a href="#三、字符类型" class="headerlink" title="三、字符类型"></a>三、字符类型</h1><p>字符类型，即<code>char</code>类型，用来<strong>存储单个字符，使用单引号和单个字符表示</strong>，因此在单引号中写多个字符是错误写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<span class="hljs-comment">// 正确写法</span><br><span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ijk&#x27;</span>;<span class="hljs-comment">// 错误写法，单引号中只能写一个字符！</span><br></code></pre></td></tr></table></figure><p><code>char</code>是一个单一的16位的Unicode字符，它的存储范围是<code>[0,65535]</code>，即<code>&#39;\u0000&#39;</code>到<code>&#39;\uffff&#39;</code>。</p><p>这里会有小伙伴问：<code>char</code>不是只能表示单个字符吗？这就要说到Unicode字符表了，这个表存储了所有的字符（各种符号、中文英文等各种字符），Unicode字符表中的每个字符默认使用的是以<code>\u</code>和十六进制数组合表示，也就是说<code>\u0000</code>就是一个Unicode值，这个Unicode值对应着字符表中的一个字符。</p><p>Unicode字符表中存储了所有的可用的字符，<code>\u0000</code>其实表示的时候Unicode字符表中第一个字符，编写测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之char</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:18:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeChar1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用Unicode字符表中的字符来初始化char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>        <span class="hljs-comment">// 会输出，但是无法在控制台显示出来</span><br>        System.out.println(ch1);<br>        <span class="hljs-comment">// 利用if方法判断ch1是否是Unicode字符表中的第一个字符</span><br>        <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;\u0000&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1是Unicode字符表中的第一个字符&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1不是第一个字符&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://source.icode504.com/images/image-20230906162315218.png"></p><p>代码中我写了三个输出语句，其中第一个直接输出这个字符，但是从运行结果中我们发现这个语句确实输出了，但是控制台无法显示这个字符。</p><p>为了进一步验证输出的字符是否是Unicode字符表第一个字符，这里我使用了一个<code>if</code>判断。如果我们定义变量和<code>\u0000</code>相等时，输出<code>ch1是Unicode字符表中的第一个字符</code>，此时也就说明了第一个字符确实在计算机中存在，只是无法正常显示；相反，<code>\u0000</code>并不是Unicode字符表中的第一个字符。运行结果正如我们所料，输出的内容是<em>ch1是Unicode字符表中的第一个字符</em>。</p><h1 id="四、布尔类型"><a href="#四、布尔类型" class="headerlink" title="四、布尔类型"></a>四、布尔类型</h1><p><code>boolean</code>类型，即布尔类型，它只有两个值：<code>true</code>（真）和<code>false</code>（假）。通常用于条件表达式的判断（条件表达式后续文章会讲到），例如：我们都知道20 &gt; 30是假，即判断结果为<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之布尔类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:33:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeBoolean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        System.out.println(bool1);<br>        System.out.println(bool2);<br>        System.out.println(<span class="hljs-number">20</span> &gt; <span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906153456679.png"></p><h1 id="五、数字的进制表示（了解）"><a href="#五、数字的进制表示（了解）" class="headerlink" title="五、数字的进制表示（了解）"></a>五、数字的进制表示（了解）</h1><p>在中学期间我们学过数字有二进制、八进制、十进制和十六进制。</p><ul><li>二进制数字是由0、1组成，满二进一。</li><li>八进制数字是由0~7组成，满八进一。</li><li>十六进制是由0~9、A、B、C、D、E、F组成，满十六进一</li></ul><p>日常我们表示数字都是采用十进制，Java程序表示数字亦是如此。那么，如何表示二进制、八进制、十六进制的数字？</p><p>以十进制的数字<code>22</code>为例，转换为各个进制的数字如下：</p><table><thead><tr><th align="center">二进制</th><th align="center">八进制</th><th align="center">十六进制</th></tr></thead><tbody><tr><td align="center">10110</td><td align="center">26</td><td align="center">16</td></tr></tbody></table><p>在Java中，表示二进制数字，需要在数字前面加上<code>0B</code>或<code>0b</code>；如果表示八进制数字，需要在数字前面加上<code>0</code>即可；如果是十六进制的数字，需要在数字前面加上<code>0X</code>或者<code>0x</code>，以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:32:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 二进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">binary</span> <span class="hljs-operator">=</span> <span class="hljs-number">0B10110</span>;<br>        <span class="hljs-comment">// 八进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">octal</span> <span class="hljs-operator">=</span> <span class="hljs-number">026</span>;<br>        <span class="hljs-comment">// 十六进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hexadecimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x16</span>;<br>        <br>        System.out.println(decimal);<br>        System.out.println(binary);<br>        System.out.println(octal);<br>        System.out.println(hexadecimal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906104002433.png"></p><p>从运行结果我们可以看出：输出的数字无论是哪一种进制，默认都会转换为十进制的数字<code>22</code>。</p><p>如果我想直接将十进制数字<code>22</code>转换为各个进制并进行输出。</p><p>例如：我想定义的变量是<code>int</code>类型，可以使用<code>int</code>的包装类<code>Integer</code>，在<code>Integer</code>类中有和进制转换相关的方法：</p><ul><li><code>toBinaryString(num)</code>：将十进制数字转换为二进制数字并表示。</li><li><code>toOctalString(num)</code>：将十进制数字转换为八进制数字并表示。</li><li><code>toHexString(num)</code>：将十进制数字转换为十六进制数字并表示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 十进制数字转换为各个进制并输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:43:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentationParse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 转换为二进制数字并输出</span><br>        System.out.println(Integer.toBinaryString(number));<br>        <span class="hljs-comment">// 转换为八进制数字并输出</span><br>        System.out.println(Integer.toOctalString(number));<br>        <span class="hljs-comment">// 转换为十六进制数字并输出</span><br>        System.out.println(Integer.toHexString(number));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906104624146.png"></p><h1 id="六、原码、反码、补码（了解）"><a href="#六、原码、反码、补码（了解）" class="headerlink" title="六、原码、反码、补码（了解）"></a>六、原码、反码、补码（了解）</h1><p>原码、反码、补码是计算机中表示数值的一种方式，主要应用于计算机的加减运算。</p><p>原码是最基本的表示方法， 直接将数值以二进制的形式表示，原码就是符号位加上真值的绝对值，即第一位表示正负号（0为整数，1为负数），其他位表示值。</p><p>例如：<code>127</code>的原码是<code>01111111</code>，<code>-127</code>的原码是<code>11111111</code>。</p><p>原码的优点就是直观，容易理解。</p><p>反码：正数的反码就是其原码本身，负数的反码在其原码的基础上保持符号位不变，其他位取反。</p><p>例如：<code>-127</code>的反码是<code>10000000</code>，<code>127</code>的反码是<code>01111111</code>。</p><p>补码：正数的补码就是其原码本身，负数的补码需要在反码的基础上加1。</p><p>例如：<code>-127</code>的补码就是<code>10000001</code>。</p><p>想深入了解此方面的内容的小伙伴，详见这篇文章：<a href="https://blog.csdn.net/yujinlong2002/article/details/131613494">《原码、反码、补码的基本概念》</a>，我个人觉得写的很棒！</p><h1 id="七、自动类型提升"><a href="#七、自动类型提升" class="headerlink" title="七、自动类型提升"></a>七、自动类型提升</h1><p>前面我们已经讲过了8种基本数据类型，按照数据存储范围来比较：<code>double &gt; float &gt; long &gt; int &gt; short 、char &gt; byte</code></p><p>自动类型提升是指<strong>小范围的数据类型向大范围的数据类型进行转换</strong>。</p><p><strong><code>boolean</code>类型不能进行自动类型提升或强制类型转换。</strong></p><p>例如：<code>short</code>的存储范围比<code>int</code>小，因此，<code>short</code>类型的值赋值给<code>int</code>类型的变量时，<code>short</code>类型的值自动转换为<code>int</code>类型，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:42:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-comment">// short类型自动类型提升为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> s1;<br>        System.out.println(i1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906154452844.png"></p><p>上述案例可以看出，<code>s1</code>赋值给<code>i1</code>的时候并没有报错，原因就在于<code>s1</code>自动转换为<code>int</code>类型的值赋给<code>i1</code>。</p><p>自动类型提升可能存在的特殊情况：</p><p>情况一：<strong>当<code>byte</code>、<code>short</code>、<code>char</code>三者互相参与运算时，默认转为<code>int</code>类型。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：参与运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:45:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下三种运算均为错误写法，因为运算过程中byte、short、char类型的变量num1、num2和ch1会自动提升为int类型进行运算</span><br>        <span class="hljs-comment">// 得到的结果和左侧变量的数据类型不匹配而导致报错</span><br>        <span class="hljs-comment">// byte num3 = num1 + num2;</span><br>        <span class="hljs-comment">// short num4 = num1 + ch1;</span><br>        <span class="hljs-comment">// char ch3 = num1 + num2;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们解除一个错误写法的注释（例如<code>byte num3 = num1 + num2;</code>）。我们可以执行<code>javac</code>命令查询错误信息：</p><p><img src="https://source.icode504.com/images/image-20230906155323864.png"></p><p>情况二：<strong>整数类型向浮点类型转换时，默认后面会带<code>.0</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：整型向浮点类型进行转换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:56:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">// num1由int类型自动提升为float类型</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906155902924.png"></p><p>情况三：**<code>char</code>类型向更高数据范围（例如：<code>int</code>、<code>long</code>等）转换时，以数字的形式输出。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：字符类型char转换成其他类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:00:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// char类型转换成int类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> ch1;<br>        System.out.println(num1);<br><br>        <span class="hljs-comment">// char类型转换成long类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> ch2;<br>        System.out.println(num2);<br><br>        <span class="hljs-comment">// char类型转换成double类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;O&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> ch3;<br>        System.out.println(num3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20230906160250575.png"></p><h1 id="八、强制类型转换"><a href="#八、强制类型转换" class="headerlink" title="八、强制类型转换"></a>八、强制类型转换</h1><p>和自动类型提升相比，强制类型转换正好相反，由大范围的数据类型向小范围的数据类型进行转换，转换格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小数据类型 变量名 = (小数据类型) 大类型数据<br></code></pre></td></tr></table></figure><p>如果我想将<code>long</code>类型的数据转换为<code>byte</code>、<code>short</code>、<code>int</code>类型的数据，由于<code>long</code>是大范围的数据类型，向这三个小范围数据类型转换时需要进行强制类型转换。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换：long类型转换为byte、short、int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:16:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个long类型变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">longValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">108L</span>;<br>        <span class="hljs-comment">// 强制把long类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) longValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 强制把long类型转换为short类型</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) longValue;<br>        <span class="hljs-comment">// 输出short变量</span><br>        System.out.println(shortValue);<br>        <span class="hljs-comment">// 强制把long类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) longValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906111843181.png"></p><p>当然，强制类型转换也会存在如下的情况：</p><p>情况一：<strong>浮点类型转换成整数类型时，会出现精度损失</strong>，即小数点会被截断（不会四舍五入），只保留整数部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：浮点类型转换为整数类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:21:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个double类型变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.06</span>;<br>        <span class="hljs-comment">// 强制把double类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) doubleValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 定义一个float类型变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">5.06f</span>;<br>        <span class="hljs-comment">// 强制把float类型转换为int类型</span><br>        intValue = (<span class="hljs-type">int</span>) floatValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230906112439981.png"></p><p>情况二：<strong>要转换的数字超出目标类型的范围，Java会自动对整数进行溢出处理</strong>，不会得到预期的值。</p><p>例如：定义一个<code>int</code>类型的变量<code>130</code>，将其转换成<code>byte</code>类型，而<code>byte</code>类型的存储范围是<code>[-128,127]</code>，<code>130</code>很明显超出了这个范围，强制转换的结果不会符合我们的预期，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况二：要转换的数字超出目标类型的范围，得到的结果不符合预期</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:28:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个int类型变量，值是超出byte类型的范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">130</span>;<br>        <span class="hljs-comment">// 强制把int类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) intValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://source.icode504.com/images/image-20230906150905591.png"></p><p>很明显，输出结果并不符合我们的预期，而是得到了值<code>-126</code>，接下来我们从底层角度进行分析：</p><p>由于<code>int</code>为4字节32位，每一位是由二进制的0和1表示，因此130转换成二进制数（32位）为：</p><p><img src="https://source.icode504.com/images/image-20230906134926115.png"></p><p><code>int</code>类型强制转换成<code>byte</code>类型以后，只保留后八位，结果如下：</p><p><img src="https://source.icode504.com/images/image-20230906135029377.png"></p><p>得到的<code>10000010</code>是源码，8位的<code>byte</code>第一位是符号位，0表示正号，1表示负号。很明显这个数是负数，表示负数需要先将原码转换成反码，反码变成补码，补码再转换成十进制数字以后就是<code>byte</code>类型的结果。首先我们先将其转换成反码（符号位除外）：</p><p><img src="https://source.icode504.com/images/image-20230906135415985.png"></p><p>将反码加1之后，就得到补码：</p><p><img src="https://source.icode504.com/images/image-20230906135507695.png"></p><p>将<code>11111110</code>转换成十进制数为（第1位是符号位，是负数）：<br>$$<br>-(1\times2^{6}+1\times2^{5}+1\times2^{4}+1\times2^{3}+1\times2^{2}+1\times2^{1}+0\times2^{0})&#x3D;-126<br>$$<br>因此强制类型转换得到的结果是<code>-126</code>。</p><p>情况三：**<code>byte</code>、<code>short</code>、<code>char</code>进行运算时，会被提升为<code>int</code>类型，然后再进行计算**。要想转换成小范围数据类型，需要进行强制类型转换。</p><p>以下写法无法通过编译而报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> byteValue + shortValue;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> shortValue - charValue;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> charValue + <span class="hljs-number">10</span>;<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无法通过编译，因为进行加减法运算时，变量会自动提升为<code>int</code>类型，得到的结果也是<code>int</code>类型，和左侧原有的数据类型不匹配而报错：</p><p><img src="https://source.icode504.com/images/image-20230906142228688.png"></p><p>正确的写法是：将得到的结果进行强制类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-comment">// byte byteResult = byteValue + shortValue;</span><br>        <span class="hljs-comment">// short shortResult = shortValue - charValue;</span><br>        <span class="hljs-comment">// char charResult = charValue + 10;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (byteValue + shortValue);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) (shortValue - charValue);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (charValue + <span class="hljs-number">10</span>);<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合预期：</p><p><img src="https://source.icode504.com/images/image-20230906142626685.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之二-Java基础知识</title>
    <link href="/posts/3.html"/>
    <url>/posts/3.html</url>
    
    <content type="html"><![CDATA[<h1 id="对第一个Java程序的思考"><a href="#对第一个Java程序的思考" class="headerlink" title="对第一个Java程序的思考"></a>对第一个Java程序的思考</h1><p><a href="https://zhuanlan.zhihu.com/p/645437868">前面</a>我们已经写过一个使用Java语言输出四行诗句的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="外层结构——类"><a href="#外层结构——类" class="headerlink" title="外层结构——类"></a>外层结构——类</h2><p>观察这段代码的结构，它的外层是由<code>public</code>、<code>class</code>、文件名称（即<code>Huanghelou</code>）和一对大括号组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>public</code>和<code>class</code>是Java内置的关键字（本文后面会讲到关键字），也就是说，这两个关键字是Java语言本身就规定的，小白在写代码的时候不能随意更改（例如：将<code>public</code>写成<code>Public</code>，<code>class</code>一不小心写成了<code>cLass</code>等都是错误写法）。</p><p><code>class</code>本意是“类”，<code>class</code>后面的标识符<code>Huanghelou</code>是当前这个类的名称，也就是说，这个类的类名是<code>Huanghelou</code>；</p><p><code>public</code>是权限修饰符（后续文章会讲到这个关键字的具体使用，这里小白有一个印象就可以了）。</p><p><strong>一个Java文件至多只能有一个由<code>public</code>修饰的类，并且这个类的类名必须和<code>Java</code>文件名保持一致。</strong></p><p>由上述规定我们可以推断出：不由<code>public</code>修饰的类不必和当前java文件名保持一致。这里我创建一个名为<code>MyThirdProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行了<code>javac</code>命令时，我们发现它并没有生成<code>MyThirdProgram.class</code>文件，而是生成了<code>Dog.class</code>文件。这是因为前面我们的<code>MyThirdProgram.java</code>文件中只有一个<code>Dog</code>类，并不包含由<code>public</code>修饰的<code>MyThirdProgram</code>类。</p><p><img src="https://source.icode504.com/images/009.gif"></p><p>当然，我们的代码中既可以由<code>public</code>修饰的类和不由<code>public</code>修饰的类共存。这里我创建一个名为<code>MyFourthProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFourthProgram</span> &#123;<br>   <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>java</code>命令进行编译，此时就会出现<code>MyFourthProgram</code>、<code>Cat</code>、<code>Sheep</code>和<code>Duck</code>四个<code>.class</code>文件：</p><p><img src="https://source.icode504.com/images/010.gif"></p><p>由此可以说明，一个Java文件中，如果有多个类，那么对这个Java文件执行编译命令时，就会生成多个相对应的字节码文件。</p><h2 id="内层结构——main方法"><a href="#内层结构——main方法" class="headerlink" title="内层结构——main方法"></a>内层结构——main方法</h2><p>在<code>MySecondProgram</code>类的内部，包含一个这样的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>前三个<code>public</code>、<code>static</code>、<code>void</code>是Java的关键字（固定写法）。这个结构在Java中称作方法，这个方法称作<code>main</code>方法（因为方法名叫做<code>main</code>方法），**<code>main</code>方法是Java程序的入口**，也就是说，程序在运行时，会先执行<code>main</code>方法。</p><p><code>main</code>方法必须定义成<code>public static void main(String[] args) &#123;...&#125;</code>的结构，这是Java的规范。</p><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><p>这段代码中，按行输出的语句是<code>System.out.println();</code>。也就是说，Java在执行这条语句的时候，会向控制台输出内容并换行。</p><p>当然，我们也可以选择不换行输出，<code>System.out.print();</code>语句就能保证输出的内容不换行。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWithoutLine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是使用<code>javac encoding PrintWithoutLine.java</code>和<code>java PrintWithoutLine</code>命令的执行结果：</p><p><img src="https://source.icode504.com/images/image-20230829070237080.png"></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是用来向代码中添加解释和说明，编写注释可以让我们更好地阅读和理解代码。在代码上写注释是一个好习惯，今天我写了50行的代码，但是过了三个月以后，如果我再看这段代码，会有种不知所措的感觉：这代码是我写的吗？它要实现的功能是什么？如果在编写代码以后写了注释，以后在阅读代码的时候这种窘境会大大减少，提高我们对代码的理解:smile:。</p><p>注释不会影响程序的运行，Java编译器会将注释忽略。</p><p>在Java编程语言中，有三种类型的注释：<strong>单行注释</strong>、<strong>多行注释</strong>和<strong>文档注释</strong>。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>单行注释，顾名思义，就是只能在某一行上写注释，使用两个斜杠<code>//</code>表示，格式为：<code>// 单行注释内容</code>。</p><p>以前面写过的代码为例，如果我想在输出语句上方中添加一句注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出一行内容</span><br>System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p>当然，你也可以在这个输出语句后面所在行写注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<span class="hljs-comment">// 输出一行内容</span><br></code></pre></td></tr></table></figure><blockquote><p>扩展：《阿里巴巴Java开发手册》对单行注释内容的说明</p><p>1. <font color='#EE0000'>【强制】</font>方法内部的单行注释，在被注释的语句上方另起一行，使用<code>//</code>注释。</p><p>也就是说，在我们日常开发的时候，编写注释时，推荐使用上述第一种注释风格。</p><p>2. <font color='#EE0000'>【强制】</font>注释的双斜线与注释内容之间有且仅有一个空格。</p><p><font color='#39C5BB'>正例</font>：</p><p><img src="https://source.icode504.com/images/image-20230829225430559.png" alt="image-20230829225430559"></p><p>3. <strong>【推荐】</strong>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p><p><font color='orange'>反例</font>：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></blockquote><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释使用<code>/* */</code>进行表示，在<code>/*</code>和<code>*/</code>之间你可以写多行注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是一段多行注释</span><br><span class="hljs-comment">println()方法用于换行输出</span><br><span class="hljs-comment">print()方法用与不换行输出</span><br><span class="hljs-comment">*/</span><br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>多行注释之间不要使用嵌套。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*/*这是一段多行注释，这样嵌套多行注释的方式是错误的*/</span>*/<br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样嵌套是错误的。以上述代码为例，Java编译器认为多行注释最开头的是<code>/*</code>，能和它配对的是最近的<code>*/</code>，也就是说，这段多行注释的内容是：<code>/*这是一段多行注释，这样嵌套多行注释的方式是错误的</code>。最外层的<code>*/</code>无法识别为多行注释符号而导致编译错误。</p><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>文档注释是Java特有的一种注释，它用于对类、方法、变量等进行说明。</p><p>文档注释使用<code>/**</code>作为开头，<code>*/</code>作为结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类中由一个main方法组成</span><br><span class="hljs-comment"> * 这个类的主要作用是通过控制台输出两句话</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * main方法用于输出两行诗句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文档注释常用标签"><a href="#文档注释常用标签" class="headerlink" title="文档注释常用标签"></a>文档注释常用标签</h3><p>在这段代码中，我们发现类上有一些特殊标签，它们以<code>@</code>作为开头，后面跟随一个指定的名字，例如：<code>@author</code>、<code>@version</code>等。</p><p><code>@author</code>用于指明当前代码的作者或所属组织，如果有多个作者可以加多个此标签，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zhangsan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Lisi</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@version</code>用于指明当前代码的版本号，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.1.0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@return</code>标签作用于方法的文档注释上，表明当前方法的返回值类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 不返回任何内容，因为返回值类型为void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@param</code>标签用于描述方法的参数信息。以<code>main</code>方法为例，它的参数是字符串数组类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@throws</code>和<code>@exception</code>标签用于描述方法可能会抛出的异常，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException 可能会抛出文件IO异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用javadoc命令生成网页风格的文档"><a href="#使用javadoc命令生成网页风格的文档" class="headerlink" title="使用javadoc命令生成网页风格的文档"></a>使用javadoc命令生成网页风格的文档</h3><p>我们可以使用<code>javadoc</code>命令对代码中的文档注释进行解析，生成一套网页形式的文档。命令格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javadoc -d 文件路径 -encoding UTF-<span class="hljs-number">8</span> --label1 -label2 文件名.java<br></code></pre></td></tr></table></figure><p>这里的<code>label1</code>和<code>label2</code>是指文档注释中由<code>@</code>开头的标签，如果执行命令中写了那个标签，就会在网页中显示。当然，你的<code>java</code>文件中写了多少个不同类型的标签，你就可以在命令中写多少个<code>--标签</code>。</p><p>以上述内容为例，如果我想输出所有文档注释和标签到网页，可以执行如下命令：</p><p><img src="https://source.icode504.com/images/image-20230829231347951.png"></p><p>此时我们进入<code>G:\Code\MyWorkspace\day02\MyFirstDoc</code>路径中，我们可以看到如下内容，直接使用浏览器打开<code>index.html</code>：</p><p><img src="https://source.icode504.com/images/image-20230829231503903.png"></p><p>此时我们就能在网页中更加直观地看到我们写的文档注释内容了：</p><p><img src="https://source.icode504.com/images/image-20230829231623291.png"></p><h3 id="阿里巴巴Java开发手册关于文档注释的规范"><a href="#阿里巴巴Java开发手册关于文档注释的规范" class="headerlink" title="阿里巴巴Java开发手册关于文档注释的规范"></a>阿里巴巴Java开发手册关于文档注释的规范</h3><blockquote><p>1. <font color='#EE0000'>【强制】</font>类、类属性、类方法的注释必须使用 Javadoc 规范，使用<code>/**内容*/</code>格式，不得使用<code>// xxx</code>方式。</p><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><p>2. <font color='#EE0000'>【强制】</font>所有的类都必须添加创建者和创建日期。</p><p>说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有区别，而日期的设置统一为 yyyy&#x2F;MM&#x2F;dd 的格式。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/08/31</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>3. <strong>【推荐】</strong>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p><p><font color='orange'>说明</font>：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></blockquote><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Java关键字是由Java语言预先定义的保留的标识符，关键字不能用作变量名、方法名、类名等。这些关键字在Java语言中具有特殊的含义和用途，以下是Java常见的关键字（不需要记忆，因为这些关键字的用法会在后续文章中陆续讲到）：</p><ul><li>数据类型相关的关键字：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code>、<code>void</code>。</li><li>流程控制相关的关键字：<code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>、<code>default</code>、<code>for</code>、<code>while</code>、<code>do</code>、<code>break</code>、<code>continue</code>、<code>return</code></li><li>权限控制关键字：<code>public</code>、<code>protected</code>、<code>private</code></li><li>类和对象相关关键字：<code>class</code>、<code>new</code>、<code>extends</code>、<code>interface</code>、<code>implements</code>、<code>this</code>、<code>super</code>、<code>instanceof</code>、<code>static</code>、<code>abstract</code>、<code>final</code>、<code>enum</code></li><li>异常处理关键字：<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>、<code>assert</code></li><li>包相关的关键字：<code>import</code>、<code>package</code></li><li>多线程及同步相关的关键字：<code>synchronized</code>、<code>volatile</code></li><li>序列化相关的关键字：<code>transient</code></li><li>保留字：<code>goto</code>、<code>const</code></li><li>其他关键字：<code>native</code>、<code>var</code>（JDK 10新增关键字）、<code>null</code>（不推荐做变量名）、<code>strictfp</code></li></ul><p><strong>所有关键字的名称全部是小写，不是小写的一定不是关键字</strong>。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>Java中类名、方法名、变量名（关于变量名会在后面讲到）都称作标识符。以前面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的类名叫做<code>MyJavaDoc</code>，方法名称作<code>main</code>。</p><p>关于Java标识符，需要遵守如下规范（必须遵守，否则无法通过编译）：</p><p>1. <strong>标识符由大小写英文字母、数字、美元符号<code>$</code>、下划线组成</strong>。例如：<code>ABC</code>、<code>_MyProgram</code>、<code>$Sheep</code>都是正确写法；<code>-Sheep</code>、<code>ABC+</code>等都是非法的。</p><p>2. <strong>关键字不能作为标识符</strong>。例如：<code>static</code>关键字不可以做类名和方法名。</p><p>3. <strong>Java对标识符大小写是敏感的</strong>。例如：<code>sheepCount</code>和<code>SheepCount</code>就是两个不同的标识符。</p><p>4. <strong>数字不能作为标识符的开头</strong>，例如：标识符<code>4Sheep</code>就是错误写法。</p><blockquote><p>扩展：《阿里巴巴Java开发手册》对标识符相关内容做出如下规范：</p><p>1. <font color='#EE0000'>【强制】</font>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p><font color='orange'>反例</font>：<code>_name / __name / $name / name_ / name$ / name__</code></p><p>2. <font color='#EE0000'>【强制】</font>所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。</p><p><font color='#39C5BB'>正例</font>：<code>ali / alibaba / taobao / cainiao / aliyun/ youku / hangzhou</code>等国际通用的名称，可视同英文。</p><p><font color='orange'>反例</font>：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p>3. <font color='#EE0000'>【强制】</font><strong>类名使用 UpperCamelCase 风格（大驼峰命名方式，每个单词首字母大写）</strong>，但以下情形例外：DO &#x2F; BO &#x2F; DTO &#x2F; VO &#x2F; AO &#x2F; PO &#x2F; UID 等。</p><p><font color='#39C5BB'>正例</font>：<code>ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</code></p><p><font color='orange'>反例</font>：<code>forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</code></p><p>4. <font color='#EE0000'>【强制】</font><strong>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase（除了第一个单词首字母小写以外，其他单词首字母大写）风格。</strong></p><p><font color='#39C5BB'>正例</font>：<code>localValue / getHttpMessage() / inputUserId</code></p><p>5. <font color='#EE0000'>【强制】</font>杜绝完全不规范的缩写，避免望文不知义。</p><p><font color='orange'>反例</font>：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在Java编程语言中，变量是一种存储数据的“容器”，它们能存储各种类型的数据，例如：整数、浮点数、字符、布尔类型等。</p><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><p>变量是内存中的一个存储区域，正如其名：变量，变量存储的数据是可以变化的。</p><p>变量三要素：<strong>数据类型</strong>、<strong>变量名</strong>和<strong>变量值</strong>。在内存中的关系图如下：</p><p><img src="https://source.icode504.com/images/image-20230901225644712.png"></p><p>变量主要用于在内存中存储数据。</p><h2 id="定义并初始化变量"><a href="#定义并初始化变量" class="headerlink" title="定义并初始化变量"></a>定义并初始化变量</h2><p>创建Java变量的一般语法是：<strong>数据类型 变量名 &#x3D; 变量值</strong></p><ul><li>变量名可以自定义，但是需要遵守标识符命名规范。</li><li>数据类型分为基础数据类型和引用数据类型，这里举例使用整数类型<code>int</code>，更多关于数据类型的内容详见下一篇文章。</li></ul><p>这里以存储整数类型的<code>int</code>来举例：变量<code>number</code>的值为<code>22</code>，那么可以定义成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>当然我们也可以先定义变量<code>number</code>，在对变量进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> number;<br>number = <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>以下是变量在代码中的使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVariable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 变量的定义和赋值都在同一行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(age);<br>        <br>        <span class="hljs-comment">// 先定义变量，再为变量进行赋值</span><br>        <span class="hljs-type">int</span> number;<br>        number = <span class="hljs-number">22</span>;<br>        System.out.println(number);<br>        <br>        <span class="hljs-comment">// 变量是可以变化的：给number再次赋值为24，这个值会将原有的22进行覆盖</span><br>        number = <span class="hljs-number">24</span>;<br>        System.out.println(number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://source.icode504.com/images/image-20230904071419878.png"></p><h2 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h2><p>1. <strong>变量必须先声明，后使用。</strong>凭空出现的变量是无法通过编译的。以下是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    number = <span class="hljs-number">1</span>;<span class="hljs-comment">// 编译不通过，因为number并没有被声明</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2. <strong>使用变量名来访问这块区域的内存数据</strong>。以上述<code>MyVariable</code>类为例，当我们输出结果的时候，并没有直接使用变量值<code>20</code>和<code>22</code>进行输出，而是使用变量名<code>age</code>和<code>number</code>进行输出，因为通过变量名可以访问到这块区域的内存，存储的值是多少。</p><p>3. <strong>变量的作用域：作用域在最近的外层大括号内，变量只有定义在作用域内才有效</strong>。以上述<code>MyVariable</code>类为例，变量<code>age</code>和<code>number</code>的作用域只能在<code>main</code>方法中，因为两个变量最近的外层大括号就是在<code>main</code>方法的范围，出了<code>main</code>方法会导致Java将无法识别这个变量而出现编译错误。</p><p><img src="https://source.icode504.com/images/image-20230901224447651.png"></p><p>4. <strong>同一个作用域内，不能定义重名的变量</strong>。下面代码是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">29</span>;<span class="hljs-comment">// 错误写法，因为作用域内只能定义一个名为number的变量</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 8安装配置教程（Windows版）</title>
    <link href="/posts/1.html"/>
    <url>/posts/1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下JDK 8如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>以下两种方式二选一下载即可：</p><h2 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h2><p>请选择任意一个链接，选择任意一个安装包下载即可：</p><table><thead><tr><th><a href="https://pan.baidu.com/s/1FjQlCUulceJWOQP96qQvjQ?pwd=mclj">点击下载</a></th><th><a href="https://pan.baidu.com/s/1K4gR2k152JWimdxEADvp2g?pwd=1024">备用下载1</a></th><th><a href="https://pan.baidu.com/s/1-KFO-_GQOsF2M-PVzKt24w?pwd=1024">备用下载2</a></th></tr></thead></table><p><img src="https://source.icode504.com/images/image-20240101131122731.png"></p><h2 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h2><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/downloads/archive/">点击进入</a></p><p><img src="https://source.icode504.com/images/image-20240101131317529.png"></p><p>2. 找到以Java SE Development Kit开头的下载列表，找到64位的版本版本下载：</p><p><img src="https://source.icode504.com/images/image-20240101132604565.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://source.icode504.com/images/image-20240101133458956.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://source.icode504.com/images/image-20240714131003147.png"></p><h1 id="二、安装JDK（这里我使用的版本是JDK-8）"><a href="#二、安装JDK（这里我使用的版本是JDK-8）" class="headerlink" title="二、安装JDK（这里我使用的版本是JDK 8）"></a>二、安装JDK（这里我使用的版本是JDK 8）</h1><p>1. 双击文件，开始安装：</p><p><img src="https://source.icode504.com/images/image-20240101134018241.png"></p><p>2. 点击<strong>下一步</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314125453675.png"></p><p>3. 修改安装路径（如果你是新手小白，可以不执行这一步操作，直接跳转到第5步），点击<strong>更改</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314130028313.png"></p><p>4. 在新建一个路径。为了避免后续出现问题，创建路径时，请不要JDK安装位置放在有中文字符的路径中。选择当前路径，点击确定：</p><p><img src="https://source.icode504.com/images/image-20240101134722779.png"></p><p>5. 点击下一步：</p><p><img src="https://source.icode504.com/images/image-20240101134758455.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://source.icode504.com/images/image-20230314131058441.png"></p><p>7. 安装过程中，出现了一个JRE安装（前面我们安装的JDK已经包含了JRE，可以选择不安装，如果不需要安装，出现下图窗口后直接点击右上角关闭即可，直接跳到第11步）。点击<strong>更改路径</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314131446348.png"></p><p>8. 新建一个路径，建议不要出现中文字符，然后选中此文件夹，点击确定：</p><p><img src="https://source.icode504.com/images/240101001.gif"></p><p>9. 点击下一步：</p><p><img src="https://source.icode504.com/images/image-20240101140732789.png"></p><p>10. 安装中，安装完成以后此窗口会自动消失：</p><p><img src="https://source.icode504.com/images/image-20230314132647334.png"></p><p>11. 点击关闭，JDK安装完成。</p><p><img src="https://source.icode504.com/images/image-20230314132930503.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手或者已经安装了其他版本的JDK，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://source.icode504.com/images/image-20240101141148295.png"></p><p>2. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://source.icode504.com/images/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击高级系统设置：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://source.icode504.com/images/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://source.icode504.com/images/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134716166.png"></p><p>5. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://source.icode504.com/images/image-20230314134919881.png"></p><p>6. 配置安装路径，按照图示操作即可：</p><p><img src="https://source.icode504.com/images/image-20240101141636264.png"></p><p>7. 双击Path进入：</p><p><img src="https://source.icode504.com/images/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://source.icode504.com/images/image-20240101141809160.png"></p><h1 id="四、检查JDK是否安装成功"><a href="#四、检查JDK是否安装成功" class="headerlink" title="四、检查JDK是否安装成功"></a>四、检查JDK是否安装成功</h1><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定：</p><p><img src="https://source.icode504.com/images/image-20230314140351859.png"></p><p>2. 输入<code>javac</code>和<code>java</code>，会出现下图内容：</p><p><img src="https://source.icode504.com/images/image-20230314140519091.png"></p><p><img src="https://source.icode504.com/images/image-20230314141144190.png"></p><p>3. 输入<code>java -version</code>，出现下图信息表示JDK安装成功：</p><p><img src="https://source.icode504.com/images/image-20230314140629530.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
      <category>Windows</category>
      
      <category>编程语言</category>
      
      <category>Java/JDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之一-第一个程序</title>
    <link href="/posts/2.html"/>
    <url>/posts/2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：</p><ol><li>本文中包含实际操作，需要安装JDK。如果需要安装JDK，请按照这篇文章的步骤进行安装：<a href="./1.html">点我查看JDK安装教程</a></li><li>小白可以多看几遍这篇文章，多敲几次代码。</li></ol></blockquote><h1 id="一、第一个程序"><a href="#一、第一个程序" class="headerlink" title="一、第一个程序"></a>一、第一个程序</h1><p>前面我们已经安装了JDK，接下来就是写一个属于自己的Java程序了。</p><p>用什么写自己的Java程序呢？有人说用IDEA、Eclipse等集成开发工具。其实，作为小白，我们在最初阶段其实没有必要安装这些繁重的工具，使用记事本写代码就可以。</p><h2 id="1-1-准备操作"><a href="#1-1-准备操作" class="headerlink" title="1.1 准备操作"></a>1.1 准备操作</h2><p>创建一个文件夹，保证自己以后学习过程中的代码都存放到这个文件夹中，养成好习惯。为了避免后续出现问题，文件路径中尽量不要包含中文字符。这里我新建的文件夹名是<code>MyWorkspace</code>，如下图：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213200514.png"></p><p>打开<code>MyWorkspace</code>文件夹，今天是我们第一次敲代码，就在这个文件夹中创建一个<code>day01</code>文件夹，如下图所示：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213716922.png"></p><p>打开<code>day01</code>文件夹，点击上方的<code>查看</code>，勾选<code>文件扩展名</code>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213901017.png"></p><h2 id="1-2-编写我的第一个Java程序"><a href="#1-2-编写我的第一个Java程序" class="headerlink" title="1.2 编写我的第一个Java程序"></a>1.2 编写我的第一个Java程序</h2><p>做完以上的准备工作以后，我们就可以写自己的Java程序了！</p><p>在文件夹空白处，鼠标右键点击新建，<strong>新建文本文档</strong>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214256942.png"></p><p>此时新建完成以后，我们选中这个文件，鼠标右键点击重命名，将文件名修改成<code>MyFirstProgram.java</code>。我们此时需要留意下这个文件名<code>MyFirstProgram</code>，后续它有大用处！</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214530788.png"></p><p>出现这个弹窗时，点击“是”即可。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214608048.png"></p><p>鼠标右键点击这个文件，打开方式选择记事本：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214844597.png"></p><p>请按照下面代码内容，一个一个字母符号敲进记事本中（不要图方便直接复制代码，实际操作才能看出自己的问题）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstProgram</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;This is my first Java program!&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215450746.png"></p><p>点击左上角文件，然后点击保存（或者按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存）。到这一步，我们的代码就已经写好了。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215630094.png"></p><p>点击上面的路径，输入<code>cmd</code>，进入命令行：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/003.gif"></p><p>编译这个java源程序：</p><ul><li>编译命令格式：<code>javac 文件名.java</code>。</li><li>如果我想编译这个<code>MyFirstProgram.java</code>文件，就需要执行的命令是：<code>javac MyFirstProgram.java</code></li></ul><p>操作步骤如下图所示，上述命令执行完成后，此时文件夹中有一个<code>MyFirstProgram.class</code>文件，这个是Java编译器执行编译命令以后生成的二进制字节码文件（直接使用记事本打开是乱码文件）：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/004.gif"></p><p>编译命令完成后，就需要运行这个这个Java程序了。运行命令的格式是：<code>java 文件名</code>。注意，这里不能加<code>.java</code></p><p>以<code>MyFirstProgram.java</code>文件为例，运行命令是：<code>java MyFirstProgram</code>。此时命令行就会输出在源文件中编写的内容：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/005.gif"></p><h1 id="二、编写第二个Java程序"><a href="#二、编写第二个Java程序" class="headerlink" title="二、编写第二个Java程序"></a>二、编写第二个Java程序</h1><p>看到这里，有小伙伴会问：我想输出中文可以吗？输出多行内容可不可以？</p><p>我的答案是：<strong>当然可以</strong>！结合上述问题，给大家再举个例子：比如我想通过Java程序输出唐代诗人崔颢的《黄鹤楼》</p><center><font face="楷体">昔人已乘黄鹤去，此地空余黄鹤楼。<br/>黄鹤一去不复返，白云千载空悠悠。<br/>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br/>日暮乡关何处是？烟波江上使人愁。</font></center><p>我们完全可以按照上述的步骤来操作。</p><p>首先，新建一个Java源文件，这里我将其重命名为<code>Huanghelou.java</code>，操作如下图所示：</p><p><img src="https://source.icode504.com/images/778e99d52ead3ffc1494aa5fa2c84815.gif"></p><p>通过记事本打开这个Java源文件，先编写出这个代码的大体框架：</p><p><img src="https://source.icode504.com/images/56e5b8362fb48d1b44cd8360f1e97bd4.png"></p><p>因为我们要输出4行诗句。因此要在Java的<code>main()</code>方法中编写4行输出语句，效果如下图：</p><p><img src="https://source.icode504.com/images/03903e6f6ea03f111fa5656a6d5f8c6a.png"></p><p>编写完Java代码以后，点击在左上角<code>文件</code>，然后点击<code>另存为</code>，下方选择<code>所有文件</code>，编码格式选择<code>UTF-8</code>：</p><p><img src="https://source.icode504.com/images/217121fea13549089730a5d1b0c1813d.png"></p><p>此时会弹出一个窗口，点击是即可。完成后关闭记事本窗口。</p><p><img src="https://source.icode504.com/images/70c8a6fd14dabd9b31c5cba522b44576.png"></p><p>此时按照上述步骤，我们需要对<code>Huanghelou.java</code>这个文件进行编译。</p><p>点击上方文件路径，输入<code>cmd</code>，打开命令行窗口，操作如下图所示：</p><p><img src="https://source.icode504.com/images/f99a239f91a8142935e4dfb0a61d87ba.gif"></p><p>执行编译命令：<code>javac Huanghelou.java</code>，执行此命令以后，命令行会提示以下错误信息：</p><p><img src="https://source.icode504.com/images/9577d2565ee1e910fe91e7e8f810343f.png"></p><p>这里解释一下出现编码GBK的不可映射字符的问题：由于我们之前编写的Java源文件在保存时的编码格式是<code>UTF-8</code>（如下图所示）</p><p><img src="https://source.icode504.com/images/b5c4dffc411309bbe750302144d0dc51.png"></p><p>而命令行所支持的编码格式是<code>GBK</code>，这就造成了Java源文件的编码格式和命令行的不匹配，从而产生上述问题了：</p><p><img src="https://source.icode504.com/images/2b5ee9519680233b40ed4fe186c16759.png"></p><p>解决办法：只需要在编译时，告诉Java编译器我们需要将这个Java源文件编译成<code>UTF-8</code>的即可，命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac -encoding UTF-8 文件名.java<br></code></pre></td></tr></table></figure><p>以这个文件为例，我们就使用<code>UTF-8</code>的编码格式进行编译：<code>javac -encoding UTF-8 Huanghelou.java</code>，执行此命令以后，就不会提示上述错误信息了。</p><p><img src="https://source.icode504.com/images/b9682af7a3aa2b7d0d6d30a0a9628d49.gif"></p><p>这时我们再运行这个Java程序：<code>java Huanghelou</code>，就能看到前面我们在前面的输出了：</p><p><img src="https://source.icode504.com/images/baa82be9da0988e31e49e8bee62d0a40.gif"></p><h1 id="三、注意点-常见问题"><a href="#三、注意点-常见问题" class="headerlink" title="三、注意点&amp;常见问题"></a>三、注意点&amp;常见问题</h1><p>在编写第一个程序的时候，我们需要注意的问题：</p><p>1. <code>class</code>后面的名称要和文件名保持一致，这里我已经提及3遍了，就是希望能引起小白的重视：</p><p><img src="https://source.icode504.com/images/8780e6a2bb87b9992c5495d90e52c543.png"></p><p>2. 除了<code>System.out.println(&quot;&quot;);</code>语句的双引号中的内容自定，代码中其他地方都要使用英文符号。</p><p><img src="https://source.icode504.com/images/b85d43444c690d261a46bfa707a67ea2.png"></p><p>3. 输出语句后面的分号不要忘记（这也是许多小白在写代码最容易忽略的地方）</p><p><img src="https://source.icode504.com/images/cd65434a9f37cc29e29c8a387e331cef.png"></p><p>4. 大括号、中括号、小括号一定要配对出现。写代码的时候不要忘记！</p><p><img src="https://source.icode504.com/images/1aecf19e933a23c4a3a7a36834f4793d.png"></p><h1 id="四、小练习"><a href="#四、小练习" class="headerlink" title="四、小练习"></a>四、小练习</h1><p>使用Java程序输出三句话，文件名为<code>Baiyexing.java</code>，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">《白夜行》的作者是日本作家东野圭吾<br>这是一部很棒的悬疑小说<br>你知道白夜吗？明明是夜晚却有太阳，照得夜晚像白昼一样明亮，就是说一直这么犹豫不前的话，人生就毁了。<br></code></pre></td></tr></table></figure><p>输出效果如下：</p><p><img src="https://source.icode504.com/images/8141a3e5fa2b0379996c49b254eb613e.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
