<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue的数据代理</title>
    <link href="/posts/2506480934.html"/>
    <url>/posts/2506480934.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="baf2853f2978b673e70c1236a9a7136184c79bde6ced4390211b0eea25135580"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVVM模型</title>
    <link href="/posts/1880068029.html"/>
    <url>/posts/1880068029.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="55870b52fa2c074eb67a5b09a473607f44120d149f3b28be4d7909a040a9cc0e">4630436162ade97ba2718b7d0c4b3b63fc30d55ecb68b37695ab43c60fa0914f1658cb98c020de7b5386e12cf71520479660a0390ddd478d6547f4c024f8371b8785eef895622036eeb20fa45f588dff7a6d15d932f8c6e2d45126ade179efcefb063c0eebde682c1264e4f0a1e5c4d3b4531687783722eee34b6c4264983bc4a4680b725819a919eee868fa44e413cf6e2956979cb466734b49814a6f61da20c0a8d73f2e140143326436e41f10082fd9f343b8b19de4ea07fecb62ec3c62fca02a7d55ddecdea1e89f2ee22967a3082cb118f88f788a12b953ae87c95e2144b679371933b239c65cb68df81147aea5052a3ad0c778a99cd6783cd5ddb662f26c86fa18ee0faab4570559b32add65db25ca556992ba1938237a068ed789c632bc4346de2920c250acb47bb9f75d522e7a581f5b45eca061c5676a1d1641d30fca2df5d70dbc014632c4d9028c114c876df94e1f26673fc3d788bffabf344a32f2c3dff30db439dcca478819076e7077e174749fdf597d30fa29b1d8781befd063dee8b52ee943d11cec6c14d3d65f0de15eee501ea21141e669974272aafcbda9b5ecec01b859fd8424e82786a4d2ef4dd3afbda93b25bbfb3769d8507524c3b192597dcae1de780b635d77aeed100a7c3a5ca8f9f68d9fcebb508c6ee53369c8acee27b9f690e361a6eefdbd05a0b2300308935d089d6ef2b17f511a650a8c44b0f3c7b8595de6a6111e182bda17e7022834764854e5f3b7bc4167983b93453b1e5bc9a0857205e3070a63b94062b2fb308e367dad8c214ebc754017eda02e74bd4099b62967d7fdb37df213e8bef88f11c1c31dbc93ad4e18bb1a0b31a162a5b901f91d34fef00bc1ed8304b8e2fb91c86e0c3ba4592a6bbde1ed0f1c3e33d2a3a8ddc707e90274a44e4c896d4e7d710e12dbf7756c1c5237379902308ea3fafd534d9cbcd72b5d4eac74751c5491d70cffb25fc079b481d0244514782a490ff6474228c4b62c1f84fd9568d5c3b41beaf1eeae4beeac5e52e0968772d17af0e36607c8e6aa162a63faaf0639f1bd30787a17973d5bf45ba374db2fe6f54ff389973fc575f5de54e3e3c36c29f0284022a35e338c956e20e87c6e28332cc4225fbd7f84a0f3ea43c9a4f290ca0af0f2c7e5cc0a9937ba55d3a511de54bd6ae4592baf871234bb38e64cfb8ccb49a95bb7db5f83ee6e7114de41277cdd092b6cb52ee666f2d5c42398aa5aaf783fc3feeada8165eebe52ef7e86e80183ad9f39de3ae444df11c339fb973ceeded5bae9e457ea46764c7cefaeb1561cc10d6b41cbc3438a5f8c0714dee4b1b071a22d5eb233d6cfdea0e3ba75353de3dbacfc4f3f8f34c4ece33313884858b454fdbe10cf11a986a9d6ad489ffadfb02a9e5f16e6db85587d782acafb2ae8c15435671fe346eea10f34fbbe13bfc499c1b8fb8c4f864c9093658503f4f8e560134dea4fdd872f237b69304645a036c2b04ac94fe20fe844eff772018b6098ece81aa54e41d8584200a715047336320769598a32be06b7e1f210bbcf70b422a837b3251d91d0e3cedafa34cb9640f3f58eaea20f49a86c5893b7acb563378e4308eaacdbbbbac476ccc7a8c82f132e44215720edd415a57dc3fb76a6e8c3bdc3d8bae26cb5d3414192bde88a284df19bf95a168b2ce213dbcb9222047cd6c3a76681c18a6f0b7168e9e102d8db4823b1c138e8dd2f0a01fa920113437d2ac860b3ae26e43669807d8e74f76fe6ed3aea745be120c034dc7aa537f127a7b01fe2d34390d1cbf1dfb5f3ac502597f2e54b3930770adeb548345a9d71cfd0a4f2df2f40fb7e3471db1a8c7b60bf41ebbf4b5642accff34d85d1fb3b017765b6c3155e4270c584f9560346218aea71e56a17288545d27ea7013d778b88071ad55529f444434783bafe6b3ed6930eb46b55536ef4fa53742d291877b2cb6a0f5b0e2e77246c49478a413f6d448e2352776881dcf38a327b0dbabb0b5b9feb98cad816bbcbca836ed78a514b50bed39bfefa4f85219ce6da5b0ca13d1b55537ee847bae2dc8e1f2d30e49835dc830460980bd53b87ef4e4c73becc253121d2d65f5d11959e3b4c7ee6a0490061804ae776ab3f98b7aae6952746f06b8d8297f3b731a2b0bd1e7df77a0d69630b56d96f6c6c5f4f346d4f52e21c889425be6c8616017971b76b211f67ae948d1393189964cf79500ab8bb12668ddd76f292e9a0e81b8ad5a3c312be13cbe86168d460806c2cf4a5d10716ac9a48f310a3366a6e18d5f7f50c2ff893e317ccc1eb98a17a8598aeb86e551f6ce486e9d53227158dd33ac7b508b7c69d51a4e306b7f4c09e494fedd5f48eef697e976bdeed3c794a808f484b13a9d33ca0a86f31ef2997486abe3944314b49e84c39456f1eb655d22f83057a6c4a951f2aaea979a303ba3294da27c910a9348c9028ce3218f28fc3e725a2ba24bfcf3cb054fb5473a770051b6df7428b6d4d48283d7a05b78d41944758a8199249a61708247f2816823717a936c70c118cee550f3e749ad34fad91ce57ecd1fb64ece516f0bd79a45785c55c01a4160fd948c9739d754e9334598a8d91e9bdb94b396ba035be3eec53fef2fa98dc2ee92d71806720b4a76a150cf52357fab4d737e433604b8e96c2670b683839c49b37f792c36fd3b2a7a93c4eb9131f50b2888412c72055b7edf7f9c3d84421e0ddc558cdb294ead85c172954134f90a232ca9b9ed566d1b50bf6271d9c91a139f6a01b0ce5cba863ae2acaf0953c529adb2d987f3abf8e38b49098a4832c958de3840fc7ff992b13ce813afa08ec5188461259b4985d2a67eb2f54bdb88ba0444e87a7c9f45882cf3ff4ad18e0d8ced06a8aeb09dafd2cd815190c890d4aca46028bd5c51bc0ac506687eff0552af76131bd171d5dc8fc3672d18a92ea52f3aec0c4275c3e322312ca09a5f99ce9f2222ea4b876fd2ead18a54771d41b79ea4f573ca38b830784ab4a14e5d36ce273f8d5987328c08840758ee571334e30b7c1e99a8537594c4e9c7e39eb8002ced6dfce03161abfaf1f9df8976a9381de07f4686ebec53f95e9a0e6b5268f08552953d704a334547989421326ae3781afac1c7e70ea4368bed83e4f2bead21cdd8dcfa831177efe72ce8fd6cf38736adc2a2964a217eabb279455759558006fcbcfa57b242d980703f3720b069833ade103dce0c697f2cb7399f5b5280472a2c2131f6ea0936dc1f298fae03d0c4dfad237f1d664ae51707f4a1918a95baba5ac5d17ee849209cdcccf78f6cf8373208394e2c8220d9852423e5aff30affadcdd69dd8f4c9262751d0280d68c9be3a0abedcbbde4e2dce5226f5682c63f2a4d6d35e720da00b25d4de7ae12c158b54fcd76bc4cb37a7926fbb369cc61bf29928ebba4322690f47efef048463cec83db7865132e3f746c2b668258bc35a97a98eb4237f820eca02565bf8baa6847b0c23e045262cf20781f40c0b8b00504997b93ceb7526c155f3d3112a41a174da49dffc4bda04a9613aa957f330eeccc871a068d3b8c620c2af9d1a170a95b7763064cb04b244aef7e9badc1957ce581a7b673b2869b0645c64cfaff70ada3fe80e92c207fac238a40e87b17cf7c1657b29065488d28edad311774b66a02ae4bac315606d20f4dce481eeba31fac298dcc0101f5b27942793bb1c2d0ac579a6ed83ba35af068d8cce5b266c51ab7796d96700326dc86044f83dee73d88c2d3f07e5524d8f8cc104c0b6ef62de6e6f45b4c92dcd9a1bb7a20848688949b41409bc3be3ba28b12f1f8beb6606429601c75f9e2756b6c66685eb1c740d0422fd0efb064d8d44f4a6e41a3672ab95b13f9719242c9ff8b5954e21d9674169f0c48820d99c2290b98b40df0f81c36f0dcb92c16030b9cbc76c3f24684f94309ad9346585b36a2f375469b33649fbff76d88d74ca6c8976e7850565f068a8dd352341b7bab9cb8d1eed0cd158fbb745e7056c720b4d0548e54fb1d273a147eb11e80c366c342b5982ac4a983467b3cfbe09006dc829b4a6ca53b23c5fb2d47421956e996834504f3fa3ad4aee2e3ed3db3654f7abf100254ad7669</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>el和data的两种写法</title>
    <link href="/posts/2118452631.html"/>
    <url>/posts/2118452631.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b28eba97104d2388fed4b468138c82f4cefafb146da1a9a6d3042ac98cc317c6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue模板语法与数据绑定</title>
    <link href="/posts/910428078.html"/>
    <url>/posts/910428078.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a15bb81df9e5b14534b90ad358a73c25c57d0b54945d9fc03de6b3edfbb4c7c9">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186bc4a31656f31c223643f12a0fcb155d8c4cbca9dfa118de93ad1e2351bca0441b52d928259af26804d747507f009fa954229ddef8ee8fcb9fd028025456aeeab9d9012a88ed150fd0b1351806c07f312d96d7736ebd303793be2bbb626eed9cc950bc936046e3d7427cb1aa32230df54f31f7d9ea1664db3878316c42095da36bcfd7913279ebc1efbb31e715d2729ef30cdb8e56194945b2c18ffb1edfaf55327b68ec790cc4d22d033bd7b90f07d65f95047f4c440937f7b3264e7baf665be5e69395f2a135a901da9d967b7c7f92fc671eb0f37c3ae4afcbe41d53f5ecef8cd0dfe063c7d3bc71f43f6fc21ed7b3f86d4bba4ce8079e714225f006ce93d693eb9783bdcc7d4ef37afa6d705b50d712c9f0d98442bd0265d06515ced1676fb489faabd62a4ab10cedce8cb91bca3793f8d9f4a7f1e221927b09adfe159092e70b3e3d15f5ef1a9a97e5ce01dc8da615f8431775484effa47cc255ed64ce8837a245104a68cd04b051a2a10c708d5e5f71ee449b1b7493e6fc08eb08e232e728ebd8b836be1777d7ae54ddf6d14878ba17854303392c67100d477caae4fd422541977998a8dabd3dec509393db4fa7dc03ef9ef0f94296a68b5c4427e666895d4d21e2ba5ede11530f2c0dbaef25d29b1fcedf6d48a62cd37bd40e0cbf4956db0459b46bad7bfd4ea1976dead58fa3a5bd3d34cda756b165ad77d579bdc5a8d95be4d5fb6ddb93d6b7214e65826f00682860a6499e6b4db6aef590dac5912f5826883ed1c4060a5b6a1e42a1a08207a6e32a37e0e20032acf3d8eb7f987c7a3898a77f2c7553835a0a946fd49d7af541f55241a065b3da30c74fd45c77b08ab9efdc28948c20c6370383545badec603ff66d7cf765aebdd9d00c39198e75a1f0ce3224f885ff1d0cf68c25a60f47efea9375c6427eda075a9067b6b4f3278c14fc6fa8b9eb07194212985efc4687602cab8add813fb42bbd3756148dbd857c9844784051f52324fef34495094aee0ca9db1ff5c93220d2488bd7099383ed750cffefb18b2b61143974d7a7d1efe5a186f273801785b58cc120dd36c621ebec39ec3f9382f44059279643944aa0f42d1b47df42e180d5dc1a163bb543a631dafd67c79577ec31d4bbb7872592a0f72428769cb9ba8b66aade167ac916f7b85195d8c548a47a9ca72b2cb287537b216cbfda27e4edf87e5499daf400af280703b4d7380c2137e630a9afe7126c94b41ce6e6fb99a8e905c45b16cad64a23b3e5eae080a198751b0250f987059493e80cc3afa0f99c2d0b21d90e0b789ebe4435d8d0fd133ad94178dd9fe268c8d332e4b11006e5e99b919c34ea246bff56a570281516f60329d329a2b972fe9567395f598868a1368af01a833476469630b65cc6c58ea55d65b0423e483fd240afd75d6bf6aa5ee931149f6f4826c37512c72a6388d00f9994725dd0304d7df65624edc6fc5b18f17f065008b03d7fcbd9a3b66368ba2aa997a29eb23aff33973b2845bc792ae80b5d0887a10ea34f99513ab50109565469ed835b70133486bf9594a7ad7c0e42d4d5ba44756270c518bfead0a3fffb234c5d94bc825dabfb7d4bff2538d26963d6f042dd845f6a6848c9be31fd84aee3901e8b1e4c11d0983220c84c9c0bb0e9cd8d372a4e1a9c01e2deea95a569f3766db053de7e635e3e5d20a3f2220bde2b4233118acca0aec22604cf100c0bc5f23b33405ec3a9f72095cb459313d2d048ee91e86a0d6538528427b24a794edfe3e497a147356347457ae3323ba2101f47edd202ec3670362f0161ef0eea0245a07a1ad0d718aa33c1632b0f92d8c72f673b5afacf22c7ee7b8daa97c123cd5612a7cd97a181918183f9e2b904bcf8441f23a7387c06b0231872658ad82b09e7edbd2ca8c4182a123b7e1fba081dc5e31256d943dc7c030a0e2a82e14ba6760072835ca678405dd43a254e15f914007692d06c13d3831b2a4278ab2e1d721a1e7ae1066e42f4d472f81d859d37d8b2c1cb3970e93f038b9fc5891ec0a71801159df81d7581f35fc96a00f622cfb5800bbacab53d31c0eb8f917490a166b30f2eb77178d0677e9f1988fc9d81e1e066e9582a26dc4cc536934853cd2dc002e5a86319610ecb3956f4567510a8cd2c46bf19629eb770edab592ecf2121d1212defb084efdf26582ba71e8a442e796b9d635aab59f6a9b75465cb252552070289067c2a70044203ff39f6951a7a6a3356a868ebf94ec54e7833085836a4f59ba110d2a648404eaf4e8e8e9e8ab05cec0f6a0585dceec848ed2ff22638c2934047a3ff1a202f65c65f61467f66d680614fccbb4d8ff0988515b014ce6d64030ad28f80b8d6b13352a2093b030aa9357483c7c70d045749ea0ce3ebd4485c1456bee875785f0665bef8ec841fbc34b2b5e178449eed38c9df7afe06a32c5484eb75be341a626b10b26c532d63b76b8afcfd4f6f1ef54cc2ead450513f337a1b5a94347d1f836b29f4554016d377a68fea645c047d4cc732460e4817e37486f669cd4d142e12c48aec5b41f7808beccf1a8a3102870ce2083db232e15a21372d487e358519e68ceb9a1eb7b59469f5e26d6b0167768962bef1b72b32759609e81b0a7f25429cdf99d9d29b61e44294516d07de452c9932e1e16ea5ee247bb29c1c09afce15f4283ab6ae56aa469a38922d477f5aed11b8702e0f83578d7e4da725238c9092d42836661ba8bf0043415fc767ff16649df3124e5de29574f76be1dfcfb847a5b6ff8b9f32c25003c0dfe3f0336393bfc5d60f924424ce70331e5a5ead065fa0b3ecbce5a9ec479d21b5d03185093111253d2c825e30cb336ab7e10ad664e8b9caaddf783c0d130a62bf6801594c941416b0bdaa82634160b90ef9a25f532b7a93c1697b4624fce63d668c83e7d92fa73acc7772202af26cc063b4768ba2de2f518e2618d16c8cec0111ced466959dea221d48a6fef0a0ae8dd2e97697cccd98af7c873334baf0c3cb99140c46ae809f52fa660cc437a90fdce19384260a54468ebbea3794c55c36a2a9e11606781e987a21bb5a7c998e51fe31b3fd8186545f5bc47da7ab20fd0e1322d20aaf75b6231e97a7873c45072ffe6d96f5353e9f54bb3d4e202e7a78100adeffc6f7e8195ccf64cb1aa3b5b3437c82cd73cf3b161e7f297f4dd6ebfc2460a2edc7000176955952a8c5574b96a7519a7c80db019c55760ab327121353679a26d09018d459422546c0619c629a62490dc24afd0160ea768f9fe39dceda5b17fa824df5a9f74ab937e20bd121f6374385e6f417f595243865254b24d7a82ea712bb2805c3dc0708b53bf256c56b9c67cf134c0f97dc13f4fb57ea305e43a0c16483fabecf177ae095bacf879a4746d39dcfbee2a68c6dc20e9ecd5c57c8783676aecbcbab4fd5deb6fa1e11d03d73cc7df1e8cd46f9c0f5e94e28d2803c81230fe89fce5b0fbd4cf76421461b6aebf82405b5d81a59206bf0542b5ea81358bac9d59e372282e2aae0169076bb202e64e0fd103f5a2b0c07dd5be7ac67eba373b1af4e5e62bdfb3372a1af7dc64202865beb6a2763092e76d6a28e766739aaf44edd8ee8c9dcfa18d6536f5650c4862ac0d34c4d533f974d60d0b26952d460df41463426d31ce633f62091137cb11530bedf9a53103596c8b81e74768d791f6c77afe54db0deb34dcbfcf114847e741adf908d209d24ba1fc1e3b00bfa1bac98a5ea342f397cec887df3f840927815f5e02031ca5a982d26a89949fc214f71f17fbe0a9036156a60ef2f4ffc999d3021dbb26ed7e9bcce97ed135a77383eb9a65ac78a0929cc5baef436a6c30096ad503822df27441f66fa84c859b05ba89fb5c16ccd9a7cb1c262058907fa9c6448b4ea60883450cadaadf04520073dc4e7fc0fa519e39dbc58b023c51cb1296e110cedfb7e2081a7231dbdafb808d19dac9d9a602c464ba0a41d4dd1b77cc8ccf357288540db2ce375841150e5b432c2c2d303740e44574b7f63b1057d03c1791aa63ebf7e9634b91a5ab832055befbcb6c70a8887b92d628ed31016026a96e74b43d6d6244dd6a5c116595d502a29d71a1f1e0f1bad6e73b44497de26a19ee87de5c5920f505f1919e89498b9d317f8d8926e21eccf873c9c55a899a4e66cd54763eed64ae9a8f6050fc707d26252bd4c422b6e5775ef1ffabd00e993c9163510560dbb05862c0dabe2574b17c2f17f2b059bca48c6b80cc52c06b3e3f134f129fd9d501a38e3af3013dd4398a29cea1ffe5504ccb445a2cda88f0fdaadf699fc925d2fd11d70d9c6090372af09ce282a31e71516c3e98f11b550584d1783a2a361cc7e55f2f32a1f22391efb626ff6f3400fa31182d44d4d85907132dc1f0154d873e2625ff750b3e8e3f55447c8862a65c4ec86e93e2fcb8882797e03a3a4586dae489350575117e493146dad72c52d1a3e301dc6832d60ad1377f5c5c2a6f448e7146ad91a4a16d03b962913e6fff05fb9b2df21228d282f88b81075ca2bb0b367343e695b19262d16d3685d05476f963af15a20080bfbce12c59c84d83300439d41ebb1f8b095b43bd6d1cfad51dbc1877b29971a7fe34cffd8902a4f31f642950e6b3d384306e329fe8ad7dd9a36f5b44cef9b0eba79be3780cf32e0ef0377918b2b6507c4a1d156d792eb007fe51f3e6118fa78dff85aadbd1585331f5f6d29a186f75517f2926c70a37143e6224974d91defbc8f201aff4898c575fa07be23d66aaf36dec89cdbd7cd546594b6e549191d1c6a47a0b7c752e966ab2f34c923e6d33fc5dd86a185a8b722eeebe83dc96fc8d6f19e42d65404de96507722b8e3adfaa58fb3ba3671798f70bd4b55a7f75bc528879f3eb27e7ea851e15065e4f327b60d8a89c677f6d102c268c7911b48a27017945b024db77a10249b2bf74639ca0d0f021ba5c6a72e6ee1841c0eadc4c79c39b5ff1992e17e1596a54a0006a1b876d56d94d059a2422622b4f0737ede029db86093686d8b748b1896baafdf88043ddb0d694e04b5cc73e1ceb51cc7171648ce85e94d61d406f703e39a0b9a2bed6e64af4ba0c0465f11a194c8985dd620f8ac48b0a3db6d7e09cf7df34ce05411dd39abc67d0e8e6eccaa73138c7020e2f6b5964c613cf1cdb2ee0a303291fbcddb66ac6d596e8217c7f043262128aa0b1add966638704c763dd91d854a5baa3d13765d88ca05b65fa045f4747cd9da894ba169c2aea3c1be211aceee48027631b6bedb1580d280e0f3b526bb0ff449b585ffd0f5b79ef313d612ec337145b974b3578751e99845190e52eb3bff127aa635c80718ed7097511a84d3ef91dcab706aebd5269ac2b2e0d7302fe7687eb7fd39b613d2b800c2ee3d20defac63ffc94278390328aeaeb2280fc15a0ef96b4871662d88b0d33fc5df7b2d2c30d455e1c60314a5bae33f570b05eba28d63c8a2840dd95254b2eccc627c1f6a6ec69d48e46ae38c096560b97b6f159b0798bfdbed405aad883b7a39c544ae1e1381679896971cc6e2e103c26b6491f637e1148b4d4c9b537075a61fa702cd1eadb7fae169ff70e19324d2964ba8a3673c445b0567a0098aae6bf182851f93ff58cc43689c0a790e0932390b3ee7be6538d4622b253797185b296ce04082083cb34ddcb7838c9f56ffd6e665fbb3d6d3d5748a8e5e7e173d500699eb0f694c5b9074cebebedefb955fc79eafdd14702e7273cc5a880c077ff2f85011959c25410c041cc8f8f5994583e780349b8e959f502c263401480ad4ee16c9c985a4d9a680826c7f6bcf418e6c2fbbe524b06d693f3a711fc1bee4beabf5bb39970eb502e21c49bcb065f3af3a643223c39a9afbcb969efe24b86619dbffb8784c37610f0248ddfd7fe8784e7e19b64f21f7231c545fbec4d3ba9a849a960ef03e734fbeb0fc5b24f5873ba0d42a875f370e1b892a40f6443c089db5f1a0ed0ee7fcfdc14805754a8845804c2d747945a9084021b94753904c32ab40c81963cfac4a0d05f90446242049faaf88b4f723c293a101bff8fd1f8686929103683e5c7d7c100a562a797c4390e27c0e94115282ea2776edad035cd0edd6a00e3df959004ae5f5e1dbcc9c58e6e3bb49945d3bf74582787d5650d675cfa0a851ec81d7ba4fe138bcaaec807a4c8b07f68a319df48c93a826bd7446c97efdf6679d5eb6ddf7e9ccc684c0f8b16c2b8814489b03bcfa1da010177dc8f872996b20228a1c905fd164ab8c0cf768d960f69226f8bc2226597fc86c5e68289774d2c9ff51899ecc83e7f6ef0bb60891eb64f8717148e49e39fb2a0d53ce8154efcbc0645b6eb9a9b6705403615171c47b3936782fa620f54ec86347889ddd5cc7c8f3843ddd858cee5cff034ac60cdb65413753e02472ecad0c0116b193e627d7a8e3ece3385424037af43d9135af6ebabea70a8dc0685a6ccb22641f416fd209058ef1e4a0c3e56f178cd662a24f7444f70b54de90c4f1ecc97641ca2b4bf0ca7e652011203e0aea2e9768b00eac2ed76a212f3cb42d80f68fa4f4f0eb9480aa9b080a78e97212c4c46450c220cd15b5e9cddf496d1fdf5a3827ed16ac70e624e7409b1fe2671f3618b4bcf33700c0ab78bc71b02e0d2e21d4a38329552fad7496d199bba5fd6d87e5821228434826efe6a2aa06627b86d6377142e0b93e3262135c7ba8f59e085318858e150cfedbcb8a8751061592c93c12fd851f48f9b1a87d0e26d7b28e01db11fdaa5fbeb90d4c603569e432eecb7750c6fa77523d141d7a8bf4d92f3db5c2595570c72cfe353e8df62abc4dd89383af5d2952a7d34d45d0ba69f8d478599a0025b449d994d95a71f79a796e197db20cfd5dc70b70fcff3620162ed56592a750a354c50718c912e8d038d1ee1960af860e2a5204f076676d6513289055b9177c408637680fea7e405c85a10d8862a8b19603e34258c169410c9c13285f3eb739a7111d94170b8080fd02777d12df67ec2a8d9cc98fb143ca5b6d5fbdc1ed47e7e7e3aecaa7bceb3bc8aca3c32a0a2d2112946bc01da6dbfc4ec433564ab694b7640c3d92f5ef412fae31e0d29c82ff7788c152b8c7b1561b22434657dca90a6d7055c1dea25958ff8a22b8869ff23022049fd907ce050442918cd49b959ce29e7fc0459c4a84f9f2c02a0f2c322409de1b3769c926f9e8868b60338a653154efc7d9f32b345bc1406523fa641ef4fdff32cccd1a00e9bd292a4ee6cf83b661138b3703b1f41a1a682faea29229409f4332b52dfd20479a3a67ab5ad1633e76565b54695e0c08a024ea2233182fa0c5f03495c3d13fdeb1da2883c04b7715c6c1790ec8e47ee3b0e1f104671ada0157ad0193074b5f03c6450d0dddf0e722ac89a7ed61310b06949c241529228ff1bfcbe8195b496f193242b4170a43d70d5ebd3ac79b1c7f5f41a2d7a20579a6086f4f1c48a096abc4c8b871e2acf403464db6c2c9635b9533dcabff572ea72958d8f276b0b5ec81a5a6bf74757916828bc20b99a97f6c1e232adbe0751950e2f9854ff601cb59706a2f36d6fca5d0be68ad1757b9e1376137b06a3fa9fcaabd838ab00875e0f3e630f2d2afa4af40c03e39628953588963fcb55feb9d3b275b75a40bc6ad7b07a756959ce6938012a057fa1fd9c4e7b0bfb5144ec2ca1149379c9dd6e1533ef6ee94e5948ad3df0eea458aa88a6f1e21c647f491743d8a9214c2d1bba5c5a609942ce6b897d8276342cab5725f1ec6f5b0821937e0f6fbd7556d1120adafadcb22457040e4b17449c8adc3874f672d328b73c1c0f5fd067cdb59e0ba67affd2d8bf8a6f4fdc5dc2d6ba0e2b43df429a4d5c2aba4c712da1423c57efeac5ac4a66496fbe2fbbf1168a4882f32ad30380903671987587d10d97a09878e98ba11614dcffab1629eb7e66e945fba15cd9e82dfe0df1cfc4848e2e31a6143f97ed61067fc5bc5f20a91e819a3f83d6bacf8a6ca0eb1d43470125663658dba2324460030e1c6f380b74e4ea256a43b879c04ba12f1ef39b8dcebc226d58f8af22ad8d42053873a211b2e91477ed6923b9cd7259750c4a4bdfeab68044fe2bcee8cacd8ae3dbe6cd64d80e486898da437e575104b30723eef403c1c3b8f875e05ad8be56a62c2a3430fd8bd7881c85f6d807cf41ff21b346ca444d78ab021654af53e4c248d187935dee7f4ab0abaff83013116f5ba10b4e4003fdf7c398ac615d8c94e5da18606b1153d8fc5e91d439f26db5b454cd5c836e7965c15d148968311bfa35817d7bf1f8598bdd0894441b273d90174c7a041d92d6f448c1d3e49278534d2942c983dfcf28bc8d2595b5842bfd7f095c5f88ee71a4a2f74d9bf662f13247f21a8eff4d1cffebc14e9cc315c3f92b1c3c3fda2114de789be5e3f18d5c42adc9aae081b17968bdda011ad4e577e41cf3379afce7155e729992cbc41dd0879c0a02ba9047bca4d28cb1247525a5b33bdb07c15ca0d9e0416e0319a4fc3b5c15aa555777a3996af360f7d891da3083e4588acd984fcf3512852de8119792391ddc1086846b30c83003717cb580ba97dd133945171e7fe251f4deddad3ba397201c128668f759599179c49d8b841337c61939610b476704ecd6d473ad25b8157b645e4f10a60c32df2027b36a88a73e77e6c42f07f699d758d62917e7bfcd5bdd2979017d8bf02f1fd91d3e67ceb7a9cb37c3679a3b826549ce9ca2f9f178fc37d8deb13a3d2f9705c28224ed7121fa9312196bbb22d4c19acc5f59465df626da6915276a3a89bf1c65669382205e69ccaf68e36ee6920e309632ab16d632eef1e865614056abf1f5ffea7ed3bc8fa49197957233c0106bdc0c6573ce7c3ea1a0692c858b82a84d0ae112cd35101aedd322a6993f21ebe8b1da8a2d8719a3b7f3b12091890b6c6109036ca1d8dabcdb1ab4a141227d1cb712d6433436a862f79a9d61e7c3149908ceb07d6d832b66c3b09aa7139d45fc352f2d037b11cbc770a10cd93a47f2793e9606f3c7aef000a24f67cd706907b38c0c36eb669f3863966a9cbcf2bd329e12ab1cc2cb33f23e2d84b9b64158c4be0e292ab15a9cba4b15a97a552cd4aa99ec403e84c6cd99fb0478cc1f259e8a4e3cb903d405400d7f52b6a41dcd7f268c482b44f8760b171bb4989b8135518c1c448ea8e41dc0d9fadcbff8365e3cc0d84e2b93e4e20d4239db4791f3ea976367a52782a0b2b73af0ecde63964870c356eac670d0609d816fb7858a1ba3dc8997da320a11ca181185e440958d6756a8d689789ab1f3d07436d07fe547ba22fc75c41877834d9d1476587f047e496cb999afa9962debebab14ce55a297077273f828c8a5161d2d99769ab8b1cd64e31f1ec9e7344d2e2a8caa5639ee97f8b81b68ada27b6748a833c49c8afba62d23c50315e3e3ce133b456c437cc3e0131209c4dc33ed0942db316ee519683efa0fc5c57d2b6cbd02a0952de112d2f948d59992c731489e54d66fc053f1e4cf178fa6ae84c00e97e3da184ffe33542e6a26b2f03bb690a8d1410f7950c8e512403b4ed5f8f1cf0466c6caa2ca2b4fffa1ddef57744abd5ae63b563f1ada95d9bc9f687450e55dc38aa7e14f3db3ca916e9578d6c00e0c69b9301555f45982305ad3c01ac9a3b10ac2b2cabb956b7b83308ddae9481fbada56f70626f97c0f81d8009b83a18765d3d70a06e2cd6349230235dba19a3de72d3f4d890825401edc6fbe6582de92f8684823b38c1618374dc0df2b179cb63154e14b1b31b08f766ab61702b3d09da21793b6ea5b6266a00d5fcd38c967677b19c618754e981b256893a76f427e3863f8b5ec36175f31f9f2924696834dbea70ba95f90a70262b503d432faf7fecf5dd6ca1e2cf16be86539a55ae0f3dd6ab5b18a01ba1a092859607086d2d691a4a30ff30a461e780c8ae2408d2b783cd995eb0b14601a17fcd6523774916cb1be2cd5937b3a529cd7f0285a492c3ba3b57783c19bfe647f21ac4d09b6ca41f96e2905b767b1eded661fbcc040927c4e5f81807ee1a98b4bb2ed5adb8c302a7e734430b7227b4897fd94e640fa7b6bc65048d1a77dd8a7e334f2ea169da1ba7574023e9778bfeaca9bb58cc239065119464e1d124b8bcebf69b8ae4b1f5a8e62ece89287911dacf0b04627c7c41886f008c307e2044710757011b6a1cac30c9a37930d78ccd0c4645b5124d77802a7000f24398515ed451033a09bebc264891a4d0ea02dfec5bc5b712272da96e04e8e6b3281962abd02c8bad298901b3d194ba9f034454370e0a93715b07094f1c26c672ad57155774927c920dda153fd01cf1ed5309e6032d8a51c26980da001aec37a5134b42d743196689163679c7143ae633b760183f1d52d9802709622b35fac597b5a54879037b8aae8b014d4d6176987609f5afc1d9761984b8e86987a7940befaade954921c0f1e2491e338b830cb32f8b1f2a96aa452182fbe579b91887f18207f608c2c1a7acd85e64ff01766dfbbf16ed7718435e4d16af594a03c66a9e7e5fff7278605bf9f5fb7fc0de2c6d990196d29ea97f3317e380fd7bc53d8601dde5a8069fa7e1a78aea50f2f92aac4512793c8e9d3f57fbd7c0f2ecc6915c5a4d1a18a75486e65836a9fbe696364d7c8bf69d399572d6291337bcc9c75ca77ba12fbe7c1cc7e03917787a36434e51a58be060af176220141ff5e94e88ba91169672d4eefeb056ab3c9e436a40aed3892a794175f4200b3c4472c75c91847b70f7551dc4c354fdcb742b93c450c037c952a4c4b86688b92028e42342025eb873f0f0f70c0827342b4d3bd8799db34472117194b082cfbfcde8901437f442dcc070a67468d4b0b4f5de3216bd15e88273b63c21375f8b4b42967f72a0928cfc63297e64aec0aa78c8519668156a3346f2bdb49244e798cd7d80d467278317c6fa781a517ea0d9423dd3e26705916d1377d840e2b18608c30c859be46c6e7a397a2024ab66f44835353bb19f535681a2012476526a3654b8e30d449d0e1948d25b9f9ba704c1cbe5cc160e261f04c9db94bb7b5a39614e1389086145255d4d70e79ea6842b7ba766d69f5049ddbcdc0405a77f1cf0f6a8fb6f55dca974779252b7555b8c3f6a9c124d4c32fdd0f7128013254a6445df1cef43246e3be819e4b4c643b1424547e07a3fdc8b0e14cb0cbcd8efd551ac9a17b745f0b962337122bd6cc8b47e4cf32d2b739d75484dc5cf166051821b3978e61d5259b23d340eb80609106f2c33e77e4afa2688c7db8951fc1e54f47837b113ac4c2b178015238060acc3ca2d70dbb8e7b06a13d56481c156baf25c0a6d8bed74d7ef5c41b7d30ec03820372443223109bd140f0b3e6076519e633a64377d64e0fd27623f51c96110da9e28a219070981622446db05d7b7ecbecc829ffabbccd14b057edc2e2d38609b550ef13f43ecc8fe73e2b0c59aed508c74f9a5dcf0445c051f6feffce945fb9d7df24b285e7cba2459961112b8888e35d98bd66babea8be679d29c3c7272db3ac8de6483d6bcb7b4594fedcd54de676bf2e5f4ea1148dcc2cd2fec57dcada303f2c751478fc17452ec00503c4dd9049b038a0ef0b57d76ce7db82ce4a1544e0d42720a4508008c19d3c670165ffa67d0a4e49867c6cabaab9c5d1e837ab911923907ba804debfd5947abba0250f06ee15571aa04a0a86179ca51ed386fe838163a6f8c25b7fabdb59642250c8faf7e25cb7eb86524d70a6c96fc4d6ca160fa0e9c9a8c465760809b2a368df1b434dd9373b3ae48b6504b08f0a43ed6591c021759bf18bcd6889e7657fc2e97f9a413b84ecd72df8bd9a675a5fe592da877127cb0a859a4a05931d1dbd1f554b7d465d1ed38352dc4159be50a64c1f193d35c4bcb455afabe53b4a733b97dcffeaba94eb25bd9bc2c035d299eab71197ea4deee1a606cd3e7b9ddf103cffe8fc37e66065a2f6e8dfe4a1e6284118b4dd168e860c1c3c2f7f7ef3a6cc104a43708c62a1599b4f2c763c9888c46be28d01c5d235e4cd69b8af98eb4168f346d5fc076d5b651be4ef89e6e59633125aacfa08834b528cb8b5176139f19b050e2af12ee5b1fdce88d345168ff04a6e25fd2819f8b12d24ccb2f3ee64811d494339526a20840b5f4aeb231716df71c66e7dd5624cb6d375b33ad28dda3018270bfc2d0e18777640e3b5d8b6cecccb73f6c107fe27b85a091dde85fb6ff5f78bbf76a44b2cb09c726a7248599b144163a4a5a0ea3de164dcda2bdc2c39e7d9be67e0171ef4b10d7d754aab541438dfc6ab709fad02b78cea904a1e5e116d19c7906e41c8d2c1168da01f8e76ff99c6a770d7d90d97fe79b61bcea7570ff427c60bd510ab9b78bb0e1e44cea863ba602b0e3c94655387c6eb75bc40f078773d4503e7b97bd598a0ffed02a011c3f5b75d8f048819ed990ecfcfdd9362da57ad652d04e066396e9d879f2f1b59a56cc77cb86628bb1f7b4aa406a38e1191e6bd59aa02456dcc40f38a61ad59b6019ef49853c70be40b886c07ceced4cd5b4889bd8781816fdf2bc60cdeaf9c3647829d5bd80f93058debfb45bb45be08a38ae26ecd97e77e927c39ac974986b9851e651ab8de701f158b36495cfd270d1bc22570c75e51738212013527111e36be62d02e9f65f1eb847632c3b8932fe9b2f59bc38e80388391ae614ee9ce81b781daec56898b17a2766f7570332a9f25bb2e2023f17dbc7a687896e222d2975437bd74b31ed48a6b53253cc854260c5958f7a3d6c7fb104116a6279e9097d011023347374f9ca6d959bce9c79f2affc6fb432eb6f9ad572aa5b4da0353016f7d97ef953d258990fa7b7d76c5421db06842cce64e79a4fa6993665cd135acb15c10b71b7fdf74908aadca094f309874e1a4ab215054c9b17949895a34fccbbdb76ad6d42fcd76cc45f6200df0624d87eb117a61df8805de60cbaae7d60c80e602032e3b4f8fc837cfdc95c1488dc3f05dda9bb3623e11051098a73e9e83d1fd645cd0aa00efae15af3287de8e3e6abce01225121e3443cf4b4868a29a1034664b2f0d31e4ed7fb6a7a357f2b6facdee8d02a7f5aa2ce8f0731c3c9af2d33a1eafa9f892b3daab96176c5729611192780c67d72ba6b7b55130aa3c3cb299a8961e6d60a4f28caf3de6fa3a453b2562a88c6b9278b698f458e0b4c32f1f55f8651e818c7dcc57a0240c190de20f7161e24c2446f8eb79bed555e0edbcc16cdaa7fa62e47636c16068426127ad503a7221ecdc488b36637c5d68681b6e455ceac48521e9ee579b6b655f8a0d761cc4395c29eb293519f22dea1c3044a4a02937de5ad52872485a30b0b5efaec8eb8a51df4b56b09d557d44e1d33ca117f9b7cdbd97e34b647fb458abcc5594a358820f5e49dc5dd265bea41b9ad710fb198f30d52dd097f11dc1cbb49f6ddb0b833a74a4c56847621a90c7b933a15c5015686557e311a4ccee5598ac998cc4ffc8defbeb3ad3d6f5b7903b83b5e4f48553cc173ab6ba3e66e4736518f250f9312b1f6161503ca1987c41cd16ad846a54cb8d4ecc1564ea817e1458fbea1db34ab40e91d7b8a0d30e6ed44603a3750bce212a9849b5f17a47ea24ac9e7de840bef9edffc474c58c47ad07deee56ff8c9bae37221e7201ef4db25e9cd726ba64b5c0da93b1141bb44afc2efeb8f6226018bd4d27f663cfc7ea7d3f1c35131aecd0cf07061b9270dfe2fcdf2aeb0629d62596df1043f0db75069c71fece0414144e4d5d1e0f545fcbf26e6a8ac7b0ed436fcdd27cb9b6c7e01193c914669fc4fce64859a29567dc35ad6a53f82cc91d96556b6f76165847d20b1929ba2343700fa58aff0caa7eac2e55ae4883b5ed47a9c30e99d73a6cf9d1645904e1beae10faad11bca3771385844fd6890822c70c93fc07fb236cffb452aa8b25369ef9960dfbb1e67c945816754b1efde8a152cd4f7afb98805aa0abeac9b43bbcbb31fafba323b868f486f27b038e3a5cf16d2c8335b90a0b57a5f81578d93ca149592643f76755481ab50391a2a68abc093949153efce2e6270a5d828033c17cd7a10239386ba25428a7ebf3b62b3cdb53f94436fedea06f41360cc3bcaf261fb6a809ffb4cc5f16fbe15bfc5e0b303f3442980419446a94c72fab687abdecf65206f2881396085362e090d6c1c2fa22a6e80fb8fc118e4aae9e87e91696fdd4e8419bf8ef4fb4c71e675fffa05749de683cb8c5488162ea7938589ab464016b380a200f5124bdfde4251935094746ed49acc5b138d17ec18f8afad2fdf842f5bb6a7dd60d32e6a702d7505f1254f2b6e53ad519947270ad911b8d6a2300262c23782195797a567aced5bf368087572ca3fda07e6b562f246ab6977304ebfb94ea111c985bc6e8a8ddecb0962613be95d524097f9f2425e261d36ebadb93ee64a3b6b49cbe1d8a348bbbf1ab812e2ec88a6df30010b8ae792923f8478998d67c5b5ca4e9b523f2e4c6b1ebca7c0b4e5416ee0d06f23fcf492ac9211eb46bc6f7cbe564c3a4fa57de544147a2968d51d228765d29dcff6a8ba94b3661ac98c5900da4e5b77c44aca55b2c934576ad4b1febcfb52e4207de81b2b0f3817429bcf0c975e79cace6db09c8849e2da9ae0cb7f5333f450e10a75079f44f6741d2a7768c184bea31ce91511e9dfff64ee79d5b24a1d745781802b0e891ad014ff532f35e30e45934e611ea8c965aa66b7c58ccb0648a73f00c5c2737a1311a8d6bac340c57870c3b5c97a0c09f7e2e481a399c2ed7431980300f9960f1a1783635b5a529148022bfb16cee26d443d963ca7831989d785f189b62b4ab1a496fd42ae718e883f3b4aadd1fd80f1beb0f5ad31e3e1048c858f58068b0c8a153c9b74a3f9ad3e511a23eec8ad69b20a16bd1451ebc93921982b1c09d2dbcbe157aa94abfdd2c909869e38a6843386bf51c1c826a867d80dafa2ec1f505f29f099e5b1f3cb7da796eb091a1b9265df774abc0bfdf0257b61b6b3385ae1a0296b76547c1ee6ed45a12ac5a9ec815a7164f8aee6781b99431595b1f00f4697eee201bb86bf0ac5ef33a88d508569eb5b7162dac0e629160663e283dc9494230c5bdc2ebc8e6b6ac3d346dda34bc576b150a76f1002b238e74a41062f49436e4b2ecf6788e87e579114dc3985b8a5bea4c3ba7369b2187cffa8c2e25414a71ef926616160f71690dee151478ccd72ef0b1d92233c0068183dab233ed283c3fbda9e00876f751f782f8cd2dede44e76a87cf5bc05fb416bdb78b56bb355dfd40f3294781d6bb1ad90e885e2a1a71e596f6fe76c5e4260e802833f38322daae227fa30deaafa7b03aaf5b019f18f07bb866562b6ba1d936dececf6632a44768fdb3a0d2b45b9cdedfef09dcc1612e40779d6bc21262104ea2756f540b32d9c28ee570f607677f39c90770dec47b8741179ed2b0ff6861711acd0c1bb433cffd7ad56da7ed9b18210a1d2aec979fcef71cff98e98ed2d81a46141d87631e000cd5a9e92fb2c22a80469eca8bb8eee7ab377f92579bf6e1bbadd744b1952d60a8f60330e765f65b02124491113ca5b7cba9857028a02f2d7aa47d582948b4e7e54c73bdfc4a1ab9237dcc87f3b900f54e9d4451d5c6d8f5f70590c2f45fbc1857fcb17cb5bb2936510280d65077fc4a5b024bc2fe4146dfbcce267fcb09eb5648626bea8d207e0d4bee06f93a0c01dc8936fac0d53b0db8c55c26eb5569cae91295973755e89aa9c793fe3e9fce132e7a493ee4c8f89ab9ac11d0e5221777d372b386c2f4b8968580603cde704fdc84697f805d5bf210266699dcd216fca5b20dd3495cb14b19c616c135be5dfe1a52462e655fae907212446045fb163420c48766e34a935358cf9c916c9e1821b74d8e95382d9fb5cfea9cb7f902a949df221d5cd601588901f3f677fa1ba1b93c542da271281c1aa5146098076555f1ea12379fbc1ddfd6590eae09a54d91fd2aac0512d414c267028e77ac81d6e2efbe09394ea8f22fadc69ada2929010d4d8557868b4ff8f1e23f82eef211e1038f1703f53816b034a61b5358ae03b1cbd0ede05aa699113bbfd0c49e47611b86c4b042019440da386bee6ae218353d9ee4922fed0cc3b89bacde10a677aaef3b088d7d1eafd737c029bd0c0d4336656d33176bd3968ca58ff8d346e10fdd4cdb61ee2f076a82f82676929b70d91f2301fe4ba1902ad23785e7aa3267d129087752b1b8590fb40321248970d8a048e56ce35794dce3e83027895a96262a9d4bf83726f934455e16f2c0f7f2ce59befb4a44d8b05bf7330d3ef2bed732b8c791abc9ae3b2edbe969877fa52c5d20a81f1dda3f998e16bfe703299ef3d4751cb0a7475f39158992bf3b088c957b3a7058199cde99ff7a5d068cff769d9a94abadda7fd0851c52c4a3eb2745b1f1ecb555c78e18130fdc895bfc97c9335a8f95281286a2c31b0f60d26f92fa488a794c57cf3de90d7fc733c3dfd5a5662416727ae48f22e7edd71ff6874e18dc09f9ce34c0b7ba19b7d0a662a3c52dbed8321e975a0a6eb24b8163cfe05b4a82a198fab08b4a19a2abd02863aac7af4e137c7bb152f0f134dcc4589a907051e7ed567bea0be1eb2332fd3862171decccfe0354e1eb8ddd917cb7bc16726d196084fe0fb9e4cad073d460418bc7a85798cce5db21c3b8e32c2400241704e598ac1e33a23d427782feaa5b085043f262f287ca3d6ec73a37581385f93fed5b41d7f34f8cec93be0b87f350df902228142d6df42f59fec2debbca79e22948e180e34fcaff9305417b2edd55360b067bc3fabddd37e1ac61b92da3bce6a6b35545719c49700b6e0319ba08013ca5439236b5583d200104de042de69e26195ce1bdb90a1a77d0d0fff5ac94c10c7d78926e8634066fba978d33f4dd9110e5462f06049c4274a8219c136cf1855c69e2465008ee6b77c9dfcf0c7a993ffa949505c8cffb269168bd006e98ccad92a9367aa44ca6ee50bc052d5679e48aab2da3d2ed1889aa42a31c2bd3c3a3cb38ad8be8d0426f979c2a6c192bf1c6fe11df1a1c703f0323c8cf532c387749802b7f98987f9fe8588fc63981f598ea37ee44c6abd33e80e5ce37730851000eabbd6f8ed5e9c38aff51e4b7e3dcc722bbe01f16c3d7397034d1a015fffd771a73000240c9b83ffbbe025ffb3c16d99634ba787f42a3f84278f19467e342597a4fd9bf94136e67e55b4dc257d364ab4d8202a8bfdd429cce00cc4f2a753bfcb3482f7c2c1d6e535bf28d03ecc3bf9ec9ac48cbdd6a480be2e772a17d45fbf065cc1fd85c990840a27b3ca1a64dd7363b161764116313c0cad305a7106361fe693662aefc64bdfd74a7bb291f77f683daa083e55f35b0d7e141b2018dd61d335b66f2f911cd9f16be31f0766c6c2d7464e305bc32a6445c8f3028b758929e5186ddbca89747e5b1a21844b192dd824fa7f49d3d52fa4e4ba4108c9585d1e734a9202f3124995a4fb810fac3dcc323063f12b7dcfb734a39cbcbb82a9ad50e1a9ef1314262c133179f2b2a8d32793843edf88518d08ef2bb5c8793cf10e0aa5d2473e9b1363266197c66228e04b50cf336156368910f97b2c5dbf6a34f837507108f76e31776556322efa3d869887b12190917c0ce5890fd4e59c8c1a9d80ca2f1bcc3e53d82a8c85a0eb95b65fc25ee81cb5a9626413a24982a2acad42954b38649206a162697a0d2bd7f0895ee5a803c56cc5da0c47118d43dbe1d5466d16b34b53ac2e1d78522cf59a0c3c3873a2a7ad49b6e3afc9306d826bec9384c62419519dc4988eb986e38a42304cf0f340e2f669197f70e5b0027373b82069fe003c0c63ba4b3b7ed0060916e8f9ca84e5d1fde91d2ac6d20725282539803eb910732b4c451d3c638cce5255236a9bccdc98c07ad902cb047821d55333fc18adfc8ec9a056e359bc488913df93b1449153484316f30f3f6b49ca26a29c2d04fe5651bfe4bc48a3fd33000b34209b87ee057b5b42a9bfa844f81e9205c38902e43649d09d7a666c87e4593bac3678b91a22ae952a706d9c93c72cfc52ae25421b38d0b0cd866d505329260612ef808dbe96be3b39457780e8c3c02463e9e4a0da984e68c3ce91561ddf974f3319a91f4dafb4df529db6ab590a8fe887bfe8089ddb9563afcc203c3044cb68cd877c4e3afd71dff22131564c410cf55b1672d258ce4de54cfa7fb247cefd6c47939a9c7157810e1634318a3670d45af3737f20bb3f215ce8a81c4a9d9edd57f463e0058f926dfd6554c4871c733fe594b611727ff77e2850ed39abbce3098e1e75c931a687b34f137a24b7b6b564ce673cc44e5cbb0d7f7c37f90c03c835ff35463c7978a690bc7a0773eeb723cba946959d9d6f36f847fb38c7e59aa4b5c36c0924d408eb2fd5c7d5551159361f6425395f571aee695962036e874dbd4c4e3882f5355d85822eb94421cac45dd5d27c947771eb9dedfe257a1fb3b954101a11f7b62e06d7bc1321a4e5fd4b478d5110ff8433dfd64f18a454ad3451c90995a35fbd0a7b34dd84689f2eedef99a03ff80401c3382a15d3d50fd47ba3d03b3189a2fb7e4791aa504c0a716b8dedbfb2b86a66defd816f2a83b0f2843cfb209da3f42834419d66b3140896db10e9f79f69297c2ae47b085704f7616b8edf4fcdeda8f8dead731747e9bff4362fcde64af612ea6f7726dc419aa595983c98c568d0082b63c14a9da19571f0d15666f26078718db8be789fe8a026693fe04e2337b360c869087a6190a406a86f92e700499196a467e2b0429da839e3907128e3a066e02458c34468b15f6c969f701b507e86e755065c256b9edfd8a37ef362e57ae08ff00dfbbcf268632425604bee8f4d6b9c922e0482121cc48f5e1222b8109f5e796d6ac1d608a661e5e8d5a7ccd69812a54b3309d419d5b1e7581c5b6308ad7f04fd57b556a7470be16e370762e17fdc9cc68137725a4ed79dc23fa1dc8c12c265f23c0aa1e27e577cebee0084d8605cf0cc44ffdc74a15da0326d4b98b032980a37604b4829be268bc269e8f1b709c4cc68c10dcc5747b1a6911aa4c073d35f91256dfaa29cc14027f13aca7f851c38c423612c1ba96e4d2802fdc9496cb1048ffb72c62e69aec97019767188a9dfc6c426a87ba02159f51d6d8ef82966aed2e5a2e3ab3df6a77492ccb917118bd2fad2222e33996420ea60c18df52b331307c93f69b53644f5563ddc9f7e351f733d8c032276f3a13c9707ff2fcb27a0b0053c701fe6013c8e50ed574ea5125fc3aa4f3973260890b10e64f82220e93fb1d4f3d793c81cdeea16b1bbb99988eeedab10bd747c33d25542304da903dd2f0ac61d3a82fe091150814cb7f80d10f78e80aeff2d9b4630ab1e0fd9174b56aa52a743025e674879ce9f2d0e90fef1038653a68b5588882db1bd5e8a239ac44855e37f166cb2fa8db1979d27bcc4cbe800cb5d5e30cfd704076765cd88ad817cd8a2f2284b0557e2c837e89ab32d31129e666795d82af86979566dba2b48e31a763c950b2e9f12bfb04453a51348cc71a0a6936e5ca1beff1d860f82f03b266f9717b172fca331628c84f9f6166f11327088be32b4cdab8ff845b83f19f5c481812eb8403b8a8734ce1aeb82050084fa88068dff34cbdf92abb36e5f1b786880ad059917c2d0980d9516b60ed507203c6868fe3512568af2cff4862dbd82043b04513d60731fd88bf2d0aaa514f7ef173aa29741f314c908f74f4cfa36337155fc72473a7f9974c853b9c56a1e3d37cdf50baf89bc9c6161d3a7ead3aa9f3042829468e3008fa40928c499d90802c1161d76033788e687883246f2ac5c2c5d0a67339e0ffa716f992d619efcf0a4685e5dd2f7d40d225e47bb31f8328630bc3dd6d7a5d411ba237e3cfcfc95a94157d5d736a2ef6c08f8f6461befd1719d31d75b55044d5394f54d9e24242358ee45e28a265184ba60ad6721fe18acfc4281ba7880467f07b35482b9aa51b2aa5c9b9d9229397131351cafc9aca35641c60f2cf65b6f1136ad192c7a8cb426eedc05dd01e3ec1cfb4e80067d1897a9cd021441eb35b9f59b721dad5bea769e08a3bcaf91c91732847b82f323ae058a6c2144b790df532528677456c2724d71e602b048a817223dfd52561e751efae9130110d8955e99b1b0b16d24624e9e20f087fd98c053a0c02776c0154d364473a35b2b40f29f395a169f278051d509cf0c34f47e2b7a521cdf089fd2b6e3885e00794994657e382cef332a1ecdf83b53fc4dfffc215960970d561b931326c12a1a1322ef635c43f88519450b12b47bce4da1921ab3166a548c8cfd22693ae95837ac625c92c183027f42e42cd986692f08eaeb59f1dfd925c254d85bf555c1564f12cbaf05744feb7eb7c94a06a24375750ccae252cb37bb7d4c3265430aba2fc6119c7528009ca9742fdf1db0143f60f17bdfffc4b281c366b5fd7c8aad997892b70a7a0533ce7a186ecfe6ca6bb2f5092809aa80fd4634aa353db8eec25aa73a0f8ba9da3934bdabd69b1453fd42794c346f72c815ffd10c6a6c91c29d774db375fc906e41b0e3a4fb9fccb9c6e8b1d27f71df98e1da77ced35e6f0886ce8bbe956d4839d6cdba595ef8546390d93ca878c473ad0e1c60a83f6cdef5413b130ddead2af887c61e4ab4985c8dab5b7bf956d70a22692bfd6ff1738399957188e4f4d9a5e42860e641219168f95daf8d8910c9555fb33954812572b029b9a902b257dffc7fc769ced5e71e43e44b9b5cf5f4e16f0e4a92589ab1463ac1eeb6de8af85243ae109b133198df017bf4cc4c8bdd999569468ffa8b409998ff93d8236fb991bff895b36f9c94a57177cab31ea346bdee3b31470277bb5d58dd808ef3a40d6e6f118e016f8fb6cdc4982b16c721a8e2ec5ec5470fd17691086784e08751ff5eb6ae987bed7998ea1ac786095d8c452fe61ffbfc53d6de0df2a56bf763bc102699aedfd6132d3f88c1fd3db7c98c1ae7bbe2be3221c0afb84606df96c5a2b2eadd0b5c366ef7ec436f797784d84a2d5482697425debb54bf1f9c2ab309a4bb1a2da7aae1dd601119df5ba7ce07742b46f85f76bf539cc6e036fb375923d224d232b3919309071b4e38a26be44e655e0aed2ee8b5dca50d2219055080b35f8cd1462115b8d5214e8a2aab2c81bc188c0802f90338015b2228723424712515af4bca43b8158725bbb8c79b4b1d450d171b386e6e8f042aa9e7deacbe50d6568ec78bc265d60dc64113b6b3dd852db3c8c1aec7a857d56511230446ac6347b90837947bcacd7b36aaa5469b76849c5e9928cfdf4c0582e453d969fb862db013d416b738ea03c6868c4a26b0e0c2560299200a63760d474896ff68a8ddb7c52f4d1c102df568faa9c0a25ccbc217ce5df379334708621fbd0680bab9278135d2b616f4c4b77adc89579a19645daebe5960c82a0c4438bc1126b06fba3b43db71073f41ae0f1b85dc97c94c952b1babe66995d2a95d395d2d67ff1dd571229ca9d0a10253c6a47bbd4e0f53c8b64fa9192b37907d4ba86151cc69f61e6a5113f3cf0cd3d00c86558ad5423c11e1ce89b747f64d5e2b43646eef7e0fe35e33559cac3da7bdf89718a6357eb7694ccc2c0074f4a2cb9c8ddfee14a183270243d43fcf3780b04e76953e68c37ae81d3ae56eb7a41422e9917067197d92f30b7920a47fea3ecb8baf1b038519bb3bcf70afe10f7aff6ef2a18e3dce627ae2d848af9e769e8fc771f215c24554c759f14b4d6326621b5a40e61f71d751fa78b5bbfaf3538fc749a7486421015b998be6129d8d7cafcf505135c92bcff01b56cbe1abf3e01ae23d7f51affad220bcb65dcf7037b93b23d8903d4e436cbc8a902851b176771ae72b3b0a20f6082d316d607767c575ee5b517a9991dedc955cb2ccef10a2843223ab2984cdd9967f79c41313f16e7a1f8299274c72f8d120c3940ec200c2eeacb31e4741fd33525772e8ee3d1a7056a820326ce7650a252c9003f64d10d842b6fafe4207f76bf4f1b52f338ca11e497c02132b69e2343350736a9ad3df37f9b94dbd6ff816fa756cf5a382f8d4554d22e353fb71b6b0372954cfcf79dabe8c9822d597bfbf34175e7d702e75a650d46f39ff9a86df53ca5ae832bfbf1baa48cb741d6090f2dc5135d789862c127d8bb6ecc6a2e7cc0ea390665274cac1dc4aeb692152ea8a9f3be7fcbbd212fe3d960696ed60d6ea9681eabc783ca16fed17cd8149cb8fcace6f0cbc6f8bb59abdf1f43f7dbea38565ea7609a91854bc42b9486dabe634610e897d943c00296e5280a142a306cf956700451f30b0e37683b962aa8564ec505bc17333c55b26db4d2675831e37c110e7dcd90e9fc26b0444af7039a6d0cfc958b58d3a869093b795e99d1f2199e15cc73c9de6bd6e29e5029933d9b893eacc6f4f1697a2605462a67501f775cce4b94aebfa8d669651ffab5e212d0fc499ec539cc8376ea0857c5f5d841e9d8f5e45a40bf1233e31a973ddd6711171a286390bdac547f51dda7ce9ecc11aa90fc64498222e618cbf426ef3a973664a730fd36bb0a153b1101f2075734b296128a456e76d9423dc9e3032cca8eed28c9db8df0ebf51eddfafadbd338e918ca240e78feb85f12fdd31fa0c6dc6c1d6ffd8f5db2ac638e8f74df39575a8ad55dce5b9b7979acecbcf3dd8058e0ba528136cfd606cbdf4e3f225909d01652198434d8fd83e79c0d5e9f53cae0082aaac0a082f7b033072d365c4250b4028c0da6bba234714fdb8c2d5dbbc1400c3a9df8643c7709c0eadce0610b022fe8a80a0d83994e0e7774c18ed8f0cfae81454e061dbd6577b7f57b11a9162644ffd6d5146e764c271676e0a6583759d6800012a393384e17aa266443b777d4aecce97195900698acf8c4787c6451b1a808603580522e6bb78de14254405ec8912e696abd1e485aa43e3f97d9e91b0be6e913e23aa2295bf9917c029d2191b7b63ccf2b92add7ccd3c97251d3e651c53c3870a8e39d284aeba726ff226fa255b09e07ae77aeb599536ab49a69bf4b43d71ebff5652fa2fbd60092ee396ff33c00e3752e4f4082ccaa0360d56448b217a7bf50a828ee9efc653f95eff86a717e210d767366368ce4244f15adf24e5446d9ebd285d39af86f4c04debd35a0a28b0b0330d188d530fe239f9bde7fb259e034b45ece808e461504582f20961909cbdc32bec4edfa976b4aeb0e0fa998dfc2407c21f1f998b3000f83e2591d40693cbe37ed9374b279151629db0b5e80ad2688c59005283ae3363e500c1bd47cd2a789677b8f871d3e8613cec5d1936c3bfcb2db7b4af958bad0176a65d2856cad4f7fb2b5a8d8694be67577b791a396797da3b41791822ade871f4438f737ee739fb29350d05c053c5f05c64a09f44326efc477ae183c1b26f9f43d489772fbc2fd80cc739872014c5e67d61faf0248d3752703f74c2b020c8034375c379709e718736a621fb02d91744c504ee8a1a2939a2271409120baa7cb19c851877e7e32df08ea9ecd56c127bbf6cca2df8f698f862ef8bf7827784cc1ab032e904e66c4c0f6f5783965a281c14edfe7c7eedc881fbf0d1fbf68f9a030be6e79b2b39fc3fe225f73e2922862614a1ccc01cc7d31dcf761efe4e89c5884c522ff00b06dce92c8d5202a17e755f67ce2900b3ce03e512644bf8f641176580f318c790c092cdfd0e42c409b32876355213b77406a97c1f387248f3d6ffeffee1a15d439d7f295b93a58ccb4468087ad15fb77b742107c3f8f29a85eae7917090a1711d85375d758e4d07424fa9876ff38d06aff23fde9718904bc38c16329594b1dc6fde2a68fa1fc1940fdeeb835131476c1c7dd73d936feb9b8b5644b0426b85ef4b98715987a63e30c48780844aea2ec18ac28c704029e83ec26b0b5d75b1b6e62e046ffd829e14b31cee8118f79eacce422935461fd18b0afe8e30f99ef98cc077eb1c0800ec2ff870b82cb29aa98812ade4065a744398dce7c01a87032f93641bc397be3fce9e8845ecad43da7f1346a37b7ba35ffd973d295700db2ba4a79e57cc8f10ab7be9692150351e1c70b9380344bd34f6512988ef3e7ff36f08cc6b7e8706a8d9c1ba2679b4dc54e0825e174b540777ca39df50deeee214630ce776d2d783a9031f61f002663b0f210e9767e11f4c25b192f471719361709118cc09310c18276826363e0562340da9d0a31a571dfb7a96fd513e5cebe6c686b45eba5181b9d08c451c76446a7a9b4cdea2e749a6d7a1d879b6464ab85acc56640caed1f6f71afb16d4dfb383086c0f5c8beda68a36095043eeecb82c75956d97af8ca40bc4365d153048e37929f01336e12ce2d801cb37cf4efc3e82a1f11b77f1aee31b7621595ef9c0023260c9b00849fe790a52e231c2e16cd9513f3b5ed7b54618e065125f3842ce0daaad9cba9de1a12a4dc8d3bfff34478ad19e004347681cd4e67479f4600cc1a542678a5de949605cd11a080bfc23d6b7f23acbb313a10296c62e120f7473bc95316fb438066c3acbc736a8c05cc92e0e5fc096b89ac2adef7e10764bc5896aee833b84c0eab2b42288998f0064f3a8e55071cc9629b0384582c76b212d5cae1b37ae0641b26c2b2dd03650a9f0585af882b3fed6968d1c68ae6f316622a9dea010313c0235533e12d9d7058e51dbc0a5859c5934d1e05ad716aecd30b4edc2afb0f59f143100781f4ee51b46450e4559033628d323181405b3ba5be80e265175e86c8b8eba38994dc3b70f4ab64bbf9b0a9e928fae3ccd414673052a1268179f85484672c0dd82526a162c105101b5df2ccccce17413d3449b855e89233d12c387897712886bfaaf65e2df506607bd8d4c4b025dd4a2d63190be95a00cbcc57b74b4649ac725cabbc47697553484fdaed1514d51d4d0d384131e9f92f6880ff404101212d8edc0bc2fc8b1258e2d2de2f8efd27a17543d0636bf9dd4ad99bd404b5993830232ff9e696891ae7110b8f0729478b1e1d9d89c7586f287f1facfecc66d72ebdaf67f00be0f4fee80c8cee6ec87b4a331226783febfe775ee34761b497f67137411c3024f7bb06c47f610b8007b8d04b23f0c26107bd095c17a3f3864841625322dadf30d1d56024c34f62a1795e975c80abfb43ac69920ebbdae81597bbb93ef82f31f615c9a7744ab08d323dbc891433936d677a239fe725356b3a109f2f4a134fd64c19e7c1ffb6c2d23683f1f84a7a69f57a07d4ee9a3ceaf459ea376c7e8d85d23fde9e54e1fcb5562e8ac9f6f0b172268585dbc4097eb25f9af3e33ad51d9c4bd94f03521b261bfeeb1f64be8f07c53fa87d19a48ca52ac12653f956b85630b5fc42d9e353dcc6ffca23a4a9c745f75d511a576fa7a0a0cc9a740f311f37ea7270fd9940aacf389ec66cf53b255222c8ef8bad10971c28f0c02799a2c5a2f5ccc8e7d01ee5491397f10a70d62a0331316ab528add0aa1f2c64a42169e4bfa288fc6aeb8572e95b1b9da31296c49770e10790b272b8af63c65582a18cfa5706388443d66973a1ac82c3cfe318e41e85c2ffd27aba9d72946cecc8ac02967338f7a6c9209d75dd4c2d06b8f30ce46339e4703d2c8aa6e0d6648a2fbcf5ce4438d076c97e86ed02c87939b472171f7c67e63ad10ad041de8b5323f69ee18c272021f279806a25959c663af16db08302ef921c7e2cccafacab428f4ca1f461544f02f810d720c07efc356efafc5f374e86e94bbca29eb705910ce6cbd5bc5762d24f4d657cd855100d93c29eccaef9de0ad05db4f891d012bd329841bedaf47c7ed4abc9e46b4325f1165c8b6d7030686420bb566883d9006e3d8d2e48ac39404c81d39b4705157387c49ab4b237d057535c4f20b0b3a4bd7512c4d7e93326bf5f63d7391fe6a51f114c8a50c6ee316a54118932910712ebfc1f626ff3625e27d112d28c9a35d35f47dee36cb4f26982e983d5b7a4d129063de3dc8f04220aff63d66fe424680b2a8dc94da154ddff7594772920a6889fb2f7dc723b7cfdbe675b29f008d5a59eba440884dc57b02562682028dbb890f06afa174628b274a77fe0640438a56b330e97fff829444ab1c942f20a0a499710f5c1004f56040dcde37f304a19e588ffd4cffc1e958166fbd698015a8911bec4b9aec85a53038c0b7d160bb6f18fda0554fcbfc276e9ec91f807b102e9c2639a7cceda4ddd206f39db70bb7b5a9b24db2c3f4fd0e5a41923a0e28f24b8594fd33a5050d3274d6dd9fa4214ee5c3f6ce1954583e28f748aaac58e89691a82624dbb763fe37cf85861bde95b890dffff184799961d5e8cb0a4d0a4487a9e2f9f7964cd812401e2e5851c715f2c829637de04561b9af723ce1ba7fc623447fa9bcef1582edfd08dbd8b9cc7115fdac2bf5ae433ed3c7cc8fcd8bee9824766b10ad8353e272bd966ebb0bbdef472fc3af989f625746807ecfceb81455213db073046bbed731d348e7bcaeced878b006810e58673474d7579898289393872c9e3835912e6fc60557ce9411131852884eb7146f7ad89292833b31d04aafc5cb71b5414db2809aa222cecd9c63345907d3113a0039fd06f47fc6f44c3f594c3ec7736d2cce119fad48c02343b3d9b4de3d8beb2b62a7bed23a1360ce5945b124d414b8061785a9090683052aa804b6bc17adbdb115b246b8441a671b09cdc6c7df215ba25ad356cd4a5040c31a60aaf60e306fe0acd7df08060d86968827478a0bbac46499282f7e8e0958c9f1d1def4a99297a39a0a2245b8f59cc5afe2e6d9dafbb131d2cd76bce9e567181a1d280a2b3e3ee69a186ceaa6039774afd1f65bbd4eb3a0d7147f1c3c95ccf0929d3100d72ee573d0e6f72b136c94d6646f77630e9d50c79c34df9c5822a9fe8bf453e4fc27f5c21ce1c1b8a92a8cbb9532b106495d23678ca704daf3dfdf19bf1a0319ca894c5c4814e2ec3e25c7fca59d73904e6f6b9246fcf3a8105d47de21fa0ce90ed2436bad02a13c66e43ceff0e02821df93af08a062dc4509991cb044b57646f2c4528a410e3e2918ba29236a59546c1d26db86010aecde1e43fe883e6d8966cf081e53551ef7a618cfb7fab994f5be8c93c6bf7f88083d18b65b5821f790840399b59f07b2eb5a56ecc6c637a3d5b24cfaa3f6cdb9aa0d57c8d160b84a8282d1bc26dba64cbf54c53516b8cd31bccb91198805dbfc78c8dfe6f998978a1c3a5cc425322979a41449cb4d36755f766682b3307205c5a2dbf42d5085da9da1509fa352f052e2018cb4fa4a789afa7b9a9169fddb27283f60e9b27640e2b4dc4c6a43de849c5fb787b6782e6db530ecee18040831112454a06b19194e4729dd22059fc77f94d4f65f2f4c5df8ba90e4db3b300a72e920e1d86550201e15992ca957f322049a6eebb0f74b9b65a12ddba50d10e20f0e205120ba4d9f76146efd6998d8b5fd70f47f6ff3f0ed35e5694f11d5ad5edebd0d147a4633e6967044219a30da93d51ebbf09e8639536528d052e8e7cec0a594f9585b675d2c12f4ead15ca7917977df0a3a633ba9bdaba0b2c5595e488d8b2cdfa638d4bcb472a8de924fb2138509b24bbd5ea41213fd8dcaf1f94a5668a4ddf2531719d9fbb02d868a3a9203afcc5d70bbcea2a046ee6141b29251a1e106d596e217e001f38a73d5f124a500e26ca7e8c61d653d52b2564f2cc4f6903c2265df537d967cbfda09c16c190fa91e98251dbf4270bb049b6e4baf2ee32f665f9b1da513b429a658fcd699f5e5d691c8d07c40842c72bca0e5f53d017c36b4ef1980bb8440bb7b98c0020a46af2aba89b47664a4d21b2f525f489a44755b4e9295413768c4087969745cd0e21bf7c228fcc5aac0285ca259a0d5379e86d3c66fc2a36ca05ab2bd5a85dbe0d636aabb8c00c4f674c303ba5433f6d686155520e98648d6527bc354338572355bdfebf53866d64b6d7e3e7dfe616d668999999fa3d3a5d0fc9c9518c7278db2111cf4c4e271953b6aa130da0794e96f8fb868a9ab94d1473b11f9df809e051dada3b17a35f980b0de0617a87f663ac91400941739e225a6718cecd0e1ee051d129cdcf6f18fdad9920cc7dc6a9fb4212e92582f605e7c89495cf09b5b9e76da6aeb7915b872c3f36026318ce142a7e20fc556db6c7f85e71650e78eda9b842c6d9e862e2d080d971af8c6ad911e5ad8aaadc320e86ef243d81920210b3f05a04458c5a3889396975abdeccf148d2f3719d684144f7fd5b8ffb0b102f80cbf328ff96bb68b7579105bc23f267d7e7395a9062589f011ec66eb656a3656861bd21d0e30827b5d21a10aa400740706d7cd5cfb6965c3e223ed426e324a6772fffe88d4a26715845e6d43ec7d4ac35531818b00e1439c3970f561f5f6067c0c03660c1e63776fc7a97940e8418dff3b19f2745ad512cdb3a92eaf060146d008c43d6ee7530ee2aac7573a89c10e3bc4ffd0ee72e7606f80290b6f44106860971bb45faacee40da60ee1bd6193e3fdeb5f258b7ed43a4d69fbf2c29cd25471aae340dc624e790c07dbcc30e422ed84ac42755db4046023a1665fffa07b9dfdb2eb2963a1d9962cc5ecbfaf4a39c1a5096477608bc67344cfcb031cfcc1463bc622eebf791c1fb20836ec9d0cbc995b66650d434eea251296b59730dde91b37e4561b25091b67e22d3cf2e1b2c1f6ed1ca5a725167afc1e4c03fafa4df714da3760823447cb9acd3dfbba75603dae680c7287fb4be138b878fbb5bc054d1bc70a13747808a8667be114db10340d1a6b1971df0183a288b61926a44f5294765cebc96b78faf43b79185073417f90050e8e142f00cfeec1ee35c8c0e5a630a40b8df880fc0b37111427bb867bdc9137c83ef1bceb7f99cbca018982b6eb55102e9c96f9ab8e1eee6d59f5ff5acdd2bd577483fb9129c003f7624a153d640f38fa68c541d940d932c61c6cda9cc30e9b578d2831c88d359040647e8b37a163c877bc3cd67d76f8bd2352df1d433c62b84663f049eb91cc170f1a3aa79e4b862b296198522f998f9dab14482ac8d9b64de3c2c43e06aebc7438e0fbf7c3201a33c932fc884a20ef35f90f07966250257e9c80d2d548db96305d8af1b54ddadff0d730eee7466f1c8417e26ed63f3ec5f663ccf76c7ab0370c473a157dfc590488bb314c30d252694d810446a7d3498e80a0714ba90a9ffe9e799090b2eb960db2f38f3073532048bfbdfb79ca74bb38b61d1db06c98807ec7082be9525703d6e8ce26d8e18beca34e8111ea203f108062a197cd881e7a22a91bef02889fdff9e048437c50fc647e0fe380cde1076d73ce29aa3f7f02429ffec2307744839fb089a36560ec816813b236781c37354ba202c9691e59187a20b3d185cd4bd8907944a6fc606134c35cab9dee85881cd33a8faa50a47aa33599c4c03f9c5b13a391c1c40602a8791a253ae8b6c3676bd021b1e08bcf88cff07c1545d16b9ac54e526ba77c068cc9065492bfdc5c7dbb79e8c0d58370957e73675dc7660719122bd44dbed6b7fcb1e1979072db77fc4aa8e40e16e26dddaaf3cba1eae55bf14d1226a4bfcdefbfa711dbee7d5199bb113f2584913d7e99f7ed9b65a8f3442fe7d0da22b8c50cabe5042fbef9d812a0317168505a35ef0c80dfc39c8ef5fc5397cda9e27385a96bc3102e595c901f77f4144f673b505ee3544d33a8cdb1b6b73ce0cdde6bc840164f74558a5576bac979e7d6db03077a6f4bc273b1170093d387e4b779d991b7fed708f561cc3a9a1e995514dfb886c7be7377643d55213f62ddb6a8716b06e28d17c7997a95b8bba0a2619acf8336361887753005f3e0d2499b29993859c0228a65057b241269bb3ebcdbc3726e14cbfd91c23c7591e8ba68ca63ff7e29c2acf8d99e7ca7faea75cbd3f45cdeca749a67668408249e5757c8781d183663b56ae7e6c1132e7cb115caf77844a85cc7b9f4b908fff45edf015220f7c363783b7dfa8c1a29ec7483e02b793077696b90d15d3472467006603eff948fd7e77c2979323df78cbb6da89b05cc1fea48bc919c11c8023476d243e2ebf49c46a1acbe7ecbe39c59745290f6a23108397fc966d82bf85589631895ca8a2185fb6697809f013f2a7369e2c48cdacbbfd85feeafc30056fcce1fdf1ed6df330eb4646836fb3a2b141639ef93ab41b9fa1a0e2f94678d6524cbea7cc5a22538f92c16aa95cb5f4efc0938fee020be97a3d356a42e8fda167e768b37e98df703cf2973557798215775f2a15455cbb8518a9872b5fbb9ca345db3aeb2562023a588708edbcc2f65593540ccd575199c56225ab4f2baf8a5161c313b39a460cb630e592a4ccdd037e99c4d38d83a8849a2305baee8ff6c7c4436a35f0d7987b310b01ec2ecb956dcc2c61ff4a335365399f6887e72fbddc6d263b93da8f121103948351cba119f3b84271400be273dad89c822b74b15c50ca08f06f11b4b038154b94101a08496f3cd3ba9b8779454d4c67187733e317b2beb3a83a91325164547172e2bf9f8cb28b40f05ee23b0a559611f674b85dea81fff540f78839d8bcb30395bab878175cdbfd5bfa62711a7d0f28a33cb03f5abce92676e3df530b4e8ef6221b61fb8c12d9c7ad772f6fc7a17459492871686c4b73cc476218e01ca8624c28375ce3d107a8e69695ec9ca71eea753193d2eaa1f8e2b50285a6868a169a7834e1338fc83c685437dfa2db89ef97ea14e8abf3b23b1d3fb546077184c1106bb32392ba2c3d5894ac3d643c18bf91c1b80f32c93ac1300c4cef60e1e3988fd83f965a9f47924c7d47dcf6962783ae35c21df8307964cd91d1c7476c1688a06baae2dd0f594874057245d0bf2525b2b935c2d47799ff82d5956303876347cd4513048f3e2c58b945e06c7f681661df1b28196cdb49c2271acf92e537baad9e6fa0cc0d80b57577659467557547424fcdf4b237dfd2dd67a2e17ae24b17df7a3d80ad20792be5842cfb16fcbdf3df3ea9ce03e60986733f9f0d8ebca965a3cc3f9f556a656a8b791201d30abb6f5f3fdf6ae01d8658243ed5c55a5aa3105bdfd14e92b947dc8b5a3442b5f344abce07cb97861a1cc341384ec663dbe954f6afe638964c0675a86f4f41a5a0592569ae66ec2e254c52128b852200d66ab95a20d8815bba98ecae57d8730a99a131784eedec968c6b13d91a31656064965960124276e4d5e73fb86c718ca5c1f3245087b9bb6e5c21154ca18df5c27952fd3f1b80a10ab7e7530f3b39406432ae32de</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个Vue程序</title>
    <link href="/posts/2391573034.html"/>
    <url>/posts/2391573034.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="35f440bc154e5c029a89514a74d306fe0e8a1df9aa051ce3ccc659733b598bf7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Live Server插件安装、使用与卸载教程</title>
    <link href="/posts/44.html"/>
    <url>/posts/44.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、下载安装Live-Server插件"><a href="#一、下载安装Live-Server插件" class="headerlink" title="一、下载安装Live Server插件"></a>一、下载安装Live Server插件</h1><p>1. 打开VS Code左侧插件商店，搜索Live Server并<strong>安装</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206101011065.png"></p><p>2. 安装完成后，点击插件右下角的小齿轮，点击<strong>扩展设置</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206104022501.png"></p><p>3. 找到<strong>Custom Browser</strong>，在这里可以选择你要使用的浏览器。这里我选择的是chrome（需要保证电脑本地已经安装了浏览器）：</p><ul><li>null是系统默认的浏览器。</li><li>带PrivateMode是以隐私保护模式打开浏览器。</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206104446439.png"></p><h1 id="二、Live-Server使用演示"><a href="#二、Live-Server使用演示" class="headerlink" title="二、Live Server使用演示"></a>二、Live Server使用演示</h1><p>1. 在VS Code中创建一个HTML文件：<code>page01.html</code>，代码如下图所示（浏览器页面中无内容），<strong>鼠标右键点击Open with Live Server</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206101705146.png"></p><p>2. 此时我在body标签内写内容，可以在右侧浏览器页面中实时显示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/240206001.gif"></p><h1 id="三、卸载Live-Server插件（可选）"><a href="#三、卸载Live-Server插件（可选）" class="headerlink" title="三、卸载Live Server插件（可选）"></a>三、卸载Live Server插件（可选）</h1><div class="note note-danger">            <p>这一部分会将插件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 打开左侧VS Code左侧插件商店，找到已经安装的Live Server，点击齿轮，然后点击卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206100359816.png"></p><p>2. 点击<strong>需要重新加载</strong>。至此，Live Server卸载成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240206100553238.png"></p>]]></content>
    
    
    <categories>
      
      <category>VS Code</category>
      
      <category>Live Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>Live Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器下载安装Vue开发者工具插件</title>
    <link href="/posts/925751481.html"/>
    <url>/posts/925751481.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8176a65772bcdb609f18bf07954a4f826468db6b5aaec99838cf1dae1439f049">4630436162ade97ba2718b7d0c4b3b63439f864957e1a32c7618f976427a38fb3452dd1e1e370a1348d99cf50eed3257a074ec5ee20a2d8dde33642e7e9e2178e4e7f30423fa1986ba80409251e07e8f0c470cfa3f6a7b33742d0fde7f33221a06f9cdf37f6f17673b41cd1913dbba57660e237d6c95fb7fbc7255088c33ef3dff0f739c6069456d85c5354d985ef7c7f56119e4fa19c8b6892a864f30921223aff0d2ce71c3a5e5f50c26bcdd796e26f813cb25b248e6add0f3319d4cc16f737eb2efccf9eebd186f36d29ec2e257f84f8374245c9918f6fef2430bf1e324dc05217779efd64ec0b9a83e4d6af9969363545f87d9f5d1c765424b9d83d9095b9d3d4622509a14fb9a7fd3e62a9cf21474581886a789774716a68a80bf5cae06d9fa056a6b299e695843cc095503193c364cf8c6588e9714dd2e718252d5e112e4da162caf8688581b112d292e302d2b013d0080d3fc474afb3a06c4b840c4b584c05b32e56daca33c071466c988743324ed2f92e9b102e6baa5c94dc42d00f4072734a96cb9042e21bcfa5e43df6832de250c1f910c763cf1e9976a9d4f6d1fb9f460aa1cd5a7e574a6afb53015f6f476ac2fc76a50068f2785bd1418791abb521acb78ac3f646cc4dbc495f9cc8e6e4f19ff56bc5f5549f07fa92ca36b3980110642ae88efd733fda85b6ef87547216adf35bd0826fb01516cc447d40d8c40140ea422eb24488c237c9d0edfa2a7be97752aab9fe190cae6f75276cf2e9c8cc4008954677dc36168e9d20ddfde1762f6d34328c23a59228e035b1f982fcb86db255933f729e646910744e831e86021e42dd2a12cb219fe11aad98a8c385c1c08281002108a7ee66c94d81ca197212309fbadfa3615878025005a3686d07dadf3bc60d4e455f4508edba859405b20c688380f59ac28b3f8b5c83230e7b9b728d17bd4b090d9e8ddae5a59b874268665e3d792fd1faed2e728edcdbfdd3e3fb8af3536f8ef0e6853bcb6ef2405ada4d06fbd7ffb8cca7be10f22da7d4b823b804bc337fcbb36f8e09a061f5d369fe9284a45d0242312eabd2294dec23d447d08d0c766ca23a486827dedebe7bd48f001ef1a2e9610cb39fab330026c3f2f4c38fb7dc9944db3646ffd4d8055adf1316f5da7e5458407a111ecc614aa515c05ed1ad343edb9b1b67b1297316e3dd82d84d4df69c98fbedd99282f75b5916bb506c34aa064a020295aa87f6caeccc505de6119aeeb54f442c1ddbb824961c1d94c0d9be87e6bda21b80eec4d4d5f95eea55dfb55065fbcfddd6178bd868f6dee5051aadaf2a52127e51bebe939bb8aa835a2b8349297c2a21dff93290ba49c245d497495a79a9381f57156ebf7f434005a309a5c99e822b6311fe2835c8ce0fdb52ac5f118f8f135972d420e99d3effa6bff27d0d3a89d544b6a6721e1930dec471905a7802c32ab6b86204dbee555f6bc2e1d436c831401cb9d2a93f83593ec8c4585919a196a1598895801bba56cfcc10c90561fdd799805039b590cf73ff4de5e480f5451e273101d4acdb28164b8465dbdc043c30578c8774e9674ae811a413731b40524194b435696600acaf937f328e09523ba05f4c84c73203ff2962f1cafacbf4fa7871e4868bafcc1bd3de2823e76a49c208f70f3efdfdc11b2ce27425ceb721a6bbce67630e0db8b3478c9fb707028ca432bdebd47e53fe41497567f4c53021f42fae6d938b68cce6231c5dc115505c91616c6b405403ec40650f9b687ac9075492ce1be639b58f88bc01ff856ebb60e635908006e086a71120ce339df8133e2990ceb49a59c23957ec632e133ef36386fa55f4a3b49cc594c3567ee32da3268fdca7ce1aa593b9070d3adaf234e8ae03280e5737108bb147109d1205cd43b80d4fca9b02407b7d5a5ff1e8cdfa65ccd381867e9b7182774405a36f436dd09406cfa0ca0e607084e45b1c67f5c0647a6e23532396aa4d74f3160a4211b4148832be8b000726b41b3126f0daf9379eedc03c55258b998ab2f022fc8396faac88e555a6d50fd8ffb48ba1301a0e66a11595c2625ffd915ff5658fe0f1f8a405a26188415f69b70100400e0f08ea93c53aaac733e9f7e710995c1b2dbdd14ab68603b7d8be6636ebceb63a908389da457518c175cd925a713a4776801d17ebdc6f8da637002a490012dcb5c4314eeff22b6fddc608fd62d466018b4db27854e42af9811d60f52027875918ae9b4e2dbb61e51363dcf25336195edb65ee5fbe22be35a096664e0ac61f796fb37dbc8cadc2969ce6bcd336631745b79ff23d86f0eb531e76554d928e1695f16ffa10dbc38d6982e3a7affbf391f48ee526bf64bccf5f9dadcbb7ac1a31bb617b8e805c52fb2d88b0dea377fee6759816654c99d035c13e9a645d379b4deee926e8e0e62aa6f14b1a8b5b5dbbc0f28c8dd10f02682a8480feef70990d1e14f820a5b79f5ce6181b5ae82242201262b58495b82ced81aeba56f74552b4bb5609019a47b2b5d91b0d2eaae0af57109db600a616d66348f8c075c08dc1b4b70591973a9bdae6dc28ecaa88be35436f86682f2698413d1e532efb63be59226ce69706b96923c3b2f251bdcbf96097e41dac03549f7e5f1221c9146ce02571361c171432650aec40366a5c03a4e528df7ef78df72d43ff8e925108d4f0b99187894d997a8322e37e9ce8ed3ebabf62983a12793efaeb6c4fbcf5ce30d127b40f9b18431050ef31fabe08032f36ab215698334d957728f5ffe65abfa760cdd23724c895c14315b8e5764923bd4575a8990c3177a75f23cdc4c69425d664f32680887b0e22bebdec4fbb47fe3f296e5460926607036798f91fca472e7432b27ca200a97316f75bd1917f3c4e8b63129fa44d4876bb8e6882527280c9e6bde9e5c58f33bbd123d95a542fb3abddf0e5ea94a5d6f598e1ccfc201f79def9a3d63e88f2ec3671ab0460888a232ef5d3cf7f1d6a59f436a4c91c29e5fe00ffbb6f4fa908ac04c052544805f67207c02da2e58016fab348407f207eeb5c9634f81dee492d45c51ff5e789f9897c8eb2ad2b6e2566b05368cdf9c21d117b55a192300a82eb711d6e56acd36e0d844da1e989e46922a5aca5f2352222c956cd3d137364da17b0e80b170e61590f1599073c6c2b1aa91a958053804492e26b201919ce5406215626396af342d822db2e5a33a85ae54859ebdc17ee2f813e07f07f5eb27771b162b4407bb9e51f497cec564bcfb06b6cce17c33b939a0b497d1971e029afb2a66f2884821e0bf7db59579cd0e1709c26e61b9914fd1a56d4bc7a2703d4c38fc72b703805f6f2895ff7712429398492b029e7b8a097d8c6bc96259869c4dfce446fc6130e072a42b46d2becff5c06c28b3bdb40fe079b831a8269d82d5995b165276c2be7b6870e9c2175f964eed12c87ae7ba46e6684d42f202059712d40c69194c91bd919abc3414eeb6fdca2ee482c25f372b2996ca4af264c13831914ea16efb123898b834c36584d6942c1c74f431085e8f3621fb58c65d8a27d229cffb31f0c7e139cb69bdeb41f76d9589f2ddd4608dc121f6d3545648bf864f7f74f5731900a15050d8ce5c3dfb478ed3d4153bcdf8f1087d19c6de1573b6d1af671d6c9be1db63328372d6831820e980b7dccea316852016bc5e15df1ba2af9e3280be7aa789cd3a178a40f0a9a51dc8f8d44edd58441fe7089920f0892e7f88fe48ec6c3d975b4701d42999f15c52307db06621b85d1b244b9e4afb21c979850e0cea87013472ae03de8edff0874756cdefc8d445cf7104c33b68f3eb424bd298971b7ed8cb800f17e6a1d27a03aa900fad7abe896492386d4537c84b904e7d851364e55bf277e2c8fc1023349d8a624e2d2aabaf0c34d7b17390b29a662751b352f17b1faaca767449e2ad069cbea42bf9c84975460c4f99fe1514156fbc0432e1ae761368fdc64a0bdd53517893a31d8090f213e0ab775025b7fca85b62853827437f934117e734ad93bfb00c585b7b73b3df5e3d460471efab02279705f25e17080d5bddde201e51acf7ed735621deb5b00ab1d7139df815d43fd58fae09d4dc4d0a6462e107bb876e5a3a4881fe2e6bad723dc0f954e5eb45f15cb7359c9e76ef27aef7eeea0ac6dadc87fc03c113a2215948dacc82f05c57568c543b9428860755c1354893e2cf2762849df5586fbb5660679d91282a41ed7a156b29f4c124f93f5766dd36c97250c1812bae64af9f0b032f583fa7779081e951d3f58bd5bb677b866e788c6483b43db9b0a1334d293b9de276638545c42974cb450f9f23a51a25d95bb686444693af61260ccb3e5730f1b5864685fb7df61c651ed6b9ad49df902f126f2cc06798b97a2c7cf0d980f4b920ba04c33c03860e2d0759156c52610b3d0c76966a1db30f0a224c3571d9d634a3f21b151534202cd8f6683274271d562609012e2aa9a9a435d0b9d86c2ede4a6b05b5af952b9b7d104fc5f1a3f0eb7f2e4bdb043882e0f9dd5538afb07d8ee6be7b92c1bec0daa074c373db6194ff2907e40f4bc80ac08111e50369005c2b57bc3d29e4fb536b6f2f562f44fbe3e17b11c6a01ed94fd2dc8d3a0d5653d1a53d6ae99b6351f98972529f201781617416a28e0dc07d0353c6c0fd06688966a4dc0ed201320eee0184306ebf990f636fad7efcac90c875269d8aa45d07ab28dae6885952ec48e3e3fda3b854207b8990cb17013a67e3e58766865d3f701f6a517a83b37691ae20eb4459e7a1e0256e87701c50069191b58d6730253bfeb62b717935ac433e870013d3b01a5194d0a85e4e21931a5a8152096e1ab5c4ace1f360b57f69a93876858a231e490dc7b9eb13a90f22bbe85276e241be84cc678db4c3ad16ea6ef9bfd03ebe5f702ab7b134b4edeec1d64dda4c38853d66739d2fea4ca33a79b059efc77b37e1d47086c64532a4b2fff7a0f760106abdf037a8bf6bdbe186beeaac2fa2edf760e9b9abc50a5578b9037c955b868d57b15dbfd2af0edade3c00812944334cd82c3e715ab17cb9a0ac18f10397feeb9cb32d2e607a2698e0bd8f541dcbb0737d22e9246044c6a2ee52c67261b158b3ba13f4511a4b5c044b96db2aad1a7dce4b00ad876f9aeaa6c3571cee1723663375f8af8e6fbd0e5634b09ead45a48170bc59f02eab38915c29d3b880bf9fd0eced2d954171dc0bbbb679d4d90d5fbb937f3b31c2dcaec4141c987cfd3eba9cb3424a55d0420dcb49d90a8e4156c1290a56c5739a4d97bb31d395841d4cfb0df48e4da0914f65d7ea904a304cb51cc5d3bc5ddfbf36b193cd0fd1995e8ad5aede8ea6a14db268bda9b977e8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>Vue开发者工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Vue开发者工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code查看Git提交记录</title>
    <link href="/posts/43.html"/>
    <url>/posts/43.html</url>
    
    <content type="html"><![CDATA[<p>在IDEA中，我们可以看到项目中Git的提交记录，但是VS Code中默认没有Git历史记录。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240205141727113.png"></p><p>我们可以到VS Code插件商店中搜索<code>Git Graph</code>插件并安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240205142106021.png"></p><p>安装完成，点击左侧<strong>Git图标</strong>，选择<strong>Git分支图标</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240205142400893.png"></p><p>此时我们就可以看到这个项目的Git提交历史了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240205142643306.png"></p>]]></content>
    
    
    <categories>
      
      <category>VS Code</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Winodws Subsystem for Linux（WSL）安装教程</title>
    <link href="/posts/42.html"/>
    <url>/posts/42.html</url>
    
    <content type="html"><![CDATA[<p>WSL，全称Windows Subsystem for Linux，中文翻译过来是Windows环境下的Linux子系统。可以在Windows电脑上运行Linux环境，不需要单独安装VMWare等虚拟机软件，使用WSL的目的是为同时使用Windows和Linux操作系统的开发人员提供高效体验。</p><p>你可以使用WSL安装并运行各种Linux的发行版，例如：Ubantu、Debian、Kali等，并且在提供命令行工具（Bash）运行Linux命令。</p><p>官网提供了更多关于WSL的介绍，感兴趣的小伙伴可以点击右侧链接查看：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">点我查看</a></p><p>接下来就讲一下WSL的安装与使用：</p><h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并点击<strong>确定</strong>，进入命令行窗口。在命令行中输入<code>winver</code>查看操作系统版本，请确保操作系统是<strong>Windows 10</strong>和<strong>Windows 11</strong>，并且版本在<strong>2004版本以后</strong>，这里我的操作系统是22H2版本，符合安装要求：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202135450995.png"></p><p>2. 电脑从来没有安装过WSL（也就是说你之前从没听说过有这个东西）</p><p>3. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>control</code>并回车，右上角查看类别改成<strong>小图标</strong>，点击<strong>程序与功能</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202142340458.png"></p><p>3. 选择<strong>启动或关闭Windows功能</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202142540342.png"></p><p>4. 勾选<strong>适用于Linux的Windows子系统</strong>，完成后点击<strong>确定</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202142612124.png"></p><h1 id="二、安装WSL"><a href="#二、安装WSL" class="headerlink" title="二、安装WSL"></a>二、安装WSL</h1><p>1. 打开Windows应用商店（Microsoft Store）。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202142905182.png"></p><p>2. 在上方搜索框中输入你想要的Linux发行版，这里我安装的是Ubantu 长期支持版（LTS）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143659607.png"></p><p>3. 进入详情页后，点击<strong>安装</strong>，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143750193.png"></p><p>4. 下载完成，点击<strong>打开</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143847804.png"></p><p>5. Ubantu正在安装，请耐心等待（期间不要关闭这个窗口）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143923385.png"></p><p>6. 等待了1~3分钟以后，此时Ubantu系统要我们自己输入用户名（英文名称要符合Unix的命名规则，命名规则可以自行百度）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202144259062.png"></p><p>7. 进入输入密码界面，注意密码默认是不显示在控制台的，一共需要输入两次（如果你记不住密码，建议将密码设置成123456）。输入完毕后，你就可以在Windows上正常使用Linux啦！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202144643586.png"></p><h1 id="四、修改WSL主题风格（可选）"><a href="#四、修改WSL主题风格（可选）" class="headerlink" title="四、修改WSL主题风格（可选）"></a>四、修改WSL主题风格（可选）</h1><div class="note note-success">            <p>感兴趣的小伙伴按照下面内容自己动手修改。</p>          </div><p>1. <kbd>Ctrl</kbd>和鼠标滚轮可以调整窗口和字体大小。</p><p>2. <strong>鼠标右键</strong>点击WSL上方白色部分，点击<strong>属性</strong>，可以修改界面风格：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202145311680.png"></p><p>3. 在字体窗口自行调整字体类型和大小，这里我选择的是Consolas字体（Windows自带，挺好看的），大小20号：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202145530346.png"></p><h1 id="五、卸载WSL（可选）"><a href="#五、卸载WSL（可选）" class="headerlink" title="五、卸载WSL（可选）"></a>五、卸载WSL（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 按<kbd>Win</kbd>键，找到Ubantu，鼠标右键点击<strong>卸载</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143332649.png"></p><p>2. 点击<strong>卸载</strong>，过一会以后应用列表Ubantu的图标就会消失，卸载完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240202143404859.png"></p><h1 id="六、安装WSL可能会出现的问题"><a href="#六、安装WSL可能会出现的问题" class="headerlink" title="六、安装WSL可能会出现的问题"></a>六、安装WSL可能会出现的问题</h1><p>如果在微软商店安装Ubantu并打开的时候报错：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Installing, <span class="hljs-keyword">this</span> may take a few minutes…<br>WslRegisterDistribution failed with error: <span class="hljs-number">0x8007019e</span><br>The Windows Subsystem <span class="hljs-keyword">for</span> Linux optional component <span class="hljs-keyword">is</span> not enabled. Please enable it and <span class="hljs-keyword">try</span> again.<br>See https:<span class="hljs-comment">//aka.ms/wslinstall for details.</span><br>Press any key to <span class="hljs-keyword">continue</span>…<br></code></pre></td></tr></table></figure><p>可以参考这篇文章，之前我也遇到过，就是按照博主的方案解决了：<a href="https://blog.csdn.net/qq_17576885/article/details/126707239">https://blog.csdn.net/qq_17576885/article/details/126707239</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Workstation安装+彻底卸载教程（Windows版）</title>
    <link href="/posts/41.html"/>
    <url>/posts/41.html</url>
    
    <content type="html"><![CDATA[<p>VMware Workstation是一款虚拟机软件，它允许你在一台电脑上创建并运行多个虚拟操作系统。就像在一台电脑上同时运行多个计算机一样，你可以在VMware Workstation中创建虚拟计算机，安装不同的操作系统（如Windows、Linux等），并在它们之间轻松切换。这对普通用户来说，就好像在电脑上开设了多个独立的虚拟环境，方便进行软件测试、学习和实验，而不用担心影响到主机系统。</p><p>接下来就为大家讲解一下Windows环境下VMware Workstation的安装：</p><h1 id="一、下载VMware-Workstation"><a href="#一、下载VMware-Workstation" class="headerlink" title="一、下载VMware Workstation"></a>一、下载VMware Workstation</h1><p>1. 点击右侧链接进入官网下载页面：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">点我查看</a></p><p>2. 在页面中选择Windows下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121165603971.png"></p><h1 id="二、安装VMware-Workstation"><a href="#二、安装VMware-Workstation" class="headerlink" title="二、安装VMware Workstation"></a>二、安装VMware Workstation</h1><p>1. 下载完成后双击打开安装包，进入欢迎界面，点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121165800712.png"></p><p>2. 进入用户协议以后，勾选左下方的协议，完成后点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121165912512.png"></p><p>3. 点击右上角<strong>更改</strong>，更改安装路径，这里我安装在D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170033841.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170339244.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170431309.png"></p><p>4. 用户体验设置页面，<strong>取消勾选</strong><u>启动时检查产品更新</u>和<u>加入VMware客户体验提升计划</u>，完成后点击下一步：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170532539.png"></p><p>5. 快捷方式按照默认勾选的即可，点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170655703.png"></p><p>6. 点击<strong>安装</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170904840.png"></p><p>7. 安装中，请耐心等待。期间电脑可能会断网，这是因为VMWare需要配置自身网络驱动。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121170947012.png"></p><p>8. 安装完毕。点击右下角<strong>许可证</strong>，接下来我们填写许可证密钥信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121171554249.png"></p><p>9. 获取许可证密钥：点击右侧链接获取VMware的许可证密钥：<a href="http://www.caeworld.cn/xpjc/162279.html">点我查看</a></p><p>10. 将许可证密钥信息填入，完成后点击<strong>输入</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121171805677.png"></p><p>11. 点击<strong>完成</strong>。VMware安装完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121172001187.png"></p><h1 id="三、VMware-Workstation的卸载（可选）"><a href="#三、VMware-Workstation的卸载（可选）" class="headerlink" title="三、VMware Workstation的卸载（可选）"></a>三、VMware Workstation的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Installer，在程序列表中找到VMware Worksation，鼠标右键，点击卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121164255938.png"></p><p>2. 此时会弹出一个提示窗口，选择<strong>是</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121164336939.png"></p><p>3. 卸载过程比较慢，请耐心等待。</p><p>4. 卸载完成，此时Geek会我们检测出安装残留，我们只需要点击<strong>完成</strong>即可，清除卸载残留：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121164745966.png"></p><p>5. 清理完毕，关闭Geek即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121164930832.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>VMware Workstation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code配置MinGW并编写运行C/C++代码（适用于Windows）</title>
    <link href="/posts/40.html"/>
    <url>/posts/40.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装了VS Code和MinGW，没有安装的小伙伴按照下方链接给出的教程进行安装：</p><table><thead><tr><th align="center"><a href="https://www.icode504.com/posts/39.html">MinGW安装配置教程（Windows版）</a></th><th align="center"><a href="https://www.icode504.com/posts/38.html">Visual Studio Code安装配置教程（Windows版）</a></th></tr></thead></table><p>1. 找一个你熟悉的位置写代码，建议文件路径只包含英文字符。这里我在F盘的Code文件夹下创建了一个C-Project文件夹：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203202836440.png"></p><p>2. 打开VS Code，点击左上角文件 –&gt; 打开文件夹。打开上一步我们创建的C-Project空文件夹：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203203122206.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203203324194.png"></p><p>3. 点击左上角的插件商店：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203203432028.png"></p><p>4. 在上方搜索框中输入C，下载前三个微软官方提供的插件：C&#x2F;C++、C&#x2F;C++ Themes、C++ Extension Pack：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203204408841.png"></p><p>5. 上方弹出一个颜色主题，这里我选择的是第一个：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203204538939.png"></p><p>5. 安装完成，我们点击上方的项目写代码。这里我创建一个C语言文件：<code>swap.c</code>，代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 两数交换</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>, y = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;两个数未交换之前的值, x = %d, y = %d\n&quot;</span>, x, y);<br><br>    <span class="hljs-comment">// 额外定义一个变量，实现两数的交换</span><br>    <span class="hljs-type">int</span> temp = x;<br>    x = y;<br>    y = temp;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;交换后两个数的值, x = %d, y = %d\n&quot;</span>, x, y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6. 按<kbd>Ctrl</kbd>和<kbd>F5</kbd>键，以非调试状态运行程序。在上方调试器选择**C++ (GDB&#x2F;LLDB)**：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203210122970.png"></p><p>7. 选择<strong>C&#x2F;C++: gcc.exe 生成和调试活动文件</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203210217881.png"></p><p>8. 此时左上角生成了一个<code>.vscode</code>文件夹，里面包含配置文件，此时点击终端，就可以看到C语言代码的输出结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240203211336203.png"></p>]]></content>
    
    
    <categories>
      
      <category>VS Code</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>MinGW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MinGW安装配置教程（Windows版）</title>
    <link href="/posts/39.html"/>
    <url>/posts/39.html</url>
    
    <content type="html"><![CDATA[<p>MinGW，全称为Minimalist GNU for Windows，是一个可自由使用和发布的Windows特定头文件和使用GNU工具集导入库的集合。它允许在GNU&#x2F;Linux和Windows平台生成本地的Windows程序而不需要第三方C运行时（C Runtime）库。使用MinGW开发的程序不需要额外的第三方DLL支持就可以在Windows下运行。</p><p>以下是MinGW在Windows环境下的安装和配置教程：</p><h1 id="一、下载MinGW-w64"><a href="#一、下载MinGW-w64" class="headerlink" title="一、下载MinGW-w64"></a>一、下载MinGW-w64</h1><p>1. 打开MinGW-w64官网下载页面（托管到了SourceForge上）：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">点我查看</a></p><p>2. 向下找，找到最新版本的MinGW，选择seh下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240201104452235.png"></p><blockquote><p>说明（第2、3、4、5点总结的可能不太严谨，如果您在这方面有很深入的了解，可以评论区或者私信告诉我）：</p><p>1. <font color="FF0000">不要</font>安装上面的<code>MinGW-W64-install.exe</code>，这个是联网安装的，服务器在国外，在国内安装因为网络原因大概率会失败。</p><p>2. x86_64简单而言是64位的操作系统（绝大部分电脑都是64位的），i686属于32位操作系统</p><p>3. posix（全称Portable Operating System Interface of UNIX，翻译过来就是UNIX可移植操作系统接口），是<a href="http://www.ieee.com/">IEEE</a>为要在各种UNIX操作系统上运行的软件而定义的一系列API标准总称。</p><p>4. win32是由Windows操作系统的API，主要也是应用在Windows操作系统上。</p><p>5. seh（Structured Exception Handling）是Windows操作系统中默认的异常处理机制，sjlj（Signal Set JMP）是Unix及类Unix系统中的一种轻量级异常处理机制。</p></blockquote><h1 id="二、安装配置MinGW-w64"><a href="#二、安装配置MinGW-w64" class="headerlink" title="二、安装配置MinGW-w64"></a>二、安装配置MinGW-w64</h1><p>1. 将下载的7z压缩包（推荐使用<a href="https://www.bandisoft.com/bandizip/">Bandzip</a>、<a href="https://7-zip.org/">7-zip</a>等解压工具）解压到一个你熟悉的地方（建议是英文路径），这里我解压到了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131155552319.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131155721190.png"></p><p>2. 为MinGW配置环境变量：找到MinGW的安装路径，出现bin、etc、include等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131160221163.png"></p><p>3. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></td></tr></tbody></table><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134716166.png"></p><p>6. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134919881.png"></p><p>7. 配置安装路径，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131162334741.png"></p><p>8. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131162546989.png"></p><p>9. 检查Mingw环境变量是否配置成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>并回车，进入控制台，输入<code>gcc -v</code>和<code>g++ -v</code>，出现版本信息说明环境变量配置成功！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131162902042.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131162938776.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>MinGW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Studio Code安装配置教程（Windows版）</title>
    <link href="/posts/38.html"/>
    <url>/posts/38.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、下载Visual-Studio-Code（VS-Code）"><a href="#一、下载Visual-Studio-Code（VS-Code）" class="headerlink" title="一、下载Visual Studio Code（VS Code）"></a>一、下载Visual Studio Code（VS Code）</h1><blockquote><p>本文后续内容使用NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a>，已经安装的小伙伴接着往下看。</p></blockquote><p>1. 打开官网下载地址：<a href="https://code.visualstudio.com/Download">点我查看</a></p><p>2. 根据自己的操作系统，选择下载安装包。这里我使用的是Windows，只需要点击第一个即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222155257752.png"></p><p>3. 如果浏览器没有下载，就点击页面中的这个链接下载（浏览器已下载的请忽略这条）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222155506749.png"></p><h1 id="二、安装Visual-Studio-Code（VS-Code）"><a href="#二、安装Visual-Studio-Code（VS-Code）" class="headerlink" title="二、安装Visual Studio Code（VS Code）"></a>二、安装Visual Studio Code（VS Code）</h1><p>1. 双击打开安装包。按照下图所示<strong>勾选协议</strong>，点击下一步：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160359382.png"></p><p>2. 点击<strong>浏览</strong>选择安装路径，这里我安装在了D盘（如不需要更改安装路径的请跳转至下一步）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160520232.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160616103.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160650958.png"></p><p>3. 点击下一步</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160715044.png"></p><p>4. 附加服务页面建议全部勾选，然后点击下一步：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222160944031.png"></p><p>5. 上述内容确认无误后，点击安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222161027142.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222161056793.png"></p><p>7. 安装完成，勾选<strong>运行Visual Studio Code</strong></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231222161130731.png"></p><h1 id="三、Visual-Studio-Code（VS-Code）的简单配置"><a href="#三、Visual-Studio-Code（VS-Code）的简单配置" class="headerlink" title="三、Visual Studio Code（VS Code）的简单配置"></a>三、Visual Studio Code（VS Code）的简单配置</h1><h2 id="3-1-页面汉化（可选）"><a href="#3-1-页面汉化（可选）" class="headerlink" title="3.1 页面汉化（可选）"></a>3.1 页面汉化（可选）</h2><p>VS Code默认是英文界面，对于一些英文不太好的小伙伴可能不太友好，好在官方为我们提供了VS Code的汉化包。</p><p>1. 在左侧菜单找到插件商店：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131170427487.png"></p><p>2. 在搜索框中搜索<code>Chinese Simplified</code>，搜索结果第一个就是我们要安装插件，点击Install安装插件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131170733135.png"></p><p>3. 安装完成后，右下角会弹出一个窗口提示，点击<code>Change Language and Restart</code>，重新加载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131170831058.png"></p><p>4. 汉化成功！页面如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131170910022.png"></p><h2 id="3-2-开启文件自动保存（可选）"><a href="#3-2-开启文件自动保存（可选）" class="headerlink" title="3.2 开启文件自动保存（可选）"></a>3.2 开启文件自动保存（可选）</h2><p>在VS Code中写代码，默认是需要按<kbd>Ctrl</kbd>+<kbd>S</kbd>键保存文件。但是如果出现意外状况（例如电脑突然断电），你编写的代码如果没保存，绝对能搞炸你的心态。因此，我们需要开启文件自动保存功能</p><p>1. 点击左下角的齿轮（或者按快捷键<kbd>Ctrl</kbd>和<kbd>,</kbd>），进入设置：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131213903209.png"></p><p>2. 在上方搜索框中输入<code>auto save</code>，常用设置中改为<code>afterDelay</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131171830424.png"></p><p>3. 左侧菜单选择<strong>文件</strong>，将保存方式更改成<strong>afterDelay</strong>，保存时间间隔自定义（以毫秒为单位）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131172107593.png"></p><h2 id="3-3-主题风格配置（可选）"><a href="#3-3-主题风格配置（可选）" class="headerlink" title="3.3 主题风格配置（可选）"></a>3.3 主题风格配置（可选）</h2><p>VS Code支持多种主题风格配置。例如：暗黑风格、纯白风格等等。</p><blockquote><p>说明：如果系统自带的风格都不符合，可以到插件商店自行下载其他风格的主题。</p></blockquote><p>1. 点击左下角的齿轮，选择主题：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131214819974.png"></p><p>2. 此时浏览器上方会弹出系统自带的颜色主题。2024是龙年，也是我的本命年，这里我选个红色，图个喜庆！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131214912974.png"></p><p>3. 修改后的颜色风格如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131215053668.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Visual Studio Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse配置PostgreSQL教程（Windows版）</title>
    <link href="/posts/37.html"/>
    <url>/posts/37.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装PostgresSQL和Intellij IDEA，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">PostgreSQL</td><td align="center"><a href="https://www.icode504.com/posts/35.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr><tr><td align="center">Eclipse</td><td align="center"><a href="https://www.icode504.com/posts/30.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><h1 id="一、下载并安装pgJDBC"><a href="#一、下载并安装pgJDBC" class="headerlink" title="一、下载并安装pgJDBC"></a>一、下载并安装pgJDBC</h1><p>1. 按<kbd>Win</kbd>和<kbd>S</kbd>键，在搜索框中搜索Stack Builder并打开：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131100854755.png"></p><p>2. 这里我们选择本地安装的PostgreSQL，完成后点击<strong>下一个</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101117119.png"></p><p>3. 按照下图操作，选择pgJDBC：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101409184.png"></p><p>4. 下载目录自定义，这里我安装在D盘，完成后点击<strong>下一个</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101553293.png"></p><p>5. 下载完成，点击<strong>下一个</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101620551.png"></p><p>6. 进入pgJDBC安装界面，点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101713249.png"></p><p>7. 选择一个你熟悉的安装位置，这里我安装在了D盘，完成后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131101906926.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102038330.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102113012.png"></p><p>8. 点击<strong>Next</strong>，开始安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102151200.png"></p><p>9. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102227258.png"></p><p>10. 点击<strong>Finish</strong>，安装完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102245360.png"></p><p>11. 点击<strong>完成</strong>，关闭Stack Builder：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102428855.png"></p><h1 id="二、Eclipse配置PostgreSQL"><a href="#二、Eclipse配置PostgreSQL" class="headerlink" title="二、Eclipse配置PostgreSQL"></a>二、Eclipse配置PostgreSQL</h1><p>1. 打开Eclipse，在上方菜单栏选择<strong>Window</strong> –&gt; <strong>Show View</strong> –&gt; <strong>Other</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131100443322.png"></p><p>2. 双击打开<strong>Data Management</strong>，选择<strong>Data Source Explorer</strong>，完成后点击<strong>Open</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131100530658.png"></p><p>3. 此时会弹出一个Data Source Explorer窗口，鼠标右键选中第一个<strong>Database Connections</strong>，点击<strong>New</strong>新建一个连接：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102657948.png"></p><p>4. 连接类型<strong>选择PostgreSQL并选中</strong>，Name和Description自定义，完成后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131102920348.png"></p><p>5. 点击右上角<strong>加号</strong>修改数据库驱动和连接信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131103041407.png"></p><p>6. 选中数据库驱动模板<strong>PostgreSQL JDBC Driver</strong>，此时上方弹出一个错误信息：在本地系统中无法找到<code>postgresql-8.1-xxxx.jdbc2.jar</code>，这说明我们需要将Eclipse原有的数据库驱动改成前面我们下载安装的pgJDBC：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131103624152.png"></p><p>7. 选择<strong>JAR List</strong>，点击右侧的<strong>Clear All</strong>，清空驱动文件（下图列出来的JAR包本地不存在）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131103928756.png"></p><p>8. 点击<strong>Add JAR&#x2F;Zip</strong>，找到前面我们安装的pgJDBC的位置，选中<code>postgresql-42.6.0.jar</code>文件，点击<strong>打开</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131104057823.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131104254745.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131104425996.png"></p><p>9. 点击上方的<strong>Properties</strong>，按照下图所给的提示填写好配置信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131104642198.png"></p><p>10. 记不住密码的小伙伴建议勾选<code>Save Password</code>，点击右下角的<strong>Test Connection</strong>，测试一下数据库连接：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131105018333.png"></p><p>11. 此时弹出一个窗口：<code>Ping succeeded</code>，说明数据库测试连接成功，点击<strong>OK</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131105137424.png"></p><p>12. 点击<strong>Finish</strong>，PostgreSQL连接成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131105306411.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240131105549246.png"></p>]]></content>
    
    
    <categories>
      
      <category>Eclipse</category>
      
      <category>PostgreSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA/DataGrip配置PostgreSQL教程</title>
    <link href="/posts/36.html"/>
    <url>/posts/36.html</url>
    
    <content type="html"><![CDATA[<p>请确保电脑本机已经安装PostgresSQL和Intellij IDEA，没有安装的小伙伴根据自己的操作系统点击下方链接查看安装教程（已经安装的小伙伴继续往下看）：</p><table><thead><tr><th align="center"></th><th align="center">Windows</th><th align="center">macOS</th><th align="center">Linux</th></tr></thead><tbody><tr><td align="center">PostgreSQL</td><td align="center"><a href="https://www.icode504.com/posts/35.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr><tr><td align="center">Intellij IDEA</td><td align="center"><a href="https://www.icode504.com/posts/10.html">点我查看</a></td><td align="center">敬请期待</td><td align="center">敬请期待</td></tr></tbody></table><p>1. 按照下图所示操作，数据源选择PostgreSQL：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240105174627593.png"></p><p>2. 在Driver处，点击<strong>PostgreSQL</strong>，点击<strong>Go to Driver</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240105175052684.png"></p><p>3. 在Driver Files处，点击<strong>加号</strong>，选择<strong>Proviced Dirver</strong>，数据库驱动选择PostgreSQL官网最新稳定版本：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130111433876.png"></p><p>4. 点击<strong>Download</strong>，下载数据库驱动文件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130111631704.png"></p><p>5. 下载中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130111649561.png"></p><p>5. Postgres驱动包添加成功，如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130114135936.png"></p><p>6. 点击左上角的Data Sources。用户名Username输入<strong>postgres</strong>，密码是你在安装Postgres的时候设置的密码（我当时设置的是123456）。配置完成后，点击左下角的<strong>Test Connection</strong>测试我们填写的内容是否正确：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130114220813.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130094448766.png"></p><p>7. 左下角出现Succeeded弹窗表示Postgres连接成功。重新输入一遍密码，点击<strong>OK</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130094755483.png"></p><p>8. 连接成功，接下来你就可以在console中写SQL语句了！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130100150910.png"></p>]]></content>
    
    
    <categories>
      
      <category>Intellij IDEA</category>
      
      <category>PostgresSQL</category>
      
      <category>DataGrip</category>
      
      <category>PostgresSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>Intellij IDEA</tag>
      
      <tag>DataGrip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/35.html"/>
    <url>/posts/35.html</url>
    
    <content type="html"><![CDATA[<p>PostgreSQL是基于<a href="https://dsf.berkeley.edu/postgres.html">POSTGRES 4.2</a>版本的对象-关系型数据库，由加州大学伯克利分校计算机系研发。POSTGRES开创了许多先进理念，这些概念后来才在一些数据库系统中出现（他们的<a href="https://www.postgresql.org/">官网</a>标题宣传的是世界上最先进的开源关系型数据库）。</p><p>PostgreSQL是原伯克利代码的后代，它是开源的，支持大部分SQL标准并提供很多现代化特性：复杂查询、外键、触发器、更新视图等。</p><p>此外，用户能以多种方式扩展PostgreSQL，例如可以添加新数据类型、新函数、新操作符等。由于自由的许可，PostgreSQL可以被任何人使用、修改、发布。</p><p>以下是Windows环境下PostgreSQL的安装、配置与卸载教程：</p><h1 id="一、下载PostgreSQL"><a href="#一、下载PostgreSQL" class="headerlink" title="一、下载PostgreSQL"></a>一、下载PostgreSQL</h1><p>1. 进入官网下载链接：<a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">点我进入</a>（网页加载可能比较慢，请耐心等待）</p><p>2. 根据自己的操作系统下载，这里我选择Windows版15.4版本：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911144620813.png"></p><h1 id="二、安装PostgreSQL"><a href="#二、安装PostgreSQL" class="headerlink" title="二、安装PostgreSQL"></a>二、安装PostgreSQL</h1><p>1. 双击打开安装包，进入欢迎界面，点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911144921054.png"></p><p>2. 选择安装路径，建议安装路径是全英文的（小白安装可以不用修改此路径），完成后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240105161313262.png"></p><p>3. 选择组件：这里安装器为我们默认勾选了四个组件，简单解释一下这些组件的作用。</p><table><thead><tr><th>组件名称</th><th>说明</th></tr></thead><tbody><tr><td>PostgreSQL Server</td><td>PostgreSQL数据库服务器（首次安装必须勾选）</td></tr><tr><td>pgAdmin 4</td><td>pgAdmin 4是PostgreSQL图形管理界面，用来管理PostgreSQL数据库和服务器，可以在内部编写SQL语句</td></tr><tr><td>Stack Builder</td><td>Stack Builder通过下载安装工具、驱动和应用，可以补充PostgreSQL未安装的内容。</td></tr><tr><td>Command Line Tools</td><td>PostgreSQL的命令行工具，如果需要使用pgAdmin 4，需要安装命令行工具</td></tr></tbody></table><p>如果你是新手小白，按照系统默认勾选即可，然后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911145322812.png"></p><p>4. 选择数据存储路径：第3步如果选择了安装路径，那么这一步就按照系统默认安装位置即可（不用修改），点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240105163356163.png"></p><p>5. 为超级管理员设置密码。注意：如果你记不住密码，就将密码设置成123456即可，完成后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911145851183.png"></p><p>7. PostgreSQL默认端口是<strong>5432</strong>，保持默认即可，不用修改。点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911150036442.png"></p><p>8. 地区按照系统默认选择<strong>Default Locale</strong>，完成后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911150143566.png"></p><p>9. 对前面安装选项进行确认，如果没有问题点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240105164020363.png"></p><p>10. 点击<strong>Next</strong>，开始安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911150301037.png"></p><p>11. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230911150326605.png"></p><p>12. 安装完毕，点击<strong>Finish</strong>。Postgres安装完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130105919293.png"></p><h1 id="三、卸载PostgreSQL"><a href="#三、卸载PostgreSQL" class="headerlink" title="三、卸载PostgreSQL"></a>三、卸载PostgreSQL</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到PostgreSQL 15，鼠标右键，点击<strong>卸载</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130101637247.png"></p><p>2. 此时卸载模式，默认选择第一个<strong>Entire Application</strong>（完全卸载），点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130101833493.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130101938418.png"></p><p>4. 此时弹出一个卸载成功的小窗口，点击OK：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130102132979.png"></p><p>5. 在Geek Uninstaller中清理注册表等卸载残留，点击<strong>完成</strong>，卸载残留清理完毕。至此，Postgres卸载完成。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240130102238678.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Groovy安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/34.html"/>
    <url>/posts/34.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9034151790df4e6e1c33e594f0138cc6a3c84a3c231243d180230a2e31908c44"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang安装、配置和卸载教程（Windows版）</title>
    <link href="/posts/32.html"/>
    <url>/posts/32.html</url>
    
    <content type="html"><![CDATA[<p>Golang，也称为Go语言，是由Google开发的一种静态类型、编译型的编程语言。以下是关于Go语言的一些重要特点和特性：</p><ol><li><p><strong>简洁易读：</strong> Go语言设计简洁，语法清晰，易于阅读和学习。它借鉴了C语言的部分特性，但去除了一些复杂的特性和语法，使得代码更加简洁明了。</p></li><li><p><strong>并发支持：</strong> Go语言内置了轻量级的并发支持，通过goroutine和channel来实现并发编程。这使得编写并发程序变得更加简单和高效。</p></li><li><p><strong>垃圾回收：</strong> Go语言拥有自动垃圾回收机制，可以帮助程序员管理内存，减少内存泄漏问题。</p></li><li><p><strong>静态类型：</strong> Go语言是一种静态类型语言，变量在编译时需要声明其类型，这有助于提高代码的可读性和稳定性。</p></li><li><p><strong>快速编译：</strong> Go语言的编译速度非常快，可以快速生成可执行文件，适合于快速开发和部署应用程序。</p></li><li><p><strong>跨平台支持：</strong> Go语言提供了良好的跨平台支持，可以在不同的操作系统上进行开发和部署，包括Windows、Linux和MacOS等。</p></li><li><p><strong>丰富的标准库：</strong> Go语言拥有丰富的标准库，涵盖了网络、文件操作、并发等各个领域，使得开发者可以更加高效地编写各种类型的应用程序。</p></li></ol><p>Golang主要应用于Web开发、云计算、区块链等领域。</p><p>Windows安装Golang有两种方式：直接安装、ZIP解压缩安装（需要配置环境变量）。两种方式<strong>二选一</strong>即可。</p><h1 id="方式一：直接安装"><a href="#方式一：直接安装" class="headerlink" title="方式一：直接安装"></a>方式一：直接安装</h1><h2 id="一、下载Golang安装包"><a href="#一、下载Golang安装包" class="headerlink" title="一、下载Golang安装包"></a>一、下载Golang安装包</h2><p>1. 打开右侧链接，进入Go语言官网下载页面：<a href="https://golang.google.cn/dl/">点我查看</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017111013563.png"></p><p>2. 在下方<strong>Stable versions</strong>（稳定版本），选择相应的操作系统对应的安装包下载。这里我使用的是Windows 64位，直接下载下图的安装包即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240129110522537.png"></p><h2 id="二、安装Golang"><a href="#二、安装Golang" class="headerlink" title="二、安装Golang"></a>二、安装Golang</h2><p>1. 双击打开安装包：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017112220938.png"></p><p>2. 如果弹出安全警告，直接勾选下面选项，然后点击<strong>运行</strong>即可（没有此弹窗的直接跳转到下一步）。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017112356575.png"></p><p>3. 进入安装欢迎页面以后，点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017112444322.png"></p><p>4. 在协议下方勾选<strong>I accept the terms in the Lincense Agreement</strong>，然后点击<strong>Next</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017112652583.png"></p><p>5. 点击<strong>Change</strong>选择安装路径，建议安装在除C盘外的路径，路径中建议只包含英文（避免后续使用过程中出现各种各样未知的bug），这里我安装在了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017113238490.png"></p><p>6. 点击<strong>Install</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017113305680.png"></p><p>7. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017113326710.png"></p><p>8. 点击<strong>Finish</strong>，Golang安装完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017113409596.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面后，输入<code>go version</code>，如果出现下方的界面就说明你的Golang安装成功并且可以正常使用了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017113724236.png"></p><h2 id="三、卸载Golang（可选）"><a href="#三、卸载Golang（可选）" class="headerlink" title="三、卸载Golang（可选）"></a>三、卸载Golang（可选）</h2><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><blockquote><p>注意：本文使用到Geek Uninstaller卸载软件，如果有需要的小伙伴请点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/31.html">点我查看</a></p><p>已经安装的小伙伴可以接着往下看！</p></blockquote><p>1. 打开Geek Uninstaller，找到<code>Go Programming Language amd64 go.xxx</code>，鼠标右键，点击卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127160904157.png"></p><p>2. 此时弹出一个窗口，选择<strong>是</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127160943100.png"></p><p>3. 卸载中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127161051126.png"></p><p>4. 卸载完毕，Golang程序卸载完成。</p><h1 id="方式二：ZIP解压缩安装并配置"><a href="#方式二：ZIP解压缩安装并配置" class="headerlink" title="方式二：ZIP解压缩安装并配置"></a>方式二：ZIP解压缩安装并配置</h1><h2 id="一、下载Golang安装包-1"><a href="#一、下载Golang安装包-1" class="headerlink" title="一、下载Golang安装包"></a>一、下载Golang安装包</h2><p>1. 打开右侧链接，进入Go语言官网下载页面：<a href="https://golang.google.cn/dl/">点我查看</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127161816194.png"></p><p>2. 在下方<strong>Stable versions</strong>（稳定版本），选择相应的操作系统对应的安装包下载。这里我使用的是Windows 64位，直接下载下图的zip压缩包即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240129115224186.png"></p><h2 id="二、安装并配置Golang"><a href="#二、安装并配置Golang" class="headerlink" title="二、安装并配置Golang"></a>二、安装并配置Golang</h2><p>1. 将下载好的压缩包解压到一个你熟悉的位置（建议是全英文路径），这里我解压到了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127162207325.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127162317618.png"></p><p>2. 接下来我们为Golang配置一下环境变量。找到Golang的安装路径，出现api、bin、doc等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127162639860.png"></p><p>3. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>4. 点击<strong>高级系统设置</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></p></blockquote><p>5. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002218161.png"></p><p>6. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002302057.png"></p><p>7. 配置系统变量，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127163059204.png"></p><p>8. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002655185.png"></p><p>9. 按照图示操作即可，然后<strong>一路点击确定</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240129115523661.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面后，输入<code>go version</code>，如果出现下方的界面就说明你的Golang安装成功并且可以正常使用了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127163412787.png"></p><h2 id="三、卸载Golang（可选）-1"><a href="#三、卸载Golang（可选）-1" class="headerlink" title="三、卸载Golang（可选）"></a>三、卸载Golang（可选）</h2><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 找到go的安装路径，按<kbd>Shift</kbd><kbd>Delete</kbd>彻底删除：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127163842351.png"></p><p>2. 删除环境变量：打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></p></blockquote><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002218161.png"></p><p>5. 在下方系统变量中，找到<code>GO_HOME</code>并选中，点击右下角<strong>删除</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127164226369.png"></p><p>6. 双击<strong>Path</strong>进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002655185.png"></p><p>7. 找到下方配置的<code>%GO_HOME%\bin</code>并选中，点击右上角的<strong>删除</strong>，完成后<strong>一路点击确定</strong>。至此，Golang卸载完成。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240129115642752.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Golang</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卸载神器：Geek Uninstaller安装使用教程（Windows版）</title>
    <link href="/posts/31.html"/>
    <url>/posts/31.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://geekuninstaller.com/">Geek Uninstaller</a> 是一款 Windows 平台上的免费软件卸载工具，它的主要功能是帮助用户彻底删除计算机上的程序，包括那些难以通过标准程序卸载方式完全删除的软件。以下是 Geek Uninstaller 的一些主要特点和功能：</p><ol><li><p><strong>彻底卸载：</strong> 与 Windows 自带的程序卸载功能相比，Geek Uninstaller 能够更彻底地卸载程序，包括清理残留的注册表项和文件，确保程序的所有相关文件和设置都被完全删除。</p></li><li><p><strong>轻量级：</strong> Geek Uninstaller 是一款非常轻量级的程序（7z格式的压缩包仅为1.98MB），下载和安装速度快，占用系统资源少。</p></li><li><p><strong>用户友好界面：</strong> 界面简洁直观，易于使用，即使对于不擅长计算机操作的用户也很容易上手。</p></li><li><p><strong>批量卸载：</strong> 支持批量卸载多个程序，方便快捷。</p></li><li><p><strong>强大的强制卸载功能：</strong> 对于一些顽固的软件，Geek Uninstaller 提供了强制卸载功能（例如系统自带的Edge浏览器也可以卸载），可以强制删除相关文件和注册表项。</p></li></ol><p>总的来说，Geek Uninstaller 是一款功能强大、简单易用的程序卸载工具，适用于需要彻底清理计算机中无用软件和残留文件的用户。</p><h1 id="一、下载Geek-Uninstaller"><a href="#一、下载Geek-Uninstaller" class="headerlink" title="一、下载Geek Uninstaller"></a>一、下载Geek Uninstaller</h1><p>1. 点击右侧链接进入下载页面：<a href="https://geekuninstaller.com/download">点我进入下载页面</a></p><p>2. 选择左侧免费版，这里我选择ZIP压缩包下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121162105283.png"></p><p>3. 将下载好的文件解压到一个你熟悉的文件路径，这里我解压到D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121162416854.png"></p><p>4. 发送到桌面，方便下次使用：鼠标右键点击<code>geek.exe</code>，下方选择<strong>发送到</strong>，选择最后一个<strong>桌面快捷方式</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121162526552.png"></p><p>5. 在桌面上双击打开快捷方式，打开软件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121162743623.png"></p><h1 id="二、Geek-Uninstaller使用演示"><a href="#二、Geek-Uninstaller使用演示" class="headerlink" title="二、Geek Uninstaller使用演示"></a>二、Geek Uninstaller使用演示</h1><div class="note note-success">            <p>以下是Geek Unistaller的使用演示</p>          </div><p>这里我以卸载Adobe Acrobat DC为例：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121163355153.png"></p><p>鼠标右键点击这款软件，点击卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121163449906.png"></p><p>卸载完成，此时Geek会检测是否存在卸载残留，如果存在，直接点击<strong>完成</strong>，此时Geek就会为我们清除：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240121163833750.png"></p><p>清理完成，Adobe Acrobat CC这款软件就彻底卸载了。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Geek Uninstaller</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse安装配置、卸载教程（Windows版）</title>
    <link href="/posts/30.html"/>
    <url>/posts/30.html</url>
    
    <content type="html"><![CDATA[<p>Eclipse是一个开放源代码的集成开发环境（IDE），最初由IBM公司开发，现在由Eclipse基金会负责维护。它是一个跨平台的工具，可以用于开发多种编程语言，如Java、C&#x2F;C++、Python、PHP、Rust等。</p><p>Eclipse提供了一个可扩展的架构，允许开发者通过安装插件来扩展其功能，因此它被广泛用于各种软件开发项目，包括企业级应用、移动应用、Web应用等。Eclipse的核心功能包括代码编辑器、调试器、版本控制系统集成（如Git）、构建工具集成（如Maven、Gradle）、项目管理工具等。</p><p>Eclipse包含如下特点：</p><ol><li><strong>插件架构：</strong> Eclipse的插件架构使得开发者可以根据需要灵活地扩展IDE的功能，这使得Eclipse适用于多种开发场景。</li><li><strong>跨平台性：</strong> Eclipse可以在多个操作系统上运行，包括Windows、MacOS和Linux，这使得开发者可以在不同的平台上使用相同的开发工具。</li><li><strong>开源：</strong> Eclipse是开源的，这意味着任何人都可以查看其源代码、修改和定制它，以满足自己的需求。</li><li><strong>社区支持：</strong> Eclipse拥有一个庞大的用户和开发者社区，这意味着可以轻松地找到支持、插件和解决方案。</li></ol><p>接下来为大家介绍一下Windows环境下Eclipse的安装：</p><h1 id="一、安装前准备"><a href="#一、安装前准备" class="headerlink" title="一、安装前准备"></a>一、安装前准备</h1><p>请确保电脑本机安装了JDK，没有安装的小伙伴，请点击下方任意一个链接查看安装教程（这里我安装的是JDK 8版本的）：</p><table><thead><tr><th align="center"><a href="https://www.icode504.com/posts/1.html">JDK 8安装教程</a></th><th align="center"><a href="https://www.icode504.com/posts/28.html">JDK 11安装教程</a></th><th align="center"><a href="https://www.icode504.com/posts/26.html">JDK 17 安装教程</a></th></tr></thead></table><p>JDK安装完成后，按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入控制台，输入<code>java -version</code>，如果出现如下内容，就说明JDK已经安装成功了。这里我安装的是JDK 8：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314140629530.png"></p><p>本文后续内容使用NDM（Neat Download Manager）下载文件，可以加快下载速度（推荐）。如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p><h1 id="二、下载安装Eclipse"><a href="#二、下载安装Eclipse" class="headerlink" title="二、下载安装Eclipse"></a>二、下载安装Eclipse</h1><p>1. 根据电脑上安装的JDK版本，选择要安装的Eclipse版本。以下是Eclipse所需最低JDK版本：</p><table><thead><tr><th>Eclipse版本</th><th>所需JDK版本</th></tr></thead><tbody><tr><td>2020-06及之前的版本</td><td>JDK 8&#x2F;11&#x2F;17</td></tr><tr><td>2020-09至2022-06之前的版本</td><td>JDK 11&#x2F;17</td></tr><tr><td>2022-09及之后的版本</td><td>JDK 17</td></tr></tbody></table><p>2. <a href="https://www.eclipse.org/downloads/packages/release">点我进入Eclipse官网下载列表</a>。由于我电脑上安装的是JDK 8，我需要选择2020-06及之前的版本，这里我选择2020-06版本的Eclipse下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111145726978.png"></p><p>3. 找到<strong>Eclipse IDE for Enterprise Java Developers</strong>，在右侧选择Windows版本下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111145938732.png"></p><p>4. 下载完成后，将Eclipse解压到一个你熟悉的位置（建议文件路径是全英文的），这里我解压到了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111152225378.png"></p><p>5. 按照下图所示操作将Eclipse设置成<strong>桌面快捷方式</strong>，以后只需要在桌面直接打开快捷方式就可以了，比较方便。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111152158072.png"></p><h1 id="三、Eclipse创建Workspace和简单设置"><a href="#三、Eclipse创建Workspace和简单设置" class="headerlink" title="三、Eclipse创建Workspace和简单设置"></a>三、Eclipse创建Workspace和简单设置</h1><p>这一部分我们需要对Eclipse进行以下配置，方便后续我们使用Eclipse。</p><h2 id="3-1-Eclipse配置本地安装的JDK"><a href="#3-1-Eclipse配置本地安装的JDK" class="headerlink" title="3.1 Eclipse配置本地安装的JDK"></a>3.1 Eclipse配置本地安装的JDK</h2><p>1. 在桌面双击打开Eclipse，此时会弹出一个选择工作空间Workspace的界面。点击<strong>Browse</strong>，选择一个你熟悉的文件夹，然后点击<strong>Launch</strong>即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111152952838.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153151545.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153221251.png"></p><p>2. 进入Eclipse以后，我们需要将本地安装的JDK应用到Eclipse中。点击上方菜单栏的<strong>Window</strong>，然后点击最后一个<strong>Preferences</strong>，进入Eclipse设置：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153552268.png"></p><p>3. 在左侧选项中，找到<strong>Java</strong>并展开，选择<strong>Installed JREs</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153818844.png"></p><p>4. 在Installed JREs中，选中系统自带的JRE，然后在右侧点击<strong>Edit</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153952469.png"></p><p>5. 点击右上角的<strong>Directory</strong>，选择JDK安装位置，直到下方出现很多的JRE，然后点击<strong>Finish</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111154027524.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111154220109.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111154317711.png"></p><p>6. 点击右下角<strong>Apply and Close</strong>，完成设置并关闭：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111154420980.png"></p><h2 id="3-2-配置新建文件菜单"><a href="#3-2-配置新建文件菜单" class="headerlink" title="3.2 配置新建文件菜单"></a>3.2 配置新建文件菜单</h2><p>安装完Eclipse后，你可能会发现在其新建文件菜单中默认并未包含所需的文件类型。为了确保后续的使用便捷，我们需要对Eclipse新建文件菜单进行一些配置。</p><p>1. 在上方菜单栏点击<strong>Window</strong>，选择<strong>Perspective</strong>，然后点击<strong>Customize Perspective</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155210783.png"></p><p>2. 点击<strong>Menu Visibilitiy</strong>，依次展开<strong>File</strong>、<strong>New</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155336273.png"></p><p>3. 这里我勾选了Java常用的项目、文件类型，小白可以按照下图的方式进行勾选即可，完成后点击下方的<strong>Apply And Close</strong>：</p><table><thead><tr><th align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155756137.png"></th><th align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155835053.png"></th></tr></thead><tbody><tr><td align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155908214.png"></td><td align="center"><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111155955716.png"></td></tr></tbody></table><h2 id="3-3-调整代码字体样式"><a href="#3-3-调整代码字体样式" class="headerlink" title="3.3 调整代码字体样式"></a>3.3 调整代码字体样式</h2><p>Eclipse创建的代码文件在编辑器中字体比较小，事实上，你可以在设置菜单中调整Eclipse中代码的字体大小和样式，直到满足你的审美要求。</p><p>1. 点击上方菜单栏的<strong>Windows</strong>，然后点击最后一个<strong>Preferences</strong>，进入Eclipse设置：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111153552268.png"></p><p>2. 进入设置以后，点击<strong>General</strong> –&gt; <strong>Appearance</strong> –&gt; <strong>Color And Fonts</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127092622420.png"></p><p>3. 在颜色和字体界面中，双击展开<strong>Basic</strong>，找到并选中最后一个<strong>Text Font</strong>，点击<strong>Edit</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127092905624.png"></p><p>4. 在字体窗口中可以自行调整字体样式和大小，完成后点击确定，后续设置界面点击右下角的Apply and Close。</p><blockquote><p>这里我选择的Consolas字体，字体大小16号。下方示例可以预览字体：</p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127093145798.png"></p><h1 id="四、创建Java项目并运行Java程序"><a href="#四、创建Java项目并运行Java程序" class="headerlink" title="四、创建Java项目并运行Java程序"></a>四、创建Java项目并运行Java程序</h1><p>完成上面的配置后，我们就可以愉快写一段Java代码了。</p><p>1. 在上方菜单栏点击<strong>File</strong>，选择第一个<strong>New</strong>（或者按<kbd>Shift</kbd><kbd>Alt</kbd><kbd>N</kbd>），选择<strong>Java Project</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111160303603.png"></p><p>2. 按照下图操作，创建一个Java项目：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111160456392.png"></p><p>4. 如果出现下图弹窗，点击<strong>Open Perspective</strong>，此时Eclipse会以Java视图显示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111160619795.png"></p><p>5. 在左侧Package Explorer，<strong>双击展开</strong>我们的项目MyJavaProject，鼠标右键<strong>点击src</strong>，<strong>点击New</strong>，<strong>点击Class</strong>创建Java文件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111161127180.png"></p><p>6. 按照下图所示创建一个Java文件，注意文件名（类名要符合<a href="https://www.icode504.com/posts/3.html#%E6%A0%87%E8%AF%86%E7%AC%A6">标识符命名规范</a>）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111161318647.png"></p><p>7. 在MyDemo01类中写一个main方法，如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111161715860.png"></p><blockquote><p>注意：只要左上角页签MyProgram01.java前面会有一个星号标志，这说明我们未保存这个Java文件，需要按<kbd>Ctrl</kbd>和<kbd>S</kbd>保存。</p></blockquote><p>8. 鼠标右键点击代码，找到<strong>Run As</strong>，点击<strong>Java Application</strong>运行Java程序：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111162009202.png"></p><p>9. 此时下方控制台就会输出我们在程序中写的内容，说明我们的代码编译运行成功！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111162103861.png"></p><h1 id="五、Eclipse的卸载（可选）"><a href="#五、Eclipse的卸载（可选）" class="headerlink" title="五、Eclipse的卸载（可选）"></a>五、Eclipse的卸载（可选）</h1><div class="note note-danger">            <p>这一部分会将软件卸载，请谨慎操作！如果不需要卸载，请直接跳过这一部分的内容！</p>          </div><p>1. 找到Eclipse安装目录，按<kbd>Shift</kbd><kbd>Delete</kbd>彻底删除（不经过回收站）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127111815301.png"></p><p>2. 如果想删除掉Eclipse在本机的相关配置，请按照下图所示的操作，找到存在<strong>桌面</strong>的文件夹：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/240127001.gif"></p><p>3. 找到<code>.p2</code>文件夹，选中，按<kbd>Shirt</kbd><kbd>Delete</kbd>彻底删除：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240127113514365.png"></p><p>至此，Eclipse卸载完成。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组篇-其之一-数组的概念与一维数组</title>
    <link href="/posts/29.html"/>
    <url>/posts/29.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的小伙伴请查看这两篇教程：<a href="http://www.icode504.com/posts/1.html">点我查看安装JDK8教程</a>、<a href="http://www.icode504.com/posts/10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>假设我想在某宝上买一点零食（没错，我承认我确实是个吃货），经过搜索后出现了如下结果，我们发现每一项都包含相同内容：图片、标题、价格、购买人数、所在店铺名称。要想将每一个数据项展现给用户，就需要一个特定的“容器”来存储每一个数据项。</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/461690e5230776ed3499a22a5ca09b0.jpg" style="zoom:25%;" alt="仅供展示使用，无任何打广告成分"/><p>在日常生活中，”容器”通常是指一种用于装载、储存物质的器具。例如：水杯可以装水，衣柜可以装衣物。</p><p>仿照日常生活中的“容器”的定义，我们可以给程序中的容器做个说明：多个数据项聚合在一起，组成了一个装载数据的容器。这个容器对数据项进行访问、修改等操作。</p><p>接下来要讲的数组就属于容器的一种。</p><h1 id="一、数组的概念"><a href="#一、数组的概念" class="headerlink" title="一、数组的概念"></a>一、数组的概念</h1><p>数组的定义：数组是一种数据结构，它用于<strong>存储相同类型的元素</strong>（如整数、字符串等）的有序集合。</p><h2 id="1-1-数组相关的概念"><a href="#1-1-数组相关的概念" class="headerlink" title="1.1 数组相关的概念"></a>1.1 数组相关的概念</h2><p>1. 数组名：基本数据类型变量存在变量名，那么数组也有数组变量，<strong>数组的变量名就是这个数组的名称</strong>。例如：<code>numbers</code>代表这个数组存储的是数字。</p><p>2. 索引：<strong>数组中每一个元素都有唯一的索引</strong>（类似我们的身份证号），我们访问数组元素的值时会用到索引。数组的索引是有序的，这样做的好处是访问数组的元素非常快。</p><p>3. 元素：<strong>数组元素是数组的基本组成单位</strong>，元素的数据类型决定了数组的数据类型，相反，数组的数据类型也决定了每个元素的数据类型。</p><p>4. 数组的长度：<strong>数组中存储元素的数量</strong>。</p><p>5. 数组本身是<strong>引用数据类型</strong>。但是数组中的元素既可以是基本数据类型，也可以是引用数据类型。</p><p>6. <strong>数组的大小是固定的，一旦创建，其大小就不能改变</strong>。</p><h2 id="1-2-数组的划分"><a href="#1-2-数组的划分" class="headerlink" title="1.2 数组的划分"></a>1.2 数组的划分</h2><p>按照数据类型划分，数组可以分成基本类型数组、引用数据类型数组。以基本类型数组为例，每一个数组元素的数据类型都是基本数据类型。</p><p>按照维度划分，数组可以划分成一维数组、二维数组、三维数组……</p><ul><li>一维数组中存储一组数据：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/240117dp7.drawio.svg"></p><ul><li>二维数组本质上就是一维数组的每个元素再存储一个数组，每个元素对应的数组存储元素个数可能也不尽相同（本质上就是一维数组再嵌套一维数组）：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/240117dp8.drawio.svg"></p><p>就我个人日常开发而言，使用一维数组的次数多一些，用到二维数组的次数就几乎很少了（在做算法题的时候能用的到）</p><blockquote><p>备注：本文后续提到的数组默认都是一维数组。</p></blockquote><h1 id="二、定义并初始化数组"><a href="#二、定义并初始化数组" class="headerlink" title="二、定义并初始化数组"></a>二、定义并初始化数组</h1><h2 id="2-1-定义数组变量"><a href="#2-1-定义数组变量" class="headerlink" title="2.1 定义数组变量"></a>2.1 定义数组变量</h2><p>定义数组变量有两种方式：</p><p>方式一：方括号写到数据类型的后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java风格定义数组变量</span><br>数据类型[] 变量名;<br></code></pre></td></tr></table></figure><p>这里的数据类型既可以是基本数据类型，也可以是引用数据类型。例如，我想定义一个<code>int</code>类型数组<code>arr1</code>和<code>String</code>类型数组<code>arr2</code>，可以写成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// int类型数组</span><br><span class="hljs-type">int</span>[] arr1;<br><span class="hljs-comment">// 引用数据类型数组</span><br>String[] arr2;<br></code></pre></td></tr></table></figure><p>方式二：如果你之前学过C或者C++的数组，也可以把方括号写到变量名后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型 变量名[];<br></code></pre></td></tr></table></figure><p>定义数组变量完成后，就需要创建数组了。创建数组一共有两种方式：静态初始化和动态初始化。</p><h2 id="2-2-创建数组方式——静态初始化"><a href="#2-2-创建数组方式——静态初始化" class="headerlink" title="2.2 创建数组方式——静态初始化"></a>2.2 创建数组方式——静态初始化</h2><p>静态初始化：<strong>数组中存储的内容已经确定</strong>，可以使用以下两种方式静态初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = <span class="hljs-keyword">new</span> 数据类型[] &#123;变量值<span class="hljs-number">1</span>, 变量值<span class="hljs-number">2</span>, 变量值<span class="hljs-number">3</span>,..., 变量值n&#125;;<br></code></pre></td></tr></table></figure><p>上述方式有简化写法，赋值符号右侧的<code>new 数据类型[]</code>可以省略，只保留大括号中的内容，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = &#123;变量值<span class="hljs-number">1</span>, 变量值<span class="hljs-number">2</span>, 变量值<span class="hljs-number">3</span>,..., 变量值n&#125;;<br></code></pre></td></tr></table></figure><p>下面代码展示了上述两种方式创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组静态初始化两种方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// new 数据类型[] &#123;...&#125;方式初始化数组</span><br>        <span class="hljs-type">int</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">double</span>[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">4.2</span>, <span class="hljs-number">5.6</span>, <span class="hljs-number">7.6</span>, <span class="hljs-number">2.33</span>, <span class="hljs-number">8.88</span>&#125;;<br>        String[] tastyFoods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;砂锅麻辣烫&quot;</span>, <span class="hljs-string">&quot;过桥米线&quot;</span>, <span class="hljs-string">&quot;土豆粉&quot;</span>, <span class="hljs-string">&quot;砂锅居&quot;</span>, <span class="hljs-string">&quot;火锅&quot;</span>&#125;;<br><br>        <span class="hljs-comment">// &#123;...&#125;方式初始化数组</span><br>        <span class="hljs-type">float</span>[] array3 = &#123;<span class="hljs-number">2.3f</span>, <span class="hljs-number">89.66f</span>, <span class="hljs-number">34.2f</span>, -<span class="hljs-number">20.33f</span>&#125;;<br>        <span class="hljs-type">long</span>[] array4 = &#123;<span class="hljs-number">666</span>, <span class="hljs-number">888</span>, <span class="hljs-number">999</span>, <span class="hljs-number">648</span>&#125;;<br>        String[] changchunAttractions = &#123;<span class="hljs-string">&quot;净月潭公园&quot;</span>, <span class="hljs-string">&quot;南湖公园&quot;</span>, <span class="hljs-string">&quot;伪满皇宫&quot;</span>, <span class="hljs-string">&quot;长影世纪城&quot;</span>, <span class="hljs-string">&quot;雕塑公园&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：<strong>使用花括号<code>&#123;&#125;</code>创建数组必须先定义数组变量的同时就将创建好的数组赋值给数组变量</strong>。</p><p>先定义数组变量，再使用花括号的方式赋值是错误的，无法通过编译。以下是错误写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义数组变量</span><br><span class="hljs-type">int</span>[] arr;<br><span class="hljs-comment">// 以花括号的方式对应的数组值赋值给变量无法通过编译</span><br>arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>在IDEA中这样写代码时，也会给出错误提示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231225135057814.png"></p></blockquote><h2 id="2-3-创建数组方式——动态初始化"><a href="#2-3-创建数组方式——动态初始化" class="headerlink" title="2.3 创建数组方式——动态初始化"></a>2.3 创建数组方式——动态初始化</h2><p>前面讲到的静态初始化的方式创建数组有一个前提就是你已经确定数组中要存储什么。但是在大多数情况下，我们也不确定数组要存储什么，而是在后续的时候修改数组中元素的值，这时候我们就可以使用动态初始化的方式创建数组。</p><p>动态初始化：数组的长度可以确定，但是数组里面具体写什么内容还不确定，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 变量名 = <span class="hljs-keyword">new</span> 数据类型[n];<br></code></pre></td></tr></table></figure><p>其中n指的是数组的长度，即数组中存储元素的数量。具体内容可以看下一部分：数组的长度。</p><p>以下是动态初始化方式创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态初始化方式创建数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 动态初始化方式创建长度为4的char数组、String数组、int数组</span><br>        <span class="hljs-type">char</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<br>        String[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span>[] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、数组的长度"><a href="#三、数组的长度" class="headerlink" title="三、数组的长度"></a>三、数组的长度</h1><p>假设有一个数组<code>arr</code>，要想获取数组的长度，我们只需要使用<code>arr.length</code>获取数组的长度即可。</p><p>长度为0的数组称作空数组。</p><p>定义数组时，<strong>数组的长度必须是整数且大于等于0</strong>，否则系统会抛出<strong>数组长度为负数</strong>（<code>NegativeArraySizeException</code>）异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组的长度获取</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayLength</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;array.length = &quot;</span> + array.length);<br><br>        <span class="hljs-comment">// 空数组的长度</span><br>        <span class="hljs-type">int</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        System.out.println(<span class="hljs-string">&quot;array1.length = &quot;</span> + array1.length);<br>        <span class="hljs-type">int</span>[] array2 = &#123;&#125;;<br>        System.out.println(<span class="hljs-string">&quot;array2.length = &quot;</span> + array2.length);<br>        <span class="hljs-comment">// 数组长度必须要&gt;=0，如果定义的数组默认长度是负数的话会抛出NegativeArraySizeException异常</span><br>        <span class="hljs-type">int</span>[] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[-<span class="hljs-number">1</span>];<br>        System.out.println(<span class="hljs-string">&quot;array3.length = &quot;</span> + array3.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240118133819372.png"></p><h1 id="四、访问数组元素"><a href="#四、访问数组元素" class="headerlink" title="四、访问数组元素"></a>四、访问数组元素</h1><p>通过<code>数组名[索引值]</code>可以访问到这个索引值下的值，其中索引值必须是整数并且处于<code>[0, 数组的长度值)</code>范围内，如果超出这个范围，系统就会抛出数组索引越界异常<code>ArrayIndexOutOfBoundsException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组元素的访问</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsAccess</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;数组的长度是: &quot;</span> + array.length);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br>        <span class="hljs-comment">// 超出[0, array.length)的范围会抛出异常</span><br>        System.out.println(<span class="hljs-string">&quot;array[7] = &quot;</span> + array[<span class="hljs-number">7</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221134139512.png"></p><p>从运行结果不难看出，数组索引的范围是<code>[0, 6]</code>，一旦索引值超出这个范围，Java会为我们抛出一个数组索引值越界异常（<code>ArrayIndexOutOfBoundsException</code>），这种情况在以后编写代码的过程中要尽量避免。</p><p>当我们能获取到数组元素的值时，我们就可以修改数组中的元素了。</p><p>我们还是以上面的数组为例，我想修改索引值为2的元素值为88，索引值为5的元素值为66：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组元素的修改</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsModification</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;修改前各个元素的值: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[1] = &quot;</span> + array[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[2] = &quot;</span> + array[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[4] = &quot;</span> + array[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[5] = &quot;</span> + array[<span class="hljs-number">5</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br><br>        <span class="hljs-comment">// 修改索引值为2的元素为88，索引值为3的元素为66</span><br>        array[<span class="hljs-number">2</span>] = <span class="hljs-number">88</span>;<br>        array[<span class="hljs-number">3</span>] = <span class="hljs-number">66</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;修改后各个元素的值: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;array[0] = &quot;</span> + array[<span class="hljs-number">0</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[1] = &quot;</span> + array[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[2] = &quot;</span> + array[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[3] = &quot;</span> + array[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[4] = &quot;</span> + array[<span class="hljs-number">4</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[5] = &quot;</span> + array[<span class="hljs-number">5</span>]);<br>        System.out.println(<span class="hljs-string">&quot;array[6] = &quot;</span> + array[<span class="hljs-number">6</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合预期：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240117163935149.png"></p><h1 id="五、数组的特点"><a href="#五、数组的特点" class="headerlink" title="五、数组的特点"></a>五、数组的特点</h1><p>上边讲了这么多数组的用法，这一部分我们就来简单总结以下数组的特点。其实这一部分我本来想放到前面来讲，但是后来一想放到前面容易给初学者说的云里雾里，于是将数组的特点放到这一部分。数组一共有如下几个特点：</p><p>1. <strong>相同数据类型：</strong> 所有数组元素必须是相同的数据类型，可以是基本数据类型（如整数、浮点数等）或引用数据类型（如对象、字符串等）。</p><p>例如：假设有一个长度为5的<code>int</code>数组，不管是静态初始化还是动态初始化，里面存储的都是<code>int</code>类型的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组特点1：所有数组元素都是相同类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayCharacteristic1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个int类型的数组</span><br>        <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">// 错误写法，因为int[]数组所有元素必须是int类型。</span><br>        <span class="hljs-comment">// 而long和double本身就比int范围大，不能直接赋值给数组元素。</span><br>        <span class="hljs-comment">// 如需赋值，就需要进行强制类型转换（但是这个过程中也可能会出现一些问题）</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-comment">// array[2] = number1;</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.34</span>;<br>        <span class="hljs-comment">// array[3] = number2;</span><br>        <span class="hljs-comment">// int[] array2 = &#123;1, 2, 3, 4, 8.88&#125;;</span><br><br>        <span class="hljs-comment">// 正确写法，因为character1赋值给array[4]时，会将值自动类型提升为int类型</span><br>        <span class="hljs-comment">// byte、short也同理</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">character1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<br>        array[<span class="hljs-number">4</span>] = character1;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        array[<span class="hljs-number">4</span>] = number3;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">number4</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        array[<span class="hljs-number">4</span>] = number4;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. <strong>固定大小：</strong>数组在创建时需要指定固定的大小，这个大小通常在数组声明时确定，且无法在运行时改变。这意味着数组的长度是固定的，无法动态调整。</p><p>我们可以使用反证法对上述内容进行证明，假设<em>数组定义了以后，可以动态调整</em>。通过这个假设，我们来编写一段代码证明一下上述假设是否可行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组特点2--创建数组后，无法动态调整数组长度</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024-01-13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayCharacteristic2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个长度为5的数组</span><br>        <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;数组初始长度: &quot;</span> + array.length);<br>        <span class="hljs-comment">// 如果数组长度可以动态调整，那么我在数组范围外再给数组元素赋值，此时数组长度会动态调整到这个范围外的索引值</span><br>        array[<span class="hljs-number">5</span>] = <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;给数组范围外元素赋值后的长度: &quot;</span> + array.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个程序中，我们尝试将一个元素添加到数组的第六个位置（索引为5），而此时抛出了<code>ArrayIndexOutOfBoundsException</code>（数组越界异常）。很显然，上述假设并不成立。</p><p>尝试访问超出数组长度的索引会导致程序异常。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240113142018156.png"></p><p>3. <strong>连续内存空间：</strong> 数组的元素在内存中是连续存储的，这也是通过索引直接访问数组元素的原因。</p><p>4. <strong>索引访问：</strong> 数组中的每个元素都有一个唯一的索引，通过该索引可以访问或修改对应位置的元素。数组的索引从0开始。</p><p>这一点我们在第四部分数组元素的访问已经提到，创建指定长度的数组时，会为每一个数组元素分配一个索引值（从0到<code>arr.length - 1</code>且都是整数）。要想访问到数组元素值，必须通过<code>数组名[索引值]</code>访问每一个数组元素。</p><h1 id="六、遍历数组"><a href="#六、遍历数组" class="headerlink" title="六、遍历数组"></a>六、遍历数组</h1><p>使用循环来遍历数组可以获取到数组的每一个元素。遍历数组有两种方式：普通循环遍历和<code>foreach</code>循环（也称作增强for循环）遍历。</p><h2 id="6-1-普通循环遍历"><a href="#6-1-普通循环遍历" class="headerlink" title="6.1 普通循环遍历"></a>6.1 普通循环遍历</h2><p>我们可以使用数组的索引值，通过循环来遍历数组，这里我使用普通的<code>for</code>循环来遍历一个<code>String</code>类型的数组（当然，使用<code>while</code>和<code>do-while</code>循环也OK）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通循环遍历数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] array = &#123;<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-string">&quot;赵云&quot;</span>&#125;;<br>        <span class="hljs-comment">// 遍历范围：[0, array.length)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-comment">// 用数组名和索引值访问到这个元素的值</span><br>            System.out.println(array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221111430206.png"></p><p>在IDEA中，我们可以使用<code>数组名.fori</code>快速生成一个<code>for</code>循环：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231221002.gif"></p><p>同理，如果想逆序输出数组，可以使用<code>数组名.forr</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231221003.gif"></p><h2 id="6-2-foreach循环遍历"><a href="#6-2-foreach循环遍历" class="headerlink" title="6.2 foreach循环遍历"></a>6.2 foreach循环遍历</h2><p><code>foreach</code>循环是JDK 5的新特性，它也是一种循环结构，这个循环主要用于遍历<strong>数组</strong>和<strong>集合</strong>（集合后续会学习到），也称作增强<code>for</code>循环。</p><blockquote><p>说明：在JDK 8中，在迭代器<code>Iterator&lt;T&gt;</code>接口添加了默认方法<code>foreach()</code>专门用来遍历集合，后续会在集合部分讲到。</p></blockquote><p><code>foreach</code>循环的语法结构如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (数据类型 变量名 ： 数组/集合名) &#123;<br><span class="hljs-comment">// 执行代码...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个语法结构中，如果我们使用的是数组<code>arr</code>，那么结构中的变量名就相当于数组中每一个元素对应的变量名称，即<code>arr[i]</code>。</p><p>例如：假设要使用<code>foreach</code>循环遍历一个<code>String</code>类型的数组，使用方式和普通循环遍历语法要简单一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * foreach循环遍历数组</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForeachArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] array = &#123;<span class="hljs-string">&quot;刘备&quot;</span>, <span class="hljs-string">&quot;关羽&quot;</span>, <span class="hljs-string">&quot;张飞&quot;</span>, <span class="hljs-string">&quot;诸葛亮&quot;</span>, <span class="hljs-string">&quot;赵云&quot;</span>&#125;;<br>        <span class="hljs-comment">// foreach循环遍历数组</span><br>        <span class="hljs-keyword">for</span> (String s : array) &#123;<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221091324135.png"></p><p>在IDEA中也为我们设置了快捷生成<code>foreach</code>循环的快捷键<code>数组名.for</code>，就能快速生成一个<code>foreach</code>循环：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231221001.gif"></p><h1 id="七、数组元素的默认值"><a href="#七、数组元素的默认值" class="headerlink" title="七、数组元素的默认值"></a>七、数组元素的默认值</h1><p>整数类型（<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>）的数组初始化时，每一个数组元素的默认值是0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--整数类型数组元素的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 基本数据类型--byte类型数组元素的默认值</span><br>        <span class="hljs-type">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;byte[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : byteArray) &#123;<br>            System.out.print(b + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--short类型数组元素的默认值</span><br>        <span class="hljs-type">short</span>[] shortArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">short</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;short[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">short</span> s : shortArray) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--int类型数组元素的默认值</span><br>        <span class="hljs-type">int</span>[] intArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;int[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : intArray) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--long类型数组元素的默认值</span><br>        <span class="hljs-type">long</span>[] longArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;long[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> l : longArray) &#123;<br>            System.out.print(l + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221101124056.png"></p><p>浮点类型（<code>float</code>、<code>double</code>）的数组初始化，每一个数组元素的默认值是0.0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--浮点类型数组元素的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 基本数据类型--float类型数组元素的默认值</span><br>        <span class="hljs-type">float</span>[] floatArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">float</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;float[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">float</span> f : floatArray) &#123;<br>            System.out.print(f + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--double类型数组元素的默认值</span><br>        <span class="hljs-type">double</span>[] doubleArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;double[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> d : doubleArray) &#123;<br>            System.out.print(d + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221101532988.png"></p><p>字符类型（<code>char</code>）的数组初始化时，每一个数组元素的默认值是<code>\u0000</code>（即Unicode字符表的第一个字符）。</p><p>布尔类型（<code>boolean</code>）的数组初始化时，每一个数组元素的默认值是<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型--字符类型和布尔类型数组的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">char</span>[] charArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;char[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : charArray) &#123;<br>            <span class="hljs-comment">// 间接验证每一个char数组元素默认值是否是Unicode字符表的第一个元素</span><br>            System.out.print((c == <span class="hljs-number">0</span>) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-comment">// 写成下面的形式验证也OK</span><br>            <span class="hljs-comment">// System.out.print((c == &#x27;\u0000&#x27;) + &quot;\t&quot;);</span><br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 基本数据类型--boolean类型数组元素的默认值</span><br>        <span class="hljs-type">boolean</span>[] booleanArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;boolean[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">boolean</span> b : booleanArray) &#123;<br>            System.out.print(b + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221105838238.png"></p><p>引用数据类型的数组初始化时，每一个数组元素的默认值是<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用数据类型数组的默认值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayElementsDefaultValue4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 引用数据类型数组元素的默认值</span><br>        String[] strArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;String[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : strArray) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        Random[] randomArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;Random[]元素的默认值是: &quot;</span>);<br>        <span class="hljs-keyword">for</span> (Random random : randomArray) &#123;<br>            System.out.print(random + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231221110252898.png"></p><h1 id="八、知识点总结"><a href="#八、知识点总结" class="headerlink" title="八、知识点总结"></a>八、知识点总结</h1><p>数组的概念与一维数组知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载：<a href="https://icode504.lanzn.com/idOiY1lgltnc">点我下载</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E7%BB%84%E7%AF%87-%E5%85%B6%E4%B9%8B%E4%B8%80-%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.svg" alt="数组篇-其之一-数组的概念与一维数组-知识点总结"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 11安装配置教程（Windows版）</title>
    <link href="/posts/28.html"/>
    <url>/posts/28.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下JDK 11如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>以下两种方式二选一下载即可：</p><h2 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h2><p>请选择任意一个链接，选择任意一个安装包下载即可：</p><table><thead><tr><th align="center"><a href="https://pan.baidu.com/s/1FjQlCUulceJWOQP96qQvjQ?pwd=mclj">点击下载</a></th><th align="center"><a href="https://pan.baidu.com/s/1KOE3RotyK-yb9c71LBcTxg?pwd=jyjq">备用下载1</a></th><th align="center"><a href="https://pan.baidu.com/s/1HN3iuUmbHTrlEnBKLZVkEg?pwd=o54x">备用下载2</a></th></tr></thead></table><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111162958652.png"></p><h2 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h2><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html">点击进入</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是11.0.20版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111164500464.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111164519079.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101133536759.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111164925746.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111164941122.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165150762.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165212543.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165226556.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165249045.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165445818.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165721488.png"></p><p>7. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 11安装成功了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111165930479.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111170010337.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240111170348792.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 21安装配置教程（Windows版）</title>
    <link href="/posts/27.html"/>
    <url>/posts/27.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文下载文件使用的是NDM（Neat Download Manager），如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p><p>接下来为大家讲解一下JDK 21如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>1. 打开Oracle JDK官网：<a href="https://www.oracle.com/java/technologies/javase/jdk21-archive-downloads.html">点我查看</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是21.0.1版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231231234124976.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101000342542.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101000606080.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101000829197.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101000948438.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101001012592.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101001101762.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101001823379.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002611204.png"></p><p>7. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 21安装成功了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003211769.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003254767.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003343061.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 17安装配置教程（Windows版）</title>
    <link href="/posts/26.html"/>
    <url>/posts/26.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文下载文件使用的是NDM（Neat Download Manager），如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p><p>接下来为大家讲解一下JDK 17如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>1. 打开Oracle JDK官网：<a href="https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">点我查看</a></p><p>2. 在下载页面，选择一个版本的JDK下载，这里我选择的是17.0.6版本的JDK。在下面找到Windows版本，这里我选择的是exe文件下载。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140251099.png"></p><h1 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h1><p>1. 双击打开JDK安装包，进入安装界面，点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140356853.png"></p><p>2. 更改JDK的安装路径，这里我安装在了D盘（为了避免后续使用过程中出现各种各样的问题，建议安装路径是全英文的）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140438115.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140629136.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140706171.png"></p><p>3. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140729167.png"></p><p>4. 安装完成，点击<strong>关闭</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102140754229.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102141010328.png"></p><p>2. 打开文件夹，在左侧此电脑<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击<strong>高级系统设置</strong>：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002218161.png"></p><p>5. 在下方系统变量，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002302057.png"></p><p>6. 配置系统变量，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102141211785.png"></p><p>7. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002655185.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101002812677.png"></p><p>9. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定，进入命令行：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101003131968.png"></p><p>10. 在命令行中，分别输入<code>javac</code>、<code>java</code>、<code>java -version</code>，如果有如下提示就说明JDK 17安装成功了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102141350623.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102141433688.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240102141538207.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问Github卡顿甚至进不去的解决办法（适用于Windows和MacOS）</title>
    <link href="/posts/25.html"/>
    <url>/posts/25.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Github是全球知名的开源宝库，但是对国内用户并不友好。当我们在浏览器中输入<code>www.github.com</code>时，如果你赶的时间点比较好可能会进去，但是大多数情况下浏览器不会对你的请求做出任何响应，就像下图这样：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229085526297.png"></p><p>那么，有什么办法解决这个问题呢？</p><h1 id="二、访问Github——Watt-Tookit（原Steam-）"><a href="#二、访问Github——Watt-Tookit（原Steam-）" class="headerlink" title="二、访问Github——Watt Tookit（原Steam++）"></a>二、访问Github——Watt Tookit（原Steam++）</h1><p>官网介绍：Watt Tookit是一个开源的跨平台的多功能Stream工具箱，它可以管理你Steam游戏库存，监控Steam游戏下载进度实现自动定时关机等功能。本文要介绍的是它的网络加速功能，它内部添加了Github网络加速功能。</p><p>原作者在B站有账号，感兴趣的小伙伴可以关注支持一下：<a href="https://space.bilibili.com/3546572635768935">点我传送到B站</a></p><p>接下来我们就来安装一下Watt Tookit：</p><p>1. 点击右侧链接进入官网：<a href="https://steampp.net/">点我进入官网</a></p><p>2. 根据自己的操作系统下载，这里我使用的是Windows版本，点击下载按钮：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229091457093.png"></p><p>3. 此时会弹出一个GNU通用公共许可证协议，点击右下角<strong>接受并下载</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229091615168.png"></p><p>4. 官方给了我们多个下载渠道，大家任选一种方式下载即可，这里我给大家标注了下载的优先级：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229092847673.png"></p><p>5. 我选择的是蓝奏云下载，访问密码：1234，进入后直接下载exe安装包：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093049336.png"></p><p>6. 双击打开安装包，点击自定义安装，选择安装位置，这里我安装在了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093303865.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093315287.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093436756.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093446834.png"></p><p>7. 点击<strong>立即安装</strong>，软件开始安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093527419.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093535180.png"></p><p>8. 安装完成，点击<strong>立即体验</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093625530.png"></p><p>9. 打开后，点击左侧第二个图标<strong>网站加速</strong>，向下翻找到Github并勾选，</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229093925945.png"></p><p>10. 此时在浏览器再次访问<a href="https://www.github.com/">Github</a>，就可以正常显示页面了。虽然访问速度还是慢，但是总比响应超时啥也不显示的强：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229101555911.png"></p><p>此时我们使用<code>git clone</code>命令拉取仓库代码，或者是使用<code>git push</code>命令将代码推送到我们的Github仓库就不会因为网络问题而无法进行操作的问题了。</p><h1 id="三、下载Github中的内容"><a href="#三、下载Github中的内容" class="headerlink" title="三、下载Github中的内容"></a>三、下载Github中的内容</h1><p>Github有很多优秀的开源作品可以下载，如果是大文件使用浏览器，等到猴年马月都下载不完（下载速度真的是太慢了），以下是使用NDM和Github加速网站下载Github的内容的实现步骤。</p><p>这里我想下载Google家的Noto Serif全语言字体包（<a href="https://github.com/notofonts/noto-cjk/releases">点我查看源网站</a>），文件大小600M左右，如果正常使用浏览器下载非常慢，接下来我们就使用NDM+Github加速网站解决上述问题。</p><blockquote><p>本文后续内容使用NDM（Neat Download Manager）下载文件，如需使用此款软件的小伙伴，可以查看这篇教程：<a href="https://www.icode504.com/posts/24.html">下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</a></p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229102536561.png"></p><p>3. 首先，我们对要下载的文件，鼠标右键<strong>复制链接</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229102717918.png"></p><p>4. 以下是我整理的Github镜像网站，大家任选一个链接进入即可，这里我选择第一个网站进入：</p><table><thead><tr><th>网站名称</th><th>链接</th></tr></thead><tbody><tr><td>Github文件加速</td><td><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz/</a></td></tr><tr><td>Github加速下载</td><td><a href="https://github.ur1.fun/">https://github.ur1.fun/</a></td></tr><tr><td>加速你的Github</td><td><a href="https://github.zhlh6.cn/">https://github.zhlh6.cn/</a></td></tr></tbody></table><p>5. 将上面复制的链接粘贴到输入框中，点击下载即可</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229103230888.png"></p><p>6. 使用NDM，下载速度直接原地起飞：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231229103620649.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Neat Download Manager</tag>
      
      <tag>NDM</tag>
      
      <tag>Watt tookit</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载神器NDM（Neat Download Manager）安装配置教程（适用于Windows和MacOS）</title>
    <link href="/posts/24.html"/>
    <url>/posts/24.html</url>
    
    <content type="html"><![CDATA[<p>NDM是一款免费小巧的网络资源下载器。说白了就是和迅雷、IDM（Internet Download Manager）类似。和IDM相比，NDM占用空间非常小（安装空间就2M左右），并且支持Windows和MacOS操作系统。它可以对单个文件进行多线程下载（将单个文件切割成多份下载，大幅加快下载速度）。</p><p>多线程下载是NDM的一大优势，更多内容可以到官网页面了解：<a href="https://www.neatdownloadmanager.com/index.php/en/">点我进入官网</a>。</p><h1 id="一、下载NDM"><a href="#一、下载NDM" class="headerlink" title="一、下载NDM"></a>一、下载NDM</h1><p>1. 打开NDM官网：<a href="https://www.neatdownloadmanager.com/index.php/en/">点我查看</a></p><p>2. 根据自己的操作系统下载NDM，这里我下载的是Windows版的，点击左边的下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111318254.png"></p><h1 id="二、安装NDM"><a href="#二、安装NDM" class="headerlink" title="二、安装NDM"></a>二、安装NDM</h1><p>1. 双击打开安装包，选择安装路径，这里我安装了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111448526.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111637064.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111658143.png"></p><p>2. 根据自身情况是否创建桌面图标，完成后点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111828907.png"></p><p>3. 点击<code>Install</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228111852068.png"></p><p>4. 安装中，请耐心等待。</p><p>5. 安装完成，点击<code>Finish</code>直接启动：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228112031479.png"></p><p>6. NDM界面如下图所示</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228112107266.png"></p><h1 id="三、配置NDM"><a href="#三、配置NDM" class="headerlink" title="三、配置NDM"></a>三、配置NDM</h1><p>接下来，我们对NDM做一些简单配置，点击右上角的小齿轮（Settings），打开NDM设置：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228112157668.png"></p><p>最大连接数设置成32，让NDM在下载文件时拉满带宽，加快下载速度</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228112309663.png"></p><p>文件下载位置建议改成除C盘外的位置（如果你的电脑只有C盘直接跳过）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228112529398.png"></p><p>完成后点击OK即可，对NDM的配置就完成了。</p><h1 id="四、给浏览器安装NDM插件"><a href="#四、给浏览器安装NDM插件" class="headerlink" title="四、给浏览器安装NDM插件"></a>四、给浏览器安装NDM插件</h1><p>接下来，我们给浏览器安装NDM插件，方便后续我们在浏览器下载内容是让NDM能嗅探到，直接调用NDM代替浏览器下载文件。</p><p>以下提供了三个浏览器安装插件的方式：Chrome浏览器、火狐浏览器、Edge浏览器。大家任选其一即可。</p><h2 id="4-1-Chorme浏览器"><a href="#4-1-Chorme浏览器" class="headerlink" title="4.1 Chorme浏览器"></a>4.1 Chorme浏览器</h2><p>1. 由于国内无法访问谷歌应用商店，因此正常方式无法获得NDM插件。这里我为大家分享了NDM插件，点击右侧链接下载插件：<a href="https://icode504.lanzouw.com/ikPCA1j6omkd">点我下载</a></p><p>2. 按照下图所示操作，打开扩展程序管理页面：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228113739950.png"></p><p>3. 打开右上角的<strong>开发者模式</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228113846887.png"></p><p>4. 将刚才下载好的插件直接拖入到界面中，上方会有一个弹窗，点击<strong>添加扩展程序</strong>即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231228001.gif"></p><p>5. 至此，NDM插件就已经安装完成了。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228114300605.png"></p><h2 id="4-2-火狐浏览器"><a href="#4-2-火狐浏览器" class="headerlink" title="4.2 火狐浏览器"></a>4.2 火狐浏览器</h2><p>1. 点击右上角，选择扩展与主题（或者直接按<kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>A</kbd>），搜索<code>NestDownloadManger</code>并回车</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228115328017.png"></p><p>2. 搜索结果中，找到<code>NeatDownloadManger Extension</code>，点击进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228115418650.png"></p><p>3. 添加到FireFox：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228115540347.png"></p><p>4. 右上角会有一个小弹窗，点击<strong>添加</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228115610110.png"></p><p>5. 添加成功，点击<strong>好的</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228115653250.png"></p><h2 id="4-3-Edge浏览器"><a href="#4-3-Edge浏览器" class="headerlink" title="4.3 Edge浏览器"></a>4.3 Edge浏览器</h2><p>1. 打开Edge浏览器，点击右上角的三个小点，点击扩展：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228150457486.png"></p><p>2. 选择倒数第二个，<strong>管理扩展</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228150538422.png"></p><p>3. 在扩展页面左侧选择<strong>获取Microsoft Edge扩展</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228150628199.png"></p><p>4. 在扩展商店搜索NeatDownloadManager，完成后按回车就能看到搜索结果，点击<strong>获取</strong>即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228150918779.png"></p><p>5. 选择<strong>添加扩展</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228151039221.png"></p><p>6. 右上角出现如下弹窗信息就说明NDM插件添加成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228151125225.png"></p><h1 id="五、试一下NDM有多快"><a href="#五、试一下NDM有多快" class="headerlink" title="五、试一下NDM有多快"></a>五、试一下NDM有多快</h1><p>这里我找了一个大一点MySQL的安装包下载来演示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228134507751.png"></p><p>使用NDM下载：速度直接拉满，我这台电脑使用NDM下载上述文件用时2分39秒，感兴趣的小伙伴可以观看：<a href="https://pan.baidu.com/s/1yRZk0dI6i6AqQXiuvrpoeQ?pwd=w4jk">NDM下载文件视频（未剪辑版）</a>。</p><p>如果使用浏览器本身下载：速度就差了一大截，下载速度维持在500KB~1.3M左右，下载用时19分22秒，感兴趣的小伙伴可以观看：<a href="https://pan.baidu.com/s/1tSky3oSyQ4Pq2nYJrctvJg?pwd=nxwn">浏览器下载文件视频（未剪辑版）</a>。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>MacOS</tag>
      
      <tag>Neat Download Manager</tag>
      
      <tag>NDM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之十一-流程控制之break和continue关键字</title>
    <link href="/posts/23.html"/>
    <url>/posts/23.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="http://www.icode504.com/posts/1.html">点我查看安装JDK8&#x2F;11&#x2F;17教程</a>、<a href="http://www.icode504.com/posts/10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><h1 id="一、循环的嵌套"><a href="#一、循环的嵌套" class="headerlink" title="一、循环的嵌套"></a>一、循环的嵌套</h1><p>和前面学习<code>if</code>一样，循环也可以相互搭配嵌套，即一个循环内部还包含一个循环。在编写嵌套循环时，三种循环（<code>for</code>、<code>while</code>、<code>do-while</code>）可以相互嵌套，常见的主要是<code>for</code>嵌套和<code>while</code>嵌套，它们的格式如下所示：</p><p>1. <code>for</code>循环嵌套：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-comment">// 执行代码...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. <code>while</code>循环嵌套：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; m) &#123;<br>    <span class="hljs-keyword">while</span> (j &lt; n) &#123;<br>        <span class="hljs-comment">// 执行代码...</span><br>        j++;<br>    &#125;<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>嵌套循环的执行类似于时钟，时钟是秒针走一圈，分针走一格。<strong>在嵌套循环中，内部循环执行n次，外部循环迭代一次。也就是说，嵌套循环执行的次数是<code>m * n</code>次</strong>。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Hippopx.jpg" alt="图片来源于Hippopx"></p><h1 id="二、循环的break关键字"><a href="#二、循环的break关键字" class="headerlink" title="二、循环的break关键字"></a>二、循环的break关键字</h1><p>前面我们学习<code>switch</code>语句时使用<code>break</code>关键字，当时这个关键字的作用有两个：</p><p>1. 阻止<code>switch</code>语句本身的穿透性。</p><p>2. 跳出<code>switch</code>语句。</p><p>在循环中，我们也可以使用<code>break</code>关键字，它的作用就是终止当前循环，需要搭配条件语句使用。</p><p>例如：正常输出1~100的过程中，如果我想让循环之输出到第50个数就终止循环，就可以使用<code>break</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * break关键字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(i);<br>            <span class="hljs-comment">// break一般会搭配条件判断语句结合使用</span><br>            <span class="hljs-comment">// 输出到第50个数终止当前循环</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后程序输出到第50个数后就不再输出后续的数字，说明<code>while</code>循环已经终止。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216142434197.png"></p><h1 id="三、continue关键字"><a href="#三、continue关键字" class="headerlink" title="三、continue关键字"></a>三、continue关键字</h1><p><code>continue</code>关键字用于循环语句中，作用是<strong>跳过当前循环，进入下一次循环</strong>。</p><p>在循环中使用<code>continue</code>关键字时，如果满足某个条件，<code>continue</code>会结束这一轮循环，进入下一次循环。这也就意味着，如果<code>continue</code>语句在循环体中被执行，那么循环体之后的代码将不会被执行。</p><p><code>continue</code>关键字通常用于优化程序性能防止不必要的迭代，以下是一个<code>continue</code>实例，输出<code>1~100</code>以内所有的计数：</p><p>如果使用原始的方式，我们只需要判断一下数字对2求余是否不等于0，符合这个条件判断就输出数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原生方式输出1~100所有的数字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，我们也可以使用<code>continue</code>关键字，既然输出的全是奇数，那么偶数是不符合条件的，如果是这样，就可以在条件判断中添加一个<code>continue</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * continue关键字的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinueDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 如果是偶数，就停止这轮循环，进入到下一次循环中</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二者实现运行效果完全一致：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216143816070.png"></p><p>需要注意的是，<code>continue</code>关键字只能用于循环语句中，并且只能跳过当前循环。如果需要在循环外跳过某些代码块语句，则可以使用其他控制语句，例如：<code>if-else</code>语句或者<code>switch-case</code>等。</p><h1 id="四、使用案例"><a href="#四、使用案例" class="headerlink" title="四、使用案例"></a>四、使用案例</h1><h2 id="4-1-案例一：猜数游戏"><a href="#4-1-案例一：猜数游戏" class="headerlink" title="4.1 案例一：猜数游戏"></a>4.1 案例一：猜数游戏</h2><blockquote><p>由计算机生成一个两位数数字，让用户来猜。假设用户用100个游戏币，每猜一次扣10个游戏币（给出提示），猜中以后获得大奖10000个游戏币，猜大或者猜小了给出相应提示。</p></blockquote><p>1. 首先，计算机随机生成的数字，我们可以使用<code>java.util.Random</code>类可以解决，生成两位数数字我们可以利用<code>Random</code>默认的范围将其扩充为我们想要的范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">// 生成[10, 99]区间的数字</span><br><span class="hljs-type">int</span> <span class="hljs-variable">standardNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">90</span>) + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>2. 搞定了随机数的生成以后，我们需要保证用户能多次输入，需要定义一个循环，在循环外边定义一个<code>Scanner</code>，具体的输入操作放入到循环中，这样就能保证用户多次输入了。</p><p>3. 用户只有100元，每猜一次扣10元，需要保证他的游戏币数量 &gt; 0，每执行一次循环，扣除10游戏币，迭代表达式需要写成<code>游戏币 -= 10</code>。</p><p>4. 如果用户成功猜中数字，完成后就让用户跳出循环即可。</p><p>5. 猜不中（猜大或者猜小）给用户一个提示。</p><p>综合上述分析，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 猜数游戏</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-comment">// 计算机生成的标准数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">standardNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">90</span>) + <span class="hljs-number">10</span>;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// 初始用户有100个游戏币</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">while</span> (money &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入数字: &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>            <span class="hljs-comment">// 每猜一次扣10元</span><br>            money -= <span class="hljs-number">10</span>;<br>            System.out.println(<span class="hljs-string">&quot;当前还剩&quot;</span> + money + <span class="hljs-string">&quot;游戏币&quot;</span>);<br>            <span class="hljs-keyword">if</span> (number == standardNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;恭喜，中大奖了&quot;</span>);<br>                money += <span class="hljs-number">10000</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &gt; standardNumber) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的数字过大&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的数字过小&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;您目前的中奖金额是&quot;</span> + money + <span class="hljs-string">&quot;游戏币&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果（我猜了5次中了，如果你们猜的次数更少也可以试试）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216171107741.png"></p><h2 id="4-2-案例二：九九乘法表"><a href="#4-2-案例二：九九乘法表" class="headerlink" title="4.2 案例二：九九乘法表"></a>4.2 案例二：九九乘法表</h2><blockquote><p>输出九九乘法表，如下图所示：</p><p><img src="https://pic.baike.soso.com/ugc/baikepic2/0/ori-20230423171344-1244803611_jpeg_1045_720_209233.jpg/800" alt="九九乘法表，图片来源于网络，侵删"></p></blockquote><p>说起这个九九乘法表，我想起了大一的时候我参加实验室的时候考的一道算法题，当时我用了最蠢笨的方法——一行一行将整个乘法表用C语言的<code>printf</code>输出的，直到后来我接触了循环方面的知识，我才知道那时候一行一行写有多愚蠢。</p><p>(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )</p><p>言归正传，我们分析：</p><p>1. 首先，乘法表一共有9行，需要循环9次。可以确定的循环范围是$[1,9]$</p><p>2. 我们截取一个乘法表的片段，发现同一行中，第一个乘数是变化的，第二个乘数是不变的。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216153832641.png"></p><p>3. 如果使用嵌套循环，外层控制行数。也就是说，同一行内部的第二个乘数可以作为外层循环的迭代变量。内层循环控制第一个乘数，在同一行内，第一个乘数是变化的。</p><p>4. 再次观察这个乘法表，我们会发现：$第一个乘数 &lt;&#x3D; 第二个乘数$，这个可以作为循环的内部条件，防止生成另一半循环。</p><p>至此，我们就可以编写一个九九乘法表了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &lt;= i) &#123;<br>                    System.out.println(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i);<br>                &#125;<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216160006119.png"></p><p>虽然得到的结果是正确的，但是样式并不符合九九乘法表的样子，我们只需要使用制表符<code>\t</code>和不换行输出的<code>System.out.print();</code>做一下处理即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-comment">// 要求第一个乘数 &lt;= 第二个乘数</span><br>                <span class="hljs-keyword">if</span> (j &lt;= i) &#123;<br>                    <span class="hljs-comment">// 使用不换行输出和制表符对输出结果进行美化</span><br>                    System.out.print(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i + <span class="hljs-string">&quot;\t&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 每一行输出完成后，需要换行</span><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下，符合我们的预期：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216160237255.png"></p><p>乘法表中$第一个乘数 &lt;&#x3D; 第二个乘数$，我们可以将这个条件写到内层的<code>for</code>作为条件表达式，优化后代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 嵌套循环输出九九乘法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiplicationTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 外层循环控制行数（第二个乘数）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-comment">// 内层循环控制第一个乘数的输出</span><br>            <span class="hljs-comment">// 要求第一个乘数 &lt;= 第二个乘数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-comment">// 使用不换行输出和制表符对输出结果进行美化</span><br>                System.out.print(j + <span class="hljs-string">&quot; * &quot;</span> + i + <span class="hljs-string">&quot; = &quot;</span> + j * i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 每一行输出完成后，需要换行</span><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果和前面的一摸一样：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231216160237255.png"></p><p>在这个优化版本中，我修改了内层循环的条件，使其只循环到<code>i</code>的值（第二个乘数），而不是9，这样可以减少循环的次数。</p><h2 id="4-3-案例三：素数问题"><a href="#4-3-案例三：素数问题" class="headerlink" title="4.3 案例三：素数问题"></a>4.3 案例三：素数问题</h2><blockquote><p>素数，也被称为质数，是指在自然数系中除了1和它自身以外，无法被其他自然数整除的数。最小的素数是2，它也是素数中唯一的偶数（双数）。其他素数都是奇数（单数）。素数有无限多个，所以不存在最大的素数。</p><p>输出100以内的所有素数。</p></blockquote><p>1. 确认范围：</p><ul><li>要输出的素数的范围在100以内，最小的素数是2，可以确定被除数<code>i</code>要循环的范围是$[2, 100]$。</li><li>由于素数只能被由于素数只能被1和其自身整除，那么在不包含上述条件的情况下，我们初步可以将除数<code>j</code>的范围确定为$[2,i-1]$</li></ul><p>2. 如果除数<code>j</code>所在范围内，存在某一个数可以被当前数整除，那么这个数就不是素数。</p><p>代码初步实现如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 由于2是最小的素数，因此被除数i的循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true，即当前数字确实是素数</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证j在[2, i-1]的范围内</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-comment">// 在上述区间内如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果也符合我们的预期：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231219084130368.png"></p><p>但是，对于每一个素数而言，我们有必要将除数的范围设置到<code>j - 1</code>吗？并不是，这里我举个例子：</p><p>48不是素数，除了1和它自身以外，能被48整除的最大数字是$48\div2&#x3D;24$。而超过24以后，就不存在能被48整除的整数。</p><p>我们可以按照上述分析，对内层循环代码做进一步简化，内层循环的范围修改为$[2, j&#x2F;2]$，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数--优化</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 由于2是最小的素数，因此循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证[2, i/2]区间内是否存在可以被整除的数字j</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= i / <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-comment">// 在这个区间如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出效果和上面完全相同，但是内层循环的次数减少了一半，循环的执行效率进一步提高：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231219085614559.png"></p><p>针对内层循环而言，这个程序还有进一步优化的空间。除数的范围只需要计算到被除数的平方根即可，为什么？</p><p>判断一个数是否是素数的重要前提就是：除数不能被1和它自身整除。如果一个数不是素数，那么它必定可以分解成两个数（1和它本身除外）的乘积，并且这个数的因子一定会在它的平方根之前出现。</p><p>同理，如果一个数如果是素数，即使到这个数的平方根之前也不可能存在能整除这个素数的数。因此，内层循环我们可以将<code>j</code>的范围改为<code>(int) Math.sqrt(i)</code>（数字的平方根求整）即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出100以内的素数（简化版）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumber3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 由于2是最小的素数，因此循环范围从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 创建一个flag，默认是true</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>            <span class="hljs-comment">// 要想判定当前数i是否是素数，只需要保证[2, Math.sqrt(i)]区间内是否存在可以被整除的数字j</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= (<span class="hljs-type">int</span>) Math.sqrt(i); j++) &#123;<br>                <span class="hljs-comment">// 在这个区间如果确实存在能被i整除的数，那么这个数就不是素数，就将flag设置为false</span><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 对于符合条件的flag，即素数，进行输出</span><br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果和前面的一模一样，循环的次数进一步减少，提高了代码的运行效率。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231219085614559.png"></p><h1 id="五、知识点总结"><a href="#五、知识点总结" class="headerlink" title="五、知识点总结"></a>五、知识点总结</h1><p>流程控制之循环结构知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载：<a href="https://icode504.lanzouw.com/iNjWB1ie8l3g">点我下载</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.svg" alt="流程控制之循环结构-总结"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之十-流程控制之循环结构</title>
    <link href="/posts/22.html"/>
    <url>/posts/22.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="http://www.icode504.com/posts/1.html">点我查看安装JDK8&#x2F;11&#x2F;17教程</a>、<a href="http://www.icode504.com/posts/10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>假设输出1~100之间的所有整数，正常情况下我们需要写100行代码才能对所有数字输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-number">4</span>);<br><span class="hljs-comment">// 其他数字输出省略...</span><br>System.out.println(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>虽然这种办法能达到预期的效果，但是代码量属实有点大(ᇂ_ᇂ|||)</p><p>为了解决上述问题，Java为我们提供了一个强大的控制结构——循环结构。</p><p>循环结构是一种常用的程序控制结构，它允许程序在执行的过程中反复执行一段代码，直到满足特定条件为止。循环结构可以大大简化重复性任务的编写，提高代码编写效率和可读性。</p><p>在Java中，循环结构主要由<code>while</code>循环、<code>do-while</code>循环、<code>for</code>循环组成。</p><h1 id="一、while循环"><a href="#一、while循环" class="headerlink" title="一、while循环"></a>一、while循环</h1><p><code>while</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程：如果条件表达式结果为<code>true</code>，此时进入<code>while</code>循环内部执行代码，直到<code>while</code>循环的条件表达式的结果为<code>false</code>为止。</p><p><code>while</code>结构如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231128dp1.png"></p><blockquote><p>案例1：使用<code>while</code>循环解决1~100的输出和1~100的和</p></blockquote><p>我们先解决1~100的输出，使用<code>while</code>需要循环100次，我们可以在<code>while</code>循环外定义一个变量<code>number</code>并赋值为1，由于是1~100是递增输出，条件表达式需要设定为<code>number &lt;= 100</code>。</p><p>在循环体中，我们先将<code>number</code>的值进行输出。但是此时<code>number</code>的值并没有增加，因此每次在输出后需要对<code>number</code>进行自增1的操作，即<code>number++</code>，部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (number &lt;= <span class="hljs-number">100</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;number = &quot;</span> + number);<br>    number++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就完成了1~100的输出，但是我们还需要输出它们相加的和，我们可以对上述的代码进行进一步改造：</p><p>在<code>while</code>循环外部再定义一个变量<code>sum</code>，默认值为0，用于存储数字相加的和。</p><p>在循环体中，输出语句后面实现两数相加的操作：<code>sum = sum + number;</code>（简写为<code>sum += number;</code>）</p><ul><li>第一次循环：sum &#x3D; 0 + 1 &#x3D; 1</li><li>第二次循环：sum &#x3D; 1 + 2 &#x3D; 3</li><li>第三次循环：sum &#x3D; 3 + 3 &#x3D; 6</li><li>以此类推……</li></ul><p>在<code>while</code>循环内部即可完成1~100的计算，最终<code>sum</code>的结果直接到<code>while</code>循环外部进行输出即可，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * while循环--输出1~100并求和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileLoop1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 定义一个变量number用于输出数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 2. 定义一个变量sum用于存储1~100相加的和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 3. 定义while循环，条件表达式为number &lt;= 100，需要保证number在while循环内相加</span><br>        <span class="hljs-keyword">while</span> (number &lt;= <span class="hljs-number">100</span>) &#123;<br>            sum += number;<br>            System.out.println(<span class="hljs-string">&quot;number = &quot;</span> + number);<br>            number++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合我们的预期：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231130172402913.png"></p><blockquote><p>案例2：斐波那契数列</p><p>已知每对兔子（一雌一雄）每个月能生殖一对小兔子，每对兔子前两个月没有生育能力，从第三个月每个月能生一对小兔子，假设兔子不存在死亡现象，那么从第一对刚出生兔子开始，第n个月以后会有多少只兔子？</p><p>数学解法可以看这位老师的文章：<a href="https://zhuanlan.zhihu.com/p/588439015">点我查看</a>，我只能说一句：太强了，膜拜大佬！</p></blockquote><p>根据上述题意可以得出：</p><ul><li>第1个月兔子无生育能力，因此兔子只有1对；</li><li>第2个月兔子无生育能力，此时兔子仍为1对；</li><li>第3个月兔子生育了一对兔子，此时兔子为2对；</li><li>第4个月最开始的兔子又生育了一对兔子，此时兔子为3对；</li><li>第5个月，最开始的兔子又生育了一对兔子，第三个月的兔子也生育了一对兔子，此时兔子为5对；</li></ul><p>由此我们可以得出一个数列：<br>$$<br>1,1,2,3,5……<br>$$<br>可以看出，从第三个数起，每个数都是前1个数和前两个数相加得到的和。由此，我们可以得到一个通用公式：</p><p>$$<br>f(n)&#x3D;f(n-1)+f(n-2), n\geqslant3<br>$$</p><p>我们可以定义三个变量：<code>number1</code>、<code>number2</code>和<code>totalNumber</code>。其中<code>number1</code>和<code>number2</code>存储前两个月兔子的数量，<code>totalNumber</code>存储前两月兔子数量的和（也就是上述公式的实现），具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * while循环解决斐波那契数列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FibonacciSequence</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入月数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthNumber</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">// number1和number2代表前两个月兔子的数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, number2 = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// i的含义是从第三个月开始繁殖。totalNumber用于计算前两个月兔子的数量</span><br>        <span class="hljs-comment">// totalNumber初始化值为1的目的：如果用户输入的月数为1或2，此时兔子对数为1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>, totalNumber = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 限制条件：从第三个月开始计算到第monthNumber个月</span><br>        <span class="hljs-keyword">while</span> (monthNumber &gt; <span class="hljs-number">2</span> &amp;&amp; i &lt;= monthNumber) &#123;<br>            <span class="hljs-comment">// 计算前两个月兔子总数</span><br>            totalNumber = number1 + number2;<br>            <span class="hljs-comment">// number1存储i-2个月兔子数量，用于下一轮循环的运算</span><br>            number1 = number2;<br>            <span class="hljs-comment">// number2存储i-1个月兔子数量，用于下一轮循环的运算</span><br>            number2 = totalNumber;<br>            i++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + monthNumber + <span class="hljs-string">&quot;个月兔子的数量是&quot;</span> + totalNumber + <span class="hljs-string">&quot;对&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231215153259190.png"></p><p>当然，循环只是解决斐波那契数列的一种方式，它还可以使用递归的方式解决。后续讲到方法的时候还会讲到这个问题的递归解法。</p><h1 id="二、do-while循环"><a href="#二、do-while循环" class="headerlink" title="二、do-while循环"></a>二、do-while循环</h1><p><code>do-while</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    执行代码...<br>&#125; <span class="hljs-keyword">while</span> (条件表达式);<br></code></pre></td></tr></table></figure><p>执行流程：先执行<code>do</code>内部的代码，内部代码执行完毕以后，再对<code>while</code>中的条件表达式进行判断，如果条件表达式为<code>true</code>，再次进入<code>do</code>内部执行代码；如果条件表达式为<code>false</code>，此时就跳出<code>do-while</code>循环。</p><p>和<code>while</code>循环相比，<code>do-while</code>循环即使其条件表达式为<code>false</code>，也会执行一次<code>do</code>内部的代码，因为它会先执行<code>do</code>内部的代码再进行条件判断。</p><p><code>do-while</code>循环的执行流程如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231128dp2.png"></p><blockquote><p>案例：计算一个数的所有因子之和（不包括1和自身）。输入一个正整数，输出其所有因子之和。</p><p>例如：</p><ul><li>正整数6的所有因子是：2，3。因此所有的因子的和是$2 + 3 &#x3D; 5$</li><li>正整数20的所有因子是：2，4，5，10。所有因子的和是$2+4+5+10&#x3D;21$</li></ul></blockquote><p>如果使用<code>do-while</code>循环来解决这个问题，我们首先需要确定循环的范围是什么？</p><p>其实题目中已经告诉我们了一个关键点：<strong>不包括1和自身</strong>。那么由此可以确定循环的范围是：$[2, number)$。</p><p>如何确定上述区间的数字是正整数<code>number</code>的因子呢？其实很简单，只需要判断这个数字能否被<code>number</code>整除即可。</p><p>由于我们输入的是正整数，需要在执行循环做一手判断，如果不是正整数，需要给出一个提示。</p><p>综合上述内容，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * do-while解决一个数所有因子的和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileDemo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入一个正整数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-comment">// 正整数判断</span><br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 定义一个变量sum，用于存储所有因子的和</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 由于正整数中因子不包含1和数字本身，因此循环需要从2开始，计算到number - 1</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-comment">// 判断条件：i能被number整除的，那么i就是number的因子</span><br>                <span class="hljs-keyword">if</span> (number % i == <span class="hljs-number">0</span>) &#123;<br>                    sum += i;<br>                &#125;<br>                i++;<br>            &#125; <span class="hljs-keyword">while</span> (i &lt; number);<br>            System.out.println(<span class="hljs-string">&quot;正整数&quot;</span> + number + <span class="hljs-string">&quot;所有因子的和是: &quot;</span> + sum);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的不是正整数！！！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231215111336107.png"></p><p>在开发中，使用<code>do-while</code>循环的频率要比<code>while</code>循环少很多。这主要是因为<code>do-while</code>循环本身是先执行循环体，然后再进行条件判断。即使条件判断结果是<code>false</code>，<code>do-while</code>也执行了一次循环体，这可能会导致不必要的计算和操作。</p><h1 id="三、普通for循环"><a href="#三、普通for循环" class="headerlink" title="三、普通for循环"></a>三、普通for循环</h1><p>普通<code>for</code>循环的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (初始化表达式; 条件表达式; 迭代表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>for</code>循环的执行流程如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231128dp3.png"></p><p>这里解释一下<code>for</code>内部的三个表达式：</p><p>1. 初始化表达式，指的是初始化Java变量表达式，即<strong>数据类型 变量名 &#x3D; 变量值</strong></p><p>例如：<code>int i = 0;</code>，或者把<code>int i</code>写到<code>for</code>循环之前，然后在<code>for</code>循环第一个位置将<code>i = 0</code>补齐即可。</p><p>当然，初始化表达式也可以同时定义多个变量，例如：<code>int i = 0, j = 0;</code></p><p>2. 条件表达式，如果计算结果为<code>true</code>，就进入<code>for</code>循环内部执行代码，如果条件表达式为<code>false</code>，就会跳出<code>for</code>循环。</p><p>一般而言，<strong>条件表达式和初始化表达式中定义的变量有关</strong>。例如：<code>i &lt; 100</code>、<code>i &gt; -30</code>等等。</p><p>3. 迭代表达式，绝大多数情况下针对初始化表达式定义的变量进行增加或减少的操作。</p><p>以前面定义的初始化表达式<code>int i = 0;</code>为例，假设让变量的值增加，我们可以使用如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">i++;<span class="hljs-comment">// 自增1</span><br>++i;<span class="hljs-comment">// 自增1</span><br>i += number;<span class="hljs-comment">// 让i每次增加number</span><br></code></pre></td></tr></table></figure><p>4. 一般在写<code>for</code>循环代码时，推荐将初始化表达式、条件表达式、迭代表达式都写上。</p><p>事实上，不写上述三个表达式也会执行<code>for</code>循环代码，但是如果在<code>for</code>循环内部不写合理的条件判断的话，很容易造成死循环的情况的发生。</p><p>那么<code>for</code>循环的执行流程是怎么样的呢？</p><ul><li>在首次执行<code>for</code>循环的时候，先执行初始化表达式，然后根据条件表达式结果进行判断，如果条件表达式为<code>true</code>，则进入<code>for</code>循环内部执行代码，如果条件表达式为<code>false</code>就跳出<code>for</code>循环。在执行完<code>for</code>循环内部代码以后，会针对前面初始化表达式的变量进行迭代操作（常见的是变量相加&#x2F;相减操作）。</li><li>后续执行<code>for</code>循环的时候，就会根据<code>for</code>循环迭代表达式的计算结果到条件表达式中进行比较，如果比较结果为<code>true</code>执行<code>for</code>内部代码，反之就会跳出<code>for</code>循环。</li></ul><p>这里举两个案例来说明一下<code>for</code>循环的使用：</p><blockquote><p>案例1：求1~100（包含100）所有的偶数和</p></blockquote><p>解决本题的关键点是偶数的获取，判断一个数是否是偶数，即数字对2求余等于0，再定义一个变量<code>sum</code>对所有符合条件的偶数累加即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * for计算1~100所有偶数和</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberPrint</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">// 偶数判断条件：对2求余是否等于0</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 偶数累加</span><br>                sum += i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有的和: &quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231215145400975.png"></p><blockquote><p>案例2：水仙花数是指一个3位数，它的每个数位上的数字的3次幂之和等于这个数的本身。例如：<br>$$<br>1^3 + 5^3+3^3 &#x3D; 153<br>$$<br>请使用<code>for</code>循环列举所有的水仙花数。</p></blockquote><p>1. 确定范围：水仙花是一个三位数，三位数的数字范围在$[100, 999]$区间内</p><p>2. 个位、十位、百位数的获取：<br>$$<br>百位数 &#x3D; 数字 &#x2F; 100<br>$$</p><p>$$<br>十位数 &#x3D; 数字&#x2F;10%10<br>$$</p><p>$$<br>个位数&#x3D;数字%10<br>$$</p><p>3. 符合水仙花数的条件：<br>$$<br>数字 &#x3D; 百位数^3+十位数^3+个位数^3<br>$$<br>综合以上的分析，使用<code>for</code>循环的代码如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * for循环列举水仙花数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-12-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NarcissisticNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义三个变量a, b, c分别存储百位数、十位数、个位数</span><br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-comment">// 循环范围设定在[100, 999] --&gt; [100, 1000)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-comment">// 百位数、十位数、个位数的获取</span><br>            a = i / <span class="hljs-number">100</span>;<br>            b = i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>            c = i % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 水仙花数的判断条件</span><br>            <span class="hljs-keyword">if</span> (i == a * a * a + b * b * b + c * c * c) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果即$[100, 999]$以内的所有水仙花数：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231215135905087.png"></p><p>正如这节标题：“普通<code>for</code>循环”，其实JDK 5还为我们设计了<code>foreach</code>循环（也称作增强<code>for</code>循环），这类循环主要用于遍历数组和列表等结构，使用<code>foreach</code>循环会简化代码结构，在后续学习数组是我们会用到它，敬请期待°꒰๑’ꀾ’๑꒱°</p><h1 id="四、死循环"><a href="#四、死循环" class="headerlink" title="四、死循环"></a>四、死循环</h1><p>死循环，即条件表达式计算结果恒定为<code>true</code>而不断执行循环内部的代码。是一种无法自行终止的循环。在死循环中，程序会反复执行同一段代码，而且永远无法跳出这个循环，除非手动中断程序或者遇到未处理的异常。</p><p>下面使用上述三种循环演示以下死循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// while形式的死循环</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// do-while形式的死循环</span><br><span class="hljs-keyword">do</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// for形式的死循环：不写初始化表达式和迭代表达式，条件表达式为true</span><br><span class="hljs-keyword">for</span> (; <span class="hljs-literal">true</span>; ) &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是死循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码的过程中，如果不进行人为停止程序，它们就会不停输出“我是死循环”：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231128001.gif"></p><p>死循环会导致程序无法正常执行其他任务，并且可能会占用大量资源。在编写循环结构时，务必要保证正确设置循环条件和提供适当的跳出机制，以避免死循环的发生。</p><h1 id="五、Intellij-IDEA关于循环的快捷键"><a href="#五、Intellij-IDEA关于循环的快捷键" class="headerlink" title="五、Intellij IDEA关于循环的快捷键"></a>五、Intellij IDEA关于循环的快捷键</h1><p>1. 在Intellij IDEA中，如果快捷生成一个循环结构，可以输入<code>fori</code>，然后会出现一个提示，按回车即可生成一个<code>for</code>循环结构。这个<code>for</code>循环是从0开始的：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231215010.gif"></p><p>2. 如果想生成一个从0~n的<code>for</code>循环，可以使用<code>n.for</code>快捷生成。例如：如果我想生成0~100之间的循环，可以直接按<code>100.for</code>，出现提示后直接按回车即可生成这个区间的<code>for</code>循环：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231215011.gif"></p><p>3. 输入<code>n.forr</code>可以生成一个从n到0依次递减的<code>for</code>循环，还是以<code>100.forr</code>为例，生成的效果如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231215012.gif"></p><p>4. 在编写代码的过程中，如果条件表达式可以确定的话，可以直接使用<code>条件表达式.while</code>快捷生成一个<code>while</code>循环，例如：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231215013.gif"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章 若依-JFlow设置用户并测试流程</title>
    <link href="/posts/21.html"/>
    <url>/posts/21.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="http://www.icode504.com/posts/15.html">《第一章 若依-JFlow的配置与启动》</a></p><p>如何创建业务场景、流程图和单节点表单设计请查看这篇文章：<a href="http://www.icode504.com/posts/16.html">《第二章 若依-JFlow流程模型与单节点表单设计》</a></p><p>如何设置多节点的表单并检查流程，请查看这篇文章：<a href="http://www.icode504.com/posts/17.html">《第三章 若依-JFlow其他节点的表单设计和流程检查》</a></p></blockquote><h1 id="一、创建用户及相关信息"><a href="#一、创建用户及相关信息" class="headerlink" title="一、创建用户及相关信息"></a>一、创建用户及相关信息</h1><p>在正式进行测试之前，我们需要保证有相应的用户来执行我们前面设计的流程。</p><p>假设我们的岗位是程序员，属于研发部，我们至少需要两个角色：普通员工和开发组长。</p><p>1. 点击左侧菜单：<code>系统管理--&gt;用户管理</code>，在左上角点击<strong>新增</strong>，创建用户：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208135500591.png"></p><p>2. 这里我创建了四个用户，小张、小李、小陈、小刘，它们的基本信息如下图所示（密码默认是123456）：</p><blockquote><p>其中：小张是研发部门的一名普通员工，小李是研发部门的经理，小陈是人事部门的总经理，小刘是公司的总经理。</p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208135738944.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208140240453.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208140558667.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208140735464.png"></p><h1 id="二、测试请假流程"><a href="#二、测试请假流程" class="headerlink" title="二、测试请假流程"></a>二、测试请假流程</h1><blockquote><p>情景一：顺序执行</p><p>假设研发部员工小张今天有事需要请假，它需要填写请假单，到部门经理小李那边审批，小李通过审批以后，人事部门经理小陈继续审批申请单，审批以后，再流经总经理小刘进行审批，审批通过以后，小张即可查看请假单信息。</p></blockquote><p>1. 进入我们设计的流程图，在上方点击<strong>测试运行</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208141202035.png"></p><p>2. 点击小张，开始运行，此时表单中上方系统已经为我们自动加载了申请人的基本信息，不需要我们再填写了。填写后的内容如下所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208141713794.png"></p><p>3. 点击左上角<strong>发送</strong>，在选择接收人界面中选择由部门经理小李。然后点击发送：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208141953776.png"></p><p>4. 出现下面的信息，就说明已经成功向部门经理小李发送请假申请了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208142054478.png"></p><p>5. 切换用户到小李，让小李执行任务</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208142136668.png"></p><p>6. 假设小李默认选择同意，发送给人事经理小陈执行任务：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208151209317.png"></p><p>7. 选择人事经理小陈并发送</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208151412103.png"></p><p>发送成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208151427486.png"></p><p>8. 切换到人事经理小陈执行任务：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208151525891.png"></p><p>9. 假设人事同意申请，就发送给总经理小刘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208151706251.png"></p><p>10. 假设总经理也同意我们的申请：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208154107771.png"></p><p>11. 点击发送以后，填写请假单的小张就会看到所有人的审批结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208154426432.png"></p><p>点击左上角的轨迹可以查看任意一个节点审批情况：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208154609844.png"></p><blockquote><p>情景二：驳回场景</p><p>假设研发部员工小张今天有事需要请假，它需要填写请假单，到部门经理小李那边审批，小李通过审批以后，人事部门经理小陈继续审批申请单，但是给出了驳回理由，让xxx重新填写。</p></blockquote><p>1. 小张填写请假申请单，假设部门经理审批通过，到人事经理小陈进行审批，此时小陈点击驳回时需要填写驳回理由</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208155633882.png"></p><p>2. 在左上角点击退回，退回节点选择员工填写请假单，并填写退回理由</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208160042749.png"></p><p>3. 此时退回到小张那里，重新填写请假单</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208155922811.png"></p><p>4. 切换到小张，重新填写请假单，此时会弹出一个提示信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208160144682.png"></p><p>5. 重新填写表单信息，重新发送给人事经理并审批：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208160359210.png"></p><p>6. 假设人事经理、总经理全部同意，那么我们再查看请假申请单时的轨迹图如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208160614626.png"></p><p>至此，请假的两种简单情况流程就执行完成了。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>我们在《第二章 若依-JFlow流程模型设计》中提到过，设计流程一共有五个步骤：</p><ol><li>绘制流程图：创建各个节点，并根据实际情况连结各个节点。</li><li>设置接收人规则：每一个节点到底是有谁来执行任务，是某一个人还是某一个特定部门的人在执行，JFlow框架都已经为我们设置好了。</li><li>设计表单：根据实际的业务设计表单，注意表单中的细节要和实际对应上。其他节点的表单可以引入上一个节点的，并再次基础上进行设计即可。</li><li>检查流程：流程图和各个节点的表单设计完成后，最好检查一下流程，有错误可以及时更改。</li><li>测试并运行该流程：测试过程中可以按角色所在部门一级一级审批，审批过程中可以对某个节点进行退回，每一个角色可以查看审批情况。</li></ol>]]></content>
    
    
    <categories>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
      <tag>JFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gradle安装与配置教程（Windows版）</title>
    <link href="/posts/20.html"/>
    <url>/posts/20.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><p>1. 检查电脑上是否安装JDK，如果没有安装，请查看<a href="http://www.icode504.com/posts/1.html">JDK安装教程</a>。</p><p>2. 如果电脑上已经安装JDK，按<code>Win + R</code>键，输入<code>cmd</code>，然后点击<code>确定</code></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502204142586.png"></p><p>3. 输入<code>java -version</code>，点击<code>回车</code>，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502204421939.png"></p><h1 id="二、Gradle下载"><a href="#二、Gradle下载" class="headerlink" title="二、Gradle下载"></a>二、Gradle下载</h1><p>1. 打开官网下载界面：<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><blockquote><p>如果你使用的SpringBoot项目，建议使用6.8及以上的版本</p></blockquote><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502205326073.png"></p><p>2. 这里我选择8.0.2版本下载。点击<code>complete</code>下载</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502205503786.png"></p><h1 id="三、Gradle配置环境变量"><a href="#三、Gradle配置环境变量" class="headerlink" title="三、Gradle配置环境变量"></a>三、Gradle配置环境变量</h1><p>1. 将下载的压缩包进行解压，<strong>建议解压目录只包含英文路径</strong>，这里我解压到了E盘</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502210254031.png"></p><p>2. 双击打开<code>gradle-8.0.2</code>目录，复制路径</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502210539866.png"></p><p>3. 在左侧<code>鼠标右键</code>点击此电脑，点击<code>属性</code></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502210816983.png"></p><p>4. 点击<code>高级系统设置</code></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502210924502.png"></p><p>5. 点击<code>环境变量</code></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502211011177.png"></p><p>6. 在下方系统变量点击<code>新建</code>。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502211128115.png"></p><p>7. 如下图，变量名输入<code>GRADLE_HOME</code>，变量值是前面复制的路径粘贴即可，完成后点击<code>确定</code>。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502211311867.png"></p><p>8. 在系统变量中<code>双击打开Path</code>。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502211541532.png"></p><p>9. 在右上角点击新建，输入<code>%GRADLE_HOME%\bin</code>，完成后对一路点击确定。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502211824581.png"></p><p>10. 验证Gradle是否安装成功：按<code>Win + R</code>键，输入cmd打开命令提示行，在提示行中输入<code>gradle -v</code>，如果有下面的提示Gradle环境变量配置成功。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502212143948.png"></p><h1 id="四、配置下载源"><a href="#四、配置下载源" class="headerlink" title="四、配置下载源"></a>四、配置下载源</h1><p>由于Gradle自带Maven下载源是国外的，在后续下载依赖的过程中会比较慢。这里我们需要将下载源换成国内镜像。</p><p>1. 需要保证能看到文件的后缀名：在文件夹上方点击<code>查看</code>，在右侧勾选<code>文件扩展名</code>。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502213529133.png"></p><p>2. 打开Gradle目录，进入init.d文件夹，会发现里面有一个<code>readme.txt</code>文件，打开后会有如下信息</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502212534100.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">You can <span class="hljs-built_in">add</span> .gradle (e.g. test.gradle) init scripts <span class="hljs-built_in">to</span> this <span class="hljs-built_in">directory</span>. Each <span class="hljs-literal">one</span> is executed <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">start</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> build.<br></code></pre></td></tr></table></figure><p>简单翻译一下就是需要在init.d目录下配置一个初始文件，我们需要新建一个<code>init.gradle</code>文件</p><p>3. 鼠标右键新建并打开init.txt文件，将下面的内容粘贴到文件中，然后点击<code>保存</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">allprojects &#123;<br>    repositories &#123; <br>        mavenLocal() <br>        maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125; <br>        maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&quot;https://nexus.bsdn.org/content/groups/public/&quot;</span> &#125; <br>        mavenCentral()<br>    &#125;<br>    buildscript &#123;<br>        repositories &#123; <br>            maven &#123; name <span class="hljs-string">&quot;Alibaba&quot;</span> ; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;Bstek&quot;</span> ; url <span class="hljs-string">&#x27;https://nexus.bsdn.org/content/groups/public/&#x27;</span> &#125; <br>            maven &#123; name <span class="hljs-string">&quot;M2&quot;</span> ; url <span class="hljs-string">&#x27;https://plugins.gradle.org/m2/&#x27;</span> &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4. 将文件命名为<code>init.gradle</code>，对下面弹窗提示点击确定。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502213047150.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502213101741.png"></p><h1 id="五、IDEA创建Gradle项目"><a href="#五、IDEA创建Gradle项目" class="headerlink" title="五、IDEA创建Gradle项目"></a>五、IDEA创建Gradle项目</h1><p>1. 新建Gradle项目或模块：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502214558267.png"></p><p>2. 创建完成后，按<code>Ctrl + Alt + S</code>打开设置，找到Gradle并按下图设置</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502233947436.png"></p><p>3. 使用JUnit4进行测试：在IDEA左侧目录打开<code>build.gradle</code>文件，在<code>dependencies</code>中添加一条依赖：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502234132500.png"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>testImplementation <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4. 在src目录下，创建<code>test\java</code>目录</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502234439914.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230502234512693.png"></p><p>5. 创建一个测试类MyTest01</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> MyTest01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span> 2023/5/2 23:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest01</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6. 点击运行，即可看到控制台输出内容：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503000018947.png"></p><h1 id="六、Eclipse创建Gradle项目"><a href="#六、Eclipse创建Gradle项目" class="headerlink" title="六、Eclipse创建Gradle项目"></a>六、Eclipse创建Gradle项目</h1><p>1. 在Eclipse上方打开<code>Windows --&gt; Preferences</code>，按照下图所示配置。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503001217049.png"></p><p>2. 重启Eclipse，新建一个Gradle项目</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503001422253.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503001512591.png"></p><p>3. 进入到欢迎页后，取消勾选，点击下一步。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503001638406.png"></p><p>4. 自定义项目名称，然后点击下一步：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503001843790.png"></p><p>5. 点击完成</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503002819037.png"></p><p>6. 在左侧目录打开<code>lib --&gt; build.gradle</code>文件，导入如下依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>testImplementation <span class="hljs-string">&#x27;junit:junit:4.12&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>7. 在<code>src\test\java</code>目录下创建一个Java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.icode504;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest02</span> &#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello, world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8. 双击方法名，鼠标右键点击运行，即可看到控制台输出</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503003314114.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230503003356473.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven安装与配置教程（Windows版）</title>
    <link href="/posts/19.html"/>
    <url>/posts/19.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装前检查"><a href="#一、安装前检查" class="headerlink" title="一、安装前检查"></a>一、安装前检查</h1><ol><li><p>检查电脑上是否安装JDK，如果没有安装，请查看JDK安装教程：<a href="https://zhuanlan.zhihu.com/p/626465440">点我查看</a></p></li><li><p>如果电脑上已经安装JDK，按<kbd>Win</kbd> 和<kbd>R</kbd>键，输入<code>cmd</code>，然后点击确定</p></li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508205645141.png"></p><ol start="3"><li>输入<code>java -version</code>，点击<code>回车</code>，查看JDK安装信息，如果有下面提示信息，说明JDK安装成功</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/v2-3fca64e63e8d136f76373193158d9089_720w.webp" alt="img"></p><h1 id="二、下载Maven"><a href="#二、下载Maven" class="headerlink" title="二、下载Maven"></a>二、下载Maven</h1><p>以下两种方式二选一：</p><p>方式一：网盘下载（强烈推荐，下载速度较快！）</p><p>打开此链接：<a href="https://icode504.lanzouw.com/b012xidad">点击下载，密码:1024</a>，选择任意一个文件下载即可，这里我选择的是3.6.3版本的：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508213842338.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508214000869.png"></p><p>方式二：官网下载（不推荐，曾经同事和我吐槽由于官网是国外的，下载速度非常慢）</p><ol><li>点击进入官网下载链接：<a href="https://archive.apache.org/dist/maven/maven-3/">点击进入</a>，会出现如下界面</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508214702016.png"></p><ol start="2"><li>选择一个，点击进入，这里我以3.6.3版本的为例，按下图所示操作即可</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508214809153.png"></p><blockquote><p>说明：source目录下的文件是Maven的源码文件，如果有查看的源码的小伙伴，也可以点击进入下载，这里就不过多赘述了。</p></blockquote><ol start="3"><li>如果你使用的是Windows，请下载后缀名为<code>.zip</code>的文件；其他操作系统的请下载<code>.tar.gz</code>的版本。</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230508215220278.png"></p><h1 id="三、配置Maven"><a href="#三、配置Maven" class="headerlink" title="三、配置Maven"></a>三、配置Maven</h1><ol><li>将下载下来的压缩包<strong>解压到一个你知道的文件夹下</strong>，为了避免后续可能出现问题，解压目录只包含英文字符 的目录，这里我解压到了<code>E:/Environment</code>中</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220254005.png"></p><ol start="2"><li>双击进入<code>apache-maven-3.6.3</code>文件夹中，点击上方路径，鼠标右键点击复制</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220546223.png"></p><ol start="3"><li>在文件夹左侧，找到此文件，鼠标右键，点击属性</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220742398.png"></p><ol start="4"><li>点击高级系统设置</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220833089.png"></p><ol start="5"><li>点击环境变量</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220912799.png"></p><ol start="6"><li>新建一个环境变量</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508220944612.png"></p><ol start="7"><li>变量名填写<code>M2_HOME</code>，变量值将前面复制的内容粘贴进去即可，完成后点击确定。</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508221142253.png"></p><ol start="8"><li>双击打开Path</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508221248363.png"></p><ol start="9"><li>按照下图所示操作即可，完成后一路点击确定。</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508221458356.png"></p><ol start="10"><li><p>验证Maven是否安装成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入cmd，点击进入。</p></li><li><p>在命令提示行中输入<code>mvn -version</code>，如果出现如下提示，说明Maven配置成功！</p></li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230508221728184.png"></p><h1 id="四、下载源配置"><a href="#四、下载源配置" class="headerlink" title="四、下载源配置"></a>四、下载源配置</h1><p>前面我们已经配置好Maven，但是我们在以后导入依赖的时候默认使用的是Maven的中央仓库，而中央仓库是国外网站，下载速度比较慢。因此我们需要将Maven下载源设置成国内镜像仓库，提高导入依赖的速度。以下是下载源配置教程。</p><p>如果你是小白，请一定按照下面的步骤一步一步做:smile::smile::smile:</p><ol><li>打开前面我们安装Maven的位置，双击打开conf文件夹。</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230509200621227.png"></p><ol start="2"><li>按照下图所示的操作，使用记事本打开<code>settings.xml</code>文件</li></ol><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/00002.gif" alt="00002"></p><ol start="3"><li>用记事本打开后，在上方点击<code>查看</code>，然后点击<code>状态栏</code>，此时记事本右下角会出现行数</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204353762.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204435611.png"></p><ol start="4"><li>请复制下面的代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>在记事本第246行末尾换行，将上一步的代码粘贴到第247行中，效果如下图</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509204919658.png"></p><p>此时我们配好了Maven的全局JDK版本，使用的是JDK 8版本。</p><ol start="6"><li>请复制下面的代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>在记事本第158行末尾处换行，粘贴上一步代码，效果如下图：</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509205353978.png"></p><ol start="8"><li>打开Maven的安装目录，在这里新建一个repository文件夹，创建完成后，进入此文件夹，复制上述路径。</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509205928445.png"></p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509210144270.png"></p><ol start="9"><li>打开记事本，在第55行创建一个<code>&lt;localRepository&gt;&lt;/localRepository&gt;</code>标签，并在二者中间粘贴上一步的路径，效果如下图所示：</li></ol><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230509210555912.png"></p><ol start="10"><li>上述操作完成，请一定一定一定按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存！！！至此Maven就全部配置完成了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装、配置与卸载教程（Windows版）</title>
    <link href="/posts/18.html"/>
    <url>/posts/18.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL是一个关系型数据库管理系统，目前为Oracle旗下产品，它具有开源、体积小、速度快的优点，许多网站使用的都是MySQL数据库。</p><p>简单而言，MySQL数据库核心功能就是用来存储数据的。</p><p>MySQL数据库分为社区版和商业版，这里介绍的是社区版的安装教程</p></blockquote><h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>1. 打开MySQL官网下载链接：<a href="https://downloads.mysql.com/archives/installer/">点我查看</a></p><p>2. 按照下图所示操作选择相应的MySQL版本下载，这里我选择的Windows MySQL 8.0.30版本。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512212238023.png"></p><p>3. 下载中，请耐心等待。</p><h1 id="二、安装MySQL"><a href="#二、安装MySQL" class="headerlink" title="二、安装MySQL"></a>二、安装MySQL</h1><p>安装MySQL过程中，请保持网络畅通！！！</p><p>1. 双击打开安装包，安装器启动需要一些时间，请耐心等待</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512214407607.png"></p><p>2. 如果遇到这个窗口，点击Yes即可。如没遇到，请查看下一步。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512214714122.png"></p><p>3. 选择Custom，然后点击Next。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512215033908.png"></p><p>4. 按照下图所示操作，小白直接点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/00003.gif" alt="00003"></p><blockquote><p>（小白可以忽略下列内容，直接跳到第5步）</p><ul><li>如果你想修改MySQL的安装路径，如下图，可以点击下方Advanced Options</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512215904874.png"></p><ul><li>按照下图所示，选择安装路径，为避免后续过程中出现问题，<strong>安装路径只包含英文字符的路径</strong>；下面的是MySQL数据存储路径，如果不懂这方面的内容，就不要修改这个路径。配置完成后后点击OK</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512220426075.png"></p></blockquote><p>5. 点击Execute</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512220628921.png"></p><p>6. 安装中，请耐心等待</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512220740114.png"></p><p>7. 出现下图提示Complete以后，直接点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512220836314.png"></p><p>8. 点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512220905466.png"></p><p>9. 初次安装MySQL的小白请注意，下图的<strong>Port请务必配置成3306</strong>，完成后点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512221142216.png"></p><blockquote><p>注意：如果你的电脑安装了多个MySQL，需要修改端口号，要和3306端口号避开使用。安装一个MySQL请忽略此条。</p></blockquote><p>10. 点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512221223745.png"></p><p>11. 设置root账户密码，这里强烈建议<strong>将密码设置成你最熟悉的密码</strong>，否则后续回复密码比较麻烦。这里我设置成了<code>123456</code>。设置完成后点击Next。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512221639639.png"></p><p>12. 点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512221927024.png"></p><p>13. 点击Next</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512222002468.png"></p><p>14. 点击Execute，MySQL安装器就会为我们配置，配置过程中，请耐心等待。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512222105185.png"></p><p>15. 出现下图信息，说明MySQL配置成功，点击Finish。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512222243451.png"></p><p>16. 点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512222328898.png"></p><p>17. 点击Finish，完成MySQL的安装。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512222401129.png"></p><h1 id="三、配置MySQL"><a href="#三、配置MySQL" class="headerlink" title="三、配置MySQL"></a>三、配置MySQL</h1><p>1. 如果你是小白，打开文件夹，按照下图操作，找到MySQL的安装路径并复制这个路径。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/00005.gif"></p><p>2. 在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/97f2139c6a1110c34086eb54590f073f.png"></p><p>3. 点击高级系统设置</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/0c7e02c5692120d296587f2fbbbae7a2.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/246da216c8fb0cda6499a0a3a02765eb.png" alt="Snipaste_2023-03-14_13-44-54"></p></blockquote><p>4. 点击环境变量</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/9b32c83db0d6df2c2f698e9d67d0edfd.png"></p><p>5. 找到下方系统变量，找到Path，双击进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512223639743.png"></p><p>6. 按照下图所示操作，粘贴前面复制的MySQL安装路径，然后一路点击确定即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512223912054.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击进入。</p><p>8. 在命令提示行中输入<code>mysql -u root -p</code>，然后点击回车，会提示你输入密码。这个密码是前面我们安装MySQL的时候设置的密码，直接输入点击回车即可。完成后出现下图界面表示MySQL安装成功！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512224408436.png"></p><h1 id="四、卸载MySQL"><a href="#四、卸载MySQL" class="headerlink" title="四、卸载MySQL"></a>四、卸载MySQL</h1><blockquote><p>MySQL卸载过程会有一些繁琐，卸载过程请一定耐心！如果你按照前面的步骤成功安装MySQL并可以正常使用了，就直接忽略下面的内容。</p></blockquote><p>1. 停止MySQL的服务：按下图所示操作，进入服务页面。找到MySQL80服务。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/00006.gif"></p><p>2. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>control</code>，点击进入控制面板，在下方找到卸载程序。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512231019536.png"></p><p>3. 将带有MySQL的程序全部使用鼠标右键卸载。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512231355775.png"></p><p>4. 卸载中，请耐心等待。</p><p>5. 卸载界面不存在MySQL相关程序，说明MySQL卸载成功。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512231640785.png"></p><p>6. 清理残余文件：如果你是小白并且没有修改过MySQL路径，那么你可以去<code>C盘</code>的<code>Program Files</code>文件夹内看看是否存在MySQL的文件夹。如果存在，直接删除文件夹即可。</p><p>7. 清理注册表</p><ul><li>按<kbd>Win</kbd>和<kbd>S</kbd>键，输入<code>regedit</code>，打开注册表编辑器：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512232237529.png"></p><ul><li>依次删除下面和MySQL有关的目录。</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\ApplicationMySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务 目录删除<br></code></pre></td></tr></table></figure><p>8. 删除环境变量</p><ul><li>如何进入环境变量，请参考第三条配置MySQL的前5步。</li><li>选中MySQL环境变量，点击删除，然后一路点击确定即可。</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230512233341214.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三章 若依-JFlow其他节点的表单设计和流程检查</title>
    <link href="/posts/17.html"/>
    <url>/posts/17.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="http://www.icode504.com/posts/15.html">《第一章 若依-JFlow的配置与启动》</a></p><p>如何创建业务场景、流程图和单节点表单设计请查看这篇文章：<a href="http://www.icode504.com/posts/16.html">《第二章 若依-JFlow流程模型设计》</a></p></blockquote><p>上一节我们讲述了如何创建一个业务场景和流程模型，如何创建一个流程，如何设置单个节点的表单。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208103559698.png"></p><p>这一节我们就设置所有节点人员的表单。并检查相关的流程。</p><h1 id="一、设置各节点人员审批表单"><a href="#一、设置各节点人员审批表单" class="headerlink" title="一、设置各节点人员审批表单"></a>一、设置各节点人员审批表单</h1><h2 id="1-1-部门领导审批节点表单设计"><a href="#1-1-部门领导审批节点表单设计" class="headerlink" title="1.1 部门领导审批节点表单设计"></a>1.1 部门领导审批节点表单设计</h2><p>部门领导审批当前员工的请假申请单时，没有修改员工填写的申请信息权限，因此在审批时，部门领导看到的员工信息表单是只读状态，他只有审批通过&#x2F;驳回的权限。</p><p>驳回需要填写驳回理由，也就是说当点击驳回时，触发填写驳回原因事件，这些在JFlow框架中全部都能实现。</p><p>鼠标右键点击部门领导节点，点击<strong>设计表单</strong>，出现如下页面：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104024130.png"></p><p>我们需要再重新绘制一遍员工请假申请单的内容吗？并不是，JFlow为我们提供了节点内容的选项。</p><p>1. 点击右上角的<strong>导入导出</strong></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104153563.png"></p><p>2. 进入导入导出页面以后，选择导入方式为<strong>从流程节点表单导入</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104255122.png"></p><p>3. 选择第一个节点，我们之前设计的表单；开启<strong>是否只读</strong>，导入后的表单内容全部设置为只读状态，然后点击<strong>执行从节点表单导入</strong>即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104433275.png"></p><p>4. 此时弹出框会弹出一个提示，点击确定，覆盖原有节点内容即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104552660.png"></p><p>5. 出现如下内容就说明上一个节点的内容导入成功，点击确定，关闭导入窗口。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104631504.png"></p><p>6. 此时就出现了上一个节点（员工填写请假单）设计的表单内容，并且全部设置只读：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208104815228.png"></p><p>7. 此时我们在左侧组件最下方，找打审核分组，拖到请假单的下方：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231208001.gif" alt="231208001"></p><p>8. 此时表单下方的审核分组中就会出现审核意见、审核人、审核日期。但是我们需要对表单内容进行修改：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208105403289.png"></p><ul><li>首先我们先将审核日期设置为只读：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208105544768.png"></p><ul><li>审核人默认显示方式改成登陆人员姓名，即<code>@WebUser.Name</code></li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208143308747.png"></p><ul><li>审核意见也不符合前面我们预期的要求，选中审核意见组件，点击右侧图标删除组件。</li><li>在左侧组件库中拉入一个枚举单选到部门经理审核组件框中，此时弹出一个添加枚举类型字段的窗口，在右上角点击新建：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110047034.png"></p><ul><li>枚举内容按照下图填写即可，然后点击右上角保存，关闭此窗口：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110154390.png"></p><ul><li>枚举值选择第一个：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110409316.png"></p><ul><li>弹出框内容点击确定即可：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110449181.png"></p><ul><li>点击保存，然后再点击关闭即可：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110543956.png"></p><ul><li>再选中部门经理审核意见组件，将内容设置为必填：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208110733501.png"></p><p>9. 此时我们再对部门经理审核意见组件绑定驳回填写驳回原因事件。</p><ul><li>向审批框中再拖入一个文本框，命名为驳回理由。</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231208002.gif" alt="231208002"></p><ul><li>选中部门经理审核意见组件，点击蓝色齿轮进入设置，设置联动如下图所示：</li></ul><blockquote><p>说明：设置一次列表值以后，一定要在在右上角点击一次保存。如果你设置了三次以后，再点击保存，此时只对最后一次修改生效。</p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208143815630.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208143848071.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208143736417.png"></p><ul><li>驳回理由按照下图所示设置：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208144458457.png"></p><p>10. 至此，部门经理审核组件框内的所有组件全部设计完成。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208144635810.png"></p><h2 id="1-2-人事签字备案节点、总经理审批节点表单设计"><a href="#1-2-人事签字备案节点、总经理审批节点表单设计" class="headerlink" title="1.2 人事签字备案节点、总经理审批节点表单设计"></a>1.2 人事签字备案节点、总经理审批节点表单设计</h2><p>这三个节点的表单设计和部门领导审批节点的表单设计步骤基本相同。</p><p>1. 导入节点的内容选择上一个节点内容即可：</p><p>2. 拖入审批组件，设计表单。</p><p>3. 添加人事经理审批意见组件（组件是枚举单选），内容设置如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208112907328.png"></p><p>4. 添加一个文本框，文本框名称填写格式：职位名称+驳回理由，以人事经理审批为例，这个文本框的名称是人事经理驳回理由，其他角色亦同理。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208145630246.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208145656696.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208145719723.png"></p><p>5. 设计完成后的请假单如下图所示：</p><ul><li>人事签字备案节点表单：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208145122221.png"></p><ul><li>总经理审批节点界面：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208153534633.png"></p><h2 id="1-3-查看请假单节点表单设计"><a href="#1-3-查看请假单节点表单设计" class="headerlink" title="1.3 查看请假单节点表单设计"></a>1.3 查看请假单节点表单设计</h2><p>查看请假单节点对应的表单就比较简单了，设计时只需要导入总经理审批节点的内容即可，不需要做任何修改：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208114525358.png"></p><p>查看请假单节点的表单内容如下，内容全部是只读状态：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208154932112.png"></p><h1 id="二、检查流程"><a href="#二、检查流程" class="headerlink" title="二、检查流程"></a>二、检查流程</h1><p>点击流程上方的检查按钮，系统会对流程和表单内容进行检查：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208114932402.png"></p><p>检查完成后，会出现如下的检查结果，如果没有红色的错误信息，就说明我们的流程和表单设计没有问题：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231208115111283.png"></p><p>至此，我们已经完成了所有节点的表单设计与检查，下一部分我们来测试执行整个请假流程。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205174128064.png"></p>]]></content>
    
    
    <categories>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
      <tag>JFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二章 若依-JFlow流程模型与单节点表单设计</title>
    <link href="/posts/16.html"/>
    <url>/posts/16.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>若依-JFlow框架如何拉取、配置并运行请查看这篇文章：<a href="http://www.icode504.com/posts/15.html">《第一章 若依-JFlow的配置与启动》</a></p></blockquote><p>上一节我们讲解了如何拉取若依-JFlow框架代码并配置运行，这一部分我们就以公司员工请假的流程为例，设计一个流程，并为初始节点设计一个表单。</p><h1 id="一、新建业务场景和流程模型"><a href="#一、新建业务场景和流程模型" class="headerlink" title="一、新建业务场景和流程模型"></a>一、新建业务场景和流程模型</h1><p>1. 启动项目以后，登录管理员账号（用户名：admin，密码：admin123），进入系统首页：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231203223009921.png"></p><p>2. 创建流程：点击左侧第二个JFlow流程设计，再点击流程模板：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231203223138428.png"></p><p>3. 系统中，流程树已经定义了一些业务场景（即不同的文件夹）如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231203223302018.png"></p><p>和文件夹的创建方式一样，我们只需要鼠标右键，点击新建子级目录即可创建一个业务场景，如果需要删除，就点击删除目录即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204093425596.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204093533548.png"></p><p>这里我创建一个名为<code>业务场景231204</code>的业务场景：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204093630169.png"></p><p>4. 创建流程模型：点击右上角<strong>新建流程</strong></p><p>5. 流程名称自定义，设计模式选择<strong>专业模式</strong>即可，完成后点击右上角<strong>创建流程</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204094009656.png"></p><p>如果此时创建完成后，浏览器对弹出窗口拦截时，直接点击拦截窗口，选择<strong>始终允许弹出窗口并从<a href="http://localhost:8089重定向">http://localhost:8089重定向</a></strong>，然后点击完成即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204100030936.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204100106500.png"></p><p>6. 此时就会弹出一个流程设计的窗口：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204100258286.png"></p><p>设计流程一共有五个步骤：</p><ol><li>绘制流程图</li><li>设置接收人规则</li><li>设计表单</li><li>检查流程</li><li>测试并运行该流程</li></ol><h1 id="二、绘制流程图"><a href="#二、绘制流程图" class="headerlink" title="二、绘制流程图"></a>二、绘制流程图</h1><p>1. 一个流程是由一个个流程节点组成的，如下图所示，Start Node和Node 2都是这个流程图的节点，绿色标志的是开始节点：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204101134781.png"></p><p>2. 鼠标右键点击空白处，可以新建节点：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204101318505.png"></p><p>3. 双击某个节点可以修改该节点的名称：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204101530818.png"></p><p>4. 要想将两个节点连接起来，长按该节点的图标，然后将连接线拉向另一个节点：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231204001.gif"></p><p>当然，如果你需要对连接线上添加文字说明，双击连接线即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204102324735.png"></p><p>如需删除连接线，也需要双击连接线，点击删除即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204102436768.png"></p><p>以下是一个简单的请假的流程模型：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204102708338.png"></p><h1 id="三、设置接收人规则"><a href="#三、设置接收人规则" class="headerlink" title="三、设置接收人规则"></a>三、设置接收人规则</h1><p>接收人规则是指当前节点完成任务以后，这个任务转到下一节点时，由谁来处理。</p><p>JFlow默认的处理规则是：上一个节点选择那一个人（或者部门），就由这个人（部门）来处理。当然，我们也可以自行设计接收人规则。</p><p>鼠标右键点击节点，选择节点属性</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204103928929.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204104144498.png"></p><p>接下来，我们就按照正常的请假流程设置每一个节点的接收人规则：</p><p>1. 员工填写请假单：我们假设公司所有的员工都可以填写请假单，因此规则设定为：所有的人员都可以发起：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204105502375.png"></p><p>2. 部门领导审批：假设每一个员工都处于一个部门，那么员工要将请假单交给对应部门领导审批：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204105852064.png"></p><p>假设部门领导角色是开发组长，这里选择<strong>程序员</strong>，点击保存，然后关闭此窗口：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204105947521.png"></p><p>接收人规则页面也点击保存即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110044483.png"></p><p>3. 人事签字备案：设置规则和部门领导审批基本相同，分组模式中选择人力资源部经理审批即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110314753.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110406551.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110436302.png"></p><p>4. 总经理审批亦同理，分组模式中选择总经理审批即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110745634.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110807995.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204110835391.png"></p><p>5. 查看请假单信息：由于是公司员工发起的请假申请，因此查看请假单信息应该由开始节点员工对应</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204111121990.png"></p><p>至此，整个请假流程的所有接收人规则设置完成。</p><h1 id="四、设计单个节点表单"><a href="#四、设计单个节点表单" class="headerlink" title="四、设计单个节点表单"></a>四、设计单个节点表单</h1><h2 id="4-1-表单方案的说明"><a href="#4-1-表单方案的说明" class="headerlink" title="4.1 表单方案的说明"></a>4.1 表单方案的说明</h2><p>鼠标右键点击节点，点击<strong>表单方案</strong>。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204152808020.png"></p><p>系统默认给我们提供的是傻瓜表单。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204152751665.png"></p><p>傻瓜表单指的是在一个表单中，对应一个标签和一个控件，例如：如果标签为姓名，那么控件对应的就是文本框；如果填写的是性别，那么需要填写的控件是单选框。</p><p>对于小白而言，<strong>选择傻瓜表单即可应对多种场景</strong>。当然，JFlow还为我们提供了更多的表单方案：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204153816250.png"></p><h2 id="4-2-请假单页面分析与设计"><a href="#4-2-请假单页面分析与设计" class="headerlink" title="4.2 请假单页面分析与设计"></a>4.2 请假单页面分析与设计</h2><p>接下来，我们就是用表单方案，设计各级角色的请假申请单。</p><p>1. 员工填写请假单：鼠标右键点击节点，选择<strong>设计表单</strong>。进入表单设计页面：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204154203357.png"></p><p>2. 对于申请人而言，需要填写申请人姓名、所在部门名称、申请日期、请假类别（例如：事假、病假、婚假、丧假等）、请假事由、请假开始时间、请假结束时间、请假时长计算。</p><ul><li>对于申请人姓名、所在部门名称、申请日期我们只需要保证能获取到当前登录用户的信息和填写申请所在日期即可，直接让系统自动生成，不需要人为填写。</li><li>请假类别对应的控件需要设置成单选框（假设请假只有一种情况）。</li><li>请假开始时间、结束时间需要使用时间输入框。并且开始时间必须保证是今天及之后，结束时间必须是开始时间及之后。</li><li>请假时长需要根据请假时间开始时间和请假结束时间计算即可。</li></ul><h2 id="4-3-绘制请假单基本框架"><a href="#4-3-绘制请假单基本框架" class="headerlink" title="4.3 绘制请假单基本框架"></a>4.3 绘制请假单基本框架</h2><p>按照前面对请假单页面的分析，绘制请假单。</p><p>1. 申请人姓名：在左侧组件的基本字段中选中文字框拖入到中间区域，此时弹出一个提示框，这里我们组件名称为申请人姓名，组件id按照系统默认生成的即可，完成后点击继续添加：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204155818857.png"></p><p>2. 接下来组件名称填写为<strong>申请人所在部门</strong>，然后点击<strong>创建并继续添加</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204160050348.png"></p><p>3. 申请日期的输入框类型是<strong>日期类型</strong>，然后填写组件名称，然后点击创建即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204160300519.png"></p><p>4. 此时表单如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204160403680.png"></p><p>5. 请假事由是一个文本框，将左面文字组件拖入到表单即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163815833.png"></p><p>6. 添加请假开始时间和请假结束时间，选择日期组件，输入格式设定为日期即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204165216030.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204165239922.png"></p><p>7. 请假时长控件的输入框类型选择数值即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205084731593.png"></p><p>8. 至此，我们的请假单基本框架就绘制完成了，如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205092504817.png"></p><h2 id="4-4-对请假单进一步完善"><a href="#4-4-对请假单进一步完善" class="headerlink" title="4.4 对请假单进一步完善"></a>4.4 对请假单进一步完善</h2><p>1. 按照上面我们指定的要求：申请人姓名、所在部门、申请日期<strong>由系统自动生成</strong>，并且<strong>设置为只读</strong>。那么我们需要对这三个控件分别操作。</p><ul><li>首先，点击申请人姓名，点击小齿轮，进入组件设置：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204160611753.png"></p><ul><li>我们能看到当前组件的基本信息，将系统默认值设置为<strong>登陆人员名称</strong>，然后点击保存，然后关闭这个窗口即可。</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204160755988.png"></p><ul><li>此时申请人姓名组件中文本框出现一个<code>@WebUser.Name</code>的标识，这是我们上一步设置的结果，不用修改。</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204161014587.png"></p><ul><li>申请人所在部门的设置和申请人姓名设置基本相同，只不过将系统默认值改为<strong>登陆人员部门名称</strong>：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204161339799.png"></p><ul><li>申请日期的系统默认值设置为<code>@RDT</code>表示当前日期：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204161555868.png"></p><ul><li>设置完成后的表单如下图所示，我们需要将这三个组件设置为只读禁止修改：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204161729204.png"></p><ul><li>以申请人姓名组件为例，我们选中这个组件，然后在右侧开启<strong>是否只读</strong>：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204162023924.png"></p><ul><li>申请人所在部门、申请日期的设置只读方式和前面的相同，设置完成后的效果图如下：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204162119535.png"></p><p>2. 接下来，我们再添加两个组件：请假类别、请假事由。</p><ul><li>请假类别我们使用枚举单选控件，将其拉入表单中，此时会弹出一个添加枚举值字段的窗口，点击新建：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163111633.png"></p><ul><li>标签填写<strong>请假类别</strong>，对应的类别名称我们填写到下面的枚举框中，完成后点击保存：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163404217.png"></p><ul><li>选择请假类别的枚举值：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163445971.png"></p><ul><li>弹出框的内容，点击确定：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163542696.png"></p><ul><li>点击保存：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204163622231.png"></p><ul><li>选择请假事由组件，在右侧组件设置中的文本类型设置为<strong>大块文本</strong>，开启<strong>超长文本</strong>，控件栅格选择整行：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204164856107.png"></p><p>3. 接下来，我们为开始时间、结束时间、请假时长这三个组件设置规则：</p><ul><li>选中开始时间，点击齿轮，修改组件基本信息：选择日期输入限制，输入日期大于或等于当前日期，设置规则如下图所示：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231204165807170.png"></p><ul><li>选中结束时间，点击齿轮，修改组件基本信息：选择日期输入限制，输入日期大于等于请假开始时间，设置规则如下图所示：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205083750437.png"></p><ul><li>选中请假时长，点击齿轮，修改组件基本信息：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205085558874.png"></p><ul><li>为了更好向用户展示请假时长，我们需要对请假时长设置时间单位，由于我们在前面选择的是日期格式，因此请假时长单位是以天为单位：选中组件，在右侧组件设置的后置提示设置为“天”</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205090844220.png"></p><ul><li>请假是由用户填写上述的上述的开始日期和结束日期，经过系统计算而得出的，因此这一部分不需要我们填写，我们把这个控件设置为只读即可：选中请假时长控件，在右侧开启<strong>是否只读</strong>：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205090938030.png"></p><p>4. 点击最外面的组件，在右侧我们修改一下组件名字为：请假申请单</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205090419676.png"></p><p>5. 至此，“员工填写请假申请”节点的表单绘制完成，效果图如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205091132577.png"></p><p>当然，我们只绘制了一个节点表单，那么其他节点的表单也在上述表单的基础上进行绘制。如何在这个表单的基础上绘制其他节点的表单，以及后续所有表单绘制完成后的操作如何，我们放到下一篇文章讲解。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231205174128064.png"></p>]]></content>
    
    
    <categories>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
      <tag>JFlow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一章 若依-JFlow配置与启动</title>
    <link href="/posts/15.html"/>
    <url>/posts/15.html</url>
    
    <content type="html"><![CDATA[<p>若依（Ruoyi）一款开源的后台管理admin框架，JFlow 是一款经典的纯国产全开源的工作流引擎，该版本是两者的完美结合。</p><p>RuoYi是一个后台管理系统，基于经典技术组合（Spring Boot、Apache Shiro、MyBatis、Thymeleaf）主要目的让开发者注重专注业务，降低技术难度，从而节省人力成本，缩短项目周期，提高软件安全质量。</p><p>JFlow是由济南驰骋团队负责研发，开发语言主要是Java，是一款开源软件，工作流引擎操作简单，概念通俗易懂，操作手册完善（计:14万字操作手册说明书），代码注释完整，案例丰富翔实，单元测试完整，符合国内多种场景的需要。</p><p>以下是二者的官网：<a href="https://ruoyi.vip/">若依官网</a>，<a href="http://ccflow.org/">驰骋官网</a></p><h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>需要安装如下软件：</p><table><thead><tr><th>软件名称</th><th>安装教程</th></tr></thead><tbody><tr><td>Java</td><td><a href="http://www.icode504.com/posts/1.html">点我查看</a></td></tr><tr><td>MySQL</td><td><a href="http://www.icode504.com/posts/18.html">点我查看</a></td></tr><tr><td>Intellij IDEA</td><td><a href="http://www.icode504.com/posts/10.html">点我查看</a></td></tr><tr><td>Navicat</td><td><a href="https://www.jianshu.com/p/4bb2e2bfb449">点我查看</a></td></tr><tr><td>Maven</td><td><a href="https://blog.csdn.net/m0_72248235/article/details/130589912?spm=1001.2014.3001.5501">点我查看</a></td></tr><tr><td>Git</td><td><a href="https://blog.csdn.net/u012124199/article/details/114004087">点我查看</a></td></tr></tbody></table><h1 id="二、若依-JFlow代码下载"><a href="#二、若依-JFlow代码下载" class="headerlink" title="二、若依-JFlow代码下载"></a>二、若依-JFlow代码下载</h1><p>1. 找到一个合适文件夹，鼠标右键，点击<code>Git Bash Here</code>，此时会进入Git命令行窗口：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201104451452.png"></p><p>2. 复制下面的内容到Git命令行并回车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitee.com/opencc/RuoYi-JFlow.git<br></code></pre></td></tr></table></figure><blockquote><p>说明：如果你在gitee中添加了SSH KEY，也可以直接复制下面的内容到Git命令行中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@gitee.com:opencc/RuoYi-JFlow.git<br></code></pre></td></tr></table></figure></blockquote><p>3. Git中如果出现如下提示及说明代码克隆完成：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201105147112.png"></p><h1 id="三、导入项目"><a href="#三、导入项目" class="headerlink" title="三、导入项目"></a>三、导入项目</h1><p>1. 使用Intellij IDEA打开这个文件夹：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201105456043.png"></p><p>2. 打开<code>Settings</code>，按照下图所示配置Maven</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201105802938.png"></p><p>3. 下载依赖需要一段时间，请耐心等待。</p><p>4. 在左侧项目目录，选中<code>sql</code>文件，按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>，复制文件路径</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201110144811.png"></p><p>5. 打开Navicat，如果你没有和本地MySQL连接的话，就点击左上角的连接，选择MySQL</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201110329123.png"></p><p>6. 连接名自定义或者不填，用户名填写root，密码即root用户的密码，填写完成后点击确定</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201110541430.png"></p><p>7. 鼠标右键点击新建数据库</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201110738537.png"></p><p>8. 数据库名称自定义，这里我命名为<code>ruoyi_jflow</code>，字符集选择<code>utf8mb4</code>即可，排序规则选择<code>utf8mb4_0900_ai_ci</code>即可，然后点击<strong>确定</strong>。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201111256799.png"></p><p>9. 鼠标右键点击数据库，点击<strong>运行SQL文件</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201111742572.png"></p><p>10. 按照下图所示导入SQL：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201111908315.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201111954377.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201112052134.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201112138717.png"></p><p>11. 导入SQL中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201112248515.png"></p><p>12. 导入完成，点击关闭：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201112320508.png"></p><p>13. 刷新一下数据库，一共由242张表</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201162802611.png"></p><p>12. 双击打开IDEA项目中的<code>application-druid2.yml</code>文件</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201113749133.png"></p><p>13. 修改数据库配置</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201115235424.png"></p><p>14. 将<code>application-druid2.yml</code>文件改为<code>application-druid.yml</code></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201115432241.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201115332224.png"></p><p>14. 点击文件左上角<code>File -&gt; Project Stucture</code>，确保版本是JDK 8：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201114408428.png"></p><p>15. Redis配置：需要确保你在本地安装Redis，如果没有安装包，点击右侧链接下载：<a href="https://icode504.lanzouw.com/irWZP1ghutla">点我下载</a></p><ul><li><p>找一个你熟悉的位置，创建一个文件夹，命名为Redis</p></li><li><p>将下载的压缩包解压到这个文件夹中</p></li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201150102280.png"></p><ul><li>在上方文件路径中输入<code>cmd</code>并回车，进入命令行</li><li>在命令行中输入如下指令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server --service-install redis.windows-service.conf<br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201150335394.png"></p><ul><li>此时按<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Esc</kbd>，打开任务管理器，点击服务，在下方找到Redis说明软件配置成功：</li></ul><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201151105294.png"></p><p>16. 打开项目中<code>application.yml</code>，这里关于Redis的配置信息不用修改，因为上面我们已经成功启动了本地Redis服务了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201151340895.png"></p><h1 id="四、启动项目"><a href="#四、启动项目" class="headerlink" title="四、启动项目"></a>四、启动项目</h1><p>1. 项目启动：点击右上角Debug调试启动，如果出现下面内容，就说明后端项目启动成功</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201150836073.png"></p><blockquote><p>说明：如果后端项目起不来，报错信息是8089端口被占用（如下图）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201141026025.png"></p><p>解决办法：打开项目中的<code>application.yml</code>，找到<code>server.port</code>，将端口号修改成你知道的即可，这里我改成8090：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201141214554.png"></p><p>重启一下项目即可。</p></blockquote><p>2. 打开浏览器，在上方输入地址：<a href="http://localhost:8089/ry-jflow/login">点我进入</a>，进入登录页面：</p><p>账号名：admin，密码：admin123</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201150919953.png"></p><p>3. 登录成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231201150939145.png"></p>]]></content>
    
    
    <categories>
      
      <category>工作流框架</category>
      
      <category>JFlow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
      <tag>MySQL</tag>
      
      <tag>Git</tag>
      
      <tag>若依</tag>
      
      <tag>JFlow</tag>
      
      <tag>开源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA安装Scala插件并运行Scala程序</title>
    <link href="/posts/14.html"/>
    <url>/posts/14.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>说明：安装前请确保本机已经安装了Intellij IDEA和Scala：<a href="http://www.icode504.com/posts/10.html">Intellij IDEA的安装配置教程（Windows版）</a>、<a href="http://www.icode504.com/posts/13.html">Scala 2安装与配置教程（Windows版）</a></p></blockquote><h1 id="一、安装Scala插件"><a href="#一、安装Scala插件" class="headerlink" title="一、安装Scala插件"></a>一、安装Scala插件</h1><p>1. 按<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>S</kbd>键，进入IDEA设置。</p><p>2. 找到左侧的Plugins，选择Markplace，搜索Scala，选择第一个进行安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209221212784.png"></p><p>3. 安装完成后，点击Restart IDE，重启IDEA：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209221335618.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209221349578.png"></p><h1 id="二、创建Scala文件并运行"><a href="#二、创建Scala文件并运行" class="headerlink" title="二、创建Scala文件并运行"></a>二、创建Scala文件并运行</h1><p>1. 点击左上角的<code>File --&gt; New --&gt; New Project</code>创建项目：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210205758723.png"></p><p>2. 请确保本机已安装JDK，在新建界面选择Scala，在左下角点击Create：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210210112201.png"></p><p>3. 点击Browse，选择Scala开发工具包：</p><blockquote><p>没有安装Scala的小伙伴，点击右侧链接查看Scala安装教程：<a href="http://www.icode504.com/posts/13.html">点我查看</a></p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210210410201.png"></p><p>4. 找到Scala的安装路径并选中，然后点击OK：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210210629651.png"></p><p>5. 下面的界面就说明IDEA成功识别Scala的软件开发工具包，此时点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210210811446.png"></p><p>6. 自定义项目名称和模块路径，路径推荐全英文路径，模块名称和项目名称保持一致即可，完成后点击Finish：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210211231071.png"></p><p>7. 鼠标右键点击<code>src</code>文件夹，创建Scala文件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210211934691.png"></p><p>8. 这里文件名称使用英文名称并且是大驼峰式命名法（即每个单词首字母大写），文件类型选择Object</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210211715021.png"></p><p>9. 输入<code>main</code>，IDEA就为我们生成一个<code>main</code>方法：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23121001.gif"></p><p>10. 然后在<code>main</code>方法中输入<code>println()</code>，<code>println()</code>方法用于控制台输出内容，在小括号内添加一对英文双引号，然后在双引号内添加任何你想要输出的内容，完整代码如下所示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">MyFirstScalaProgram</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;<br>        println(<span class="hljs-string">&quot;这是iCode504第一个Scala程序&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与Java语言不同的是，Scala中的语句不需要以分号作为结尾，上述代码中<code>println()</code>方法最后就不需要加分号。</p><p>11. 鼠标右键，点击<code>Run xxx</code>即可运行（或者按快捷键运行，这里我设置的快捷键是<kbd>Ctrl</kbd><kbd>Shirt</kbd><kbd>F10</kbd>）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210213158770.png"></p><p>12. 在控制台输出如下内容就说明Scala程序运行成功！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231210213259239.png"></p>]]></content>
    
    
    <categories>
      
      <category>Intellij IDEA</category>
      
      <category>Scala</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intellij IDEA</tag>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scala 2安装教程（Windows版）</title>
    <link href="/posts/13.html"/>
    <url>/posts/13.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://scala-lang.org/">Scala官网</a>介绍：Scala是一门现代多范式编程语言，旨在以简洁、优雅和类型安全的方式表达常见的编程模式。它无缝衔接了面向对象语言和函数式语言的特性。</p><p>Scala是一门纯粹的面向对象语言，因为每个值都是一个对象。对象的类型和行为是通过类和特征来描述的。类可以通过子类化进行扩展，并使用灵活的基于mixin的组合机制作为多重继承的干净替代。</p><p>Scala 也是一门函数式语言，因为每个函数都是一个值。Scala 提供了定义匿名函数的轻量级语法，支持高阶函数，允许嵌套函数，并支持柯里化。Scala 的大小写类及其对模式匹配的内置支持提供了代数类型的功能，这在许多函数式语言中都有应用。单例对象为分组非类成员的函数提供了一种便捷的方式。</p><p>接下来就讲解一下Scala的下载与安装。</p><h1 id="安装前检查"><a href="#安装前检查" class="headerlink" title="安装前检查"></a>安装前检查</h1><p>请确保电脑本机安装了JDK，如果没有安装，请点击右侧链接查看JDK安装教程：<a href="https://www.icode504.com/posts/1.html">点我查看</a></p><p>安装完成后，按<kbd>Win</kbd>+<kbd>R</kbd>键，输入<code>cmd</code>，进入控制台，输入<code>java -version</code>，如果出现如下内容，就说明JDK已经安装成功了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314140629530.png"></p><blockquote><p>如果后续在官网下载Scala安装包比较慢，我个人推荐使用NDM（Neat Download Manager）下载器来下载，可以加快下载速度。</p><p>如果不需要或者已安装的朋友请忽略。没有安装的小伙伴可以点击右侧链接查看安装教程：<a href="https://www.icode504.com/posts/24.html">《NDM下载器安装配置教程》</a></p></blockquote><p>注意：下文一共提供了两种方式安装Scala，第三种方式是在线体验Scala。<strong>方式一、方式二任选其一安装</strong>即可。</p><h1 id="方式一：MSI方式安装Scala"><a href="#方式一：MSI方式安装Scala" class="headerlink" title="方式一：MSI方式安装Scala"></a>方式一：MSI方式安装Scala</h1><h2 id="一、Scala安装包下载"><a href="#一、Scala安装包下载" class="headerlink" title="一、Scala安装包下载"></a>一、Scala安装包下载</h2><p>1. 点击右侧链接，进入下载页面：<a href="https://www.scala-lang.org/download/all.html">点我查看</a></p><p>2. 这里我选择的是<code>2.12.18</code>版本的，在下方找到版本号后点击进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209211237501.png"></p><p>3. 进入下载页面后，向下找到各个版本的下载链接，我使用的是Windows操作系统，这里我就点击Windows系统版本的Scala进行下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209211413991.png"></p><h2 id="二、安装Scala"><a href="#二、安装Scala" class="headerlink" title="二、安装Scala"></a>二、安装Scala</h2><p>1. 双击打开Scala安装包，会出现欢迎界面，然后点击<code>Next</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103003352.png"></p><p>2. 勾选下面的协议，然后点击<code>Next</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103048983.png"></p><p>3. 选择安装路径，推荐安装在除C盘外的其他路径，并且路径中只包含英文，这里我安装在了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103459245.png"></p><p>4. 点击<code>Install</code>:</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103526813.png"></p><p>5. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103553892.png"></p><p>6. 点击Finish，Scala安装完成</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012103625099.png"></p><p>7. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，进入命令提示行页面，输入<code>scala -version</code>，如果出现下图所示信息，说明Scala安装配置成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231012105320529.png"></p><h2 id="三、卸载Scala（可选）"><a href="#三、卸载Scala（可选）" class="headerlink" title="三、卸载Scala（可选）"></a>三、卸载Scala（可选）</h2><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>appwiz.cpl</code>，然后点击确定：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228090817000.png"></p><p>2. 调出程序与功能的界面以后，找到<code>Scala Programming Language Distribution</code>，鼠标右键，点击卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228091109617.png"></p><p>3. 选择“是”：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228091144885.png"></p><p>4. Scala卸载中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228091227059.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228091232179.png"></p><p>5. Scala卸载完成！此时在控制台上输入<code>scala -version</code>无反应：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228091352622.png"></p><h1 id="方式二：压缩包方式安装Scala"><a href="#方式二：压缩包方式安装Scala" class="headerlink" title="方式二：压缩包方式安装Scala"></a>方式二：压缩包方式安装Scala</h1><h2 id="一、Scala安装包下载-1"><a href="#一、Scala安装包下载-1" class="headerlink" title="一、Scala安装包下载"></a>一、Scala安装包下载</h2><p>1. 点击右侧链接，进入下载页面：<a href="https://www.scala-lang.org/download/all.html">点我查看</a></p><p>2. 这里我选择的是<code>2.12.18</code>版本的，在下方找到版本号后点击进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231209211237501.png"></p><p>3. 进入下载页面后，向下找到各个版本的下载链接，我使用的是Windows操作系统，这里我就点击Windows系统版本的Scala进行下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228092026444.png"></p><h2 id="二、安装配置Scala"><a href="#二、安装配置Scala" class="headerlink" title="二、安装配置Scala"></a>二、安装配置Scala</h2><p>1. 将下载好的压缩包解压到一个你熟悉的位置（为了避免后续出现各种奇奇怪怪问题，建议文件路径选择英文路径），这里我安装在了D盘：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228092238561.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228092350172.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228092413901.png"></p><p>2. 找到Scala安装路径，并复制：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228093714744.png"></p><p>3. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314133908963.png"></p><p>4. 点击高级系统设置</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134201936.png"></p><blockquote><p>Windows 10的高级系统设置在右侧：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2023-03-14_13-44-54.png"></p></blockquote><p>5. 点击环境变量</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134716166.png"></p><p>6. 点击新建</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134919881.png"></p><p>7. 配置系统变量，按照图示操作即可</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228094023984.png"></p><p>8. 双击Path进入</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228094502229.png"></p><p>9. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228094240240.png"></p><p>10. 验证Scala环境变量是否配置成功：按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，打开命令行窗口，输入<code>scala -version</code>，出现Scala版本信息就说明Scala环境变量配置成功了！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228094810283.png"></p><h2 id="三、移除Scala（可选）"><a href="#三、移除Scala（可选）" class="headerlink" title="三、移除Scala（可选）"></a>三、移除Scala（可选）</h2><p>1. 找到Scala的安装目录，鼠标右键删除即可（如果不走回收站彻底删除，就直接按<kbd>Shift</kbd>和<kbd>Delete</kbd>键）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228095440509.png"></p><p>2. 删除环境变量：按照前面配置步骤，打开环境变量。找到前面我们配置的<code>SCALA_HOME</code>，点击右下角<strong>删除</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228095642032.png"></p><p>3. 双击进入Path：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228100153183.png"></p><p>4. 找到并选中<code>%SCALA_HOME%\bin</code>，然后一路点击确定即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228100351079.png"></p><p>至此，Scala就从本机成功移除了。</p><h1 id="方式三：免安装，直接在线体验Scala"><a href="#方式三：免安装，直接在线体验Scala" class="headerlink" title="方式三：免安装，直接在线体验Scala"></a>方式三：免安装，直接在线体验Scala</h1><p>我们可以使用Scala官网为我们提供了在线编程页面，这种方式最大的优点是你不需要安装Scala，直接编程运行体验。但是缺点也很明显，后续使用Scala及大数据相关框架我们使用的最多的还是本地安装Scala，在Intellij IDEA中编写代码。</p><p>这种方式非常适合新手，省去安装配置Scala的各种繁琐步骤。</p><p>1. 浏览器打开Scala官网在线编程界面：<a href="https://scastie.scala-lang.org/">点我查看</a></p><p>2. 以下是我在编辑器中写的一段Scala代码（演示用，感兴趣的可以敲一敲）：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> greeting: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;你好，我是iCode504，程序猿一枚，请多指教！&quot;</span><br>println(greeting)<br><br><span class="hljs-keyword">var</span> a: <span class="hljs-type">Int</span> = <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> b: <span class="hljs-type">Int</span> = <span class="hljs-number">40</span><br>println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b))<br></code></pre></td></tr></table></figure><p>3. 点击左上角的<code>Run</code>即可运行：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228105809379.png"></p><p>4. 在下方的控制台即可看到内容的输出：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231228105819934.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Scala 2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Live Server插件打开浏览器时：该网页无法正常运作，127.0.0.1未发送任何数据的问题解决</title>
    <link href="/posts/33.html"/>
    <url>/posts/33.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h1><p>今天使用Vs Code写HTML代码时，使用Live Server打开预览时，发现浏览器显示“该网页无法正常运作，127.0.0.1未发送任何数据”的问题。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231127110434914.png"></p><h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p>1. 在左侧工具栏找到扩展商店，找到Live Server，然后点击对应的小齿轮，进入插件设置。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231127111656933.png"></p><p>2. 选择<code>Extension Settings</code></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231127111808544.png"></p><p>3. 进入设置以后，在最下方有一个<code>Use Local Ip</code>的一个设置，将<code>Use local IP as host</code>勾选即可。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231127112103103.png"></p><p>4. 此时在HTML文件中鼠标右键点击<code>Open with Live Server</code>，再次弹出浏览器，此时Live Server就正常工作了。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231127001.gif"></p>]]></content>
    
    
    <categories>
      
      <category>VS Code bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
      <tag>Live Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之九-流程控制之条件判断</title>
    <link href="/posts/12.html"/>
    <url>/posts/12.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="http://www.icode504.com/posts/1.html">点我查看安装JDK8&#x2F;11&#x2F;17教程</a>、<a href="http://www.icode504.com/posts/10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><p>前面我们写过的代码，都是在<code>main</code>方法中自上到下按顺序执行的，举一个代码栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算西瓜的价格</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;      <span class="hljs-comment">// 西瓜的单价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;    <span class="hljs-comment">// 西瓜的重量（公斤）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;    <span class="hljs-comment">// 购买价格</span><br>        System.out.println(<span class="hljs-string">&quot;西瓜的价格是: &quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码就是先定义西瓜的单价、再定义西瓜的重量，然后计算西瓜的价格，最后对价格进行输出。像这样代码从上到下执行的结构就是<strong>顺序结构</strong>。</p><p>程序一共有三种控制结构：顺序结构、选择结构和循环结构。其中选择结构是根据条件判定的结果，选择执行不同的代码，例如：红灯停，绿灯行。判断条件就是交通信号灯的状态。</p><p>Java也有选择结构，并且有多种类型的条件判断语句：单分支的<code>if</code>语句、双分支的<code>if-else</code>语句、多分支的<code>if-else if-else</code>语句、<code>if</code>嵌套语句和<code>switch</code>语句。</p><h1 id="一、单分支if语句"><a href="#一、单分支if语句" class="headerlink" title="一、单分支if语句"></a>一、单分支if语句</h1><p>单分支<code>if</code>语句的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<strong>条件表达式的计算结果必须是<code>boolean</code>类型</strong>。如果条件表达式的计算结果是<code>true</code>，那么就会执行<code>if</code>内部的代码；如果表达式为<code>false</code>，此时就会跳过<code>if</code>代码块（也就是<code>if</code>内部代码不执行），概念图如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231122vp2%20(2).png" alt="231122vp2 (2)"></p><p>我们可以在<code>if</code>代码块中可以编写多个执行语句。</p><p>以下是<code>if</code>的使用案例：</p><blockquote><p>案例：之前长春下了大暴雪，气温骤降，我想在某宝上买几双棉袜子，假设每双袜子4元，请确保输入的数字大于0再计算购买价格。</p></blockquote><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231107172811206.png" alt="2023年11月6日晚，长春暴雪" style="zoom:50%;" /><p>分析：解题的关键在于要保证输入的数字要大于0，因此要判断输入的数字是否大于0，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if条件判断</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入袜子的数量&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;    <span class="hljs-comment">// 默认总价格初始值为0.0</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;       <span class="hljs-comment">// 袜子的价格4元</span><br>        <span class="hljs-comment">// 条件判断: 输入的数量是否大于0</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            totalPrice = count * price;<br>            System.out.println(<span class="hljs-string">&quot;购买了&quot;</span> + count + <span class="hljs-string">&quot;双袜子, 价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231107173637173.png"></p><blockquote><p>案例：输入一个数字，如果能被10整除，则输出内容为：xx能被10整除。如果能被15整除，则输出内容为：xx能被15整除。</p></blockquote><p>解决本题的关键点在于被10整除和被15整除的条件怎么计算。其实前面我们学过取余运算符，如果数值<code>number</code>能被10整除，那么可以写成<code>number % 10 == 0</code>；如果数值<code>number</code>能被15整除，那么可以写成<code>number % 15 == 0</code>。这两个布尔表达式可以写入到两个<code>if</code>语句中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用if语句判断数字能否被10和15整除</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-07</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入数字: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">// 整除10的条件：数字对10取余等于0</span><br>        <span class="hljs-keyword">if</span> (number % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(number + <span class="hljs-string">&quot;能被10整除&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 整除15的条件：数字对15取余等于0</span><br>        <span class="hljs-keyword">if</span> (number % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(number + <span class="hljs-string">&quot;能被15整除&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入不同的数字以后，会得到如下的运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23110701.gif"></p><blockquote><p>案例：输入两个整数，如果输入的第一个数字比第二个数字大，那么执行两数交换，并将交换结果输出。否则不交换，正常输出两个数</p></blockquote><p>本题的条件表达式是输入的两个数字的比较，无论数字大小比较结果如何，都需要将结果进行输出，我们可以将输出语句放到<code>if</code>语句后面执行。</p><p>两数交换有多种方式，较为稳妥的方式是再定义一个临时变量，用这个临时变量来接收第一个变量值，然后第二个变量值赋值给第一个变量，最后将临时变量的值赋值给第二个变量。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单分支if语句实现两数交换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入两个整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;       <span class="hljs-comment">// 定义临时变量</span><br>        <span class="hljs-keyword">if</span> (number1 &gt; number2) &#123;    <span class="hljs-comment">// 实现两数交换功能</span><br>            temp = number1;<br>            number1 = number2;<br>            number2 = temp;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第一个数是: &quot;</span> + number1 + <span class="hljs-string">&quot;, 第二个数是: &quot;</span> + number2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23111102.gif"></p><p>当然，除了上述方式能实现两数交换，还有其他的方式。</p><p>方式一：使用加减法进行交换（推荐使用整数，浮点数不推荐，因为浮点数计算时会出现误差）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>number1 = number1 + number2;<span class="hljs-comment">// number1 = 3 + 2 = 5</span><br>number2 = number1 - number2;<span class="hljs-comment">// number2 = 5 - 2 = 3</span><br>number1 = number1 - number2;<span class="hljs-comment">// number1 = 5 - 3 = 2</span><br></code></pre></td></tr></table></figure><p>方式二：使用位运算符进行交换（推荐使用整数，此处涉及到二进制异或运算，异或运算可以查看这篇文章：<a href="https://blog.csdn.net/m0_72248235/article/details/134003356?spm=1001.2014.3001.5501">入门篇-其之六-Java运算符（中）第四部分-位运算符</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>number1 = number1 ^ number2;        <span class="hljs-comment">// 3 ^ 2 = 1</span><br>number2 = number1 ^ number2;        <span class="hljs-comment">// 3 ^ 1 = 2</span><br>number1 = number1 ^ number2;        <span class="hljs-comment">// 1 ^ 2 = 3</span><br></code></pre></td></tr></table></figure><p>当然，上述三种方式我个人最推荐的还是第一种定义临时变量的方式，这种方式对处理浮点类型的数进行交换很友好，如果使用了下面两种方式的话，可能会在计算过程中出现精度损失的问题。后两种方式的好处是不需要定义第三个变量，只需要进行一系列运算即可完成整数值的交换。</p><h1 id="二、if-else双分支语句"><a href="#二、if-else双分支语句" class="headerlink" title="二、if-else双分支语句"></a>二、if-else双分支语句</h1><p>前面讲过的单分支<code>if</code>语句只有在布尔表达式为<code>true</code>的时候执行其内部的内容，但是如果在布尔表达式为<code>false</code>的时候不会做任何事情。为了解决上述问题，Java为我们提供了<code>if-else</code>双分支语句。以下是双分支<code>if-else</code>语句代码结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码<span class="hljs-number">1.</span>..<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">2.</span>..<br>&#125;<br></code></pre></td></tr></table></figure><p>如果条件表达式的值是<code>true</code>，那么就执行<code>if</code>内部的语句，如果条件表达式为<code>false</code>，此时就进入<code>else</code>代码块。执行流程图如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231111212252875.png"></p><blockquote><p>案例：我们还是以上述买袜子为例，最近双十一打折，如果买了10双及以上袜子，此时每双袜子打八折优惠，否则打九折优惠（袜子的价格假设是4元&#x2F;双）。</p></blockquote><p>题目中的条件表达式在于要买的袜子数量是否大于等于10，如果是，价格打8折，否则打9折，使用刚刚讲到的<code>if-else</code>语句即可搞定。</p><p>当然，这道题中还有一个隐藏的细节需要我们处理：输入袜子的数量需要大于0，否则判定为无效，这个可以使用单分支<code>if</code>语句就可以搞定。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if-else双分支语句</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要购买的袜子数量&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;       <span class="hljs-comment">// 每双袜子的价格</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;    <span class="hljs-comment">// 默认总价格为0.0</span><br>        <span class="hljs-comment">// 需要保证输入的袜子数量要大于0</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 如果袜子的数量大于10，此时每双袜子的价格为8折，即每双袜子的价格乘以0.8，九折的计算方式和上述内容同理</span><br>            <span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-number">10</span>) &#123;<br>                totalPrice = price * <span class="hljs-number">0.8</span> * count;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                totalPrice = price * <span class="hljs-number">0.9</span> * count;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;购买&quot;</span> + count + <span class="hljs-string">&quot;双袜子，双十一期间购买价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果（可能会出现浮点数计算不准确的情况，属于正常现象）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23111101.gif"></p><h1 id="三、if-else-if-else多分支语句"><a href="#三、if-else-if-else多分支语句" class="headerlink" title="三、if-else if-else多分支语句"></a>三、if-else if-else多分支语句</h1><p>双分支的<code>if-else</code>语句对于条件表达式为<code>true</code>和<code>false</code>的时候比较适用，但是如果对于一个问题而言，此时经过分析可能存在多个条件表达式时，<code>if-else</code>语句并不能很好地完成任务，此时Java为我们提供了另一种分支语句：<code>if-else if-else</code>语句，其语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>执行代码<span class="hljs-number">1.</span>..<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>执行代码<span class="hljs-number">2.</span>..<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>) &#123;<br>执行代码<span class="hljs-number">3.</span>..<br>&#125; ...<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式n) &#123;<br>执行代码n...      <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  不符合上述所有条件表达式时执行<span class="hljs-keyword">else</span>代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>以上述语法格式为例，其执行顺序为：</p><ul><li>如果条件表达式1的结果为<code>true</code>，那么执行代码1，如果结果是<code>false</code>，此时就会跳转到第一个<code>else if</code>。</li><li>如果条件表达式2的结果是<code>true</code>，那么执行代码2，如果结果是<code>false</code>，那么就会跳转到第二个<code>else if</code>。</li><li>如果条件表达式3的结果是<code>true</code>，那么执行代码3，如果结果是<code>false</code>，那么就会跳转到下一个<code>else if</code>，依次类推。</li><li>当上述所有的条件表达式都不满足（即结果全部是<code>false</code>）时，就会执行<code>else</code>中的语句。</li></ul><p>多分支的<code>if-else if-else</code>语句中，你可以写任意个<code>else if</code>，每个<code>else if</code>需要写上条件表达式。</p><p>当然，最后的<code>else</code>也是可选的，<code>if</code>和<code>else-if</code>搭配使用也是可以的。以下是执行流程图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E7%BB%98%E5%9B%BE1.png"></p><blockquote><p>案例：已知长春的地铁&#x2F;轻轨票价标准如下</p><ul><li>0-7公里（含7公里），票价2元；</li><li>7-13公里（含13公里），票价3元；</li><li>13-19公里（含19公里），票价4元；</li><li>19-27公里（含27公里），票价5元；</li><li>27-35公里（含35公里），票价6元；</li><li>35公里以上每增加10公里，增加1元</li></ul><p>假设从1号线红嘴子地铁站到8号线广通路轻轨站的距离是31.4公里，从2号线汽车公园地铁站到2号线东方广场地铁站的距离是20.5公里，从4号线长春站北轻轨站到4号线天工路轻轨站的距离是16.3公里。</p><p>输入上述里程，利用程序计算出乘坐轨道交通所需要的票价。</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231114215902.jpg" alt="apple apy开通吉林通充值即可使用NFC功能(无优惠)" style="zoom:25%;" /></blockquote><p>上述题目中出现了多个条件判断，每个条件判断执行内容都不相同，使用多分支语句<code>if-else if-else</code>语句比较合适。题目中有一个隐藏条件，输入里程数不能为负数，当然这个条件也直接写入条件判断即可。</p><p>如果乘坐轨道交通的里程超过35公里以后，每增加10公里，增加1元。例如：乘坐45公里就要在35公里对应的票价6元的基础上再增加1元，当然，55公里、65公里依次类推。假设称作里程为44.9公里，此时收费标准仍为35公里的票价。</p><p>针对上述问题，我们可以在代码中进一步呈现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if-else if-else多分支语句的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElseIfDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入里程数: &quot;</span>);<br>        <span class="hljs-comment">// 里程数使用double类型比较合适，因为题目中涉及到距离的使用到了小数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (distance &lt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;无效里程&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">0</span> &amp;&amp; distance &lt;= <span class="hljs-number">7</span>) &#123;<br>            price = <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">7</span> &amp;&amp; distance &lt;= <span class="hljs-number">13</span>) &#123;<br>            price = <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">13</span> &amp;&amp; distance &lt;= <span class="hljs-number">19</span>) &#123;<br>            price = <span class="hljs-number">4</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">19</span> &amp;&amp; distance &lt;= <span class="hljs-number">27</span>) &#123;<br>            price = <span class="hljs-number">5</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">27</span> &amp;&amp; distance &lt;= <span class="hljs-number">35</span>) &#123;<br>            price = <span class="hljs-number">6</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 超过35公里的需要额外进行处理</span><br>            price = <span class="hljs-number">6</span>;      <span class="hljs-comment">// 35公里对应的票价</span><br>            <span class="hljs-comment">// 计算多余的里程</span><br>            <span class="hljs-comment">// 这里需要进行强制类型转换的目的有两个：</span><br>            <span class="hljs-comment">// 1. 最后计算票价的price是int类型</span><br>            <span class="hljs-comment">// 2. 针对类似在35~45公里之间的里程后续的票价计算处理</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">additionalDistance</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (distance - <span class="hljs-number">35</span>);<br>            <span class="hljs-comment">// 计算票价</span><br>            price = price + additionalDistance / <span class="hljs-number">10</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;乘坐长春轨道交通里程&quot;</span> + distance + <span class="hljs-string">&quot;公里，票价&quot;</span> + price + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23111402.gif"></p><h1 id="四、if的嵌套使用"><a href="#四、if的嵌套使用" class="headerlink" title="四、if的嵌套使用"></a>四、if的嵌套使用</h1><p>正如标题所讲，<code>if</code>语句可以嵌套使用。举个栗子：在<code>main</code>方法中，假设已经存在了一个<code>if-else</code>语句，那么在这个<code>if</code>代码块或者<code>else</code>代码块还可以存在条件判断语句，下面就是其中一种<code>if</code>的嵌套使用方式（事实上它可以<code>if</code>代码块可以进行多种组合嵌套使用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>        执行代码<span class="hljs-number">1.</span>..<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">2.</span>..<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>) &#123;<br>    执行代码<span class="hljs-number">3.</span>..<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码<span class="hljs-number">4.</span>..<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的执行流程如下：</p><ul><li>如果条件表达式1的执行结果是<code>true</code>，进入条件表达式2，如果条件表达式2执行结果是<code>true</code>，此时执行代码1。</li><li>如果条件表达式1的执行结果是<code>true</code>，进入条件表达式2，如果条件表达式2执行结果是<code>false</code>，此时执行代码2。</li><li>如果条件表达式1的执行结果是<code>false</code>，进入条件表达式3，如果条件表达式3执行结果是<code>true</code>，此时执行代码3。</li><li>如果条件表达式1的执行结果是<code>false</code>，进入条件表达式3，如果条件表达式3执行结果是<code>false</code>，此时执行代码4。</li></ul><p>执行流程图如下所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231123dp3.png"></p><p>日常写代码的过程中，尽量保证代码嵌套的层数不超过两层。</p><blockquote><p>案例：输入三个数，要求输出是按照从大到小进行排列。例如，输入三个数为20、30、10，输出结果为30、20、10</p></blockquote><ul><li>第一层条件：比较第一个数和第二个数。</li><li>第二层条件：比较第二个数和第三个数。</li><li>第三层条件：比较第一个数和第三个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if的嵌套--三个数字排列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入三个整数: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">if</span> (number1 &gt; number2) &#123;<br>            <span class="hljs-keyword">if</span> (number2 &gt; number3) &#123;<br>                System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number3);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (number1 &gt; number3) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number2);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number2);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (number2 &lt; number3) &#123;<br>                System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number1);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (number1 &gt; number3) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number3 + <span class="hljs-string">&quot; &quot;</span> + number1);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + number2 + <span class="hljs-string">&quot; &quot;</span> + number1 + <span class="hljs-string">&quot; &quot;</span> + number3);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231123150912015.png"></p><p>虽然运行结果符合我们的预期，但是我只能说：这样的代码写的非常糟糕！！！这段代码中<code>if</code>的嵌套层数达到了三层，事实上<code>if</code>嵌套两层以上可读性就大打折扣了。</p><p>我们可以使用Java数组、循环和数组方法对此问题做进一步处理（小白可以跳过这一部分）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三数比较--按照从大到小的顺序排列</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入三个数字: &quot;</span>);<br>        Integer[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            array[i] = scanner.nextInt();<br>        &#125;<br>        <span class="hljs-comment">// 调用Arrays.sort方法对数组排序，排序规则从大到小(lambda表达式)</span><br>        Arrays.sort(array, (o1, o2) -&gt; o2 - o1);<br>        System.out.println(<span class="hljs-string">&quot;三个数从大到小的排序是: &quot;</span> + array[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + array[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; &quot;</span> + array[<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231123144248925.png"></p><h1 id="五、switch语句"><a href="#五、switch语句" class="headerlink" title="五、switch语句"></a>五、switch语句</h1><p><code>if-else if-else</code>多分支语句可以用于多个条件表达式的判断，我们可以写非常多的<code>else if</code>，然而过多的<code>else if</code>可能会导致代码的可读性变差。</p><p>Java为我们提供了<code>swtich</code>语句在一定程度上可以简化多条件分支。以下是<code>switch</code>的语法结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (表达式) &#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>        执行代码<span class="hljs-number">1.</span>..<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        执行代码<span class="hljs-number">2.</span>..<br>        <span class="hljs-comment">// break</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>:<br>        执行代码<span class="hljs-number">3.</span>..<br>        <span class="hljs-keyword">break</span>;<br>    ...<br>    <span class="hljs-keyword">case</span> 值n:<br>        执行代码n...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>: <br>        上述条件都不适用执行代码...<br>&#125;<br></code></pre></td></tr></table></figure><p>1. <code>switch</code>语句中表达式的计算结果、值1、值2、…、值n的数据类型必须要保持一致。支持的数据类型包括：**<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、字符串类型<code>String</code><strong>（JDK 7新特性）、</strong>枚举类型**（后续会讲到，JDK 7新特性）。</p><p>2. 如果表达式的计算结果和<code>case</code>中某个值相等时，就会执行这个<code>case</code>内的代码。</p><p>3. <code>switch</code>语句中的<code>default</code>是可选的，它的作用是当表达式的计算结果和所有<code>case</code>的值都不相等时才会执行<code>default</code>语句，如果<code>default</code>语句不存在时，所有的<code>case</code>对应的值和判定值都不相等时，跳出<code>switch</code>语句。</p><p>4. <strong><code>break</code>的作用是跳出<code>switch</code>语句</strong>（<code>break</code>关键字还会在循环中遇到），在每一个<code>case</code>对应的代码块后面写上<code>break</code>是个好习惯。</p><p>如果<code>case</code>中不加<code>break</code>，此时<code>switch</code>语句会出现穿透性，即当某一个<code>case</code>执行完成后，它会继续执行下面其他的<code>case</code>。以下是一个是否使用<code>break</code>的案例：</p><blockquote><p>案例：输入数字1~7，使用<code>switch</code>语句输出当前日期（假设7代表星期日）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch语句--不加break--穿透性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入星期数(1~7), 7表示星期日&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">switch</span> (number) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">monday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期一&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + monday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">tuesday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期二&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + tuesday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">wednesday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期三&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + wednesday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">thursday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期四&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + thursday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">friday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期五&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + friday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">saturday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期六&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + saturday);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sunday</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;星期日&quot;</span>;<br>                System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + sunday);<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;无效日期&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231115085927038.png"></p><p>很明显，输入数字3的时候，由于没有<code>break</code>，当执行<code>case 3</code>内部代码以后，它会向下执行其他<code>case</code>中的代码，直至<code>default</code>内的代码执行完毕为止。并且这段代码还有可以进一步修改的空间，以下是加入<code>break</code>并进行简化的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch语句--添加break--穿透性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入星期数(1~7), 7表示星期日&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        String weekday;<br>        <span class="hljs-keyword">switch</span> (number) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                weekday = <span class="hljs-string">&quot;星期一&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                weekday = <span class="hljs-string">&quot;星期二&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                weekday = <span class="hljs-string">&quot;星期三&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                weekday = <span class="hljs-string">&quot;星期四&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                weekday = <span class="hljs-string">&quot;星期五&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                weekday = <span class="hljs-string">&quot;星期六&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                weekday = <span class="hljs-string">&quot;星期日&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                weekday = <span class="hljs-string">&quot;无效星期&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;今天是&quot;</span> + weekday);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231115090958522.png"></p><p>从上述结果可以看出，使用<code>break</code>以后，就可以阻断<code>switch</code>穿透性。</p><p><code>switch</code>语句执行流程如下图所示（每个<code>case</code>都带上<code>break</code>语句）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231123dp2.svg"></p><p>在了解了<code>switch</code>语句的基础上，我们再来讲解一个<code>switch</code>语句和<code>if-else</code>语句结合使用的案例：</p><blockquote><p>案例：输入年份和月份，输出格式如下：xxxx年xx月有xx天。</p></blockquote><p>常识：1、3、5、7、8、10、12恒定是31天；4、6、9、11恒定为30天。这几个月份我们可以利用<code>switch</code>的穿透性替换掉多条件的<code>else if</code>判断。</p><p>需要额外考虑的是：2月份的天数需要考虑年份是闰年还是平年，闰年能被400整除，例如：2000年，1600年是闰年，1900年就不是闰年。此外，如果不能被100整除，而能被4整除的也是闰年，例如：2020，2016，2004，2008年都是闰年。</p><p>结合上述分析，我们可以使用代码进一步复现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * switch和if结合使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入年份: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        System.out.print(<span class="hljs-string">&quot;请输入月份: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-comment">// 利用switch的穿透性</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                day = <span class="hljs-number">31</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                day = <span class="hljs-number">30</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-comment">// 2月份需要额外针对年份进行判断</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    day = <span class="hljs-number">29</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) &#123;<br>                    day = <span class="hljs-number">28</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-comment">// 不在1-12月份内做出说明</span><br>                System.out.println(<span class="hljs-string">&quot;无效的月份&quot;</span>);<br>        &#125;<br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月有&quot;</span> + day + <span class="hljs-string">&quot;天&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231115095549060.png"></p><p>以我个人的开发经验来看，使用<code>switch</code>语句的频率要比使用<code>if</code>语句要少很多，二者的执行效率基本上差不太多。</p><p><code>if</code>可以编写更加灵活的条件表达式。比如：判断某个整数在<code>[10, 20]</code>区间内，此时使用<code>if</code>条件表达式可以写成<code>if (number &gt;= 10 &amp;&amp; number &lt;= 20)</code>，如果使用<code>switch</code>解决此问题会让代码变得更加复杂（因为你要写很多个<code>case</code>进行比较）。</p><p><code>switch</code>更擅长特定类型的值进行比较。以上面根据某年某月求当前月份由多少天为例，事实上完全使用<code>if</code>语句实现，只不过我们需要写成：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231123112004821.png" alt="image-20231123112004821" style="zoom:80%;" /><p>使用前面案例对应的<code>switch</code>代码，和<code>if</code>语句对比，个人觉得可读性变高：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231123112416625.png" alt="image-20231123112416625" style="zoom:80%;" /><p>因此，使用<code>if</code>语句还是<code>switch</code>语句还是得根据具体的代码场景而决定。</p><h1 id="六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范"><a href="#六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范" class="headerlink" title="六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范"></a>六、《阿里巴巴Java开发手册》关于条件判断语句的相关规范</h1><p>1. <font color='#EE0000'>【强制】</font>在一个<code>switch</code>块内，每个<code>case</code>要么通过<code>continue/break/return</code>等来终止，要么注释说明程序将继续执行到哪一个<code>case</code>为止；在一个<code>switch</code>块内，都必须包含一个<code>default</code>语句并且放在最后，即使它什么代码也没有。</p><p>说明：注意<code>break</code>是退出<code>switch</code>语句块，而<code>return</code>是退出方法体。</p><p>2. <font color='#EE0000'>【强制】</font>当<code>switch</code>括号内的变量类型为<code>String</code>并且此变量为外部参数时，必须先进行<code>null</code>判断。</p><p>反例：如下的代码输出内容是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>method(<span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(String param)</span> &#123;<br><span class="hljs-keyword">switch</span> (param) &#123;<br><span class="hljs-comment">// 肯定不是进入这里</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sth&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;it&#x27;s sth&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 也不是进入这里</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;null&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;it&#x27;s null&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 也不是进入这里</span><br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;default&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3. <font color='#EE0000'>【强制】</font>在<code>if/else/for/while/do</code>语句中必须使用大括号。</p><p>说明：即使只有一行代码，禁止不采用大括号的编码方式：<code>if (条件表达式) statements; </code>，上述代码需改成如下格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>statements;<br>&#125;<br></code></pre></td></tr></table></figure><p>4. <font color='#39C5BB'>【推荐】</font>表达异常的分支时，少用<code>if-else</code>方式，这种方式可以改写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (condition) &#123; <br>...<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-comment">// 接着写 else 的业务逻辑代码;</span><br></code></pre></td></tr></table></figure><p>说明：如果非使用<code>if()...else if()...else...</code>方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p><p>正例：超过 3 层的<code>if-else</code>的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下（不了解卫语句是什么的小伙伴可以参考这篇文章：<a href="https://www.cnblogs.com/lanshan-blog/articles/17082023.html">点我查看</a>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findBoyfriend</span> <span class="hljs-params">(Man man)</span>&#123;<br>    <span class="hljs-keyword">if</span> (man.isUgly()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本姑娘是外貌协会的资深会员&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (man.isPoor()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;贫贱夫妻百事哀&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (man.isBadTemper()) &#123;<br>        System.out.println(<span class="hljs-string">&quot;银河有多远，你就给我滚多远&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;可以先交往一段时间看看&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>5. <font color='#39C5BB'>【推荐】</font>避免采用取反逻辑运算符。</p><p>说明：取反逻辑不利于快速理解，并且取反逻辑写法必然存在对应的正向逻辑写法。</p><p><font color='#39C5BB'>正例</font>：使用<code>if (x &lt; 628)</code>来表达 x 小于 628。</p><p><font color='orange'>反例</font>：使用<code>if (!(x &gt;= 628))</code>来表达 x 小于 628。</p><h1 id="七、知识点总结"><a href="#七、知识点总结" class="headerlink" title="七、知识点总结"></a>七、知识点总结</h1><p>流程控制之条件判断知识点总结如下图所示：</p><p>如需高清大图，请点击右侧链接下载文件：<a href="https://icode504.lanzouw.com/iRihj1fourve">点我下载</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.png"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之八-常用类的简单使用</title>
    <link href="/posts/11.html"/>
    <url>/posts/11.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是Intellij IDEA和JDK 8，需要安装两款工具的请查看这两篇教程：<a href="http://www.icode504.com/posts/1.html">点我查看安装JDK8&#x2F;11&#x2F;17教程</a>、<a href="http://www.icode504.com/posts/10.html">点我查看安装Intellij IDEA教程</a>。</p></blockquote><h1 id="一、控制台输入类Scanner"><a href="#一、控制台输入类Scanner" class="headerlink" title="一、控制台输入类Scanner"></a>一、控制台输入类Scanner</h1><p>假设今天我想在瓜摊买一个西瓜（西瓜的重量是10斤），西瓜两块钱一斤，此时使用Java程序代码如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/watermelon-5857431_640.jpg" alt="图片来源于网络，侵删"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算西瓜的价格</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;      <span class="hljs-comment">// 西瓜的单价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;    <span class="hljs-comment">// 西瓜的重量（公斤）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;    <span class="hljs-comment">// 购买价格</span><br>        System.out.println(<span class="hljs-string">&quot;西瓜的价格是: &quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031141401505.png"></p><p>然而现实生活中西瓜的单价和重量是变化的，我们需要手动输入单价和重量，再将输入的内容进行计算。如果在Java代码中实现这一功能，就需要使用到控制台输入类<code>Scanner</code>。</p><p>要想执行输入操作，需要创建一个<code>Scanner</code>类型的对象，<code>Scanner</code>类位于<code>java.util</code>包中（包的概念后续会讲到），需要我们在类的上方手动导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br></code></pre></td></tr></table></figure><p>导入完成后，我们就可以在<code>main</code>方法中创建<code>Scanner</code>类型的对象了，在<code>Scanner</code>的构造器中还需要传入一个参数<code>System.in</code>表示从控制台输入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br></code></pre></td></tr></table></figure><p>此时我们就完成了<code>scanner</code>对象的创建，此时我们就可以调用<code>Scanner</code>类中的方法了，由于我们定义的是<code>int</code>类型的变量，此时我们就可以使用<code>Scanner</code>类中的<code>nextInt()</code>方法实现输入功能，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextInt();<br></code></pre></td></tr></table></figure><p>在控制台输入的内容就会赋值给当前变量并且可以参与后续的运算。</p><p>以下是解决上述方案的完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;       <span class="hljs-comment">// 要想使用Scanner类，就必须要在类的上方导入</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Scanner类实现手动输入，然后计算结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入西瓜的单价: &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入西瓜的重量(按斤计算): &quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalPrice</span> <span class="hljs-operator">=</span> price * weight;<br>        System.out.println(<span class="hljs-string">&quot;西瓜的单价是&quot;</span> + price + <span class="hljs-string">&quot;元, 重量是&quot;</span> + weight + <span class="hljs-string">&quot;斤, 价格是&quot;</span> + totalPrice + <span class="hljs-string">&quot;元&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23103001.gif"></p><p>除了<code>boolean</code>和<code>char</code>类型以外，其他七种数据类型都可以调用<code>nextXxx()</code>方法，使用方式和上述过程完全相同：</p><table><thead><tr><th>基本数据类型</th><th>调用方法</th></tr></thead><tbody><tr><td><code>byte</code></td><td><code>nextByte()</code></td></tr><tr><td><code>short</code></td><td><code>nextShort()</code></td></tr><tr><td><code>int</code></td><td><code>nextInt()</code></td></tr><tr><td><code>long</code></td><td><code>nextLong()</code></td></tr><tr><td><code>float</code></td><td><code>nextFloat()</code></td></tr><tr><td><code>double</code></td><td><code>nextDouble()</code></td></tr></tbody></table><p>除了能输入数字以外，<code>Scanner</code>类还提供了字符串输入的方法：<code>next()</code>和<code>nextLine()</code>。这两个方法都能在控制台输入字符串，二者的区别是：</p><ul><li><code>next()</code>方法读取字符串，直到遇到空格、制表符<kbd>Tab</kbd>和回车<kbd>Enter</kbd>为止，如果这三个符号后面还存在其他字符，<code>next()</code>方法都会省略。</li><li><code>nextLine()</code>方法读取字符串，直到遇到回车<kbd>Enter</kbd>为止。即使当前行存在空格，也能正常输出。</li></ul><p>以下是两种方法的使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * next()方法和nextLine()方法的区别</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWatermelonDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请使用nextLine()方法输入内容，按回车键结束: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue1</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;使用nextLine()输出结果是: &quot;</span> + strValue1);<br><br>        System.out.println(<span class="hljs-string">&quot;请使用next()方法输入内容，按回车键结束: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue2</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;使用next()输出结果是: &quot;</span> + strValue2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031152342510.png"></p><h1 id="二、数学类Math"><a href="#二、数学类Math" class="headerlink" title="二、数学类Math"></a>二、数学类Math</h1><p>在初高中我们学习的一些数学函数在Java中同样使用。这些数学函数都在<code>Math</code>类中。</p><h2 id="2-1-绝对值、两数的最小值和最大值"><a href="#2-1-绝对值、两数的最小值和最大值" class="headerlink" title="2.1 绝对值、两数的最小值和最大值"></a>2.1 绝对值、两数的最小值和最大值</h2><p>绝对值的概念：正数的绝对值是其本身，0的绝对值是0，负数的绝对值是其相反数。在<code>Math</code>类中，我们可以调用静态方法<code>Math.abs(number)</code>来获取<code>number</code>的绝对值，其中<code>number</code>的类型只能是<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>中的一种。</p><p>两数的最小值可以调用<code>Math.min(number1, number2)</code>，如果<code>number1 &gt; number2</code>，那么得到的结果是<code>number2</code>，反之，得到的结果是<code>number1</code>。</p><p>两数的最大值可以调用<code>Math.max(number1, number2)</code>，如果<code>number1 &gt; number2</code>，那么得到的结果是<code>number1</code>，反之，得到的结果是<code>number2</code>。</p><p>其中<code>number1</code>和<code>number2</code>需要保证是<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>中的一种。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 绝对值abs()、两数最小值min()、两数最大值max()的应用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 取绝对值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.abs(intValue1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2.45</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.abs(doubleValue1);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.abs(floatValue1);<br><br>        System.out.println(<span class="hljs-string">&quot;----------取绝对值----------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br><br>        <span class="hljs-comment">// 两数取最小值、最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.min(intValue2, intValue3);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.max(intValue2, intValue3);<br>        System.out.println(<span class="hljs-string">&quot;----------取最小值、最大值----------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031182425433.png"></p><p>那么<code>Math.abs()</code>、<code>Math.min()</code>、<code>Math.max()</code>为什么只支持<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>四种类型。我们使用<kbd>Ctrl</kbd>和鼠标左键点击<code>abs()</code>方法进入源码：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23103002.gif"></p><p>此时按<kbd>Alt</kbd>和<kbd>7</kbd>键，会列举出当前类所有的方法，此时我们在列表中直接输入<code>abs</code>搜索，发现只有四个结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031183335294.png"></p><p>此时我们依次点击进入查看源码，发现它们支持的数据类型只有<code>int</code>、<code>long</code>、<code>float</code>和<code>double</code>。以<code>int</code>类型的<code>abs(int)</code>方法为例，我们发现方法内部就是一个三元运算符组成的表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a &lt; <span class="hljs-number">0</span>) ? -a : a;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>a &lt; 0</code>，那么得到的结果就是其相反数<code>-a</code>，反之，0和正数得到的绝对值就是其本身。<code>long</code>、<code>float</code>和<code>double</code>的<code>abs()</code>方法亦同理。</p><p>此时我们可以按照上述的方式找到<code>min</code>和<code>max</code>方法，发现二者也是仅支持<code>int</code>、<code>long</code>、<code>float</code>和<code>double</code>，方法列表如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031184018449.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231031184031326.png"></p><p>以<code>min(int, int)</code>方法为例，此时我们点击查看源码，发现这个方法体中也用到了三元表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a &lt;= b) ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>a</code>小于等于<code>b</code>，那么最小值就是<code>a</code>，反之为<code>b</code>。</p><p>而浮点类型的<code>min(double, double)</code>方法源码则在此基础上做了进一步判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (a != a)<br>        <span class="hljs-keyword">return</span> a;   <span class="hljs-comment">// a is NaN</span><br>    <span class="hljs-keyword">if</span> ((a == <span class="hljs-number">0.0d</span>) &amp;&amp;<br>        (b == <span class="hljs-number">0.0d</span>) &amp;&amp;<br>        (Double.doubleToRawLongBits(b) == negativeZeroDoubleBits)) &#123;<br>        <span class="hljs-comment">// Raw conversion ok since NaN can&#x27;t map to -0.0.</span><br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (a &lt;= b) ? a : b;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果参数<code>a</code>的值是NaN（NaN是一个特殊的浮点类型的数值，表示无效或者无意义的数值结果，例如：0.0 &#x2F; 0.0得到的结果没有意义，其结果就是NaN），由于NaN是无意义的结果，因此两个NaN的值比较结果就是<code>false</code>。源码中的第一个<code>if</code>判断就是针对NaN结果的判断，如果<code>a</code>的确是NaN，那么比较的结果没有意义，返回的结果也就是变量<code>a</code>本身的值NaN。</p><p>第二个比较主要是针对<code>a</code>的值是0.0，<code>b</code>的值是-0.0的情况，0.0在默认情况下无论前面加上正负号都是0.0，第三个条件中<code>Double.doubleToRawLongBits()</code>方法是将当前按浮点数转换成64位的<code>long</code>类型数，<code>negativeZeroDoubleBits</code>就是上述方法默认的-0.0转换成<code>long</code>类型的数字，如果此时<code>Double.doubleToRawLongBits(b)</code>得到的结果和<code>negativeZeroDoubleBits</code>的值完全相同，那么得到的结果是<code>b</code>的值-0.0。</p><p>如果上述两个条件都不符合，那么就使用三元运算符进行比较，如果<code>a</code>小于等于<code>b</code>，返回值是<code>a</code>，反之为<code>b</code>。</p><h2 id="2-2-数学常量-pi-和-e"><a href="#2-2-数学常量-pi-和-e" class="headerlink" title="2.2 数学常量$\pi$和$e$"></a>2.2 数学常量$\pi$和$e$</h2><p>数学常量是指在数学领域中经常使用的，具有特定数值的量。在中学阶段，我们接触到的两个常量是圆周率$\pi$（3.1415926…）和自然对数$e$（2.7182818…）。这两个常量在Java的<code>Math</code>类有存储，我们只需要调用<code>Math.PI</code>即可获取$\pi$值，调用<code>Math.E</code>即可获取$e$值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数学常量：圆周率和自然对数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;圆周率的值是: &quot;</span> + Math.PI);<br>        System.out.println(<span class="hljs-string">&quot;自然对数的值是: &quot;</span> + Math.E);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231102070010918.png"></p><p>从运行结果中我们可以发现，<code>Math.PI</code>和<code>Math.E</code>只输出了小数点后的一部分，这是因为在<code>Math</code>类中关于<code>PI</code>和<code>E</code>使用的是<code>double</code>类型，由于<code>double</code>的精度只有15位，因此输出结果保留了小数点后15位。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231102071223060.png" alt="E和PI的源码"></p><h2 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2.3 三角函数"></a>2.3 三角函数</h2><p>在<code>Math</code>类中定义了很多和三角函数相关方法，所有的三角函数得到的结果都是<code>double</code>类型，这里选择了3个具有代表性的三角函数：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>sin(a)</code></td><td>正弦函数</td></tr><tr><td><code>cos(a)</code></td><td>余弦函数</td></tr><tr><td><code>tan(a)</code></td><td>正切函数</td></tr></tbody></table><p>和数学上的使用基本上一样，我们只需要确定<code>a</code>的值即可。例如：$sin(\frac{\pi}{6})&#x3D;0.5,cos(\frac{\pi}{3}&#x3D;0.5),tan(\frac{\pi}{4})&#x3D;1$，此时我们可以使用程序来检验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三角函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 弧度使用Math.PI来表示</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sinResult</span> <span class="hljs-operator">=</span> Math.sin(Math.PI / <span class="hljs-number">6</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">cosResult</span> <span class="hljs-operator">=</span> Math.cos(Math.PI / <span class="hljs-number">3</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">tanResult</span> <span class="hljs-operator">=</span> Math.tan(Math.PI / <span class="hljs-number">4</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;sinResult = &quot;</span> + sinResult);<br>        System.out.println(<span class="hljs-string">&quot;cosResult = &quot;</span> + cosResult);<br>        System.out.println(<span class="hljs-string">&quot;tanResult = &quot;</span> + tanResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231102073800307.png"></p><p>但是从运行结果中我们可以发现得到的结果和预期的值相差“一点点”，出现上述情况的原因主要有两点：首先，计算机本身处理浮点类型的数值就不准确。另外，<code>Math.PI</code>的值是小数点的后15位，做不到十分精确。因此得到的结果和期望值存在误差。</p><h2 id="2-4-指数函数和对数函数"><a href="#2-4-指数函数和对数函数" class="headerlink" title="2.4 指数函数和对数函数"></a>2.4 指数函数和对数函数</h2><p><code>Math</code>类中定义了如下常用的指数函数和对数函数：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>sprt(a)</code></td><td>求a的平方根</td></tr><tr><td><code>pow(a, b)</code></td><td>求a的b次方，即$a^b$</td></tr><tr><td><code>exp(a)</code></td><td>求自然对数$e$的a次方，即$e^a$</td></tr><tr><td><code>log(a)</code></td><td>求以自然对数$e$为底，a的对数，即$ln(a)$</td></tr><tr><td><code>log10(a)</code></td><td>求以10为底，a的对数，即$log_{10}a$</td></tr></tbody></table><p>以下是这些数学函数在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 指数函数、对数函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">49</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.sqrt(number1);    <span class="hljs-comment">// 求number1的平方根</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.pow(number2, number3);    <span class="hljs-comment">// 求number2的number3次方</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.exp(<span class="hljs-number">3</span>);       <span class="hljs-comment">// 求e的3次方</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.log(<span class="hljs-number">2</span> * Math.E);      <span class="hljs-comment">// 求以e为底，2e的对数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.log10(<span class="hljs-number">100</span>);       <span class="hljs-comment">// 求以10为底，100的对数</span><br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231104105718121.png"></p><h2 id="2-5-数字的舍入操作"><a href="#2-5-数字的舍入操作" class="headerlink" title="2.5 数字的舍入操作"></a>2.5 数字的舍入操作</h2><p>在进行数学运算时，我们可能需要对小数进行舍入操作（例如：四舍五入），<code>Math</code>类为我们提供了以下四种关于小数舍入的方法：</p><table><thead><tr><th>方法名</th><th>返回类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ceil(x)</code></td><td><code>double</code></td><td>获取大于或等于当前数值的最小整数</td></tr><tr><td><code>floor(x)</code></td><td><code>double</code></td><td>获取小于或等于当前数值最大整数</td></tr><tr><td><code>rint(x)</code></td><td><code>double</code></td><td>获取当前数值最接近的整数，如果有两个相同接近的整数，取偶数</td></tr><tr><td><code>round(x)</code></td><td><code>double</code></td><td>四舍五入，舍入数字以第一位小数为基准</td></tr></tbody></table><p>以下是这些数学函数在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 舍入函数的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.46</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2.34</span>;<br><br>        <span class="hljs-comment">// 获取大于或等于当前数值的最小整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.ceil(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.ceil(number2);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 获取小于或等于当前数值最大整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.floor(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> Math.floor(number2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 获取当前数值最接近的整数，如果有两个相同接近的整数，取偶数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> Math.rint(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result6</span> <span class="hljs-operator">=</span> Math.rint(number2);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result7</span> <span class="hljs-operator">=</span> Math.rint(<span class="hljs-number">5.5</span>);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>        System.out.println(<span class="hljs-string">&quot;result6 = &quot;</span> + result6);<br>        System.out.println(<span class="hljs-string">&quot;result7 = &quot;</span> + result7);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 四舍五入，舍入数字以第一位小数为基准</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result8</span> <span class="hljs-operator">=</span> Math.floor(number1);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result9</span> <span class="hljs-operator">=</span> Math.floor(number2);<br>        System.out.println(<span class="hljs-string">&quot;result7 = &quot;</span> + result8);<br>        System.out.println(<span class="hljs-string">&quot;result8 = &quot;</span> + result9);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231104105840264.png"></p><h2 id="2-6-随机数"><a href="#2-6-随机数" class="headerlink" title="2.6 随机数"></a>2.6 随机数</h2><p><code>Math</code>类中为我们提供了一个获取随机数的方法<code>random()</code>，它默认在$[0,1)$范围内生成小数。我们可以利用这个范围，生成任意范围的数字。</p><p>例如：利用<code>Math.random()</code>所给的范围，生成$[15, 60]$之间的随机数。</p><blockquote><p>首先，整数范围$[15, 60]$可以等价写成$[15, 61)$。</p><p>再获取范围差：$61 - 15 &#x3D; 46$，</p><p>利用不等式的性质，将原有的$[0, 1)$乘以46得到$[0, 46)$，再将现有的范围再加上15，即可获得目标范围：$[15, 61)$</p><p>总结：从$[0,1)$转换到$[15,61)$先乘以46，再加15即可。</p></blockquote><p>以下上述案例在Java代码中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Math.random()生成随机数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 每次生成的随机数值都不相同</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> Math.random();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> Math.random();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> Math.random();<br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br><br>        <span class="hljs-comment">// 由于生成的是[15,60]之间的整数，需要将计算结果强制转换int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">46</span> + <span class="hljs-number">15</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;randomNumber1 = &quot;</span> + randomNumber1);<br>        System.out.println(<span class="hljs-string">&quot;randomNumber2 = &quot;</span> + randomNumber2);<br>        System.out.println(<span class="hljs-string">&quot;randomNumber3 = &quot;</span> + randomNumber3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次得到的结果都不相同：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231104005.gif"></p><h1 id="三、随机数类Random"><a href="#三、随机数类Random" class="headerlink" title="三、随机数类Random"></a>三、随机数类Random</h1><p>前面我们学过<code>Math.random()</code>方法来生成随机数，但是这个方法存在一个局限是它默认生成的范围是$[0,1)$之间的浮点数值，如果需要更大范围的随机数需要进行一定的计算并且需要进行强制类型转换，可能会导致代码可读性变低。</p><p>而接下来要提到的<code>Random</code>类可以避免强制类型转换的问题，并且包含<code>Math.random()</code>方法所不包含的一些特性。</p><h2 id="3-1-随机数相关的概念"><a href="#3-1-随机数相关的概念" class="headerlink" title="3.1 随机数相关的概念"></a>3.1 随机数相关的概念</h2><p>伪随机数：伪随机数是计算机利用特定的算法计算出来的$[0,1)$均匀分布的随机序列。虽然伪随机数并不是真正的随机数，但是它们具有类似随机数的统计特征：均匀性和独立性。在计算伪随机数时，如果使用的初始值（也称作随机数种子）不变，那么生成伪随机数的序列也不会改变。伪随机数可以使用程序大量生成。</p><p>随机数种子：随机数种子是在<strong>伪随机数生成器中用于生成伪随机数的初始数值</strong>，随机数种子一般是数字。在伪随机数生成器中，给定相同的种子值，将会生成相同的伪随机数的序列。</p><h2 id="3-2-随机数类Random的使用"><a href="#3-2-随机数类Random的使用" class="headerlink" title="3.2 随机数类Random的使用"></a>3.2 随机数类Random的使用</h2><p>和前面讲过的<code>Scanner</code>类一样，<code>Random</code>类也在<code>java.util</code>包中。创建随机数的方法如下：</p><p>1. 在类的上方导入<code>Random</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br></code></pre></td></tr></table></figure><p>2. 创建一个<code>Random</code>对象：有两种方式：一种是给定随机数，另外一种就是不给随机数：</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td><code>Random(long)</code></td><td>传入一个<code>long</code>类型的随机数种子，后续生成一个固定的随机数序列</td></tr><tr><td><code>Random()</code></td><td>如果构造方法中没有随机数，计算机会给定一个随机数种子。当然，后续生成的随机数列就不是固定的</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">20</span>);<span class="hljs-comment">// 给定一个随机数种子20，后续会生成一个固定的随机数数列</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">random2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">// 不直接给定随机数种子，让计算机自己分配一个种子，生成一个不固定的随机数数列</span><br></code></pre></td></tr></table></figure><p>3. 根据要生成的随机数类型，调用随机数方法，支持整数类型（<code>int</code>和<code>long</code>）、浮点型（<code>float</code>和<code>double</code>）和布尔类型（<code>boolean</code>）。方法列表如下：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td><code>nextInt()</code></td><td>生成<code>int</code>范围内的随机数</td></tr><tr><td><code>nextInt(int)</code></td><td>生成1到<code>int</code>最大值范围内（不包含<code>int</code>最大值）的随机数</td></tr><tr><td><code>nextLong()</code></td><td>生成<code>long</code>范围内的随机数</td></tr><tr><td><code>nextFloat()</code></td><td>生成<code>float</code>范围内的随机数</td></tr><tr><td><code>nextDouble()</code></td><td>生成<code>double</code>范围内的随机数</td></tr><tr><td><code>nextBoolean()</code></td><td>随机生成<code>true</code>或<code>false</code></td></tr></tbody></table><p>以下是上述方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 随机数的应用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 不使用随机数种子</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> random1.nextInt();            <span class="hljs-comment">// 生成int范围内的随机整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> random1.nextInt(<span class="hljs-number">60</span>);      <span class="hljs-comment">// 生成1到60范围内的随机整数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> random1.nextLong();          <span class="hljs-comment">// 生成long范围内的随机整数</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> random1.nextFloat();        <span class="hljs-comment">// 生成float范围内的随机整数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> random1.nextDouble();      <span class="hljs-comment">// 生成double范围内的随机整数</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result6</span> <span class="hljs-operator">=</span> random1.nextBoolean();    <span class="hljs-comment">// 生成true或false</span><br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>        System.out.println(<span class="hljs-string">&quot;result5 = &quot;</span> + result5);<br>        System.out.println(<span class="hljs-string">&quot;result6 = &quot;</span> + result6);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 使用随机数种子生成固定序列</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">randomValue</span> <span class="hljs-operator">=</span> random2.nextInt();<br>            System.out.println(<span class="hljs-string">&quot;randomValue&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; = &quot;</span> + randomValue);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231104002.gif"></p><p>我们也可以使用<code>Random</code>解决上述生成随机数问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用Random类生成[15, 60]范围内的整数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-11-04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();   <span class="hljs-comment">// 不设置随机种子</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">46</span>) + <span class="hljs-number">15</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多运行几次程序，我们发现生成的随机数确实在$[15,60]$范围内：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/231104003.gif"></p><p>以上是使用<code>Random</code>类生成随机数，相对于<code>Math.random()</code>而言，生成随机数可以省去强制类型转换，相对方便了一些。</p><p><code>Random</code>类是一个方便实用的工具类，它提供了各种方法来获取不同类型和范围的随机数，适用于各种模拟、游戏、密码学等方面应用。通过使用<code>Random</code>类，开发人员可以轻松地生成具有良好随机性和不可预测性的伪随机数，从而提高应用程序的灵活性和效率。</p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intellij IDEA安装配置教程（Windows版）</title>
    <link href="/posts/10.html"/>
    <url>/posts/10.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Intellij IDEA（简称IDEA）是Java语言的集成开发环境，在业界公认为是一款优秀的Java开发工具。分为Community社区版（免费）和Untimate终极版（付费）。</p><p>IDEA是一款智能编译器。它可以进行智能代码补全、提供问题工具窗口、代码上下文检查操作、实时模板、项目级别代码重构、重复代码检测等功能。</p><p>IDEA终极版为现代应用程序和Java相关微服务开发框架提供了一流的支持。IDEA对SpringBoot、Jakata EE、JPA等框架提供一流的支持。</p><p>其内部支持很多的内置工具，例如：调试器、数据库工具、终端、反编译器、WEB开发、版本控制（Git）、导航和搜索功能等。</p></blockquote><p>下面就来介绍一下Windows版的Intellij IDEA如何安装和使用。</p><h1 id="一、安装Intellij-IDEA"><a href="#一、安装Intellij-IDEA" class="headerlink" title="一、安装Intellij IDEA"></a>一、安装Intellij IDEA</h1><p>1. 进入IDEA的官方下载页面，<a href="https://www.jetbrains.com.cn/idea/download/other.html">点我查看</a>。向下找，找到2021.1.3版本（事实上，要下载的版本和最新版本使用Java编写代码的差异并不大）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026105758909.png"></p><p>2. 如下图：Windows选择2021.1.3版本的安装包进行下载</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026105832218.png"></p><p>3. 双击打开安装包</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026110358738.png"></p><p>4. 出现IDEA安装界面后，点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026110530587.png"></p><p>5. 选择安装路径，建议安装在除C盘外的其他位置，这里我安装在了D盘，完成后点击Next：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026110644963.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026110747122.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026110933779.png"></p><p>6. 如果前面选择安装路径的页面仍没有变换，请耐心等待一小会（或者多点几次Next）。出现下面页面以后，按照如图所示勾选即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026111926666.png"></p><p>7. 点击<code>Install</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026112118222.png"></p><p>8. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026112159702.png"></p><p>9. 点击<code>Finish</code>。至此，IDEA安装完成。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026112731774.png"></p><p>10.  双击桌面上的IDEA图标，打开IDEA，会弹出一个协议，按照下图所示勾选，然后点击<code>Continue</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026114146154.png"></p><p>11. 出现数据分享窗口后，选择<code>Don&#39;t Send</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026114256575.png"></p><p>12. 进入激活页面，我们下载的是IDEA Ultimate版，正常是需要按月或者按年支付费用的。此处我们先按照下图进行30天的免费试用：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026114443579.png"></p><blockquote><p>如需正版，请点击右侧链接到官网购买（需要注册账号）：<a href="https://www.jetbrains.com.cn/idea/buy/?section=personal&billing=yearly">点我进入</a></p></blockquote><p>13. 出现下方这个页面以后，就说明我们30天使用申请成功，此时点击<code>Continue</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026114823255.png"></p><p>14. 进入IDEA欢迎界面以后，点击Plugins进入插件下载页面：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026115032492.png"></p><p>15. 点击右上角小齿轮，点击<code>Manage Plugin Repositories</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026140417316.png"></p><p>16. 点击左上角的加号，复制下方链接并粘贴到输入框中，然后点击OK：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//plugins.zhile.io</span><br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026140651185.png"></p><p>17. 此时在插件下载页面中搜索<code>IDE Eval Reset</code>，然后点击<code>Install</code>：</p><blockquote><p><code>IDE Eval Reset</code>插件的作用是无限延长IDEA的试用期。正常IDEA给我们的试用是30天，使用这款插件以后，只要快到了需要激活IDEA的时间，他就会自动延长一个月的试用期。从理论上来讲，安装这款插件以后，理论上就可以实现永久使用。</p><p>这款插件仅限于在IDEA 2021.2.2以下的版本使用，往后的版本中不适用。</p></blockquote><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026140910036.png"></p><p>18. 出现此弹框时，点击<code>Accept</code>，此时IDEA会安装此插件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026141507224.png"></p><p>19. 至此，IDEA安装和简单的配置已经完成了。此插件具体使用详见下一部分内容。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026141624170.png"></p><h1 id="二、使用Intellij-IDEA编写并运行Java程序"><a href="#二、使用Intellij-IDEA编写并运行Java程序" class="headerlink" title="二、使用Intellij IDEA编写并运行Java程序"></a>二、使用Intellij IDEA编写并运行Java程序</h1><p>1. 请确保本地已经安装了JDK，如果没有安装的，查看此文章一步一步安装即可：<a href="http://www.icode504.com/posts/1.html">点我查看</a>。</p><p>2. 输入<code>java -version</code>命令表示电脑上已经成功安装并配置了JDK：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/v2-64aba410fcb514b6ab24c746db122258_r.jpg" alt="img"></p><p>3. 创建项目：点击左侧<code>Projects</code>，然后点击<code>New Project</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026143448569.png"></p><p>4. IDEA会自动为我们检测本机是否安装JDK，下图表示已经成功安装了JDK，确认无误后点击<code>Next</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026144016011.png"></p><p>5. 直接点击<code>Next</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026144525573.png"></p><p>6. 填写项目名称，建议是英文名称，项目存储路径建议是英文路径并且自己后续可以找到的位置，完成后点击<code>Finish</code>。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026145517713.png"></p><p>7. 进入IDEA主界面以后，会弹出一个每日小提示窗口，按照下图所示操作将其永久关闭：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026145749784.png"></p><p>8. 在左侧文件夹中，鼠标右键点击<code>src</code>蓝色文件夹，选择第一个<code>New</code>，再选择<code>Java Class</code>，创建一个Java文件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026150115883.png"></p><p>9. 文件的命名必须符合Java类的命名规范：<a href="https://zhuanlan.zhihu.com/p/654107809">点我进入，查找标识符部分，查看标识符命名规范</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026153407784.png"></p><p>10. 输入<code>psvm</code>或者<code>main</code>，然后直接回车就可以生成<code>main</code>方法：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23102601.gif" alt="23102601"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23102602.gif" alt="23102602"></p><p>11. 在<code>main</code>方法里输入<code>sout</code>然后点击回车，就会生成一个换行输出的语句：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/23102603.gif" alt="23102603"></p><p>12. 此时我们可以在程序中写点内容进行输出，效果图如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026155551840.png"></p><p>13. 运行Java程序：这里的运行就直接包括了编译和运行</p><p>方式一：鼠标右键，点击<code>Run MyFirstProgram</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026155744103.png"></p><p>方式二：使用快捷键，这里我使用的快捷键是<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F10</kbd>，具体的快捷键详见自己鼠标右键后<code>Run xxx</code>后面对应的快捷键执行即可</p><p>运行结果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026160055833.png"></p><p>14. IDE Eval Reset插件的无限期使用：点击上方<code>Help</code>，然后点击最下面的<code>Eval Reset</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026160524459.png"></p><p>15. 按照下图所示进行勾选，然后点击Reset，此时IDEA会自动重启。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026160856389.png"></p><p>16. 点击Yes，就会重启，此时IDEA的试用期就会延长。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231026160939651.png"></p><h1 id="三、Intellij-IDEA的卸载（可选）"><a href="#三、Intellij-IDEA的卸载（可选）" class="headerlink" title="三、Intellij IDEA的卸载（可选）"></a>三、Intellij IDEA的卸载（可选）</h1><p>1. 找到IDEA的安装目录，双击<code>Uninstall.exe</code>开始卸载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231019145304952.png"></p><p>2. 将下面两个框进行勾选。然后点击<code>Uninstall</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231019145326571.png"></p><p>3. 卸载中，请耐心等待</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231019145557554.png"></p><p>4. 卸载完成，点击<code>Close</code></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231019145621728.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Intellij IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之七-Java运算符（下）</title>
    <link href="/posts/9.html"/>
    <url>/posts/9.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、三元运算符的使用"><a href="#一、三元运算符的使用" class="headerlink" title="一、三元运算符的使用"></a>一、三元运算符的使用</h1><p>三元运算符（也称作三目运算符），使用<code>:</code>和<code>?</code>表示，其格式为：<strong>布尔表达式 ? 表达式1 : 表达式2</strong></p><ul><li>如果布尔表达式的计算结果是<code>true</code>，那么执行表达式1；否则，如果布尔表达式的计算结果是<code>false</code>，则执行表达式2。</li><li><strong>表达式1和表达式2计算结果的数据类型必须要和左侧变量定义的数据类型保持一致</strong>。例如：表达式1和表达式2的计算结果都是<code>double</code>类型，那么左侧定义的变量类型也是<code>double</code>。</li></ul><p>以下是三元运算符作用原理图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg" alt="未标题-1"></p><p>以下是三元运算符在代码中的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 三元运算符的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-25 11:57:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ternary</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> byteValue1 &gt; byteValue2 ? byteValue1 : byteValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">40.13</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30.28</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> doubleValue1 == doubleValue2 ? doubleValue1 : doubleValue2;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strValue1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> strValue1.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;strValue1的长度是0&quot;</span> : <span class="hljs-string">&quot;strValue1的长度不是0&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231027105629436.png"></p><p>三元运算符可以嵌套使用，但不推荐，原因是可读性变差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> strValue.length();<br><span class="hljs-comment">// 不推荐嵌套的写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> length &gt; <span class="hljs-number">0</span> ? length &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;strValue的长度在0~10之间&quot;</span> : <span class="hljs-string">&quot;strValue的长度超过10&quot;</span> : <span class="hljs-string">&quot;strValue的长度为0&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br></code></pre></td></tr></table></figure><p>嵌套式写法做进一步简化处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> strValue.length();<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> length &gt; <span class="hljs-number">0</span> &amp;&amp; length &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;strValue的长度在0~10之间&quot;</span> : <span class="hljs-string">&quot;strValue的长度不在0~10之间&quot;</span>;<br>System.out.println(result);<br></code></pre></td></tr></table></figure><h1 id="二、三元运算符和if语句的区别"><a href="#二、三元运算符和if语句的区别" class="headerlink" title="二、三元运算符和if语句的区别"></a>二、三元运算符和if语句的区别</h1><p>共同点：三元运算符和<code>if</code>语句的作用都是用作条件判断。但二者也存在一些差别：</p><p>1. 语法层面：在大多数情况下，三元运算符语法是一行语句，<code>if</code>语句可能是多行。例如：判断一个字符串的长度是否为0，以下分别是三元运算符和<code>if</code>语句的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 三元运算符写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> strValue.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;strValue的长度为0&quot;</span> : <span class="hljs-string">&quot;strValue的长度不为0&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">strValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br>String result;<br><span class="hljs-keyword">if</span> (strValue.length() == <span class="hljs-number">0</span>) &#123;<br>    result = <span class="hljs-string">&quot;strValue的长度为0&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    result = <span class="hljs-string">&quot;strValue的长度不为0&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2. 代码可读性：对于简单的条件判断，使用三元运算符确实可以简化代码，但是如果是复杂条件或者嵌套，那么三元运算符会让代码变得更加复杂难以理解。</p><p>3. 灵活性：<code>if</code>语句中可以在代码块中放入更多的表达式，但是三目运算符的表达式只能存在一个。</p><p>总体来说，三目运算符和<code>if</code>语句都有各自的优点和使用场景。在简单的情况下，使用三目运算符比较方便；在复杂情况下，使用<code>if</code>语句更合适。</p><h1 id="三、运算符的优先级"><a href="#三、运算符的优先级" class="headerlink" title="三、运算符的优先级"></a>三、运算符的优先级</h1><p>前面学过很多的运算符：例如算术运算符、比较运算符、逻辑运算符等等，如果这些运算符进行混合运算时，存在着一个优先级，即谁先计算，谁后计算的问题。数学中存在这样一条规定：先乘除，后加减。也就是说，乘和除是同一级别，二者的计算级别要比加和减的级别高。这条规定在Java中也完全适用。</p><p>以下是运算符的优先级顺序表（由高到低，这张表了解即可，不需要额外记忆）：</p><table><thead><tr><th>运算符</th><th>关联性</th></tr></thead><tbody><tr><td>()   []</td><td>从左向右</td></tr><tr><td>!   ~   ++   –   正负号</td><td>从右向左</td></tr><tr><td>*   &#x2F;   %</td><td>从左向右</td></tr><tr><td>+   -</td><td>从左向右</td></tr><tr><td>&lt;&lt;   &gt;&gt;   &gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>&lt;   &lt;&#x3D;   &gt;   &gt;&#x3D;   instanceof</td><td>从左向右</td></tr><tr><td>&#x3D;&#x3D;   !&#x3D;</td><td>从左向右</td></tr><tr><td>&amp;</td><td>从左向右</td></tr><tr><td>^</td><td>从左向右</td></tr><tr><td>|</td><td>从左向右</td></tr><tr><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>||</td><td>从左向右</td></tr><tr><td>?:</td><td>从右向左</td></tr><tr><td>&#x3D;   +&#x3D;   -&#x3D;   *&#x3D;   &#x2F;&#x3D;   %&#x3D;   &amp;&#x3D;   |&#x3D;   ^&#x3D;   &lt;&lt;&#x3D;   &gt;&gt;&#x3D;   &gt;&gt;&gt;&#x3D;</td><td>从右向左</td></tr></tbody></table><p><strong>使用括号()可以提升运算符的优先级</strong>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-number">28</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> value1 * value2 + value3;<span class="hljs-comment">// 先乘除，后加减</span><br><span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> value1 * (value2 + value3);<span class="hljs-comment">// 有括号的优先计算</span><br></code></pre></td></tr></table></figure><p>原本加号的运算等级要比乘号的等级要低，但是给加法表达式加上括号以后，加法表达式优先计算，然后再计算乘除法。</p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之六-附录一-以字节码的角度分析分析i++和++i</title>
    <link href="/posts/8.html"/>
    <url>/posts/8.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：众所周知，<code>i++</code>和<code>++i</code>的区别是：<code>i++</code>先将<code>i</code>的值赋值给变量，再将<code>i</code>的值自增1；而<code>++i</code>则是先将<code>i</code>的值自增1，再将结果赋值给变量。因此，二者最终都给<code>i</code>自增了1，只是方式不同而已。</p><p>当然，如果在面试过程中面试官问你这个问题，只回答出上述内容，只能说明你对这方面的知识了解的还是太浅显。那么<code>i++</code>和<code>++i</code>到底有什么不同之处呢？</p></blockquote><h1 id="一、局部变量表与操作数栈简介"><a href="#一、局部变量表与操作数栈简介" class="headerlink" title="一、局部变量表与操作数栈简介"></a>一、局部变量表与操作数栈简介</h1><p>《深入理解Java虚拟机》第八章对栈帧结构有如下描述Java虚拟机以方法作为最基本的执行单元，“栈帧”（Stack Frame）则是用于支持虚拟机进行方法调用和方法执行背后的数据结构，它也是虚拟机运行时数据区中的虚拟机栈的栈元素。</p><p>在一个活动线程中，可能会执行多个方法，因此会存在多个栈帧，和“栈”（先进后出）一样，处于栈顶的栈帧才是真正运行的，处于栈顶的栈帧称作“当前栈帧”（Current Stack Frame），这个栈帧所属的方法称作“当前方法”（Current Method）。</p><p>在执行<code>main</code>方法时，<code>main</code>方法所属的线程主线程，假设在主线程中调用了一个<code>method1()</code>方法，在<code>method1()</code>内部调用了<code>method2()</code>方法，在<code>method2()</code>方法执行两个整数运算，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-23 22:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StackFrameDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main开始执行&quot;</span>);<br>        method1();<br>        System.out.println(<span class="hljs-string">&quot;main执行完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;method1开始执行&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method2();<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;method1执行结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-keyword">return</span> var1 + var2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023221121858.png" alt="image-20231023221121858"></p><p>由代码我们可以看出，<code>main</code>方法最先执行一个输出，然后进入<code>method1</code>执行第一个输出，再完整执行<code>method2</code>。<code>method2</code>执行完成以后，再执行<code>method1</code>，最后执行<code>main</code>方法，由于这段代码中只涉及一个主线程，并且最先完整执行方法的是<code>method2</code>，因此<code>method2</code>对应的栈帧就是当前栈帧，<code>main</code>方法最后执行完毕，因此<code>main</code>方法对应的栈帧在<code>method2</code>和<code>method1</code>之下。以下是这段代码对应的栈帧概念图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023222236855.png" alt="image-20231023222236855"></p><p>在每一个栈帧中存储了方法的局部变量表、操作数栈、动态链接和方法返回地址等信息</p><h2 id="1-1-局部变量表"><a href="#1-1-局部变量表" class="headerlink" title="1.1 局部变量表"></a>1.1 局部变量表</h2><p>局部变量表（Local variable Table）是一组<strong>变量值</strong>的存储空间，用于存放方法参数和方法内部定义的局部变量。</p><p>局部变量表的容量是以变量槽（Variable Slot）为最小单位，每个变量槽能存储基本数据类型和引用数据类型的数据。为了尽可能节省栈帧消耗的内存空间，局部变量表中的变量槽是可以重用的。</p><p>JVM使用索引定位的方式使用索引变量表，索引值的范围是从0开始到局部变量表最大变量槽的数量（类似数组结构）。</p><p>当一个方法被调用的时候，JVM会使用局部变量表来完成参数值到参数变量列表的传递，即实参到形参的传递。</p><h2 id="1-2-操作数栈"><a href="#1-2-操作数栈" class="headerlink" title="1.2 操作数栈"></a>1.2 操作数栈</h2><p>操作数栈（Operand Stack）也称作操作数栈，它是一个栈结构（后进先出，例如手枪的弹夹，先打出去的子弹是最顶上的子弹）。</p><p>在方法开始执行的时候，这个方法对应的操作数栈是空的，在方法执行过程中，会有各种字节码指令向操作数栈中写入或读取内容，即出栈和入栈操作，例如：两数相加运算时，就需要将两个数压入栈顶后调用运算指令。</p><p><strong>操作数栈中的元素的数据类型必须和字节码指令序列严格匹配</strong>，在编译程序代码的时候编译器必须要严格保证这一点，在类的校验阶段的数据流分析时候还需要再次校验。例如：执行加法<code>iadd</code>（<code>i</code>是<code>int</code>类型，<code>add</code>是两个数相加）命令时，就需要保证两个操作数必须是<code>int</code>类型，不能出现其他类型相加的情况。</p><h1 id="二、字节码分析（图解）"><a href="#二、字节码分析（图解）" class="headerlink" title="二、字节码分析（图解）"></a>二、字节码分析（图解）</h1><p>我们可以从字节码的角度进一步对<code>i++</code>和<code>++i</code>的执行过程做进一步的分析。以下面代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++和++i的深入分析</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-17 5:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> ++intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要查看编译后的字节码文件，字节码文件不能直接使用记事本打开，但是我们可以使用<code>javap -verbose 文件名.class</code>命令，以<code>IncrementAndDecrementOperators2.class</code>为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap -verbose IncrementAndDecrementOperators2.class<br></code></pre></td></tr></table></figure><p>此时就会打开所有的字节码文件，我们只需要关注<code>main</code>方法内的执行过程即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231017063620627.png" alt="image-20231017063620627"></p><p>首先来解释一下这四行代码的含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>: iconst_2<br><span class="hljs-number">1</span>: istore_1<br><span class="hljs-number">2</span>: iconst_2<br><span class="hljs-number">3</span>: istore_2<br></code></pre></td></tr></table></figure><ul><li><code>iconst_2</code>一共有两部分组成，<code>i</code>指的是<code>int</code>类型（源代码中我们定义的确实是<code>int</code>类型），<code>const</code>代表常量（数字<code>2</code>是整型常量），<code>iconst_2</code>的含义是将2入操作数栈。</li><li><code>istore_1</code>中的<code>store</code>代表的是存储，<code>istore_1</code>的含义是将操作数栈中的数值2出栈，存入到局部变量表1的位置。同理，<code>i_store2</code>表示将操作数栈中的数值2出栈，存储到局部变量表2的位置。</li></ul><p>以下是前面四行代码存储过程图（存储过程全部流程图点击此链接下载：<a href="https://icode504.lanzouw.com/ijDp41cn4p0b">点我下载</a>）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023180543810.png" alt="image-20231023180543810"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023180636090.png" alt="image-20231023180636090"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023180949754.png" alt="image-20231023180949754"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023181650491.png" alt="image-20231023181650491"></p><p>此时我们继续观察4-8行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4</span>: iload_1<br><span class="hljs-number">5</span>: iinc<span class="hljs-number">1</span>, <span class="hljs-number">1</span><br><span class="hljs-number">8</span>: istore_3<br></code></pre></td></tr></table></figure><ul><li><code>iload_1</code>的作用是将局部变量表1号位置存储的值移动到操作数栈。</li><li>第5行的<code>iinc</code>有两个参数，第一个参数<code>1</code>是局部变量表的位置，另一个参数<code>1</code>的含义是在该位置存储一个<code>1</code>，如果这个位置存在值，那么这个值的结果是<strong>已存在值 + 参数值</strong>。</li><li><code>istore_3</code>将操作数栈中的数移动到局部变量表的3号位置。</li></ul><p>以下是这三行代码的示意图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023182309249.png" alt="image-20231023182309249"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023182828787.png" alt="image-20231023182828787"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023183808061.png" alt="image-20231023183808061"></p><p>9-12行的字节码的作用原理和4-8行的作用原理基本相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span>: iinc<span class="hljs-number">2</span>, <span class="hljs-number">1</span><br><span class="hljs-number">12</span>: iload_2<br><span class="hljs-number">13</span>: istore<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><code>istore 4</code>的作用是将操作数栈中的值存储到局部变量表4号位置。</p><p>以下是这三行代码的示意图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023183842487.png" alt="image-20231023183842487"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023184139208.png" alt="image-20231023184139208"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231023184445793.png" alt="image-20231023184445793"></p><p>接下来15-30行是和系统输出有关的。其中第30行<code>iload_3</code>在局部变量表中（这个值为2）值移动到操作数栈顶供系统输出，事实上<code>iload_3</code>的值正好对应源代码中变量<code>result1</code>的值。也就是说，<code>result1</code>输出结果就是<code>iload_3</code>的数值2。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231021153508365.png" alt="image-20231021153508365"></p><p>同理，<code>iload 4</code>就是第二个要输出的值，在局部变量表中第4个位置存储的值正好是3，而输出的变量名是<code>result2</code>，因此<code>result2</code>的输出结果是3。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231021154150053.png" alt="image-20231021154150053"></p><h1 id="三、i-和-i性能分析"><a href="#三、i-和-i性能分析" class="headerlink" title="三、i++和++i性能分析"></a>三、<code>i++</code>和<code>++i</code>性能分析</h1><p><code>i++</code>和<code>++i</code>主要用在普通<code>for</code>循环上，那么我们就将二者用在<code>for</code>循环上，循环相同的次数，从字节码的角度进行分析。</p><p>以下是使用<code>i++</code>和<code>++i</code>的两个<code>for</code>循环文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++在for循环的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-21 16:14:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoopTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ++i在for循环的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-21 16:15:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoopTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i) &#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行编译命令以后，我们来查看两个文件的字节码：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231021162911742.png" alt="image-20231021162911742"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231021162952984.png" alt="image-20231021162952984"></p><p>仔细观察这两个字节码文件内容，我们发现在两个文件<code>main</code>方法的字节码内容完全相同。由此可见，两种方式执行<code>for</code>循环的效率是相同的。</p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之六-Java运算符（中）</title>
    <link href="/posts/7.html"/>
    <url>/posts/7.html</url>
    
    <content type="html"><![CDATA[<h1 id="一、自增-自减运算符"><a href="#一、自增-自减运算符" class="headerlink" title="一、自增&#x2F;自减运算符"></a>一、自增&#x2F;自减运算符</h1><p>假设有一个变量<code>intValue</code>的值为10，如果想让这个值加1，有哪些方式？</p><p>首先，我们可以使用最原始的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>intValue = intValue + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>或者使用赋值运算符<code>+=</code>操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>intValue += <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>正如这一节的标题名称自增&#x2F;自减运算符，我们可以使用自增运算符来解决上述的问题。</p><h2 id="1-1-自增-自减运算符的基本使用"><a href="#1-1-自增-自减运算符的基本使用" class="headerlink" title="1.1 自增&#x2F;自减运算符的基本使用"></a>1.1 自增&#x2F;自减运算符的基本使用</h2><p>自增运算符使用<strong>变量名++<strong>（也叫后缀自增，因为<code>++</code>在变量名后面）或者</strong>++变量名</strong>（也叫前缀自增，因为<code>++</code>在变量名前面）的方式表示，二者最终都会将变量的值加1。</p><p>同理，自减运算符使用<strong>变量名–<strong>（也叫后缀自减，因为<code>--</code>在变量名前面）或者</strong>–变量名</strong>（也叫前缀自减，因为<code>--</code>在变量名前面）的方式表示，二者最终都会将变量的值减1。</p><p>以下是使用自增运算符解决上述问题的代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自增自减运算符</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-11 7:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 后缀自增i++和前缀自增++i简单使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        intValue1++;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        ++intValue2;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-comment">// 后缀自减i--和前缀自减--i简单使用</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        intValue3--;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        --intValue4;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231011104400202.png" alt="image-20231011104400202"></p><p><code>i++</code>或者<code>++i</code>二者执行完表达式计算以后，<code>i</code>的值自增1（同理，<code>i--</code>或<code>--i</code>得到的结果是<code>i</code>自减1）。</p><h2 id="1-2-前缀自增（减）和后缀自增（减）的区别"><a href="#1-2-前缀自增（减）和后缀自增（减）的区别" class="headerlink" title="1.2 前缀自增（减）和后缀自增（减）的区别"></a>1.2 前缀自增（减）和后缀自增（减）的区别</h2><p>后缀自增<code>i++</code>，先返回变量<code>i</code>的当前值，运算完成后再将<code>i</code>增加1。例如：<code>j = i++ * 2</code>，此时右侧表达式计算时得到的是当前<code>i</code>的值，在右侧表达式运算完成后，<code>i</code>再自增1。</p><p>前缀自增<code>++i</code>，先将<code>i</code>的值增加1，然后返回变量<code>i</code>的当前值。例如：<code>j = ++i * 2</code>，此时右侧表达式计算时得到的是<code>i</code>加1之后的值，在右侧表达式运算完成后，<code>i</code>的值也就是前面自增1的结果。</p><p>接下来我们使用代码来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * i++和++i的区别</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IncrementAndDecrementOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1++;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> ++intValue2;<br><br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 执行完赋值操作后，两个变量值最后都会自增1，此时得到的结果都是11</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue3++ * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 计算时先赋值为intValue3的值，计算完成后intValue3的值自增1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> ++intValue4 * <span class="hljs-number">2</span>;      <span class="hljs-comment">// 计算时先将intValue4的值自增1，计算完成后将自增的值赋值给intValue4</span><br><br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;result4 = &quot;</span> + result4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016224628678.png" alt="image-20231016224628678"></p><p>关于<code>i++</code>和<code>++i</code>在字节码层面的区别，请查看这篇文章：<a href="https://zhuanlan.zhihu.com/p/662964932">点我查看</a></p><h1 id="二、比较运算符"><a href="#二、比较运算符" class="headerlink" title="二、比较运算符"></a>二、比较运算符</h1><p>和数学学过的一样，Java的比较运算符有如下：**大于<code>&gt;</code>，小于<code>&lt;</code>，等于<code>==</code>，大于等于<code>&gt;=</code>，小于等于<code>&lt;=</code>，不等于<code>!=</code>**。</p><p>比较运算符得到的结果是<strong>布尔类型的值</strong>，即<code>true</code>或<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比较运算符的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-11 23:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparisonOperator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &gt; intValue2: &quot;</span> + (intValue1 &gt; intValue2));    <span class="hljs-comment">// &gt; 大于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &lt; intValue2: &quot;</span> + (intValue1 &lt; intValue2));    <span class="hljs-comment">// &lt; 小于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 == intValue2: &quot;</span> + (intValue1 == intValue2));  <span class="hljs-comment">// == 等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 != intValue2 = &quot;</span> + (intValue1 != intValue2)); <span class="hljs-comment">// != 不等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &gt;= intValue2: &quot;</span> + (intValue1 &gt;= intValue2));  <span class="hljs-comment">// &gt;= 大于等于</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 &lt;= intValue2: &quot;</span> + (intValue1 &lt;= intValue2));  <span class="hljs-comment">// &lt;= 小于等于</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231011231023902.png" alt="image-20231011231023902"></p><h1 id="三、逻辑运算符"><a href="#三、逻辑运算符" class="headerlink" title="三、逻辑运算符"></a>三、逻辑运算符</h1><p><strong>逻辑运算符只能用在布尔值或者计算结果是布尔值的表达式</strong>（例如：比较运算符得到的结果就是布尔值）。</p><h2 id="3-1-逻辑与、逻辑或运算符"><a href="#3-1-逻辑与、逻辑或运算符" class="headerlink" title="3.1 逻辑与、逻辑或运算符"></a>3.1 逻辑与、逻辑或运算符</h2><p>短路与使用<code>&amp;&amp;</code>表示，格式是：<strong>布尔表达式1 &amp;&amp; 布尔表达式2</strong>。如果<code>&amp;&amp;</code>两侧得到的结果都是<code>true</code>，那么得到的结果也是<code>true</code>，否则其他情况均为<code>false</code>。</p><p>短路或使用<code>||</code>表示，格式是：<strong>布尔表达式1 || 布尔表达式2</strong>。如果<code>||</code>只要有一侧为<code>true</code>，那么得到的结果是<code>true</code>，如果两侧结果都是<code>false</code>，那么得到的结果也是<code>false</code>。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 短路与&amp;&amp; 短路或|| 的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span>  <span class="hljs-operator">=</span> <span class="hljs-number">40</span> != <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span> &gt; <span class="hljs-number">5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span> &gt; <span class="hljs-number">40</span>;<br>        System.out.println(<span class="hljs-string">&quot;计算结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br><br>        System.out.println(<span class="hljs-string">&quot;使用短路与&amp;&amp; 短路或|| 的运算结果: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 &amp;&amp; result2 = &quot;</span> + (result1 &amp;&amp; result2));<br>        System.out.println(<span class="hljs-string">&quot;result1 &amp;&amp; result3 = &quot;</span> + (result1 &amp;&amp; result3));<br>        System.out.println(<span class="hljs-string">&quot;result2 &amp;&amp; result3 = &quot;</span> + (result2 &amp;&amp; result3));<br>        System.out.println(<span class="hljs-string">&quot;result1 || result2 = &quot;</span> + (result1 || result2));<br>        System.out.println(<span class="hljs-string">&quot;result1 || result3 = &quot;</span> + (result1 || result3));<br>        System.out.println(<span class="hljs-string">&quot;result2 || result3 = &quot;</span> + (result2 || result3));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016223005999.png" alt="image-20231016223005999"></p><p>运行结果符合我们的预期和上述的说明。</p><h2 id="3-2-逻辑非运算符"><a href="#3-2-逻辑非运算符" class="headerlink" title="3.2 逻辑非运算符"></a>3.2 逻辑非运算符</h2><p>非运算符使用<code>!</code>表示，格式为：**<code>!布尔值</code><strong>或者</strong><code>!布尔表达式</code>**。</p><p>非运算符的作用是将得到的布尔值取反，例如：<code>!true</code>的结果是<code>false</code>，同理，<code>!false</code>的结果是<code>true</code>，以下是非运算符在代码中的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 逻辑非运算符! 的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 22:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span> &gt;= <span class="hljs-number">30</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result2</span>  <span class="hljs-operator">=</span> <span class="hljs-number">40</span> != <span class="hljs-number">20</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;正常结果: &quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        System.out.println(<span class="hljs-string">&quot;取非运算符!得到的结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;!result1 = &quot;</span> + !result1);<br>        System.out.println(<span class="hljs-string">&quot;!result2 = &quot;</span> + !result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016223450470.png" alt="image-20231016223450470"></p><p>从结果中我们可以看出，运算结果如果为<code>true</code>，加上非运算符，得到的结果正好相反，为<code>false</code>。同理，如果运算结果为<code>false</code>，取非得到的结果是<code>true</code>。</p><h1 id="四、位运算符（了解即可）"><a href="#四、位运算符（了解即可）" class="headerlink" title="四、位运算符（了解即可）"></a>四、位运算符（了解即可）</h1><p>位运算符主要是针对<strong>整型数字的二进制</strong>进行运算。在二进制的位运算中，1表示真，0表示假。</p><h2 id="4-1-位与、位或、异或运算符"><a href="#4-1-位与、位或、异或运算符" class="headerlink" title="4.1 位与、位或、异或运算符"></a>4.1 位与、位或、异或运算符</h2><p>位运算符主要包含如下的运算符：</p><table><thead><tr><th>符号</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>位与运算符</td><td>如果相同位两个二进制数都为1，则结果为1；反之，结果为0。</td></tr><tr><td><code>|</code></td><td>位或运算符</td><td>如果相同位两个二进制数都为0，则结果为0；反之，结果为1。</td></tr><tr><td><code>^</code></td><td>异或运算符</td><td>如果相同位两个二进制数相同，则结果为0；反之，结果为1。</td></tr><tr><td><code>~</code></td><td>非运算符</td><td>一元运算符，将每一位的二进制数由1变0，由0变1。</td></tr></tbody></table><p>看完上述说明可能还是一头雾水，接下来以具体案例来说明它们是如何使用的。</p><p>假设有两个<code>int</code>类型的整数，第一个值为8，另一个值是6，将其转换成32位（因为<code>int</code>本身就是32位）的二进制整数为：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013063833758.png" alt="image-20231013063833758"></p><p>由于前24位（未标黄部分）都是0，为了直观展示上述运算符的运算过程，在后续计算中默认省略前24位：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013064330711.png" alt="image-20231013064330711"></p><p>按照位与<code>&amp;</code>的运算规则，在相同位上两个二进制数的值都为1，则结果为1，否则其他情况都为0，那么此时的运算过程为：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013064746114.png" alt="image-20231013064746114" style="zoom:80%;" /><p>得到的结果为：<br>$$<br>00000000<br>$$<br>转换成十进制的结果就是0，<code>8 &amp; 6</code>的结果为0。</p><p>同理，按照位或<code>|</code>的规则，如果相同位两个二进制数都为0，则结果为0；反之，结果为1。此时的运算过程为：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013065621077.png" alt="image-20231013065621077" style="zoom:80%;" /><p>得到的结果：<br>$$<br>00001110<br>$$<br>转换成十进制就是14，因此<code>8 | 6</code>的运算结果是14。</p><p>根据异或运算符的规则：如果相同位两个二进制数相同，则结果为0；反之，结果为1。此时的运算过程为：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013072331540.png" alt="image-20231013072331540" style="zoom:80%;" /><p>得到的结果：<br>$$<br>00001110<br>$$<br>转换成十进制是14，因此<code>8 ^ 6</code>得到的结果是14。</p><h2 id="4-2-非运算符"><a href="#4-2-非运算符" class="headerlink" title="4.2 非运算符"></a>4.2 非运算符</h2><p>此时我们再观察完整的8和6的二进制数（32位）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013063833758.png" alt="image-20231013063833758"></p><p>按照非运算符<code>~</code>的规定，将每一位的二进制数由1变0，由0变1。此时<code>~8</code>会转换成如下的形式：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013073248219.png" alt="image-20231013073248219"></p><p>二进制的第一位表示正负号，0表示正号，1表示负号，并且不参与运算。此时从<code>~8</code>得到的二进制数来看，未来转换成十进制数字也是负数。</p><p>负数的二进制表示：除符号位以外，其他位取反操作（0变成1，1变成0），然后再加1以补码的方式表示。</p><p>此时<code>~8</code>的结果就是补码，我们需要对上述操作进行逆向操作。</p><p>首先，将二进制数减1，得到如下结果（反码）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013073901883.png" alt="image-20231013073901883"></p><p>再将反码还原（1变成0，0变成1），得到如下结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231013074028227.png" alt="image-20231013074028227"></p><p>此时除第一位是负数以外，再将得到的结果转换成十进制数为<code>-9</code>，因此<code>~8</code>的结果是<code>-9</code>。</p><p>同理，<code>~6</code>的结果是<code>-7</code></p><p>我们使用代码来检测一下上述运算结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 位运算符 &amp; | ~的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-13 6:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 &amp; intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 &amp; intValue2 = &quot;</span> + result1);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue1 | intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 | intValue2 = &quot;</span> + result2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> ~intValue1;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> ~intValue2;<br>        System.out.println(<span class="hljs-string">&quot;~intValue1 = &quot;</span> + result3);<br>        System.out.println(<span class="hljs-string">&quot;~intValue2 = &quot;</span> + result4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231024082411610.png" alt="image-20231024082411610"></p><h2 id="4-3-移位运算符"><a href="#4-3-移位运算符" class="headerlink" title="4.3 移位运算符"></a>4.3 移位运算符</h2><p>移位运算符的主要是针对二进制数向左或者向右移动n位。其中<code>&lt;&lt;</code>称作有符号左移运算符，<code>&gt;&gt;</code>称作有符号右移运算符。</p><p>以有符号左移运算符为例，它的使用格式是：<strong>操作数 &lt;&lt; 左移位数</strong>，例如：<code>3 &lt;&lt; 4</code>的含义是将3的二进制数向左移动4位（第1位符号位除外）。以下是它的运算过程：</p><p>将3转换成32位二进制数，如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016060323872.png" alt="image-20231016060323872"></p><p>移动原则是：向左移，最左边多出的位数舍去，右侧空缺使用0来补缺（负数使用1来补缺）。同理，向右移，最右边多出的位数舍去，左侧空缺使用0来补缺（负数使用1来补缺）。</p><p>3向左移动4位以后的情况如下图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016063210904.png" alt="image-20231016063210904"></p><p>按照上述规则，将左侧多出的4位舍去，右侧空缺位置使用0补上，此时得到的结果是：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016063405885.png" alt="image-20231016063405885"></p><p>将得到的结果转换成十进制数是：<br>$$<br>1\times2^{5}+1\times2^{4}&#x3D;48<br>$$<br>因此：<code>3 &lt;&lt; 4</code>得到的结果是48。</p><p>同理，右移运算符的使用格式是：<strong>操作数 &gt;&gt; 右移位数</strong>，例如：<code>-20 &gt;&gt; 3</code>的含义是将-20的二进制数向右移动3位（第1位符号位除外）。以下是运算过程：</p><p>首先将-20转换成二进制形式表示（负数使用补码表示并参与计算）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016065831435.png" alt="image-20231016065831435"></p><p>-20向右移动3位以后的情况如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016070051278.png" alt="image-20231016070051278"></p><p>此时空缺位使用1来补位（因为-20是负数），多余位舍去，得到如下的结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016070248758.png" alt="image-20231016070248758"></p><p>此时将负数的补码转换成原码的形式表示（原码和补码的知识可以查看这篇文章的原码、反码、补码：<a href="https://zhuanlan.zhihu.com/p/654700181">点我查看</a>）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016070352309.png" alt="image-20231016070352309"></p><p>此时我们将原码转换成十进制表示：<br>$$<br>-(1\times2^{1}+1\times2^{0})&#x3D;-3<br>$$<br>因此<code>-20 &gt;&gt; 3</code>得到的结果是-3。</p><p>前面我们提到的都是有符号移位。在Java中，还有一个无符号右移运算符，使用<code>&gt;&gt;&gt;</code>表示，格式是：<strong>操作数 &gt;&gt;&gt; 向右移动数</strong>。</p><p>无符号右移运算符在向右移动时符号位和其他数字都参与移动。此时空缺位使用0来补齐即可。</p><p>这次我们让-20无符号右移3位，移动后的情况如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016072436485.png" alt="image-20231016072436485"></p><p>空缺位使用0补齐，多余位舍掉后的结果如下图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016072603589.png" alt="image-20231016072603589"></p><p>使用计算器转换为十进制数字得到的结果如下图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016073023006.png" alt="image-20231016073023006"></p><p>我们使用代码来验证一下上述推算过程得到的结果是否符合我们的预期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 位运算符 &gt;&gt; &lt;&lt; 和 &gt;&gt;&gt;的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-16 7:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">4</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">20</span> &gt;&gt; <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> -<span class="hljs-number">20</span> &gt;&gt;&gt; <span class="hljs-number">3</span>;<br>        System.out.println(<span class="hljs-string">&quot;3 &lt;&lt; 4 = &quot;</span> + result1);<br>        System.out.println(<span class="hljs-string">&quot;-20 &gt;&gt; 3 = &quot;</span> + result2);<br>        System.out.println(<span class="hljs-string">&quot;-20 &gt;&gt;&gt; 3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231016073411637.png" alt="image-20231016073411637"></p><p>使用位运算符主要是针对整型数据的二进制值进行操作，由于位运算符直接操作二进制数值，执行效率非常高，远超普通的四则运算。但是为什么在日常开发中我们很少使用位运算符呢？</p><p>1. 首先，位运算符虽然执行效率非常高，但是可读性较差，容易让人困惑。例如：前面的<code>-20 &gt;&gt; 3</code>的例子虽然在表面上是让-20向右移动3位，但是里面涉及到的过程是十分复杂的（负数由补码到反码，反码到补码就能让人焦头烂额）。</p><p>2. 大多数情况下我们都不需要直接操作二进制值。日常开发中，我们是直接针对数据做进一步处理即可，无需额外转换成二进制数据。</p><p>3. 位运算符只有在计算机底层开发或者在性能等关键领域开发会用到。</p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之五-Java运算符（上）</title>
    <link href="/posts/6.html"/>
    <url>/posts/6.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是JDK 8，需要安装的小伙伴请点击右侧连接查看教程：<a href="https://www.icode504.com/posts/1.html">点我查看安装JDK8教程</a>。</p></blockquote><h1 id="一、一元运算符之正负号"><a href="#一、一元运算符之正负号" class="headerlink" title="一、一元运算符之正负号"></a>一、一元运算符之正负号</h1><p>Java支持多种一元运算符，一元运算符中的“一元”是指一个操作数。我们初中学过的正负号就属于一元运算符，因为正负号后面只有一个数字。</p><p><strong>正数使用<code>+</code>表示，其中<code>+</code>可以省略；负数使用<code>-</code>表示</strong>。如果变量的值是数值类型，也可以在变量前面加上正负号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 正负号的表示</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 19:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PlusAndMinusSign</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;    <span class="hljs-comment">// 正数，加号可忽略</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">40</span>;    <span class="hljs-comment">// 负数</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br><br>        <span class="hljs-comment">// 变量的前面也可以加上正负号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -intValue3;<br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br><br>        <span class="hljs-comment">// 加上符号的变量也可以参与运算，以下两个变量相乘得到的结果是相同的</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue5</span> <span class="hljs-operator">=</span> intValue3 * intValue4;  <span class="hljs-comment">// 推荐写法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue6</span> <span class="hljs-operator">=</span> intValue3 * -intValue3;     <span class="hljs-comment">// 不推荐，可读性变差</span><br>        System.out.println(<span class="hljs-string">&quot;intValue5 = &quot;</span> + intValue5);<br>        System.out.println(<span class="hljs-string">&quot;intValue6 = &quot;</span> + intValue6);<br><br>        <span class="hljs-comment">// 负数前面加上负号为正数（负负得正）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue7</span> <span class="hljs-operator">=</span> -(-<span class="hljs-number">20</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue8</span> <span class="hljs-operator">=</span> -intValue4;     <span class="hljs-comment">// intValue4本身的值就是负数</span><br>        System.out.println(<span class="hljs-string">&quot;intValue7 = &quot;</span> + intValue7);<br>        System.out.println(<span class="hljs-string">&quot;intValue8 = &quot;</span> + intValue8);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231006200450682.png"></p><p>根据<code>intValue7</code>和<code>intValue8</code>的输出结果我们可以得知，负号可以改变数值的正负，正数加了负号变负数，负数加负号可以变正数（负负得正）。</p><p>编写代码不推荐<code>int intValue6 = intValue3 * -intValue3;</code>这种写法，虽然能得到预期结果，但是右侧计算的表达式可读性变差，可能会造成误解。</p><h1 id="二、算数运算符"><a href="#二、算数运算符" class="headerlink" title="二、算数运算符"></a>二、算数运算符</h1><h2 id="2-1-算术运算符的基本使用"><a href="#2-1-算术运算符的基本使用" class="headerlink" title="2.1 算术运算符的基本使用"></a>2.1 算术运算符的基本使用</h2><p>在大多数编程语言中，算术运算符基本上由**加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、取余<code>%</code>**（也称“取模”，也就是两个数相除的余数）组成，以上五个运算符在Java中也完全适用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 算术运算符--加减乘除、取余</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-08 7:01</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOperators1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>        <span class="hljs-comment">// 加减乘除运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 + intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 + intValue2 = &quot;</span> + result1);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue1 - intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 - intValue2 = &quot;</span> + result2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue1 * intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 * intValue2 = &quot;</span> + result3);<br>        <span class="hljs-comment">// 两个整除相除，只保留整数部分，不会进行四舍五入操作</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result4</span> <span class="hljs-operator">=</span> intValue1 / intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 / intValue2 = &quot;</span> + result4);<br>        <span class="hljs-comment">// 两个整数取余：22对5取余得到的结果是2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result5</span> <span class="hljs-operator">=</span> intValue1 % intValue2;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 % intValue2 = &quot;</span> + result5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231008071109661.png"></p><p>两个整数运算得到的结果是整数，两个浮点数运算得到的结果是浮点数，<strong>整数和浮点数进行运算时得到的结果是浮点数</strong>（因为整数类型会自动提升为浮点类型）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 整数和浮点数的运算、byte/short/char类型的运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-28 15:47:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathOperators2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义两个变量intValue1，intValue2并赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-comment">// 直接输出intValue1和intValue2相加的和</span><br>        <span class="hljs-comment">// 注意：下方输出时，需要对要计算的表达式加上括号，防止intValue1和intValue2转换成字符串类型</span><br>        System.out.println(<span class="hljs-string">&quot;intValue1 + intValue2 = &quot;</span> + (intValue1 + intValue2));<br><br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br>        <span class="hljs-comment">// byte、short、char进行运算时，会自动提升为int类型计算。</span><br>        <span class="hljs-comment">// 如果转换成想要的小范围数据类型，需要进行强制类型转换</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-comment">// 错误写法:</span><br>        <span class="hljs-comment">// byte byteValue1 = byteValue + shortValue;</span><br>        <span class="hljs-comment">// 正确写法: 将计算的结果转换成小范围数据类型。注意：强制类型转换时需要考虑到数据溢出的问题。</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (byteValue + shortValue);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) (shortValue + charValue);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (byteValue + charValue);       <span class="hljs-comment">// 得到的结果是Unicode字符表中对应的字符</span><br>        System.out.println(<span class="hljs-string">&quot;byteValue1 = &quot;</span> + byteValue1);<br>        System.out.println(<span class="hljs-string">&quot;shortValue1 = &quot;</span> + shortValue1);<br>        System.out.println(<span class="hljs-string">&quot;charValue1 = &quot;</span> + charValue1);<br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br>        <span class="hljs-comment">// 浮点数参与计算：整数会自动提升为浮点类型</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + intValue3 = &quot;</span> + (doubleValue1 + intValue3));<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + doubleValue2 = &quot;</span> + (doubleValue1 + doubleValue2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231008072150038.png"></p><h2 id="2-2-浮点数计算为什么不准确？"><a href="#2-2-浮点数计算为什么不准确？" class="headerlink" title="2.2 浮点数计算为什么不准确？"></a>2.2 浮点数计算为什么不准确？</h2><p>从上述结果我们发现一个问题，<code>double</code>类型的值<code>0.1</code>和<code>0.2</code>相加得到的结果并不是<code>0.3</code>，而是<code>0.30000000000000004</code>，为什么？</p><p>假设有两个浮点数<code>0.1</code>和<code>0.2</code>，如果两个值赋值给<code>float</code>类型和<code>double</code>类型，相加计算是不是0.3？</p><p>我们使用Java代码来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浮点数0.1和0.2分别使用float类型和double类型计算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 17:00:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// float类型相加计算</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2f</span>;<br>        System.out.println(<span class="hljs-string">&quot;floatValue1 + floatValue2 = &quot;</span> + (floatValue1 + floatValue2));<br>        <span class="hljs-comment">// double类型相加计算</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue1 + doubleValue2 = &quot;</span> + (doubleValue1 + doubleValue2));<br>        <br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;doubleValue3 + doubleValue4 = &quot;</span> + (doubleValue3 + doubleValue4));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231006193753117.png"></p><p>此时发现一个问题：<code>doubleValue1 + doubleValue2 = 0.30000000000000004</code>并没有得到我们预期的结果，为什么？</p><p>事实上，<code>0.1 + 0.2</code>的结果在大多数编程语言中进行运算时也会得到上述结果，<a href="https://0.30000000000000004.com/">点我查看</a></p><p>众所周知，计算机在底层计算使用的是二进制。无论是整数还是浮点数都会转换成二进制数进行运算。以下是小数转为二进制数运算的基本流程</p><pre><code class=" mermaid">flowchart LR十进制数 --&gt; 二进制数 --&gt; 科学计数法形式表示二进制数 --&gt; 指数补齐 --&gt; 二进制数相加 --&gt; 还原成十进制数</code></pre><h3 id="2-2-1-十进制小数转为二进制小数"><a href="#2-2-1-十进制小数转为二进制小数" class="headerlink" title="2.2.1 十进制小数转为二进制小数"></a>2.2.1 十进制小数转为二进制小数</h3><p>小数转为二进制数的规则是：将小数乘以2，然后取整数部分作为二进制数的一部分，然后再将小数部分继续乘以2，再取整数部分，以此类推，直到小数部分为0所达到的精度。</p><p>将0.2转换成二进制：<br>$$<br>0.2 \times 2 &#x3D; 0.4 \to 取整数部分0<br>$$</p><p>$$<br>0.4 \times 2 &#x3D; 0.8 \to 取整数部分0<br>$$</p><p>$$<br>0.8 \times 2 &#x3D; 1.6 \to 取整数部分1<br>$$</p><p>$$<br>0.6 \times 2 &#x3D; 1.2\to取整数部分1<br>$$</p><p>$$<br>0.2 \times 2 &#x3D; 0.4\to整数部分为0<br>$$</p><p>此时我们发现，我们对得到的小数怎么乘以2，小数位永远都不是0。因此，使用计算器计算0.2得到的二进制数字为<br>$$<br>0.00110011…(无限循环0011)<br>$$<br>同理，0.1转换成二进制数是：<br>$$<br>0.000110011…(无限循环0011)<br>$$</p><h3 id="2-2-2-二进制小数转为科学计数法表示"><a href="#2-2-2-二进制小数转为科学计数法表示" class="headerlink" title="2.2.2 二进制小数转为科学计数法表示"></a>2.2.2 二进制小数转为科学计数法表示</h3><p>当然，计算机不能存储无限循环小数。Java的<code>double</code>是双精度浮点类型，64位，因此在存储时使用64位存储<code>double</code>浮点数。要想表示尽可能大的数据，就需要使用到科学计数法来表示数据。</p><p>十进制和二进制数都可以转换成相应的科学计数法来表示。</p><p>十进制的科学计数法的表示方式是整数只留个位数，且个位数主要是1到9，通过乘以10的指数来表示。例如：89999用科学计数法表示为$8.9999\times10^4$，0.08586用十进制科学计数法表示为$8.586\times10^{-2}$。</p><p>二进制的科学计数法的表示方式和十进制的类似。<strong>它的个位数使用1来表示，通过乘以2的指数来表示</strong>。</p><p>例如，0.1的二进制数转换成科学计数法表示，小数点需要向右移动4位得到整数部分1；同理，0.2需要向右移动3位。因此0.1和0.2的二进制用科学计数法表示如下：<br>$$<br>1.10011…\times2^{-4}(0011无限循环)<br>$$</p><p>$$<br>1.10011…\times2^{-3}(0011无限循环)<br>$$</p><h3 id="2-2-3-科学计数法的数据转成二进制表示"><a href="#2-2-3-科学计数法的数据转成二进制表示" class="headerlink" title="2.2.3 科学计数法的数据转成二进制表示"></a>2.2.3 科学计数法的数据转成二进制表示</h3><p>Java的double类型是双精度浮点数，<a href="https://baike.baidu.com/item/IEEE%20754">IEEE 754标准</a>对64位浮点数做出了如下的规定：</p><ul><li>最高1位是符号位，0表示正号，1表示负号。</li><li>其后面的11位用来存储科学计数法中指数的二进制。以上述二进制科学计数法为例，这11位数字存储的就是-4的二进制。</li><li>剩下的52位存储二进制科学计数法中小数点的后52位。以上述二进制科学计数法为例，存储的就是<code>10011...</code>之后的52位数字。</li></ul><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231009084527660.png" alt="image-20231009084527660" style="zoom: 80%;" /><p>既然内存已经给出了11位用于表示指数。那么转换成十进制数默认范围就是$[0, 2^{11}]$，即$[0,2048]$。但此时还有一个问题，以上述的二进制科学计数法为例，它的指数是-4，是负数，如何表示负数？需要在11位的头部在单独拿出一位来表示吗？</p><p>并不是，IEEE 754标准将指数为0的基数定为1023（1是1024，相当于存储$[-1023,1024]$范围的数），指数-4会转换成<code>1023 - 4 = 1019</code>，再将1019转换成二进制：1111111011，前面我们说过，指数为11位，需要在前面补零，得到的结果为：<strong>01111111011</strong>。</p><p>剩下的52位也需要处理，但是二进制科学计数法的小数部分也是一个无限循环小数。此时就需要进行舍入计算，0舍1入（类似四舍五入），<strong>舍入计算会让数据丢失精度</strong>。</p><p>此时得到的0.1的二进制：<br>$$<br>0\ 01111111011\ 1001100110011001100110011001100110011001100110011010<br>$$<br>0.2的二进制如下：<br>$$<br>0\ 01111111100\ 1001100110011001100110011001100110011001100110011010<br>$$<br>此时需要对二进制科学计数法提取公因数，为了减少精度损失，遵循小指数转换成大指数的原则。这里较大的指数是-3，因此需要将0.1的二进制科学计数法再乘以2，得到结果如下：<br>$$<br>0\ 01111111011\ (0.)100110011001100110011001100110011001100110011001101<br>$$<br>0.1原有的最后一位需要舍去，让给小数点前的0。此时0.1和0.2的二进制的指数均为-3、</p><p>此时0.1+0.2的小数部分得到的结果是：<br>$$<br>10.0110011001100110011001100110011001100110011001100111<br>$$</p><h3 id="2-2-4-指数补齐"><a href="#2-2-4-指数补齐" class="headerlink" title="2.2.4 指数补齐"></a>2.2.4 指数补齐</h3><p>根据上述结果，我们会发现两个问题：</p><ul><li>整数部分不符合科学计数法的规则。</li><li>二进制数整体得到的结果超过52位。</li></ul><p>首先需要将将结果转换成二进制科学计数法，小数点向左移动一位（相当于乘以2）：<br>$$<br>1.00110011001100110011001100110011001100110011001100111<br>$$<br>指数部分也需要加1，因为指数由-3（1020）变为-2（1021）<br>$$<br>01111111101<br>$$<br>根据0舍1入的原则，将超出52位的小数部分做舍入计算，得到的结果为：<br>$$<br>0\ 01111111101\ (1.)0011001100110011001100110011001100110011001100110100<br>$$</p><h3 id="2-2-5-还原成十进制数"><a href="#2-2-5-还原成十进制数" class="headerlink" title="2.2.5 还原成十进制数"></a>2.2.5 还原成十进制数</h3><p>将二进制科学计数法转换成正常的二进制数，原有的指数是-2，还原时小数点需向左移动两位：<br>$$<br>0.010011001100110011001100110011001100110011001100110100<br>$$</p><p>再转换为十进制为：<br>$$<br>0.30000000000000004<br>$$</p><p>经过上述的复杂推导，我们可以总结出一个结论：使用基本数据类型的浮点数进行运算并不准确（尤其是在金融货币领域对小数点精度要求比较高的不能使用）。那么，有什么办法可以解决浮点数计算不准确的问题？</p><p><strong>方法一（现阶段推荐）：转换成整数计算，得到结果再除以10的n次方</strong>。</p><p>还是以0.1 + 0.2为例，我们可以转换成整数计算，整数计算的结果再除以10，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浮点数计算: 计算0.1 + 0.2的精确结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-09 18:13:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br>        <span class="hljs-comment">// 将doubleValue1和doubleValue2转换成整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempValue1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (doubleValue1 * <span class="hljs-number">10</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempValue2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (doubleValue2 * <span class="hljs-number">10</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempResult</span> <span class="hljs-operator">=</span> tempValue1 + tempValue2;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>) tempResult / <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231009222458278.png"></p><p>此时能得到精确的结果。</p><p><strong>方法二：使用<code>BigDecimal</code>类（这个类后续会讲到，小白可以直接跳过）精确运算</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用BigDecimal类精确计算浮点数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-09 22:26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalCalculation3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.2</span>;<br><br>        <span class="hljs-comment">// 将double类型的值转换成字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">doubleValueString1</span> <span class="hljs-operator">=</span> String.valueOf(doubleValue1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">doubleValueString2</span> <span class="hljs-operator">=</span> String.valueOf(doubleValue2);<br><br>        <span class="hljs-comment">// 使用BigDecimal类进行运算</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">decimal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(doubleValueString1);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">decimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(doubleValueString2);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">resultDecimal</span> <span class="hljs-operator">=</span> decimal1.add(decimal2);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> resultDecimal.doubleValue();<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231009223129893.png"></p><h2 id="2-6-负数的除法和取余规则"><a href="#2-6-负数的除法和取余规则" class="headerlink" title="2.6 负数的除法和取余规则"></a>2.6 负数的除法和取余规则</h2><p>负数的除法规则：<strong>两个负数相除得到的结果是正数，正数除以负数或者负数除以整数结果是负数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负数的除法运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 19:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DivideOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5</span>;<br><br>        <span class="hljs-comment">// 情况一：被除数为正数，除数为负数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 / intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 情况二：被除数为负数，除数为正数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue2 / intValue3;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 情况三：被除数和除数都是负数，得到的结果是正数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span>  <span class="hljs-operator">=</span> intValue2 / intValue4;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007221818423.png"></p><p>负数的取余规则：<strong>被除数如果是正数，求余的结果就是正数；反之，结果为负数</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负数的取余运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 22:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModOperators</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> -<span class="hljs-number">13</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;<br><br>        <span class="hljs-comment">// 情况一：被除数为正数，除数为负数，得到的结果是正数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result1</span> <span class="hljs-operator">=</span> intValue1 % intValue2;<br>        System.out.println(<span class="hljs-string">&quot;result1 = &quot;</span> + result1);<br><br>        <span class="hljs-comment">// 情况二：被除数为负数，除数为正数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result2</span> <span class="hljs-operator">=</span> intValue2 % intValue3;<br>        System.out.println(<span class="hljs-string">&quot;result2 = &quot;</span> + result2);<br><br>        <span class="hljs-comment">// 情况三：被除数和除数都是负数，得到的结果是负数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result3</span> <span class="hljs-operator">=</span> intValue2 % intValue4;<br>        System.out.println(<span class="hljs-string">&quot;result3 = &quot;</span> + result3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007222009322.png"></p><h1 id="三、赋值运算符"><a href="#三、赋值运算符" class="headerlink" title="三、赋值运算符"></a>三、赋值运算符</h1><h2 id="3-1-赋值运算符"><a href="#3-1-赋值运算符" class="headerlink" title="3.1 赋值运算符="></a>3.1 赋值运算符<code>=</code></h2><p>我们知道，创建Java变量的一般语法是：<strong>数据类型 变量名 &#x3D; 变量值</strong>。其中<code>=</code>是赋值运算符，它的作用是<strong>将右侧的值赋值给左边的变量</strong>。</p><ul><li>变量值一般是：常量、已经赋值的变量名或者是可以计算出新数值的表达式。</li><li>赋值运算符<code>=</code>左侧的变量名唯一。</li></ul><p>基本数据类型的变量可以直接赋值，因为基本数据类型保存的是实际值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 赋值运算符 = 的基本使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 6:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 将20赋值给number1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;number1 = &quot;</span> + number1);<br>        <span class="hljs-comment">// 将已经赋值的变量名number1赋值给number2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number2</span> <span class="hljs-operator">=</span> number1;<br>        System.out.println(<span class="hljs-string">&quot;number2 = &quot;</span> + number2);<br>        <span class="hljs-comment">// 可以计算出新数值的表达式赋值给新变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span> + <span class="hljs-number">40</span>;<br>        System.out.println(<span class="hljs-string">&quot;number3 = &quot;</span> + number3);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number4</span> <span class="hljs-operator">=</span> number1 + number2;<br>        System.out.println(<span class="hljs-string">&quot;number4 = &quot;</span> + number4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运算结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231006064803996.png"></p><p>由<code>number1</code>和<code>number2</code>的输出结果可知：变量<code>number1</code>存储的值20赋值给了<code>number2</code>，此时<code>number2</code>的值也是20。</p><p>变量<code>number3</code>和<code>number4</code>右侧是可以计算的表达式，即<code>30 + 40</code>能够直接计算出结果，前面已经赋值的<code>number1 + number2</code>也能计算出结果。</p><p><strong>引用数据类型存储的是一个地址值引用</strong>。例如：<code>Object</code>和<code>String</code>是类，属于引用数据类型。此时我们创建这两个类型的对象并赋值给变量，然后直接输出变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 赋值运算符--引用数据类型变量赋值并输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-06 23:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 第一组：创建两个Object对象分别赋值给object1和object2</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-comment">// 输出两个地址值</span><br>        System.out.println(<span class="hljs-string">&quot;object1 = &quot;</span> + object1);<br>        System.out.println(<span class="hljs-string">&quot;object2 = &quot;</span> + object2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 第二组：让object1指向object2</span><br>        object2 = object1;<br>        System.out.println(<span class="hljs-string">&quot;object1 = &quot;</span> + object1);<br>        System.out.println(<span class="hljs-string">&quot;object2 = &quot;</span> + object2);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 第三组：创建两个String对象分别赋值给string1和string2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">string1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">string2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br>        System.out.println(<span class="hljs-string">&quot;string1 = &quot;</span> + string1);<br>        System.out.println(<span class="hljs-string">&quot;string2 = &quot;</span> + string2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007065141822.png"></p><p>前两组输出结果的格式我们发现，它们是以<code>java.lang.Object</code>、<code>@</code>和变量在物理内存中的地址（十六进制数）。</p><ul><li>其中<code>java.lang.Object</code>叫做<strong>全限定类名</strong>。全限定类名是指当前类所属的<strong>包名</strong>（包名会在后续文章中讲到）和<strong>类名</strong>组成。<code>Object</code>是类名，<code>java.lang</code>是<code>Object</code>类所在的包名。</li><li><code>@</code>后面的就是变量在内存中的存储地址。如果你使用上述命令将代码输出，那么得到的地址值和上述的内容不同，因为变量的地址值是内存随机分配的。</li></ul><p>第一组的<code>object1</code>和<code>object2</code>分别创建了Object对象，相当于在栈内存和堆内存中分别开辟了两块不同的空间，栈内存中存储的变量地址和堆内存中开辟的内存地址一一对应，因此<code>object1</code>和<code>object2</code>的地址值不同。第一组的<code>object1</code>和<code>object2</code>在内存的表现形式如下：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007071809712.png" alt="image-20231007071809712" style="zoom:80%;" /><p>第二组，我们发现<code>object1</code>赋值给了<code>object2</code>，在栈内存中的表现形式是当前变量<code>object2</code>的地址值赋值给<code>object1</code>。原来<code>object2</code>在堆内存中创建的对象不再被引用，虚拟机后续会对此对象进行回收。</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007215157582.png" alt="image-20231007215157582" style="zoom:80%;" /><p>我们发现第三组两个<code>String</code>对象的输出结果什么都看不到，它们也是引用数据类型，难道不输出地址值吗？事实上，在源码层面，<code>String</code>做了进一步处理。</p><p>我们使用<code>new String()</code>创建对象时，会调用<code>String</code>的构造器（构造器，也叫做构造方法，后续会讲到），打开源码观察这个构造器：</p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007220335076.png" alt="image-20231007220335076" style="zoom:80%;" /><p>在调用空参构造器时就已经初始化一个空字符串值了，因此我们在输出<code>String</code>对象时输出的是空字符串，此时我们看不到任何内容就显得比较合理了。</p><h2 id="3-2-其他赋值运算符"><a href="#3-2-其他赋值运算符" class="headerlink" title="3.2 其他赋值运算符"></a>3.2 其他赋值运算符</h2><p>假设有一个<code>int</code>类型变量<code>intValue</code>的值是20，此时我在此基础上再加上20再赋值给<code>intValue</code>，得到的表达式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>intValue = intValue + <span class="hljs-number">20</span>;<span class="hljs-comment">// 此时intValue的结果为40</span><br></code></pre></td></tr></table></figure><p>Java给我们提供了<code>+=</code>运算符可以简化当前的代码<code>intValue = intValue + 20;</code>，使用<code>+=</code>可以简化成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>intValue += <span class="hljs-number">20</span>;<span class="hljs-comment">// 得到的结果也是40，相当于intValue = intValue + 20;</span><br></code></pre></td></tr></table></figure><p>除了<code>+=</code>以外，<code>-=</code>、<code>*=</code>、<code>/=</code>和<code>%=</code>的作用机制和<code>+=</code>完全相同。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td><code>+=</code></td><td>加并赋值运算符：先相加，得到的结果再赋值</td><td><code>i = i + 20</code>可以简写成<code>i += 20</code></td></tr><tr><td><code>-=</code></td><td>减并赋值运算符：先相减，得到的结果再赋值</td><td><code>i = i - 20</code>可以简写成<code>i -= 20</code></td></tr><tr><td><code>*=</code></td><td>乘并赋值运算符：先相乘，得到的结果再赋值</td><td><code>i = i * 20</code>可以简写成<code>i *= 20</code></td></tr><tr><td><code>/=</code></td><td>除并赋值运算符：先相除，得到的结果再赋值</td><td><code>i = i / 20</code>可以简写成<code>i /= 20</code></td></tr><tr><td><code>%=</code></td><td>取余并赋值运算符：先取余，得到的结果再赋值</td><td><code>i = i % 20</code>可以简写成<code>i %= 20</code></td></tr></tbody></table><p>以下是5个运算符在代码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 其他赋值运算符+=、-=、*=、/=和%=的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 20:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue3</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue4</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue5</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><br>        intValue1 += <span class="hljs-number">30</span>;<br>        intValue2 -= <span class="hljs-number">40</span>;<br>        intValue3 *= <span class="hljs-number">50</span>;<br>        intValue4 /= <span class="hljs-number">10</span>;<br>        intValue5 %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;intValue1 = &quot;</span> + intValue1);<br>        System.out.println(<span class="hljs-string">&quot;intValue2 = &quot;</span> + intValue2);<br>        System.out.println(<span class="hljs-string">&quot;intValue3 = &quot;</span> + intValue3);<br>        System.out.println(<span class="hljs-string">&quot;intValue4 = &quot;</span> + intValue4);<br>        System.out.println(<span class="hljs-string">&quot;intValue5 = &quot;</span> + intValue5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007203213625.png"></p><p><code>byte</code>、<code>short</code>、<code>char</code>三者使用上述赋值运算符时，不需要进行强制类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * byte、short、char使用赋值运算符</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-10-07 20:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignmentOperator4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue1</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue2</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        byteValue1 += byteValue2;<br>        System.out.println(<span class="hljs-string">&quot;byteValue1 = &quot;</span> + byteValue1);<br>        byteValue1 += <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;byteValue2 = &quot;</span> + byteValue2);<br><br>        charValue += byteValue1;<br>        shortValue += charValue;<br>        byteValue2 += shortValue;<br>        System.out.println(<span class="hljs-string">&quot;charValue = &quot;</span> + charValue);<br>        System.out.println(<span class="hljs-string">&quot;shortValue = &quot;</span> + shortValue);<br>        System.out.println(<span class="hljs-string">&quot;byteValue2 = &quot;</span> + byteValue2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20231007211517616.png"></p><p>使用赋值运算符的优势包括：</p><p>1. 简洁性：使用<code>+=</code>可以在一行内同时完成加法计算和赋值操作，让代码更加简洁。例如：<code>i += 20</code>就是<code>i = i + 20</code>的简化写法（其他赋值运算符亦同理）。</p><p>2. 性能优势：在某些情况下，赋值运算符要比单独的加法和赋值操作更快。</p><p>总的来说，使用赋值运算符可以增加代码的简洁性，提高性能，并使代码更易于阅读和理解。</p><hr/><p>参考资料：</p><p><a href="https://juejin.cn/post/6947874934702112804">0.1 + 0.2为什么不等于0.3？</a></p><p><a href="https://juejin.cn/post/7005830819851796487">0.1+0.2为什么不等于0.3，以及怎么等于0.3</a></p><p><a href="https://juejin.cn/post/6844903946004201486">0.1 + 0.2 为什么不等于 0.3？？？</a></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之四-字符串String的简单使用</title>
    <link href="/posts/5.html"/>
    <url>/posts/5.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文中使用到的工具是JDK 8，需要安装的小伙伴请点击右侧连接查看教程：<a href="https://www.icode504.com/posts/1.html">点我查看安装JDK8教程</a>。</p></blockquote><h1 id="一、什么是字符串？"><a href="#一、什么是字符串？" class="headerlink" title="一、什么是字符串？"></a>一、什么是字符串？</h1><p>在Java编程语言中，字符串用于表示文本数据。</p><p>字符串（<code>String</code>）属于引用数据类型，根据<code>String</code>的源码，其头部使用<code>class</code>进行修饰，属于类，即引用数据类型。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230909092329429.png"></p><h1 id="二、字符串的表示"><a href="#二、字符串的表示" class="headerlink" title="二、字符串的表示"></a>二、字符串的表示</h1><p><strong>字符串使用双引号<code>&quot;&quot;</code>表示</strong>，在双引号中你可以写任意字符。</p><p>和前面定义并初始化基本数据类型的变量一样，定义最简单的字符串可以用如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String 变量名 = <span class="hljs-string">&quot;任意字符&quot;</span>;<br></code></pre></td></tr></table></figure><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串最简单的定义</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 09:30:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义并初始化String类型的变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;浔阳江头夜送客，枫叶荻花秋瑟瑟。&quot;</span>;<br>        System.out.println(myString);<br>        myString = <span class="hljs-string">&quot;主人下马客在船，举酒欲饮无管弦。&quot;</span>;<br>        System.out.println(myString);<br>        <span class="hljs-comment">// 当然，你也可以不在双引号中写任意内容，即“空字符串”</span><br>        myString = <span class="hljs-string">&quot;&quot;</span>;<br>        System.out.println(myString);<br>        <span class="hljs-comment">// 直接输出字符串</span><br>        System.out.println(<span class="hljs-string">&quot;醉不成欢惨将别，别时茫茫江浸月。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230909093742973.png"></p><h1 id="三、转义字符"><a href="#三、转义字符" class="headerlink" title="三、转义字符"></a>三、转义字符</h1><p>使用<code>\</code>和某个特定字符可以更改其原有的字符含义。</p><p>例如：</p><ul><li><p><strong><code>\n</code>能够换行</strong>（相当于按了一下<kbd>Enter</kbd>键）；</p></li><li><p><strong><code>\t</code>具有制表符效果</strong>（相当于按了一下<kbd>Tab</kbd>键）；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转义字符--换行符\n和制表符\t的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 11:49:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscapeCharacters</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 换行符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;窈窕淑女\n寤寐求之&quot;</span>;<br>        <span class="hljs-comment">// 制表符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;求之不得\t寤寐思服&quot;</span>;<br>        System.out.println(myString1);<br>        System.out.println(myString2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230909115309017.png"></p><p>前面我们说过，字符串是使用英文的双引号表示，如果我想在双引号内直接输出双引号会报错，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 错误写法，因为最左侧的双引号只能识别到最近的双引号，其他双引号会导致无法识别而无法通过编译</span><br><span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>悠哉游哉，辗转反侧<span class="hljs-string">&quot;是《诗经》中经典名句&quot;</span>;<br></code></pre></td></tr></table></figure><p>那么，如果我们需要在双引号内部表示出字符串怎么办？使用<code>\&quot;</code>表示双引号，如果想要表示反斜杠（Windows的文件路径会使用到），要写成<code>\\</code>。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转义字符--双引号和反斜杠的输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 16:23:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EscapeCharacters1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用\&quot;表示双引号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\&quot;悠哉游哉，辗转反侧\&quot;是《诗经》中经典名句&quot;</span>;<br>        System.out.println(myString1);<br>        <span class="hljs-comment">// \\表示反斜杠</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;参差荇菜\\左右采之&quot;</span>;<br>        System.out.println(myString2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230909163649777.png"></p><h1 id="四、字符串的简单应用"><a href="#四、字符串的简单应用" class="headerlink" title="四、字符串的简单应用"></a>四、字符串的简单应用</h1><h2 id="4-1-获取字符串的长度"><a href="#4-1-获取字符串的长度" class="headerlink" title="4.1 获取字符串的长度"></a>4.1 获取字符串的长度</h2><p>字符串的长度取决于字符串中写了多少个字符（转义字符算一个字符），如果是空字符串，那么字符串的长度为0。</p><p>可以使用**<code>length()</code>方法获取当前字符串的长度**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串长度获取</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 09:44:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringLength</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;关关雎鸠，在河之洲。&quot;</span>;<br>        <span class="hljs-comment">// 获取字符串的长度（双引号内所有字符的数量）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> myString.length();<br>        System.out.println(length);<br>        myString = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 获取空字符串的长度</span><br>        length = myString.length();<br>        System.out.println(length);<br>        <span class="hljs-comment">// 转义字符算一个字符</span><br>        myString = <span class="hljs-string">&quot;E:\\Code&quot;</span>;<br>        length = myString.length();<br>        System.out.println(length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230925095455512.png"></p><h2 id="4-2-字符串的简单拼接"><a href="#4-2-字符串的简单拼接" class="headerlink" title="4.2 字符串的简单拼接"></a>4.2 字符串的简单拼接</h2><p>假设当前有两个字符串<code>str1</code>和<code>str2</code>，二者的值分别是<code>&quot;窈窕淑女&quot;</code>和<code>&quot;君子好逑&quot;</code>，如果我想将二者拼接成一个字符串该怎么办？</p><p>可以使用<code>+</code>拼接两个字符串。注意：<strong>这里的<code>+</code>并不是算术意义上的加号，它在字符串中只负责拼接的作用</strong>。<strong>只要<code>+</code>一侧有字符串，那么这个<code>+</code>就会将另一侧的数据类型变为字符串类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用+拼接字符串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-09 11:14:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringSplicing1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;窈窕淑女&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myString2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;君子好逑&quot;</span>;<br>        <span class="hljs-comment">// 两个字符串拼接，结果仍为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> myString1 + myString2;<br>        System.out.println(result);<br><br>        System.out.println(<span class="hljs-string">&quot;--------------------&quot;</span>);<br>        <span class="hljs-comment">// 字符串拼接基本数据类型的数据</span><br>        System.out.println(myString1 + <span class="hljs-number">20</span>);<br>        System.out.println(myString1 + <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">20</span>);<br>        System.out.println(myString1 + <span class="hljs-number">20.34</span>);<br>        System.out.println(myString1 + <span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230909112428736.png"></p><p>后四个输出结果中我们可以得知：<code>+</code>右侧的基本数据类型自动转换成字符串，然后<code>+</code>对左右两侧的字符串进行拼接形成新的字符串进行输出。</p><p>但与此同时，我们也发现另外一种情况：<code>System.out.println(myString1 + &#39;A&#39; + 20);</code>，它得到的结果是<code>窈窕淑女A20</code>，如果我想对后两者先计算后拼接，可以直接使用小括号对后两者优先计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(myString1 + (<span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><p>此时加上括号以后，会先计算<code>&#39;A&#39;</code>和<code>20</code>相加的结果，此时<code>&#39;A&#39;</code>会自动提升为<code>int</code>类型的值为<code>65</code>，<code>65</code>和<code>20</code>相加的结果就是<code>85</code>，输出结果就是<code>85</code></p><p>前期学习过程中，使用<code>+</code>拼接字符串比较方便。当然，在后续深入学习字符串的过程中，我们会使用比<code>+</code>更加高效的方法。</p><h1 id="五、类和对象简介"><a href="#五、类和对象简介" class="headerlink" title="五、类和对象简介"></a>五、类和对象简介</h1><p><a href="https://www.icode504.com/posts/4.html">前面</a>我们提过，引用数据类型一共分为5种：类、接口、数组、枚举、注解。</p><p>类（Class）和对象（Object）是面向对象编程的两个核心概念。</p><p>类是对现实世界事物的抽象，它是一种定义了<strong>属性</strong>（Fields）和<strong>方法</strong>（Methods）的蓝图和模板，用于创建对象。</p><ul><li><p>属性（Fields）是<strong>类中的变量</strong>，它们用于存储对象的状态和特征。</p></li><li><p>方法（Methods）是一种可重用的代码块，它用于<strong>执行特定的任务操作</strong>。方法是类和对象的一部分，它规定了如何执行特定的操作和计算。一个方法包含如下部分：</p><ul><li><strong>方法名</strong>：用于描述方法的功能。</li><li><strong>返回类型</strong>：指定方法的返回值的数据类型。如果方法没有任何返回值，返回类型为<code>void</code>。</li><li><strong>参数列表</strong>：包含方法需要的输入值，如果有多个参数，它们使用逗号进行分隔。</li><li><strong>方法体</strong>：包括方法执行代码，通常包含一系列的语句。</li></ul></li></ul><p>我们可以定义一个<code>Keyboard</code>（键盘）类，这个类具有如下属性：键盘的宽度<code>width</code>、高度<code>height</code>、重量<code>weight</code>、颜色<code>color</code>、轴体数量<code>count</code>（87键、108键等）。方法有：开启键盘背景灯<code>turnOnBackLight</code>、敲击某个键<code>click</code></p><p>创建一个键盘类<code>Keyboard</code>，类是由<code>class</code>修饰的，类名要符合标识符命名规范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在这个类中，我们可以定义上述属性，轴体数量<code>count</code>为<code>int</code>类型、键盘宽度、高度、重量为<code>double</code>类型，其他的都为<code>String</code>类型。在类中定义如下属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keyboard</span> &#123;<br>    <span class="hljs-comment">// 键盘宽度</span><br>    <span class="hljs-type">double</span> width;<br>    <span class="hljs-comment">// 键盘高度</span><br>    <span class="hljs-type">double</span> height;<br>    <span class="hljs-comment">// 键盘重量</span><br>    <span class="hljs-type">double</span> weight;<br>    <span class="hljs-comment">// 键盘颜色</span><br>    String color;<br>    <span class="hljs-comment">// 按键数量</span><br>    <span class="hljs-type">int</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘有如下功能：敲击<code>click</code>、开背景灯<code>turnOnBackLight</code>，这两项功能可以写进类，在类中作为方法存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 键盘类--包含属性和方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:44:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyBoard</span> &#123;<br>    <span class="hljs-comment">// 键盘宽度</span><br>    <span class="hljs-type">double</span> width;<br>    <span class="hljs-comment">// 键盘高度</span><br>    <span class="hljs-type">double</span> height;<br>    <span class="hljs-comment">// 键盘重量</span><br>    <span class="hljs-type">double</span> weight;<br>    <span class="hljs-comment">// 键盘颜色</span><br>    String color;<br>    <span class="hljs-comment">// 键盘数量</span><br>    <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启键盘背景灯的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnBackLight</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启键盘灯&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敲击键盘某个键的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 传入敲击的单个字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">click</span><span class="hljs-params">(<span class="hljs-type">char</span> key)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;敲击了&quot;</span> + key + <span class="hljs-string">&quot;键&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，“键盘”这张图纸（模板）就创建好了。</p><p>在这个类中，我们发现两个方法的返回值类型都为<code>void</code>，方法体的功能都是输出一句话。其中<code>click</code>方法传入了一个<code>char</code>类型的值。在方法上建议编写注释，便于了解这个方法的功能。</p><p>对象（Object）是类的实例。创建对象的过程称为<strong>实例化</strong>。每个对象都有其自身的属性和方法，这些属性和方法定义在类中。在Java中，每个对象都有一个引用变量，该变量存储对象的内存地址。通过引用变量，可以访问和修改对象的属性和方法。</p><p>我们可以利用上述图纸来打造一款键盘（创建对象）了，使用**<code>new</code>**关键字来创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建键盘类对象，并为属性赋值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:48:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyKeyBoardTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">KeyBoard</span> <span class="hljs-variable">keyBoard</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBoard</span>();<br>        System.out.println(keyBoard.width);<br>        System.out.println(keyBoard.height);<br>        System.out.println(keyBoard.weight);<br>        System.out.println(keyBoard.color);<br>        System.out.println(keyBoard.count);<br>        System.out.println(<span class="hljs-string">&quot;----------分割线----------&quot;</span>);<br><br>        keyBoard.width = <span class="hljs-number">35.55</span>;<br>        keyBoard.height = <span class="hljs-number">12.22</span>;<br>        <span class="hljs-comment">// 重量按公斤算</span><br>        keyBoard.weight = <span class="hljs-number">2.02</span>;<br>        keyBoard.color = <span class="hljs-string">&quot;天蓝色&quot;</span>;<br>        keyBoard.count = <span class="hljs-number">87</span>;<br>        System.out.println(<span class="hljs-string">&quot;键盘的宽度是: &quot;</span> + keyBoard.width + <span class="hljs-string">&quot;cm&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的高度是: &quot;</span> + keyBoard.height + <span class="hljs-string">&quot;cm&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的重量是: &quot;</span> + keyBoard.weight + <span class="hljs-string">&quot;kg&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;键盘的颜色是: &quot;</span> + keyBoard.color);<br>        System.out.println(<span class="hljs-string">&quot;键盘一共有&quot;</span> + keyBoard.count + <span class="hljs-string">&quot;个键&quot;</span>);<br>        keyBoard.turnOnBackLight();     <span class="hljs-comment">// 调用开启键盘背景灯的方法</span><br>        keyBoard.click(<span class="hljs-string">&#x27;D&#x27;</span>);        <span class="hljs-comment">// 调用按下某个键的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230925092021916.png"></p><p>创建对象以后，依照目前编写的代码来看，我们可以直接使用**<code>对象名.属性名</code>**获取到属性值。</p><p>在分割线之前的输出中，我们并没有给每一个属性进行赋值，因此在分割线之前输出的是各种类型的默认值：<strong>整数类型默认值是0，浮点类型默认值为0.0，字符类型默认值是Unicode字符表的第一个字符，布尔类型默认值是<code>false</code>，引用数据类型的默认值为<code>null</code>（<code>null</code>在后面会讲到）</strong>。</p><p>因此：前三个属性在类中是<code>double</code>类型，所以输出的值都是0.0，<code>String</code>为引用数据类型，输出结果为<code>null</code>，最后一个为<code>int</code>类型，输出默认值为0。</p><p>分割线后五行我们为属性进行赋值，此时分割线后五行的内容就是我们赋值后的结果。</p><p>对象在调用方法时使用**<code>对象名.方法名</code><strong>，</strong>如果方法在定义时有相应类型的参数，则传入参数值的顺序、数量、类型必须和类中定义的方法保持一致**。在上述测试代码中，调用了无参的<code>turnOnBackLight</code>方法和一个参数的<code>click</code>方法，在类中定义的<code>click</code>方法有一个<code>char</code>类型的参数，因此传入的值必须是<code>char</code>类型，因此将字符<code>&#39;D&#39;</code>传入<code>click</code>方法是正确的。</p><p>当然，这一部分只是类和对象的冰山一角，更具体的内容需要到后续的文章中继续学习。</p><h1 id="六、引用数据类型默认值：null"><a href="#六、引用数据类型默认值：null" class="headerlink" title="六、引用数据类型默认值：null"></a>六、引用数据类型默认值：null</h1><h2 id="6-1-null的定义与使用"><a href="#6-1-null的定义与使用" class="headerlink" title="6.1 null的定义与使用"></a>6.1 null的定义与使用</h2><p><code>null</code>是Java的关键字，只能小写，不可随意更改。对于Java程序员来说，<code>null</code>是一个令人反感（咬牙切齿）的存在。</p><p><code>null</code>主要是用在引用对象无法确定的情况。比如说，我在<code>main</code>方法中定义一个字符串，但是这个字符串具体值是什么无法确定，但是在方法中只定义变量而不赋值是不能通过编译的，此时我们可以使用<code>null</code>赋值给字符串对象。</p><p><strong><code>null</code>是引用数据类型的默认值</strong>。以<code>String</code>类为例，<code>String</code>就是一个引用数据类型，因此将<code>null</code>赋值给<code>String</code>类型的变量是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;iCode504&quot;</span>;<br><span class="hljs-comment">// 将null赋值给String</span><br>str = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><code>null</code>并不是一个有效的对象实例，如果给一个对象赋值为<code>null</code>，那么当前对象引用当前不引用对象。</p><p><code>&quot;iCode504&quot;</code>是在内存中实际存在的字符串，它在内存表现形式如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230925101945789.png"></p><p>如果将<code>str</code>赋值为<code>null</code>，那么它不会指向堆内存中的对象。也就是说，在堆内存中原有的字符串对象会等待JVM（Java虚拟机）垃圾回收机制进行回收。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230925102249365.png"></p><p><code>null</code>不可以赋值给基本数据类型的变量。以下的写法都是错误的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以下写法都是错误的，因为null只能赋值给引用数据类型</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">longValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">doubleValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">booleanValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>如果引用数据类型的变量值为<code>null</code>，直接调用引用数据类型的方法会产生空指针（NullPointerException，<del>臭名昭著</del>）异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用数据类型的默认值--null</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 09:37:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullValue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 引用数据类型的默认值，赋值给String是合法的</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        System.out.println(str);<br>        <span class="hljs-comment">// 间接调用null会出现NullPointerException空指针异常，开发过程中要尽量避免这种情况的发生</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str.length();<br>        System.out.println(length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230910094330303.png"></p><h2 id="6-2-空字符串与null的区别"><a href="#6-2-空字符串与null的区别" class="headerlink" title="6.2 空字符串与null的区别"></a>6.2 空字符串与null的区别</h2><p>在Java中，空字符串<code>&quot;&quot;</code>和<code>null</code>是两种不同概念，它们在内存中表示和处理方式有很大区别。</p><p>空字符串<code>&quot;&quot;</code>：在Java中，空字符串是一个包含0个字符的字符串示例。当我们创建一个空字符串变量时，它会在内存中占用空间，并且这个对象是分配给<code>String</code>对象的。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面代码中，<code>str</code>是指向<code>String</code>对象的引用，而这个<code>String</code>对象在内存中会占用一定的空间，只是它包含的字符数为0。以下是<code>String str = &quot;&quot;;</code>在JDK 8版本中，内存简要存储情况图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230922235045584.png"></p><p><code>null</code>：在Java中，<code>null</code>和<code>0~9</code>一样都是字面值，表示对象引用不指向任何对象，<code>null</code>是一个特殊值，表示一个引用类型变量没有实际值，声明一个引用类型变量但是不给变量赋值，它的默认值就是<code>null</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>String name;<span class="hljs-comment">// 不给name属性赋值，创建Cat对象并调用这个属性，默认输出为null</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CatTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        System.out.println(cat.name);<span class="hljs-comment">// 输出结果为null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230923073448725.png"></p><p>总结：空字符串<code>&quot;&quot;</code>是一个包含0个字符的字符串实例，它在内存中占用空间。而<code>null</code>是一个字面值，表示对象引用不指向任何对象。</p><h2 id="6-3-null的其他作用"><a href="#6-3-null的其他作用" class="headerlink" title="6.3 null的其他作用"></a>6.3 null的其他作用</h2><p>1. 可以使用比较运算符<code>==</code>来判断一个引用数据类型是否为<code>null</code>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>System.out.println(<span class="hljs-literal">null</span> == str);<span class="hljs-comment">// 判断引用数据类型String是否为null</span><br></code></pre></td></tr></table></figure><p>2. <code>null</code>本身不是对象，也不是任何类型的实例。我们可以使用<code>instanceof</code>运算符判断引用数据类型变量或值是否属于当前类型，此时我们使用<code>null</code>来判断它是否属于<code>Object</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * null是否属于Object类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZhaoCong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-10 10:39:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullTypeCheck</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> Object) &#123;<br>            System.out.println(<span class="hljs-string">&quot;null属于Object类型&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;null不属于Object类型&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230925104106704.png"></p><p>Object类是所有类的父类，而输出结果中我们也可以判断出<code>null</code>不属于<code>Object</code>类型，它不属于任何类型的实例。</p><p>关于null的更多知识，详见如下文章：<a href="https://blog.51cto.com/lavasoft/79243">深入关键字null</a>、<a href="https://blog.csdn.net/qq_25077777/article/details/80174763">java中的null类型—有关null的9件事</a></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之三-基本数据类型及其转换</title>
    <link href="/posts/4.html"/>
    <url>/posts/4.html</url>
    
    <content type="html"><![CDATA[<p>Java的数据类型分为基本数据类型和引用数据类型，具体分类如下图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="Java数据类型"></p><p>对于初学者而言，认为字符串类型<code>String</code>也属于基本数据类型，事实上<code>String</code>属于类，即引用数据类型。从<code>String</code>的源码中，我们就可以看出其使用的<code>class</code>关键字进行修饰：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906093750819.png"></p><p>观察上述结构图我们可以发现Java的八种基本类型又可以细分成四类：整数类型、浮点类型、字符类型和布尔类型。本文将会对这四大类型一一进行讲解。</p><h1 id="一、整数类型"><a href="#一、整数类型" class="headerlink" title="一、整数类型"></a>一、整数类型</h1><p>整数类型，简称整型。Java中存储整型由四个类型组成：**<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>**。其中<code>int</code>类型最常用。这四个数据类型的对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储大小</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><code>byte</code></td><td align="center">8位，1字节</td><td align="center">[-128, 127]</td><td align="center">0</td></tr><tr><td align="center"><code>short</code></td><td align="center">16位，2字节</td><td align="center">[-2<sup>16-1</sup>,2<sup>16-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>int</code>（默认）</td><td align="center">32位，4字节</td><td align="center">[-2<sup>32-1</sup>,2<sup>32-1</sup>-1]</td><td align="center">0</td></tr><tr><td align="center"><code>long</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>64-1</sup>,2<sup>64-1</sup>-1]</td><td align="center">0L</td></tr></tbody></table><p>在定义这四个类型的变量时，需要注意定义的整数不要超过其存储范围（尤其是<code>byte</code>类型，因为它的存储范围最小）。</p><p>例如：我想定义一个<code>byte</code>、<code>short</code>、<code>int</code>类型的变量并赋值，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:44:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br>        System.out.println(b);<br>        System.out.println(s);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906094554236.png"></p><p>在使用<code>long</code>类型的时候需要注意：**<code>long</code>类型的数据后面需要加上<code>L</code>或<code>l</code>**（不推荐小写<code>l</code>，因为小写<code>l</code>很有可能和数字1或者大写字母I混淆）。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型long的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 09:53:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeLong</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6666666666666666666L</span>;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906095442555.png"></p><p>细心的小伙伴会发现，为什么变量<code>num1</code>的值<code>88</code>后面没有加上后缀<code>L</code>呢？</p><p>由于整型的默认使用的<code>int</code>类型，而<code>long</code>类型的范围比<code>int</code>大，因此数字<code>88</code>会由<code>int</code>类型自动提升为<code>long</code>类型，这种现象称作<strong>自动类型提升</strong>（本文后面会讲到自动类型提升）。因此<code>long num1 = 88;</code>并不会报语法错误。</p><p>而变量<code>num2</code>的值<code>6666666666666666666</code>已经超出了<code>int</code>类型的最大范围，但是这个数字在<code>long</code>范围内，此时就必须要加上后缀<code>L</code>。</p><p>以下是对定义<code>long</code>类型变量的总结说明：</p><table><thead><tr><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>在<code>int</code>范围内的数字，可以用<code>L</code>或<code>l</code>表示<code>long</code>类型，也可以不使用后缀。</td><td><code>long num1 = 32;</code><br /><code>long num2 = 43L;</code></td></tr><tr><td>如果表示的数字在<code>int</code>范围之外，但是在<code>long</code>的范围之内，则必须使用<code>L</code>或<code>l</code>作为后缀。</td><td><code>long num = 66666666666666L;</code></td></tr></tbody></table><p>如果你并不能确定所定义的整数是否在<code>int</code>范围，我个人的建议就是**只要定义<code>long</code>类型的整数，就在数字后面加个后缀<code>L</code>**。</p><h1 id="二、浮点类型"><a href="#二、浮点类型" class="headerlink" title="二、浮点类型"></a>二、浮点类型</h1><p>浮点类型，其实就是我们说的小数类型。浮点类型主要由<code>float</code>和<code>double</code>类型组成。其中，**<code>float</code>类型的数值后必须要加<code>f</code>或<code>F</code>为后缀**，二者对照表如下所示：</p><table><thead><tr><th align="center"></th><th align="center">计算机存储位数</th><th align="center">存储范围（使用数学开闭区间表示）</th><th align="center">数字后缀</th><th align="center">默认值</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center"><code>float</code></td><td align="center">32位，4字节</td><td align="center">[-2<sup>128</sup>,2<sup>128</sup>]</td><td align="center"><strong><code>f</code>或<code>F</code>（必须写后缀）</strong></td><td align="center">0.0f或0.0F</td><td align="center">7位小数</td></tr><tr><td align="center"><code>double</code></td><td align="center">64位，8字节</td><td align="center">[-2<sup>1024</sup>,2<sup>1024</sup>]</td><td align="center"><code>d</code>或<code>D</code>（非强制要求，一般不写后缀）</td><td align="center">0.0</td><td align="center">15位小数</td></tr></tbody></table><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基础数据类型float和double</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:25:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeFloatAndDouble</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.88f</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.44F</span>;   <span class="hljs-comment">// 使用F或f最为后缀都可以</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0f</span> / <span class="hljs-number">3f</span>;<br>        System.out.println(f1);<br>        System.out.println(f2);<br>        System.out.println(f3);<br>        System.out.println(f4);<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.66D</span>;  <span class="hljs-comment">// double的后缀可有可无</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>;<br><br>        System.out.println(d1);<br>        System.out.println(d2);<br>        System.out.println(d3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906152845268.png"></p><p>为什么<code>d2</code>的输出结果是8.0？由于8默认为<code>int</code>类型，给变量<code>d2</code>赋值时，<code>int</code>类型的数值会向范围更大的<code>double</code>转换（自动类型提升，在后面文章会讲到），而<code>double</code>是浮点类型，后面需要跟随小数点，默认会在后面加上<code>.0</code>（一位小数），即输出结果为8.0。同理，<code>f3</code>的输出结果为6.0。</p><p>从输出结果中我们还能看出，<code>10 / 3</code>得到的是无限循环小数，但是<code>float</code>类型变量<code>f4</code>输出结果保留了7位小数，而<code>double</code>类型变量<code>d3</code>输出结果保留了15位小数。由这两个输出结果可以印证两个浮点类型的精度大小。</p><p>在日常使用过程中，使用<code>double</code>的次数要比<code>float</code>多，个人总结有如下三点：</p><ol><li><code>float</code>类型数值需要在必须其后面加上<code>f</code>和<code>F</code>，而<code>double</code>不需要在值后面加后缀符。</li><li><code>double</code>存储范围比<code>float</code>的大，并且浮点类型数值默认类型就是<code>double</code>。</li><li><code>double</code>的精度要比 <code>float</code>的高，表示的数值更加准确。</li></ol><h1 id="三、字符类型"><a href="#三、字符类型" class="headerlink" title="三、字符类型"></a>三、字符类型</h1><p>字符类型，即<code>char</code>类型，用来<strong>存储单个字符，使用单引号和单个字符表示</strong>，因此在单引号中写多个字符是错误写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<span class="hljs-comment">// 正确写法</span><br><span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ijk&#x27;</span>;<span class="hljs-comment">// 错误写法，单引号中只能写一个字符！</span><br></code></pre></td></tr></table></figure><p><code>char</code>是一个单一的16位的Unicode字符，它的存储范围是<code>[0,65535]</code>，即<code>&#39;\u0000&#39;</code>到<code>&#39;\uffff&#39;</code>。</p><p>这里会有小伙伴问：<code>char</code>不是只能表示单个字符吗？这就要说到Unicode字符表了，这个表存储了所有的字符（各种符号、中文英文等各种字符），Unicode字符表中的每个字符默认使用的是以<code>\u</code>和十六进制数组合表示，也就是说<code>\u0000</code>就是一个Unicode值，这个Unicode值对应着字符表中的一个字符。</p><p>Unicode字符表中存储了所有的可用的字符，<code>\u0000</code>其实表示的时候Unicode字符表中第一个字符，编写测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之char</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:18:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeChar1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用Unicode字符表中的字符来初始化char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>        <span class="hljs-comment">// 会输出，但是无法在控制台显示出来</span><br>        System.out.println(ch1);<br>        <span class="hljs-comment">// 利用if方法判断ch1是否是Unicode字符表中的第一个字符</span><br>        <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;\u0000&#x27;</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1是Unicode字符表中的第一个字符&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;ch1不是第一个字符&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906162315218.png"></p><p>代码中我写了三个输出语句，其中第一个直接输出这个字符，但是从运行结果中我们发现这个语句确实输出了，但是控制台无法显示这个字符。</p><p>为了进一步验证输出的字符是否是Unicode字符表第一个字符，这里我使用了一个<code>if</code>判断。如果我们定义变量和<code>\u0000</code>相等时，输出<code>ch1是Unicode字符表中的第一个字符</code>，此时也就说明了第一个字符确实在计算机中存在，只是无法正常显示；相反，<code>\u0000</code>并不是Unicode字符表中的第一个字符。运行结果正如我们所料，输出的内容是<em>ch1是Unicode字符表中的第一个字符</em>。</p><h1 id="四、布尔类型"><a href="#四、布尔类型" class="headerlink" title="四、布尔类型"></a>四、布尔类型</h1><p><code>boolean</code>类型，即布尔类型，它只有两个值：<code>true</code>（真）和<code>false</code>（假）。通常用于条件表达式的判断（条件表达式后续文章会讲到），例如：我们都知道20 &gt; 30是假，即判断结果为<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之布尔类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:33:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTypeBoolean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bool2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        System.out.println(bool1);<br>        System.out.println(bool2);<br>        System.out.println(<span class="hljs-number">20</span> &gt; <span class="hljs-number">30</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906153456679.png"></p><h1 id="五、数字的进制表示（了解）"><a href="#五、数字的进制表示（了解）" class="headerlink" title="五、数字的进制表示（了解）"></a>五、数字的进制表示（了解）</h1><p>在中学期间我们学过数字有二进制、八进制、十进制和十六进制。</p><ul><li>二进制数字是由0、1组成，满二进一。</li><li>八进制数字是由0~7组成，满八进一。</li><li>十六进制是由0~9、A、B、C、D、E、F组成，满十六进一</li></ul><p>日常我们表示数字都是采用十进制，Java程序表示数字亦是如此。那么，如何表示二进制、八进制、十六进制的数字？</p><p>以十进制的数字<code>22</code>为例，转换为各个进制的数字如下：</p><table><thead><tr><th align="center">二进制</th><th align="center">八进制</th><th align="center">十六进制</th></tr></thead><tbody><tr><td align="center">10110</td><td align="center">26</td><td align="center">16</td></tr></tbody></table><p>在Java中，表示二进制数字，需要在数字前面加上<code>0B</code>或<code>0b</code>；如果表示八进制数字，需要在数字前面加上<code>0</code>即可；如果是十六进制的数字，需要在数字前面加上<code>0X</code>或者<code>0x</code>，以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本数据类型之整数类型byte、short、int</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:32:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 二进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">binary</span> <span class="hljs-operator">=</span> <span class="hljs-number">0B10110</span>;<br>        <span class="hljs-comment">// 八进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">octal</span> <span class="hljs-operator">=</span> <span class="hljs-number">026</span>;<br>        <span class="hljs-comment">// 十六进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">hexadecimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x16</span>;<br>        <br>        System.out.println(decimal);<br>        System.out.println(binary);<br>        System.out.println(octal);<br>        System.out.println(hexadecimal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906104002433.png"></p><p>从运行结果我们可以看出：输出的数字无论是哪一种进制，默认都会转换为十进制的数字<code>22</code>。</p><p>如果我想直接将十进制数字<code>22</code>转换为各个进制并进行输出。</p><p>例如：我想定义的变量是<code>int</code>类型，可以使用<code>int</code>的包装类<code>Integer</code>，在<code>Integer</code>类中有和进制转换相关的方法：</p><ul><li><code>toBinaryString(num)</code>：将十进制数字转换为二进制数字并表示。</li><li><code>toOctalString(num)</code>：将十进制数字转换为八进制数字并表示。</li><li><code>toHexString(num)</code>：将十进制数字转换为十六进制数字并表示。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 十进制数字转换为各个进制并输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 10:43:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepresentationParse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 十进制数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br>        <span class="hljs-comment">// 转换为二进制数字并输出</span><br>        System.out.println(Integer.toBinaryString(number));<br>        <span class="hljs-comment">// 转换为八进制数字并输出</span><br>        System.out.println(Integer.toOctalString(number));<br>        <span class="hljs-comment">// 转换为十六进制数字并输出</span><br>        System.out.println(Integer.toHexString(number));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906104624146.png"></p><h1 id="六、原码、反码、补码（了解）"><a href="#六、原码、反码、补码（了解）" class="headerlink" title="六、原码、反码、补码（了解）"></a>六、原码、反码、补码（了解）</h1><p>原码、反码、补码是计算机中表示数值的一种方式，主要应用于计算机的加减运算。</p><p>原码是最基本的表示方法， 直接将数值以二进制的形式表示，原码就是符号位加上真值的绝对值，即第一位表示正负号（0为整数，1为负数），其他位表示值。</p><p>例如：<code>127</code>的原码是<code>01111111</code>，<code>-127</code>的原码是<code>11111111</code>。</p><p>原码的优点就是直观，容易理解。</p><p>反码：正数的反码就是其原码本身，负数的反码在其原码的基础上保持符号位不变，其他位取反。</p><p>例如：<code>-127</code>的反码是<code>10000000</code>，<code>127</code>的反码是<code>01111111</code>。</p><p>补码：正数的补码就是其原码本身，负数的补码需要在反码的基础上加1。</p><p>例如：<code>-127</code>的补码就是<code>10000001</code>。</p><p>想深入了解此方面的内容的小伙伴，详见这篇文章：<a href="https://blog.csdn.net/yujinlong2002/article/details/131613494">《原码、反码、补码的基本概念》</a>，我个人觉得写的很棒！</p><h1 id="七、自动类型提升"><a href="#七、自动类型提升" class="headerlink" title="七、自动类型提升"></a>七、自动类型提升</h1><p>前面我们已经讲过了8种基本数据类型，按照数据存储范围来比较：<code>double &gt; float &gt; long &gt; int &gt; short 、char &gt; byte</code></p><p>自动类型提升是指<strong>小范围的数据类型向大范围的数据类型进行转换</strong>。</p><p><strong><code>boolean</code>类型不能进行自动类型提升或强制类型转换。</strong></p><p>例如：<code>short</code>的存储范围比<code>int</code>小，因此，<code>short</code>类型的值赋值给<code>int</code>类型的变量时，<code>short</code>类型的值自动转换为<code>int</code>类型，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:42:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-comment">// short类型自动类型提升为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> s1;<br>        System.out.println(i1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906154452844.png"></p><p>上述案例可以看出，<code>s1</code>赋值给<code>i1</code>的时候并没有报错，原因就在于<code>s1</code>自动转换为<code>int</code>类型的值赋给<code>i1</code>。</p><p>自动类型提升可能存在的特殊情况：</p><p>情况一：<strong>当<code>byte</code>、<code>short</code>、<code>char</code>三者互相参与运算时，默认转为<code>int</code>类型。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：参与运算</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:45:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下三种运算均为错误写法，因为运算过程中byte、short、char类型的变量num1、num2和ch1会自动提升为int类型进行运算</span><br>        <span class="hljs-comment">// 得到的结果和左侧变量的数据类型不匹配而导致报错</span><br>        <span class="hljs-comment">// byte num3 = num1 + num2;</span><br>        <span class="hljs-comment">// short num4 = num1 + ch1;</span><br>        <span class="hljs-comment">// char ch3 = num1 + num2;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们解除一个错误写法的注释（例如<code>byte num3 = num1 + num2;</code>）。我们可以执行<code>javac</code>命令查询错误信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906155323864.png"></p><p>情况二：<strong>整数类型向浮点类型转换时，默认后面会带<code>.0</code>。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：整型向浮点类型进行转换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 15:56:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">// num1由int类型自动提升为float类型</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1;<br>        System.out.println(num1);<br>        System.out.println(num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906155902924.png"></p><p>情况三：**<code>char</code>类型向更高数据范围（例如：<code>int</code>、<code>long</code>等）转换时，以数字的形式输出。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自动类型提升：字符类型char转换成其他类型</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 16:00:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypePromotion4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// char类型转换成int类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;i&#x27;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> ch1;<br>        System.out.println(num1);<br><br>        <span class="hljs-comment">// char类型转换成long类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> ch2;<br>        System.out.println(num2);<br><br>        <span class="hljs-comment">// char类型转换成double类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;O&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> ch3;<br>        System.out.println(num3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906160250575.png"></p><h1 id="八、强制类型转换"><a href="#八、强制类型转换" class="headerlink" title="八、强制类型转换"></a>八、强制类型转换</h1><p>和自动类型提升相比，强制类型转换正好相反，由大范围的数据类型向小范围的数据类型进行转换，转换格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小数据类型 变量名 = (小数据类型) 大类型数据<br></code></pre></td></tr></table></figure><p>如果我想将<code>long</code>类型的数据转换为<code>byte</code>、<code>short</code>、<code>int</code>类型的数据，由于<code>long</code>是大范围的数据类型，向这三个小范围数据类型转换时需要进行强制类型转换。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换：long类型转换为byte、short、int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:16:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个long类型变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">longValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">108L</span>;<br>        <span class="hljs-comment">// 强制把long类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) longValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 强制把long类型转换为short类型</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) longValue;<br>        <span class="hljs-comment">// 输出short变量</span><br>        System.out.println(shortValue);<br>        <span class="hljs-comment">// 强制把long类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) longValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906111843181.png"></p><p>当然，强制类型转换也会存在如下的情况：</p><p>情况一：<strong>浮点类型转换成整数类型时，会出现精度损失</strong>，即小数点会被截断（不会四舍五入），只保留整数部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：浮点类型转换为整数类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:21:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个double类型变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">doubleValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.06</span>;<br>        <span class="hljs-comment">// 强制把double类型转换为int类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) doubleValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>        <span class="hljs-comment">// 定义一个float类型变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">floatValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">5.06f</span>;<br>        <span class="hljs-comment">// 强制把float类型转换为int类型</span><br>        intValue = (<span class="hljs-type">int</span>) floatValue;<br>        <span class="hljs-comment">// 输出int变量</span><br>        System.out.println(intValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906112439981.png"></p><p>情况二：<strong>要转换的数字超出目标类型的范围，Java会自动对整数进行溢出处理</strong>，不会得到预期的值。</p><p>例如：定义一个<code>int</code>类型的变量<code>130</code>，将其转换成<code>byte</code>类型，而<code>byte</code>类型的存储范围是<code>[-128,127]</code>，<code>130</code>很明显超出了这个范围，强制转换的结果不会符合我们的预期，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况二：要转换的数字超出目标类型的范围，得到的结果不符合预期</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 11:28:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义一个int类型变量，值是超出byte类型的范围</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">intValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">130</span>;<br>        <span class="hljs-comment">// 强制把int类型转换为byte类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) intValue;<br>        <span class="hljs-comment">// 输出byte变量</span><br>        System.out.println(byteValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906150905591.png"></p><p>很明显，输出结果并不符合我们的预期，而是得到了值<code>-126</code>，接下来我们从底层角度进行分析：</p><p>由于<code>int</code>为4字节32位，每一位是由二进制的0和1表示，因此130转换成二进制数（32位）为：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906134926115.png"></p><p><code>int</code>类型强制转换成<code>byte</code>类型以后，只保留后八位，结果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906135029377.png"></p><p>得到的<code>10000010</code>是源码，8位的<code>byte</code>第一位是符号位，0表示正号，1表示负号。很明显这个数是负数，表示负数需要先将原码转换成反码，反码变成补码，补码再转换成十进制数字以后就是<code>byte</code>类型的结果。首先我们先将其转换成反码（符号位除外）：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906135415985.png"></p><p>将反码加1之后，就得到补码：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906135507695.png"></p><p>将<code>11111110</code>转换成十进制数为（第1位是符号位，是负数）：<br>$$<br>-(1\times2^{6}+1\times2^{5}+1\times2^{4}+1\times2^{3}+1\times2^{2}+1\times2^{1}+0\times2^{0})&#x3D;-126<br>$$<br>因此强制类型转换得到的结果是<code>-126</code>。</p><p>情况三：**<code>byte</code>、<code>short</code>、<code>char</code>进行运算时，会被提升为<code>int</code>类型，然后再进行计算**。要想转换成小范围数据类型，需要进行强制类型转换。</p><p>以下写法无法通过编译而报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> byteValue + shortValue;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> shortValue - charValue;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> charValue + <span class="hljs-number">10</span>;<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无法通过编译，因为进行加减法运算时，变量会自动提升为<code>int</code>类型，得到的结果也是<code>int</code>类型，和左侧原有的数据类型不匹配而报错：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906142228688.png"></p><p>正确的写法是：将得到的结果进行强制类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 强制类型转换情况一：byte、short、char进行运算时，会自动提升为int类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-09-06 14:17:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CastType3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>        <span class="hljs-comment">// 以下写法都是错误的，因为运算过程中byte、short、char会自动提升为int类型</span><br>        <span class="hljs-comment">// byte byteResult = byteValue + shortValue;</span><br>        <span class="hljs-comment">// short shortResult = shortValue - charValue;</span><br>        <span class="hljs-comment">// char charResult = charValue + 10;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">byteResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (byteValue + shortValue);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">shortResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">short</span>) (shortValue - charValue);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">charResult</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) (charValue + <span class="hljs-number">10</span>);<br>        System.out.println(byteResult);<br>        System.out.println(shortResult);<br>        System.out.println(charResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果符合预期：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230906142626685.png"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之二-Java基础知识</title>
    <link href="/posts/3.html"/>
    <url>/posts/3.html</url>
    
    <content type="html"><![CDATA[<h1 id="对第一个Java程序的思考"><a href="#对第一个Java程序的思考" class="headerlink" title="对第一个Java程序的思考"></a>对第一个Java程序的思考</h1><p><a href="https://zhuanlan.zhihu.com/p/645437868">前面</a>我们已经写过一个使用Java语言输出四行诗句的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="外层结构——类"><a href="#外层结构——类" class="headerlink" title="外层结构——类"></a>外层结构——类</h2><p>观察这段代码的结构，它的外层是由<code>public</code>、<code>class</code>、文件名称（即<code>Huanghelou</code>）和一对大括号组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Huanghelou</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>public</code>和<code>class</code>是Java内置的关键字（本文后面会讲到关键字），也就是说，这两个关键字是Java语言本身就规定的，小白在写代码的时候不能随意更改（例如：将<code>public</code>写成<code>Public</code>，<code>class</code>一不小心写成了<code>cLass</code>等都是错误写法）。</p><p><code>class</code>本意是“类”，<code>class</code>后面的标识符<code>Huanghelou</code>是当前这个类的名称，也就是说，这个类的类名是<code>Huanghelou</code>；</p><p><code>public</code>是权限修饰符（后续文章会讲到这个关键字的具体使用，这里小白有一个印象就可以了）。</p><p><strong>一个Java文件至多只能有一个由<code>public</code>修饰的类，并且这个类的类名必须和<code>Java</code>文件名保持一致。</strong></p><p>由上述规定我们可以推断出：不由<code>public</code>修饰的类不必和当前java文件名保持一致。这里我创建一个名为<code>MyThirdProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行了<code>javac</code>命令时，我们发现它并没有生成<code>MyThirdProgram.class</code>文件，而是生成了<code>Dog.class</code>文件。这是因为前面我们的<code>MyThirdProgram.java</code>文件中只有一个<code>Dog</code>类，并不包含由<code>public</code>修饰的<code>MyThirdProgram</code>类。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/009.gif" alt="009"></p><p>当然，我们的代码中既可以由<code>public</code>修饰的类和不由<code>public</code>修饰的类共存。这里我创建一个名为<code>MyFourthProgram</code>的Java文件，其内部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFourthProgram</span> &#123;<br>   <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>java</code>命令进行编译，此时就会出现<code>MyFourthProgram</code>、<code>Cat</code>、<code>Sheep</code>和<code>Duck</code>四个<code>.class</code>文件：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/010.gif" alt="010"></p><p>由此可以说明，一个Java文件中，如果有多个类，那么对这个Java文件执行编译命令时，就会生成多个相对应的字节码文件。</p><h2 id="内层结构——main方法"><a href="#内层结构——main方法" class="headerlink" title="内层结构——main方法"></a>内层结构——main方法</h2><p>在<code>MySecondProgram</code>类的内部，包含一个这样的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>前三个<code>public</code>、<code>static</code>、<code>void</code>是Java的关键字（固定写法）。这个结构在Java中称作方法，这个方法称作<code>main</code>方法（因为方法名叫做<code>main</code>方法），**<code>main</code>方法是Java程序的入口**，也就是说，程序在运行时，会先执行<code>main</code>方法。</p><p><code>main</code>方法必须定义成<code>public static void main(String[] args) &#123;...&#125;</code>的结构，这是Java的规范。</p><h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><p>这段代码中，按行输出的语句是<code>System.out.println();</code>。也就是说，Java在执行这条语句的时候，会向控制台输出内容并换行。</p><p>当然，我们也可以选择不换行输出，<code>System.out.print();</code>语句就能保证输出的内容不换行。以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWithoutLine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;昔人已乘黄鹤去，此地空余黄鹤楼。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;日暮乡关何处是？烟波江上使人愁。&quot;</span>);  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是使用<code>javac encoding PrintWithoutLine.java</code>和<code>java PrintWithoutLine</code>命令的执行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230829070237080.png" alt="image-20230829070237080"></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是用来向代码中添加解释和说明，编写注释可以让我们更好地阅读和理解代码。在代码上写注释是一个好习惯，今天我写了50行的代码，但是过了三个月以后，如果我再看这段代码，会有种不知所措的感觉：这代码是我写的吗？它要实现的功能是什么？如果在编写代码以后写了注释，以后在阅读代码的时候这种窘境会大大减少，提高我们对代码的理解:smile:。</p><p>注释不会影响程序的运行，Java编译器会将注释忽略。</p><p>在Java编程语言中，有三种类型的注释：<strong>单行注释</strong>、<strong>多行注释</strong>和<strong>文档注释</strong>。</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>单行注释，顾名思义，就是只能在某一行上写注释，使用两个斜杠<code>//</code>表示，格式为：<code>// 单行注释内容</code>。</p><p>以前面写过的代码为例，如果我想在输出语句上方中添加一句注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出一行内容</span><br>System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p>当然，你也可以在这个输出语句后面所在行写注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<span class="hljs-comment">// 输出一行内容</span><br></code></pre></td></tr></table></figure><blockquote><p>扩展：《阿里巴巴Java开发手册》对单行注释内容的说明</p><p>1. <font color='#EE0000'>【强制】</font>方法内部的单行注释，在被注释的语句上方另起一行，使用<code>//</code>注释。</p><p>也就是说，在我们日常开发的时候，编写注释时，推荐使用上述第一种注释风格。</p><p>2. <font color='#EE0000'>【强制】</font>注释的双斜线与注释内容之间有且仅有一个空格。</p><p><font color='#39C5BB'>正例</font>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230829225430559.png" alt="image-20230829225430559"></p><p>3. <strong>【推荐】</strong>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。</p><p><font color='orange'>反例</font>：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></blockquote><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>多行注释使用<code>/* */</code>进行表示，在<code>/*</code>和<code>*/</code>之间你可以写多行注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是一段多行注释</span><br><span class="hljs-comment">println()方法用于换行输出</span><br><span class="hljs-comment">print()方法用与不换行输出</span><br><span class="hljs-comment">*/</span><br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;晴川历历汉阳树，芳草萋萋鹦鹉洲。&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>多行注释之间不要使用嵌套。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*/*这是一段多行注释，这样嵌套多行注释的方式是错误的*/</span>*/<br>System.out.println(<span class="hljs-string">&quot;黄鹤一去不复返，白云千载空悠悠。&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样嵌套是错误的。以上述代码为例，Java编译器认为多行注释最开头的是<code>/*</code>，能和它配对的是最近的<code>*/</code>，也就是说，这段多行注释的内容是：<code>/*这是一段多行注释，这样嵌套多行注释的方式是错误的</code>。最外层的<code>*/</code>无法识别为多行注释符号而导致编译错误。</p><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>文档注释是Java特有的一种注释，它用于对类、方法、变量等进行说明。</p><p>文档注释使用<code>/**</code>作为开头，<code>*/</code>作为结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类中由一个main方法组成</span><br><span class="hljs-comment"> * 这个类的主要作用是通过控制台输出两句话</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * main方法用于输出两行诗句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文档注释常用标签"><a href="#文档注释常用标签" class="headerlink" title="文档注释常用标签"></a>文档注释常用标签</h3><p>在这段代码中，我们发现类上有一些特殊标签，它们以<code>@</code>作为开头，后面跟随一个指定的名字，例如：<code>@author</code>、<code>@version</code>等。</p><p><code>@author</code>用于指明当前代码的作者或所属组织，如果有多个作者可以加多个此标签，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zhangsan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Lisi</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@version</code>用于指明当前代码的版本号，适用于类、接口等。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.1.0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><code>@return</code>标签作用于方法的文档注释上，表明当前方法的返回值类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 不返回任何内容，因为返回值类型为void</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@param</code>标签用于描述方法的参数信息。以<code>main</code>方法为例，它的参数是字符串数组类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@throws</code>和<code>@exception</code>标签用于描述方法可能会抛出的异常，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * main方法用于输出两行诗句</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args是main方法的参数，类型为字符串数组类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException 可能会抛出文件IO异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;杨花落尽子规啼，闻道龙标过五溪。&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;我寄愁心与明月，随君直到夜郎西。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用javadoc命令生成网页风格的文档"><a href="#使用javadoc命令生成网页风格的文档" class="headerlink" title="使用javadoc命令生成网页风格的文档"></a>使用javadoc命令生成网页风格的文档</h3><p>我们可以使用<code>javadoc</code>命令对代码中的文档注释进行解析，生成一套网页形式的文档。命令格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javadoc -d 文件路径 -encoding UTF-<span class="hljs-number">8</span> --label1 -label2 文件名.java<br></code></pre></td></tr></table></figure><p>这里的<code>label1</code>和<code>label2</code>是指文档注释中由<code>@</code>开头的标签，如果执行命令中写了那个标签，就会在网页中显示。当然，你的<code>java</code>文件中写了多少个不同类型的标签，你就可以在命令中写多少个<code>--标签</code>。</p><p>以上述内容为例，如果我想输出所有文档注释和标签到网页，可以执行如下命令：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230829231347951.png" alt="image-20230829231347951"></p><p>此时我们进入<code>G:\Code\MyWorkspace\day02\MyFirstDoc</code>路径中，我们可以看到如下内容，直接使用浏览器打开<code>index.html</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230829231503903.png" alt="image-20230829231503903"></p><p>此时我们就能在网页中更加直观地看到我们写的文档注释内容了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230829231623291.png" alt="image-20230829231623291"></p><h3 id="阿里巴巴Java开发手册关于文档注释的规范"><a href="#阿里巴巴Java开发手册关于文档注释的规范" class="headerlink" title="阿里巴巴Java开发手册关于文档注释的规范"></a>阿里巴巴Java开发手册关于文档注释的规范</h3><blockquote><p>1. <font color='#EE0000'>【强制】</font>类、类属性、类方法的注释必须使用 Javadoc 规范，使用<code>/**内容*/</code>格式，不得使用<code>// xxx</code>方式。</p><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><p>2. <font color='#EE0000'>【强制】</font>所有的类都必须添加创建者和创建日期。</p><p>说明：在设置模板时，注意 IDEA 的@author 为`${USER}`，而 eclipse 的@author 为`${user}`，大小写有区别，而日期的设置统一为 yyyy&#x2F;MM&#x2F;dd 的格式。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> iCode504</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023/08/31</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>3. <strong>【推荐】</strong>代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。</p><p><font color='orange'>说明</font>：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></blockquote><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>Java关键字是由Java语言预先定义的保留的标识符，关键字不能用作变量名、方法名、类名等。这些关键字在Java语言中具有特殊的含义和用途，以下是Java常见的关键字（不需要记忆，因为这些关键字的用法会在后续文章中陆续讲到）：</p><ul><li>数据类型相关的关键字：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code>、<code>void</code>。</li><li>流程控制相关的关键字：<code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>、<code>default</code>、<code>for</code>、<code>while</code>、<code>do</code>、<code>break</code>、<code>continue</code>、<code>return</code></li><li>权限控制关键字：<code>public</code>、<code>protected</code>、<code>private</code></li><li>类和对象相关关键字：<code>class</code>、<code>new</code>、<code>extends</code>、<code>interface</code>、<code>implements</code>、<code>this</code>、<code>super</code>、<code>instanceof</code>、<code>static</code>、<code>abstract</code>、<code>final</code>、<code>enum</code></li><li>异常处理关键字：<code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>、<code>assert</code></li><li>包相关的关键字：<code>import</code>、<code>package</code></li><li>多线程及同步相关的关键字：<code>synchronized</code>、<code>volatile</code></li><li>序列化相关的关键字：<code>transient</code></li><li>保留字：<code>goto</code>、<code>const</code></li><li>其他关键字：<code>native</code>、<code>var</code>（JDK 10新增关键字）、<code>null</code>（不推荐做变量名）、<code>strictfp</code></li></ul><p><strong>所有关键字的名称全部是小写，不是小写的一定不是关键字</strong>。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>Java中类名、方法名、变量名（关于变量名会在后面讲到）都称作标识符。以前面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJavaDoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的类名叫做<code>MyJavaDoc</code>，方法名称作<code>main</code>。</p><p>关于Java标识符，需要遵守如下规范（必须遵守，否则无法通过编译）：</p><p>1. <strong>标识符由大小写英文字母、数字、美元符号<code>$</code>、下划线组成</strong>。例如：<code>ABC</code>、<code>_MyProgram</code>、<code>$Sheep</code>都是正确写法；<code>-Sheep</code>、<code>ABC+</code>等都是非法的。</p><p>2. <strong>关键字不能作为标识符</strong>。例如：<code>static</code>关键字不可以做类名和方法名。</p><p>3. <strong>Java对标识符大小写是敏感的</strong>。例如：<code>sheepCount</code>和<code>SheepCount</code>就是两个不同的标识符。</p><p>4. <strong>数字不能作为标识符的开头</strong>，例如：标识符<code>4Sheep</code>就是错误写法。</p><blockquote><p>扩展：《阿里巴巴Java开发手册》对标识符相关内容做出如下规范：</p><p>1. <font color='#EE0000'>【强制】</font>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</p><p><font color='orange'>反例</font>：<code>_name / __name / $name / name_ / name$ / name__</code></p><p>2. <font color='#EE0000'>【强制】</font>所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。</p><p><font color='#39C5BB'>正例</font>：<code>ali / alibaba / taobao / cainiao / aliyun/ youku / hangzhou</code>等国际通用的名称，可视同英文。</p><p><font color='orange'>反例</font>：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p>3. <font color='#EE0000'>【强制】</font><strong>类名使用 UpperCamelCase 风格（大驼峰命名方式，每个单词首字母大写）</strong>，但以下情形例外：DO &#x2F; BO &#x2F; DTO &#x2F; VO &#x2F; AO &#x2F; PO &#x2F; UID 等。</p><p><font color='#39C5BB'>正例</font>：<code>ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</code></p><p><font color='orange'>反例</font>：<code>forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</code></p><p>4. <font color='#EE0000'>【强制】</font><strong>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase（除了第一个单词首字母小写以外，其他单词首字母大写）风格。</strong></p><p><font color='#39C5BB'>正例</font>：<code>localValue / getHttpMessage() / inputUserId</code></p><p>5. <font color='#EE0000'>【强制】</font>杜绝完全不规范的缩写，避免望文不知义。</p><p><font color='orange'>反例</font>：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在Java编程语言中，变量是一种存储数据的“容器”，它们能存储各种类型的数据，例如：整数、浮点数、字符、布尔类型等。</p><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><p>变量是内存中的一个存储区域，正如其名：变量，变量存储的数据是可以变化的。</p><p>变量三要素：<strong>数据类型</strong>、<strong>变量名</strong>和<strong>变量值</strong>。在内存中的关系图如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230901225644712.png" alt="image-20230901225644712"></p><p>变量主要用于在内存中存储数据。</p><h2 id="定义并初始化变量"><a href="#定义并初始化变量" class="headerlink" title="定义并初始化变量"></a>定义并初始化变量</h2><p>创建Java变量的一般语法是：<strong>数据类型 变量名 &#x3D; 变量值</strong></p><ul><li>变量名可以自定义，但是需要遵守标识符命名规范。</li><li>数据类型分为基础数据类型和引用数据类型，这里举例使用整数类型<code>int</code>，更多关于数据类型的内容详见下一篇文章。</li></ul><p>这里以存储整数类型的<code>int</code>来举例：变量<code>number</code>的值为<code>22</code>，那么可以定义成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>当然我们也可以先定义变量<code>number</code>，在对变量进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> number;<br>number = <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>以下是变量在代码中的使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyVariable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 变量的定义和赋值都在同一行</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(age);<br>        <br>        <span class="hljs-comment">// 先定义变量，再为变量进行赋值</span><br>        <span class="hljs-type">int</span> number;<br>        number = <span class="hljs-number">22</span>;<br>        System.out.println(number);<br>        <br>        <span class="hljs-comment">// 变量是可以变化的：给number再次赋值为24，这个值会将原有的22进行覆盖</span><br>        number = <span class="hljs-number">24</span>;<br>        System.out.println(number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230904071419878.png" alt="image-20230904071419878"></p><h2 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h2><p>1. <strong>变量必须先声明，后使用。</strong>凭空出现的变量是无法通过编译的。以下是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    number = <span class="hljs-number">1</span>;<span class="hljs-comment">// 编译不通过，因为number并没有被声明</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2. <strong>使用变量名来访问这块区域的内存数据</strong>。以上述<code>MyVariable</code>类为例，当我们输出结果的时候，并没有直接使用变量值<code>20</code>和<code>22</code>进行输出，而是使用变量名<code>age</code>和<code>number</code>进行输出，因为通过变量名可以访问到这块区域的内存，存储的值是多少。</p><p>3. <strong>变量的作用域：作用域在最近的外层大括号内，变量只有定义在作用域内才有效</strong>。以上述<code>MyVariable</code>类为例，变量<code>age</code>和<code>number</code>的作用域只能在<code>main</code>方法中，因为两个变量最近的外层大括号就是在<code>main</code>方法的范围，出了<code>main</code>方法会导致Java将无法识别这个变量而出现编译错误。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230901224447651.png" alt="image-20230901224447651"></p><p>4. <strong>同一个作用域内，不能定义重名的变量</strong>。下面代码是<font color='#EE0000'>错误</font>写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">29</span>;<span class="hljs-comment">// 错误写法，因为作用域内只能定义一个名为number的变量</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门篇-其之一-第一个程序</title>
    <link href="/posts/2.html"/>
    <url>/posts/2.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意：</p><ol><li>本文中包含实际操作，需要安装JDK。如果需要安装JDK，请按照这篇文章的步骤进行安装：<a href="https://zhuanlan.zhihu.com/p/626465440">点我查看JDK安装教程</a></li><li>小白可以多看几遍这篇文章，多敲几次代码。</li></ol></blockquote><h1 id="一、第一个程序"><a href="#一、第一个程序" class="headerlink" title="一、第一个程序"></a>一、第一个程序</h1><p>前面我们已经安装了JDK，接下来就是写一个属于自己的Java程序了。</p><p>用什么写自己的Java程序呢？有人说用IDEA、Eclipse等集成开发工具。其实，作为小白，我们在最初阶段其实没有必要安装这些繁重的工具，使用记事本写代码就可以。</p><h2 id="1-1-准备操作"><a href="#1-1-准备操作" class="headerlink" title="1.1 准备操作"></a>1.1 准备操作</h2><p>创建一个文件夹，保证自己以后学习过程中的代码都存放到这个文件夹中，养成好习惯。为了避免后续出现问题，文件路径中尽量不要包含中文字符。这里我新建的文件夹名是<code>MyWorkspace</code>，如下图：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213200514.png"></p><p>打开<code>MyWorkspace</code>文件夹，今天是我们第一次敲代码，就在这个文件夹中创建一个<code>day01</code>文件夹，如下图所示：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213716922.png"></p><p>打开<code>day01</code>文件夹，点击上方的<code>查看</code>，勾选<code>文件扩展名</code>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711213901017.png"></p><h2 id="1-2-编写我的第一个Java程序"><a href="#1-2-编写我的第一个Java程序" class="headerlink" title="1.2 编写我的第一个Java程序"></a>1.2 编写我的第一个Java程序</h2><p>做完以上的准备工作以后，我们就可以写自己的Java程序了！</p><p>在文件夹空白处，鼠标右键点击新建，<strong>新建文本文档</strong>：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214256942.png"></p><p>此时新建完成以后，我们选中这个文件，鼠标右键点击重命名，将文件名修改成<code>MyFirstProgram.java</code>。我们此时需要留意下这个文件名<code>MyFirstProgram</code>，后续它有大用处！</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214530788.png"></p><p>出现这个弹窗时，点击“是”即可。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214608048.png"></p><p>鼠标右键点击这个文件，打开方式选择记事本：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711214844597.png"></p><p>请按照下面代码内容，一个一个字母符号敲进记事本中（不要图方便直接复制代码，实际操作才能看出自己的问题）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstProgram</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;This is my first Java program!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215450746.png"></p><p>点击左上角文件，然后点击保存（或者按<kbd>Ctrl</kbd>和<kbd>S</kbd>键保存）。到这一步，我们的代码就已经写好了。</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/image-20230711215630094.png"></p><p>点击上面的路径，输入<code>cmd</code>，进入命令行：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/003.gif"></p><p>编译这个java源程序：</p><ul><li>编译命令格式：<code>javac 文件名.java</code>。</li><li>如果我想编译这个<code>MyFirstProgram.java</code>文件，就需要执行的命令是：<code>javac MyFirstProgram.java</code></li></ul><p>操作步骤如下图所示，上述命令执行完成后，此时文件夹中有一个<code>MyFirstProgram.class</code>文件，这个是Java编译器执行编译命令以后生成的二进制字节码文件（直接使用记事本打开是乱码文件）：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/004.gif"></p><p>编译命令完成后，就需要运行这个这个Java程序了。运行命令的格式是：<code>java 文件名</code>。注意，这里不能加<code>.java</code></p><p>以<code>MyFirstProgram.java</code>文件为例，运行命令是：<code>java MyFirstProgram</code>。此时命令行就会输出在源文件中编写的内容：</p><p><img src="https://mypicture0706.oss-cn-beijing.aliyuncs.com/005.gif"></p><h1 id="二、编写第二个Java程序"><a href="#二、编写第二个Java程序" class="headerlink" title="二、编写第二个Java程序"></a>二、编写第二个Java程序</h1><p>看到这里，有小伙伴会问：我想输出中文可以吗？输出多行内容可不可以？</p><p>我的答案是：<strong>当然可以</strong>！结合上述问题，给大家再举个例子：比如我想通过Java程序输出唐代诗人崔颢的《黄鹤楼》</p><center><font face="楷体">昔人已乘黄鹤去，此地空余黄鹤楼。<br/>黄鹤一去不复返，白云千载空悠悠。<br/>晴川历历汉阳树，芳草萋萋鹦鹉洲。<br/>日暮乡关何处是？烟波江上使人愁。</font></center><p>我们完全可以按照上述的步骤来操作。</p><p>首先，新建一个Java源文件，这里我将其重命名为<code>Huanghelou.java</code>，操作如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/778e99d52ead3ffc1494aa5fa2c84815.gif"></p><p>通过记事本打开这个Java源文件，先编写出这个代码的大体框架：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/56e5b8362fb48d1b44cd8360f1e97bd4.png"></p><p>因为我们要输出4行诗句。因此要在Java的<code>main()</code>方法中编写4行输出语句，效果如下图：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/03903e6f6ea03f111fa5656a6d5f8c6a.png"></p><p>编写完Java代码以后，点击在左上角<code>文件</code>，然后点击<code>另存为</code>，下方选择<code>所有文件</code>，编码格式选择<code>UTF-8</code>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/217121fea13549089730a5d1b0c1813d.png"></p><p>此时会弹出一个窗口，点击是即可。完成后关闭记事本窗口。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/70c8a6fd14dabd9b31c5cba522b44576.png"></p><p>此时按照上述步骤，我们需要对<code>Huanghelou.java</code>这个文件进行编译。</p><p>点击上方文件路径，输入<code>cmd</code>，打开命令行窗口，操作如下图所示：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/f99a239f91a8142935e4dfb0a61d87ba.gif"></p><p>执行编译命令：<code>javac Huanghelou.java</code>，执行此命令以后，命令行会提示以下错误信息：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/9577d2565ee1e910fe91e7e8f810343f.png"></p><p>这里解释一下出现编码GBK的不可映射字符的问题：由于我们之前编写的Java源文件在保存时的编码格式是<code>UTF-8</code>（如下图所示）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/b5c4dffc411309bbe750302144d0dc51.png"></p><p>而命令行所支持的编码格式是<code>GBK</code>，这就造成了Java源文件的编码格式和命令行的不匹配，从而产生上述问题了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/2b5ee9519680233b40ed4fe186c16759.png"></p><p>解决办法：只需要在编译时，告诉Java编译器我们需要将这个Java源文件编译成<code>UTF-8</code>的即可，命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac -encoding UTF-8 文件名.java<br></code></pre></td></tr></table></figure><p>以这个文件为例，我们就使用<code>UTF-8</code>的编码格式进行编译：<code>javac -encoding UTF-8 Huanghelou.java</code>，执行此命令以后，就不会提示上述错误信息了。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/b9682af7a3aa2b7d0d6d30a0a9628d49.gif"></p><p>这时我们再运行这个Java程序：<code>java Huanghelou</code>，就能看到前面我们在前面的输出了：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/baa82be9da0988e31e49e8bee62d0a40.gif"></p><h1 id="三、注意点-常见问题"><a href="#三、注意点-常见问题" class="headerlink" title="三、注意点&amp;常见问题"></a>三、注意点&amp;常见问题</h1><p>在编写第一个程序的时候，我们需要注意的问题：</p><p>1. <code>class</code>后面的名称要和文件名保持一致，这里我已经提及3遍了，就是希望能引起小白的重视：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/8780e6a2bb87b9992c5495d90e52c543.png"></p><p>2. 除了<code>System.out.println(&quot;&quot;);</code>语句的双引号中的内容自定，代码中其他地方都要使用英文符号。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/b85d43444c690d261a46bfa707a67ea2.png"></p><p>3. 输出语句后面的分号不要忘记（这也是许多小白在写代码最容易忽略的地方）</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/cd65434a9f37cc29e29c8a387e331cef.png"></p><p>4. 大括号、中括号、小括号一定要配对出现。写代码的时候不要忘记！</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/1aecf19e933a23c4a3a7a36834f4793d.png"></p><h1 id="四、小练习"><a href="#四、小练习" class="headerlink" title="四、小练习"></a>四、小练习</h1><p>使用Java程序输出三句话，文件名为<code>Baiyexing.java</code>，内容如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">《白夜行》的作者是日本作家东野圭吾<br>这是一部很棒的悬疑小说<br>你知道白夜吗？明明是夜晚却有太阳，照得夜晚像白昼一样明亮，就是说一直这么犹豫不前的话，人生就毁了。<br></code></pre></td></tr></table></figure><p>输出效果如下：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/8141a3e5fa2b0379996c49b254eb613e.png"></p>]]></content>
    
    
    <categories>
      
      <category>iCode504的Java学习空间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 8安装配置教程（Windows版）</title>
    <link href="/posts/1.html"/>
    <url>/posts/1.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK，全称Java Development Kit，即Java开发工具包，它是整个Java开发的核心，包含了Java运行环境（JVM+Java系统类库）和Java工具。目前JDK 8、11、17、21是长期稳定支持的版本。</p></blockquote><p>接下来为大家讲解一下JDK 8如何安装与使用。</p><h1 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h1><p>以下两种方式二选一下载即可：</p><h2 id="方式一：网盘下载"><a href="#方式一：网盘下载" class="headerlink" title="方式一：网盘下载"></a>方式一：网盘下载</h2><p>请选择任意一个链接，选择任意一个安装包下载即可：</p><table><thead><tr><th><a href="https://pan.baidu.com/s/1FjQlCUulceJWOQP96qQvjQ?pwd=mclj">点击下载</a></th><th><a href="https://pan.baidu.com/s/1KOE3RotyK-yb9c71LBcTxg?pwd=jyjq">备用下载1</a></th><th><a href="https://pan.baidu.com/s/1HN3iuUmbHTrlEnBKLZVkEg?pwd=o54x">备用下载2</a></th></tr></thead></table><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101131122731.png"></p><h2 id="方式二：官网下载（需要注册账号登录，不推荐）"><a href="#方式二：官网下载（需要注册账号登录，不推荐）" class="headerlink" title="方式二：官网下载（需要注册账号登录，不推荐）"></a>方式二：官网下载（需要注册账号登录，不推荐）</h2><p>1. 点击此链接到官网下载页面：<a href="https://www.oracle.com/java/technologies/downloads/archive/">点击进入</a></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101131317529.png"></p><p>2. 找到以Java SE Development Kit开头的下载列表，找到64位的版本版本下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101132604565.png"></p><p>3. 按图所示点击下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101133458956.png"></p><p>4. 需要登录Oracle账号，没有账号的可以注册一个。登陆后即可下载：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101133536759.png"></p><h1 id="二、安装JDK（这里我使用的版本是JDK-8）"><a href="#二、安装JDK（这里我使用的版本是JDK-8）" class="headerlink" title="二、安装JDK（这里我使用的版本是JDK 8）"></a>二、安装JDK（这里我使用的版本是JDK 8）</h1><p>1. 双击文件，开始安装：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101134018241.png"></p><p>2. 点击<strong>下一步</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314125453675.png"></p><p>3. 修改安装路径（如果你是新手小白，可以不执行这一步操作，直接跳转到第5步），点击<strong>更改</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314130028313.png"></p><p>4. 在新建一个路径。为了避免后续出现问题，创建路径时，请不要JDK安装位置放在有中文字符的路径中。选择当前路径，点击确定：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101134722779.png"></p><p>5. 点击下一步：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101134758455.png"></p><p>6. 安装中，请耐心等待：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314131058441.png"></p><p>7. 安装过程中，出现了一个JRE安装（前面我们安装的JDK已经包含了JRE，可以选择不安装，如果不需要安装，出现下图窗口后直接点击右上角关闭即可，直接跳到第11步）。点击<strong>更改路径</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314131446348.png"></p><p>8. 新建一个路径，建议不要出现中文字符，然后选中此文件夹，点击确定：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/240101001.gif"></p><p>9. 点击下一步：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101140732789.png"></p><p>10. 安装中，安装完成以后此窗口会自动消失：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314132647334.png"></p><p>11. 点击关闭，JDK安装完成。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314132930503.png"></p><blockquote><p>对于首次安装的新手小白，请继续往下看；如果是老手或者已经安装了其他版本的JDK，可以选择性往下看。</p></blockquote><h1 id="三、配置JDK"><a href="#三、配置JDK" class="headerlink" title="三、配置JDK"></a>三、配置JDK</h1><p>1. 找到JDK的安装路径，出现bin、conf等文件夹，点击上方路径，<strong>鼠标右键</strong>点击<strong>复制</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101141148295.png"></p><p>2. 打开文件夹，在左侧<strong>鼠标右键</strong>点击此电脑，点击<strong>属性</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/Snipaste_2024-01-01_01-07-23.png"></p><p>3. 点击高级系统设置：</p><table><thead><tr><th align="center">Windows 11</th><th><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101010932039.png"></th></tr></thead><tbody><tr><td align="center"><strong>Windows 10</strong></td><td><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101011132186.png"></td></tr></tbody></table><p>4. 点击<strong>环境变量</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134716166.png"></p><p>5. 在下方系统变量中，点击<strong>新建</strong>：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314134919881.png"></p><p>6. 配置安装路径，按照图示操作即可：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101141636264.png"></p><p>7. 双击Path进入：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314135756989.png"></p><p>8. 按照图示操作即可，然后一路点击确定。</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20240101141809160.png"></p><h1 id="四、检查JDK是否安装成功"><a href="#四、检查JDK是否安装成功" class="headerlink" title="四、检查JDK是否安装成功"></a>四、检查JDK是否安装成功</h1><p>1. 按<kbd>Win</kbd>和<kbd>R</kbd>键，输入<code>cmd</code>，点击确定：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314140351859.png"></p><p>2. 输入<code>javac</code>和<code>java</code>，会出现下图内容：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314140519091.png"></p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314141144190.png"></p><p>3. 输入<code>java -version</code>，出现下图信息表示JDK安装成功：</p><p><img src="https://icode504.oss-cn-beijing.aliyuncs.com/image-20230314140629530.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
